{"version":3,"file":"main.df7ba618980be85f1a89.bundle.js","sources":["webpack:///./src/icon/icon.css","webpack:///./src/icon/icon.ts","webpack:///./src/slider/slider.css","webpack:///./src/slider/slider.ts","webpack:///./src/sidenav/sidenav.ts","webpack:///./src/sidenav/sidenav-item.ts","webpack:///./src/sidenav/sidenav-heading.ts","webpack:///./src/switch/switch.ts","webpack:///./src/switch/index.ts","webpack:///./src/popover/popover.ts","webpack:///./stories/action-button.stories.ts","webpack:///./stories/banner.stories.ts","webpack:///./stories/button.stories.ts","webpack:///./stories/card.stories.ts","webpack:///./stories/checkbox.stories.ts","webpack:///./stories/dropzone.stories.ts","webpack:///./stories/icon.stories.ts","webpack:///./stories/illustrated-message.stories.ts","webpack:///./stories/link.stories.ts","webpack:///./stories/overlay-root.stories.ts","webpack:///./stories/popover.stories.ts","webpack:///./stories/radio.stories.ts","webpack:///./stories/sidenav.stories.ts","webpack:///./stories/slider.stories.ts","webpack:///./stories/switch.stories.ts","webpack:///./stories/tabs.stories.ts","webpack:///./stories/theme.stories.ts","webpack:///./src/themes/theme-dark.css","webpack:///./src/themes/theme-dark.ts","webpack:///./src/themes/theme-light.css","webpack:///./src/themes/theme-light.ts","webpack:///./src/themes/scale-medium.css","webpack:///./src/themes/scale-medium.ts","webpack:///./src/themes/theme.css","webpack:///./src/themes/theme.ts","webpack:///./src/overlay-root/calculate-position.ts","webpack:///./src/overlay-root/overlay-root.ts","webpack:///./src/dropzone/dropzone.ts","webpack:///./src/overlay-trigger/overlay-trigger.ts","webpack:///./src/radio-group/radio-group.ts","webpack:///./src/card/card.ts","webpack:///./src/banner/banner.ts","webpack:///./src/radio/radio.ts","webpack:///./src/tab-list/tab-list.ts","webpack:///./src/tab/tab.ts","webpack:///./src/illustrated-message/illustrated-message.ts","webpack:///./src/link/link.ts","webpack:///./src/checkbox/checkbox.ts","webpack:///./src/button/button-base.ts","webpack:///./src/button/button.ts","webpack:///./src/button/action-button.ts","webpack:///./src/iconset/iconset-svg.ts","webpack:///./src/checkbox/checkbox-base.ts"],"sourcesContent":["import { css } from 'lit-element';\nconst styles = css`\n:host{display:inline-block;color:inherit;fill:currentColor;pointer-events:none}:host(:not(:root)){overflow:hidden}:host([size=xxs]),:host([size=xxs]) img,:host([size=xxs]) svg{height:calc(var(--spectrum-alias-workflow-icon-size,\nvar(--spectrum-global-dimension-size-225))/2);width:calc(var(--spectrum-alias-workflow-icon-size,\nvar(--spectrum-global-dimension-size-225))/2)}:host([size=xs]),:host([size=xs]) img,:host([size=xs]) svg{height:calc(var(--spectrum-global-dimension-size-300)/2);width:calc(var(--spectrum-global-dimension-size-300)/2)}:host([size=s]),:host([size=s]) img,:host([size=s]) svg{height:var(--spectrum-alias-workflow-icon-size,var(--spectrum-global-dimension-size-225));width:var(--spectrum-alias-workflow-icon-size,var(--spectrum-global-dimension-size-225))}:host([size=m]),:host([size=m]) img,:host([size=m]) svg{height:var(--spectrum-global-dimension-size-300);width:var(--spectrum-global-dimension-size-300)}:host([size=l]),:host([size=l]) img,:host([size=l]) svg{height:calc(var(--spectrum-alias-workflow-icon-size,\nvar(--spectrum-global-dimension-size-225))*2);width:calc(var(--spectrum-alias-workflow-icon-size,\nvar(--spectrum-global-dimension-size-225))*2)}:host([size=xl]),:host([size=xl]) img,:host([size=xl]) svg{height:calc(var(--spectrum-global-dimension-size-300)*2);width:calc(var(--spectrum-global-dimension-size-300)*2)}:host([size=xxl]),:host([size=xxl]) img,:host([size=xxl]) svg{height:calc(var(--spectrum-global-dimension-size-300)*3);width:calc(var(--spectrum-global-dimension-size-300)*3)}\n`;\nexport default styles;","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    html,\n    LitElement,\n    property,\n    query,\n    CSSResultArray,\n    TemplateResult,\n} from 'lit-element';\n\nimport { IconsetRegistry } from '../iconset/iconset-registry';\n\nimport styles from './icon.css';\nimport { nothing } from 'lit-html';\n\nexport class Icon extends LitElement {\n    public static is = 'sp-icon';\n\n    @property()\n    public src?: string;\n\n    @property()\n    public name?: string;\n\n    @property({ reflect: true })\n    public size: string = 'm';\n\n    @property()\n    public label?: string;\n\n    @query('#container')\n    private iconContainer?: HTMLElement;\n\n    private iconsetListener?: EventListener;\n\n    public static get styles(): CSSResultArray {\n        return [styles];\n    }\n\n    public connectedCallback(): void {\n        super.connectedCallback();\n\n        // start listening for iconset-added and do updateIcon if we get one later\n        this.iconsetListener = ((ev: CustomEvent) => {\n            if (!this.name) {\n                return;\n            }\n            // parse the icon name to get iconset name\n            const icon = this.parseIcon(this.name);\n            if (!icon) {\n                return;\n            }\n            if (ev.detail.name === icon.iconset) {\n                this.updateIcon();\n            }\n        }) as EventListener;\n        window.addEventListener('sp-iconset:added', this.iconsetListener);\n    }\n    public disconnectedCallback(): void {\n        super.disconnectedCallback();\n        if (this.iconsetListener) {\n            window.removeEventListener(\n                'sp-iconset:added',\n                this.iconsetListener\n            );\n        }\n    }\n\n    public firstUpdated(): void {\n        this.updateIcon();\n    }\n\n    public attributeChangedCallback(\n        name: string,\n        old: string,\n        value: string\n    ): void {\n        super.attributeChangedCallback(name, old, value);\n        this.updateIcon(); // any of our attributes change, update our icon\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            <div id=\"container\">${this.renderIcon()}</div>\n        `;\n    }\n\n    private updateIcon(): void {\n        if (!this.name) {\n            return;\n        }\n        // parse the icon name to get iconset name\n        const icon = this.parseIcon(this.name);\n        if (!icon) {\n            return;\n        }\n        // try to retrieve the iconset\n        const iconset = IconsetRegistry.getInstance().getIconset(icon.iconset);\n        if (!iconset) {\n            // we can stop here as there's nothing to be done till we get the iconset\n            return;\n        }\n        if (!this.iconContainer) {\n            return;\n        }\n        this.iconContainer.innerHTML = '';\n        iconset.applyIconToElement(\n            this.iconContainer,\n            icon.icon,\n            this.size ? this.size : '',\n            this.label ? this.label : ''\n        );\n    }\n\n    private parseIcon(icon: string): { iconset: string; icon: string } | null {\n        if (!icon) {\n            return null;\n        }\n        const iconParts = icon.split(':');\n        let iconsetName = 'default';\n        let iconName = icon;\n        if (iconParts.length > 1) {\n            iconsetName = iconParts[0];\n            iconName = iconParts[1];\n        }\n        return { iconset: iconsetName, icon: iconName };\n    }\n\n    private renderIcon(): TemplateResult {\n        // handle src image case\n        return html`\n            ${this.src\n                ? html`\n                      <img src=\"${this.src}\" />\n                  `\n                : nothing}\n        `;\n    }\n}\n","import { css } from 'lit-element';\nconst styles = css`\n:host(:focus){outline-width:0}:host([has-alpha][variant=color]) .track{background:linear-gradient(90deg,rgba(38,128,235,.5),#095aba)}\n`;\nexport default styles;","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    html,\n    property,\n    CSSResultArray,\n    TemplateResult,\n    query,\n} from 'lit-element';\n\nimport spectrumSliderStyles from './spectrum-slider.css';\nimport sliderStyles from './slider.css';\nimport { strictCustomEvent } from '../events';\nimport { Focusable } from '../shared/focusable';\n\nexport type SliderEventDetail = number;\n\nexport class Slider extends Focusable {\n    public static get styles(): CSSResultArray {\n        return [sliderStyles, spectrumSliderStyles];\n    }\n\n    @property()\n    public type = '';\n\n    @property({ reflect: true })\n    public get value(): number {\n        return this._value;\n    }\n\n    public set value(value: number) {\n        const oldValue = this.value;\n\n        if (value === oldValue) {\n            return;\n        }\n\n        this._value = this.clampValue(value);\n        this.requestUpdate('value', oldValue);\n    }\n\n    private _value = 10;\n\n    @property({ reflect: true })\n    public variant = '';\n\n    @property()\n    public label = '';\n\n    @property({ reflect: true, attribute: 'aria-label' })\n    public ariaLabel? = null;\n\n    @property({ type: Number })\n    public max = 20;\n\n    @property({ type: Number })\n    public min = 0;\n\n    @property({ type: Number })\n    public step = 1;\n\n    @property({ type: Boolean, reflect: true })\n    public disabled = false;\n\n    @property({ type: Boolean, reflect: true })\n    public dragging = false;\n\n    @property({ type: Boolean, reflect: true, attribute: 'handle-highlight' })\n    public handleHighlight = false;\n\n    @query('#handle')\n    private handle!: HTMLDivElement;\n\n    @query('#input')\n    private input!: HTMLInputElement;\n\n    public get focusElement(): HTMLElement {\n        return this.input ? this.input : this;\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            ${this.renderLabel()}\n            ${this.variant === 'color'\n                ? this.renderColorTrack()\n                : this.renderTrack()}\n        `;\n    }\n\n    private renderLabel(): TemplateResult {\n        return html`\n            <div id=\"labelContainer\">\n                <label id=\"label\" for=\"input\">${this.label}</label>\n                <div\n                    id=\"value\"\n                    role=\"textbox\"\n                    aria-readonly=\"true\"\n                    aria-labelledby=\"label\"\n                >\n                    ${this.value}\n                </div>\n            </div>\n        `;\n    }\n\n    private renderHandle(): TemplateResult {\n        return html`\n            <div\n                id=\"handle\"\n                style=${this.handleStyle}\n                @pointermove=${this.onPointerMove}\n                @pointerdown=${this.onPointerDown}\n                @pointerup=${this.onPointerUp}\n                @pointercancel=${this.onPointerCancel}\n                role=\"presentation\"\n            >\n                <input\n                    type=\"range\"\n                    id=\"input\"\n                    value=\"${this.value}\"\n                    step=\"${this.step}\"\n                    min=\"${this.min}\"\n                    max=\"${this.max}\"\n                    aria-disabled=${this.disabled}\n                    aria-label=${this.ariaLabel || this.label}\n                    aria-valuemin=${this.min}\n                    aria-valuemax=${this.max}\n                    aria-valuetext=${this.value}\n                    @change=${this.onInputChange}\n                    @focus=${this.onInputFocus}\n                    @blur=${this.onInputBlur}\n                />\n            </div>\n        `;\n    }\n\n    private renderTrack(): TemplateResult {\n        return html`\n            <div id=\"controls\" @pointerdown=${this.onTrackPointerDown}>\n                <div class=\"track\" id=\"track-left\"\n                    style=${this.trackLeftStyle} \n                    role=\"presentation\"\n                >\n                </div>\n                ${this.renderHandle()}\n                <div class=\"track\"\n                    id=\"track-right\"\n                    style=${this.trackRightStyle}\n                    role=\"presentation\"\n                >\n                </div>\n                </div>\n            </div>\n        `;\n    }\n\n    private renderColorTrack(): TemplateResult {\n        return html`\n            <div id=\"controls\" @pointerdown=${this.onTrackPointerDown}>\n                <div class=\"track\"></div>\n                ${this.renderHandle()}\n            </div>\n        `;\n    }\n\n    private onPointerDown(ev: PointerEvent): void {\n        if (this.disabled) {\n            return;\n        }\n        this.input.focus();\n        this.dragging = true;\n        this.handle.setPointerCapture(ev.pointerId);\n    }\n\n    private onPointerUp(ev: PointerEvent): void {\n        // Retain focus on input element after mouse up to enable keyboard interactions\n        this.input.focus();\n        this.handleHighlight = false;\n        this.dragging = false;\n        this.handle.releasePointerCapture(ev.pointerId);\n        this.dispatchChangeEvent();\n    }\n\n    private onPointerMove(ev: PointerEvent): void {\n        if (!this.dragging) {\n            return;\n        }\n        this.value = this.calculateHandlePosition(ev);\n        this.dispatchInputEvent();\n    }\n\n    private onPointerCancel(ev: PointerEvent): void {\n        this.dragging = false;\n        this.handle.releasePointerCapture(ev.pointerId);\n    }\n\n    /**\n     * Move the handle under the cursor and begin start a pointer capture when the track\n     * is moused down\n     */\n    private onTrackPointerDown(ev: PointerEvent): void {\n        if (ev.target === this.handle || this.disabled) {\n            return;\n        }\n        this.dragging = true;\n        this.handle.setPointerCapture(ev.pointerId);\n\n        this.value = this.calculateHandlePosition(ev);\n        this.dispatchInputEvent();\n    }\n\n    /**\n     * Keep the slider value property in sync with the input element's value\n     */\n    private onInputChange(): void {\n        const inputValue = parseFloat(this.input.value);\n        this.value = this.clampValue(inputValue);\n        this.input.value = this.value.toString();\n\n        this.dispatchInputEvent();\n        this.dispatchChangeEvent();\n    }\n\n    private onInputFocus(): void {\n        this.handleHighlight = true;\n    }\n\n    private onInputBlur(): void {\n        this.handleHighlight = false;\n    }\n\n    /**\n     * Returns the value under the cursor\n     * @param: PointerEvent on slider\n     * @return: Slider value that correlates to the position under the pointer\n     */\n    private calculateHandlePosition(ev: PointerEvent): number {\n        const rect = this.getBoundingClientRect();\n        const minOffset = rect.left;\n        const offset = ev.clientX;\n        const size = rect.width;\n\n        const percent = (offset - minOffset) / size;\n        let value = this.min + (this.max - this.min) * percent;\n\n        value = this.clampValue(value);\n\n        if (this.step) {\n            value = Math.round(value / this.step) * this.step;\n        }\n\n        return value;\n    }\n\n    /**\n     * @param: value to be clamped\n     * @return: the original value if in range, this.max if over, and this.min if under\n     */\n    private clampValue(value: number): number {\n        const reducedValue = Math.min(value, this.max);\n        return Math.max(reducedValue, this.min);\n    }\n\n    private dispatchInputEvent(): void {\n        const inputEvent = strictCustomEvent('sp-slider:input', {\n            bubbles: true,\n            composed: true,\n            detail: this.value,\n        });\n\n        this.dispatchEvent(inputEvent);\n    }\n\n    private dispatchChangeEvent(): void {\n        this.input.value = this.value.toString();\n\n        const changeEvent = strictCustomEvent('sp-slider:change', {\n            bubbles: true,\n            composed: true,\n            detail: this.value,\n        });\n\n        this.dispatchEvent(changeEvent);\n    }\n\n    /**\n     * Ratio representing the slider's position on the track\n     */\n    private get trackProgress(): number {\n        const range = this.max - this.min;\n        const progress = this.value - this.min;\n\n        return progress / range;\n    }\n\n    private get trackLeftStyle(): string {\n        return `width: ${this.trackProgress * 100}%`;\n    }\n\n    private get trackRightStyle(): string {\n        const width = `width: ${(1 - this.trackProgress) * 100}%; `;\n        const offset = `left: calc(${this.trackProgress * 100}% + 8px)`;\n\n        return width + offset;\n    }\n\n    private get handleStyle(): string {\n        return `left: ${this.trackProgress * 100}%`;\n    }\n}\n\ndeclare global {\n    interface GlobalEventHandlersEventMap {\n        'sp-slider:input': CustomEvent<SliderEventDetail>;\n        'sp-slider:change': CustomEvent<SliderEventDetail>;\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    html,\n    LitElement,\n    CSSResultArray,\n    TemplateResult,\n    property,\n} from 'lit-element';\n\nimport { StrictCustomEvent } from '../events';\nimport sidenavStyles from './sidenav.css';\n\nexport interface SidenavSelectDetail {\n    value: string;\n}\n\nexport class SideNav extends LitElement {\n    public static readonly is = 'sp-sidenav';\n\n    public static get styles(): CSSResultArray {\n        return [sidenavStyles];\n    }\n\n    @property({ reflect: true })\n    public value: string | undefined = undefined;\n\n    private handleSelect(ev: StrictCustomEvent<'sp-sidenav:select'>): void {\n        this.value = ev.detail.value;\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            <nav @sidenav-select=${this.handleSelect}>\n                <ul>\n                    <slot></slot>\n                </ul>\n            </nav>\n        `;\n    }\n}\n\ndeclare global {\n    interface GlobalEventHandlersEventMap {\n        'sp-sidenav:select': CustomEvent<SidenavSelectDetail>;\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    html,\n    LitElement,\n    CSSResultArray,\n    TemplateResult,\n    property,\n} from 'lit-element';\nimport { ifDefined } from 'lit-html/directives/if-defined.js';\nimport { strictCustomEvent } from '../events';\n\nimport { SidenavSelectDetail, SideNav } from './sidenav';\n\nimport sidenavItemStyles from './sidenav-item.css';\n\nexport class SideNavItem extends LitElement {\n    public static readonly is = 'sp-sidenav-item';\n\n    public static get styles(): CSSResultArray {\n        return [sidenavItemStyles];\n    }\n\n    @property()\n    public value: string | undefined = undefined;\n\n    @property({ type: Boolean, reflect: true })\n    public selected: boolean = false;\n\n    @property({ type: Boolean, reflect: true })\n    public disabled = false;\n\n    @property({ type: Boolean, reflect: true })\n    public expanded = true;\n\n    @property()\n    public href: string | undefined = undefined;\n\n    @property()\n    public target: string | undefined = undefined;\n\n    @property()\n    public label: string = '';\n\n    protected get parentSideNav(): SideNav | undefined {\n        return this.closest('sp-sidenav') as SideNav | undefined;\n    }\n\n    protected get hasChildren(): boolean {\n        return !!this.querySelector('sp-sidenav-item');\n    }\n\n    protected get depth(): number {\n        let depth = 0;\n        let element = this.parentElement;\n        while (element instanceof SideNavItem) {\n            depth++;\n            element = element.parentElement;\n        }\n        return depth;\n    }\n\n    protected firstUpdated(): void {\n        const parentSideNav = this.parentSideNav;\n        if (parentSideNav) {\n            parentSideNav.addEventListener('sp-sidenav:select', (ev) =>\n                this.handleSideNavSelect(ev)\n            );\n            this.selected =\n                this.value != null && this.value === parentSideNav.value;\n        }\n    }\n\n    protected handleSideNavSelect(ev: Event): void {\n        this.selected = ev.target === this;\n    }\n\n    protected handleClick(): void {\n        if (this.value && !this.disabled) {\n            if (this.hasChildren) {\n                this.expanded = !this.expanded;\n            } else {\n                const selectDetail: SidenavSelectDetail = {\n                    value: this.value,\n                };\n\n                const selectionEvent = strictCustomEvent('sp-sidenav:select', {\n                    bubbles: true,\n                    composed: true,\n                    detail: selectDetail,\n                });\n\n                this.dispatchEvent(selectionEvent);\n            }\n        }\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            <a\n                .href=${ifDefined(this.href)}\n                .target=${ifDefined(this.target)}\n                data-level=\"${this.depth}\"\n                @click=\"${this.handleClick}\"\n                id=\"itemLink\"\n            >\n                ${this.label}\n            </a>\n            ${this.expanded\n                ? html`\n                      <slot></slot>\n                  `\n                : undefined}\n        `;\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    html,\n    LitElement,\n    property,\n    CSSResultArray,\n    TemplateResult,\n} from 'lit-element';\n\nimport sidenavItemStyles from './sidenav-item.css';\nimport sidenavHeadingStyles from './sidenav-heading.css';\n\nexport class SideNavHeading extends LitElement {\n    public static readonly is = 'sp-sidenav-heading';\n\n    @property({ reflect: true })\n    public label = '';\n\n    public static get styles(): CSSResultArray {\n        return [sidenavItemStyles, sidenavHeadingStyles];\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            <h2 id=\"heading\">${this.label}</h2>\n            <ul id=\"list\" aria-labelledby=\"heading\">\n                <slot></slot>\n            </ul>\n        `;\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { CSSResultArray, TemplateResult, html } from 'lit-element';\nimport { CheckboxBase } from '../checkbox/checkbox-base';\nimport switchStyles from './switch.css';\n\nexport class Switch extends CheckboxBase {\n    public static get styles(): CSSResultArray {\n        return [switchStyles];\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            ${super.render()}\n            <span id=\"switch\"></span>\n            <label id=\"label\" for=\"input\"><slot></slot></label>\n        `;\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nexport * from './switch';\n\nimport { Switch } from './switch';\n\nif (!customElements.get('sp-switch')) {\n    customElements.define('sp-switch', Switch);\n}\n\ndeclare global {\n    interface HTMLElementTagNameMap {\n        'sp-switch': Switch;\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    html,\n    LitElement,\n    CSSResultArray,\n    TemplateResult,\n    property,\n} from 'lit-element';\n\nimport { nothing } from 'lit-html';\n\nimport popoverStyles from './popover.css';\n\n/**\n * @attr {Boolean} open - The open state of the popover\n * @attr {Boolean} dialog - Adds some padding to the popover\n */\n\nexport class Popover extends LitElement {\n    public static is = 'sp-popover';\n\n    public static get styles(): CSSResultArray {\n        return [popoverStyles];\n    }\n\n    @property({ reflect: true })\n    public direction: 'top' | 'bottom' | 'left' | 'right' | 'none' = 'none';\n\n    @property({ type: Boolean, reflect: true })\n    public tip = false;\n\n    protected renderTip(): TemplateResult {\n        return html`\n            <div id=\"tip\"></div>\n        `;\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            <slot></slot>\n            ${this.tip ? this.renderTip() : nothing}\n        `;\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { storiesOf } from '@storybook/polymer';\nimport { html } from 'lit-html';\nimport { action } from '@storybook/addon-actions';\n\nimport '../src/button';\n\nstoriesOf('ActionButton', module).add('Default', () => {\n    return renderButtonsSelected({});\n});\n\nfunction renderButton(properties) {\n    return html`\n        <sp-action-button\n            .quiet=\"${!!properties.quiet}\"\n            .disabled=${!!properties.disabled}\n            .selected=${!!properties.selected}\n            @click=${action(`Action`)}\n        >\n            Action\n        </sp-action-button>\n    `;\n}\n\nfunction renderButtonsSelected(properties) {\n    const disabled = Object.assign({}, properties, { disabled: true });\n    const selected = Object.assign({}, properties, { selected: true });\n    return html`\n        <div>\n            ${renderButton(properties)} ${renderButton(selected)}\n            ${renderButton(disabled)}\n        </div>\n    `;\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { storiesOf } from '@storybook/polymer';\nimport { withKnobs, boolean, radios, text } from '@storybook/addon-knobs';\nimport { html } from 'lit-html';\n\nimport '../src/banner';\n\nstoriesOf('Banner', module)\n    .addDecorator(withKnobs)\n    .add('Default', () => {\n        const header = text('Header', 'Header Text');\n        const content = text('Content', 'Content of the banner!');\n        const typeOptions = {\n            info: 'info',\n            warning: 'warning',\n            error: 'error',\n        };\n        const type = radios('Type', typeOptions, typeOptions.info);\n        const inCorner = boolean('In Corner', false);\n        return html`\n            <div\n                style=\"width: 300px; height: 200px; background-color: #ccc; position: relative; margin: 20px;\"\n            >\n                <sp-banner type=\"${type}\" ?corner=${inCorner}>\n                    <div slot=\"header\">${header}</div>\n                    <div slot=\"content\">${content}</div>\n                </sp-banner>\n            </div>\n        `;\n    })\n    .add('Banner Types', () => {\n        return html`\n            <sp-banner type=\"info\">\n                <div slot=\"header\">Header Text</div>\n                <div slot=\"content\">Content of the banner!</div>\n            </sp-banner>\n            <sp-banner type=\"warning\">\n                <div slot=\"header\">Header Text</div>\n                <div slot=\"content\">Content of the banner!</div>\n            </sp-banner>\n            <sp-banner type=\"error\">\n                <div slot=\"header\">Header Text</div>\n                <div slot=\"content\">Content of the banner!</div>\n            </sp-banner>\n        `;\n    })\n    .add('Corner Placement', () => {\n        return html`\n            <div\n                style=\"width: 300px; height: 200px; background-color: #ccc; position: relative; margin: 20px;\"\n            >\n                <sp-banner corner>\n                    <div slot=\"header\">A corner banner!</div>\n                    <div slot=\"content\">Content of the banner!</div>\n                </sp-banner>\n            </div>\n        `;\n    });\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { storiesOf } from '@storybook/polymer';\nimport { html } from 'lit-html';\nimport { withKnobs, boolean } from '@storybook/addon-knobs';\nimport { action } from '@storybook/addon-actions';\nimport * as MediumIcons from '../src/icons/icons-medium';\n\nimport { defineCustomElements, Icon } from '../src';\n\nimport '../src/button';\n\ndefineCustomElements(Icon, ...Object.values(MediumIcons));\n\nstoriesOf('Button', module)\n    .addDecorator(withKnobs)\n    .add('Default', () => {\n        return renderButtonPair({});\n    })\n    .add('variant: cta', () => {\n        return renderButtonPair({\n            variant: 'cta',\n        });\n    })\n    .add('variant: primary', () => {\n        return renderButtonPair({\n            variant: 'primary',\n        });\n    })\n    .add('variant: secondary', () => {\n        return renderButtonPair({\n            variant: 'secondary',\n        });\n    })\n    .add('variant: negative', () => {\n        return renderButtonPair({\n            variant: 'negative',\n        });\n    })\n    .add('variant: overBackground', () => {\n        return html`\n            <div\n                style='background-color: rgb(15, 121, 125); color: rgb(15, 121, 125); padding: 15px 20px; display: \"inline-block\"'\n            >\n                ${renderButtonPair({\n                    variant: 'overBackground',\n                })}\n            </div>\n        `;\n    })\n    .add('attribute: quiet, variant: primary', () => {\n        return renderButtonPair({\n            variant: 'primary',\n            quiet: true,\n        });\n    })\n    .add('attribute: quiet, variant: secondary', () => {\n        return renderButtonPair({\n            variant: 'secondary',\n            quiet: true,\n        });\n    })\n    .add('attribute: quiet, variant: negative', () => {\n        return renderButtonPair({\n            variant: 'negative',\n            quiet: true,\n        });\n    })\n    .add('attribute: quiet, variant: overBackground', () => {\n        return html`\n            <div\n                style='background-color: rgb(15, 121, 125); color: rgb(15, 121, 125); padding: 15px 20px; display: \"inline-block\"'\n            >\n                ${renderButtonPair({\n                    variant: 'overBackground',\n                    quiet: true,\n                })}\n            </div>\n        `;\n    })\n    .add('with icon', () => {\n        const iconRight = boolean('Icon on Right', false);\n        return html`\n            <sp-icons-medium></sp-icons-medium>\n            <style>\n                .row {\n                    padding: 10px;\n                }\n            </style>\n            <div class=\"row\">\n                ${renderButtonPair({\n                    variant: 'primary',\n                    iconRight: iconRight,\n                    content: html`\n                        <sp-icon\n                            slot=\"icon\"\n                            size=\"m\"\n                            name=\"ui:HelpMedium\"\n                        ></sp-icon>\n                        Help\n                    `,\n                })}\n            </div>\n            <div class=\"row\">\n                ${renderButtonPair({\n                    variant: 'primary',\n                    iconRight: iconRight,\n                    content: html`\n                        <svg\n                            slot=\"icon\"\n                            viewBox=\"0 0 36 36\"\n                            focusable=\"false\"\n                            aria-hidden=\"true\"\n                            role=\"img\"\n                        >\n                            <path\n                                d=\"M16 36a4.407 4.407 0 0 0 4-4h-8a4.407 4.407 0 0 0 4 4zm9.143-24.615c0-3.437-3.206-4.891-7.143-5.268V3a1.079 1.079 0 0 0-1.143-1h-1.714A1.079 1.079 0 0 0 14 3v3.117c-3.937.377-7.143 1.831-7.143 5.268C6.857 26.8 2 26.111 2 28.154V30h28v-1.846C30 26 25.143 26.8 25.143 11.385z\"\n                            ></path>\n                        </svg>\n                        Custom SVG\n                    `,\n                })}\n            </div>\n            <div class=\"row\">\n                <sp-button variant=\"secondary\" icon-right>\n                    <svg\n                        slot=\"icon\"\n                        viewBox=\"0 0 36 36\"\n                        focusable=\"false\"\n                        aria-hidden=\"true\"\n                        role=\"img\"\n                    >\n                        <path\n                            d=\"M16 36a4.407 4.407 0 0 0 4-4h-8a4.407 4.407 0 0 0 4 4zm9.143-24.615c0-3.437-3.206-4.891-7.143-5.268V3a1.079 1.079 0 0 0-1.143-1h-1.714A1.079 1.079 0 0 0 14 3v3.117c-3.937.377-7.143 1.831-7.143 5.268C6.857 26.8 2 26.111 2 28.154V30h28v-1.846C30 26 25.143 26.8 25.143 11.385z\"\n                        ></path>\n                    </svg>\n                    Custom SVG\n                </sp-button>\n                <sp-button variant=\"secondary\">\n                    <svg\n                        slot=\"icon\"\n                        viewBox=\"0 0 36 36\"\n                        focusable=\"false\"\n                        aria-hidden=\"true\"\n                        role=\"img\"\n                    >\n                        <path\n                            d=\"M16 36a4.407 4.407 0 0 0 4-4h-8a4.407 4.407 0 0 0 4 4zm9.143-24.615c0-3.437-3.206-4.891-7.143-5.268V3a1.079 1.079 0 0 0-1.143-1h-1.714A1.079 1.079 0 0 0 14 3v3.117c-3.937.377-7.143 1.831-7.143 5.268C6.857 26.8 2 26.111 2 28.154V30h28v-1.846C30 26 25.143 26.8 25.143 11.385z\"\n                        ></path>\n                    </svg>\n                    Custom SVG\n                </sp-button>\n            </div>\n        `;\n        return renderButtonPair({\n            variant: 'primary',\n            content: html`\n                <sp-icon slot=\"icon\" size=\"m\" name=\"ui:Magnifier\"></sp-icon>\n            `,\n        });\n    })\n    .add('min-width button', () => {\n        return html`\n            <div>\n                <style>\n                    sp-button {\n                        min-width: 300px;\n                    }\n                </style>\n                ${renderButtonPair({\n                    variant: 'cta',\n                })}\n            </div>\n        `;\n    })\n    .add('button with href', () => {\n        return html`\n            <sp-button href=\"https://github.com/adobe/spectrum-web-components\">\n                Github\n            </sp-button>\n        `;\n    });\n\nfunction renderButton(properties) {\n    if (properties.variant) {\n        return html`\n            <sp-button\n                variant=\"${properties.variant}\"\n                ?quiet=\"${!!properties.quiet}\"\n                ?disabled=${!!properties.disabled}\n                ?icon-right=${properties.iconRight}\n                @click=${action(`Click ${properties.variant}`)}\n            >\n                ${properties.content || 'Click Me'}\n            </sp-button>\n        `;\n    } else {\n        return html`\n            <sp-button\n                ?quiet=\"${!!properties.quiet}\"\n                ?disabled=${!!properties.disabled}\n                @click=${action(`Click ${properties.variant}`)}\n            >\n                ${properties.content || 'Click Me'}\n            </sp-button>\n        `;\n    }\n}\n\nfunction renderButtonPair(properties) {\n    const disabled = Object.assign({}, properties, { disabled: true });\n    return html`\n        ${renderButton(properties)} ${renderButton(disabled)}\n    `;\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { storiesOf } from '@storybook/polymer';\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { html } from 'lit-html';\n\nimport '../src/card';\n\nstoriesOf('Card', module)\n    .addDecorator(withKnobs)\n    .add('Default', () => {\n        return html`\n            <div style=\"color: var(--spectrum-global-color-gray-800)\">\n                <sp-card title=\"Card Title\" subtitle=\"JPG\">\n                    <img\n                        slot=\"cover-photo\"\n                        src=\"https://picsum.photos/200/300\"\n                        alt=\"Demo Image\"\n                    />\n                    <div slot=\"footer\">Footer</div>\n                </sp-card>\n            </div>\n        `;\n    })\n    .add('Gallery', () => {\n        return html`\n            <div style=\"width: 532px; height: 224px\">\n                <sp-card variant=\"gallery\" title=\"Card Title\" subtitle=\"JPG\">\n                    <img\n                        slot=\"preview\"\n                        src=\"https://picsum.photos/532/192\"\n                        style=\"object-fit: cover\"\n                        alt=\"Demo Image\"\n                    />\n                    <div slot=\"description\">10/15/18</div>\n                    <div slot=\"footer\">Footer</div>\n                </sp-card>\n            </div>\n        `;\n    })\n    .add('Quiet', () => {\n        return html`\n            <div style=\"width: 208px; height: 264px\">\n                <sp-card variant=\"quiet\" title=\"Card Title\" subtitle=\"JPG\">\n                    <img\n                        slot=\"preview\"\n                        src=\"https://picsum.photos/200/300\"\n                        alt=\"Demo Image\"\n                    />\n                    <div slot=\"description\">10/15/18</div>\n                    <div slot=\"footer\">Footer</div>\n                </sp-card>\n            </div>\n        `;\n    });\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { storiesOf } from '@storybook/polymer';\nimport { html } from 'lit-html';\nimport { action } from '@storybook/addon-actions';\nimport * as MediumIcons from '../src/icons/icons-medium';\nimport '../src/checkbox';\n\nimport { defineCustomElements } from '../src';\n\ndefineCustomElements(...Object.values(MediumIcons));\n\nstoriesOf('Checkbox', module)\n    .add('Default', () => {\n        return html`\n            <sp-icons-medium></sp-icons-medium>\n            <sp-checkbox\n                @click=\"${action('Click')}\"\n                @change=\"${action('Change')}\"\n            >\n                Checkbox\n            </sp-checkbox>\n        `;\n    })\n    .add('Checked', () => {\n        return html`\n            <sp-icons-medium></sp-icons-medium>\n            <sp-checkbox checked>Checkbox</sp-checkbox>\n        `;\n    })\n    .add('Indeterminate', () => {\n        return html`\n            <sp-icons-medium></sp-icons-medium>\n            <sp-checkbox indeterminate>Checkbox</sp-checkbox>\n        `;\n    })\n    .add('Quiet', () => {\n        return html`\n            <sp-icons-medium></sp-icons-medium>\n            <sp-checkbox quiet>Checkbox</sp-checkbox>\n        `;\n    })\n    .add('Quiet checked', () => {\n        return html`\n            <sp-icons-medium></sp-icons-medium>\n            <sp-checkbox quiet checked>Checkbox</sp-checkbox>\n        `;\n    })\n    .add('Quiet indeterminate', () => {\n        return html`\n            <sp-icons-medium></sp-icons-medium>\n            <sp-checkbox quiet indeterminate>Checkbox</sp-checkbox>\n        `;\n    })\n    .add('Autofocus', () => {\n        return html`\n            <sp-icons-medium></sp-icons-medium>\n            <sp-checkbox autofocus>Checkbox</sp-checkbox>\n        `;\n    })\n    .add('Invalid', () => {\n        return html`\n            <sp-icons-medium></sp-icons-medium>\n            <sp-checkbox invalid>Checkbox</sp-checkbox>\n        `;\n    })\n    .add('Invalid checked', () => {\n        return html`\n            <sp-icons-medium></sp-icons-medium>\n            <sp-checkbox invalid checked>Checkbox</sp-checkbox>\n        `;\n    })\n    .add('Invalid indeterminate', () => {\n        return html`\n            <sp-icons-medium></sp-icons-medium>\n            <sp-checkbox invalid indeterminate>Checkbox</sp-checkbox>\n        `;\n    })\n    .add('Disabled', () => {\n        return html`\n            <sp-icons-medium></sp-icons-medium>\n            <sp-checkbox disabled>Checkbox</sp-checkbox>\n        `;\n    })\n    .add('Disabled checked', () => {\n        return html`\n            <sp-icons-medium></sp-icons-medium>\n            <sp-checkbox disabled checked>Checkbox</sp-checkbox>\n        `;\n    })\n    .add('Disabled indeterminate', () => {\n        return html`\n            <sp-icons-medium></sp-icons-medium>\n            <sp-checkbox disabled indeterminate>Checkbox</sp-checkbox>\n        `;\n    })\n    .add('Tab index example', () => {\n        return html`\n            <sp-icons-medium></sp-icons-medium>\n            <div>\n                <sp-checkbox tabindex=\"0\">Checkbox 0</sp-checkbox>\n            </div>\n            <div>\n                <sp-checkbox disabled tabindex=\"3\">Checkbox 3</sp-checkbox>\n            </div>\n            <div>\n                <sp-checkbox tabindex=\"4\">Checkbox 4</sp-checkbox>\n            </div>\n            <div>\n                <sp-checkbox tabindex=\"2\" autofocus>Checkbox 2</sp-checkbox>\n            </div>\n            <div>\n                <sp-checkbox tabindex=\"1\">Checkbox 1</sp-checkbox>\n            </div>\n        `;\n    });\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { storiesOf } from '@storybook/polymer';\nimport { withKnobs, boolean, radios, text } from '@storybook/addon-knobs';\nimport { html } from 'lit-html';\n\nimport '../src/dropzone';\n\nstoriesOf('Dropzone', module)\n    .addDecorator(withKnobs)\n    .add('Default', () => {\n        return html`\n            <div style=\"width: 600px; height: 250px\">\n                <sp-dropzone id=\"dropzone\" tabindex=\"0\">\n                    <sp-illustrated-message heading=\"Drag and Drop Your File\">\n                        <svg\n                            xmlns=\"http://www.w3.org/2000/svg\"\n                            width=\"150\"\n                            height=\"103\"\n                            viewBox=\"0 0 150 103\"\n                        >\n                            <use\n                                xlink:href=\"error_message_geometry.svg#error-notice\"\n                            />\n                        </svg>\n                    </sp-illustrated-message>\n\n                    <div style=\"color: grey\">\n                        <div>\n                            <label for=\"file-input\">\n                                <sp-link>Select a File</sp-link>\n                                from your computer\n                            </label>\n                            <input\n                                type=\"file\"\n                                id=\"file-input\"\n                                style=\"display: none\"\n                            />\n                        </div>\n                        <div>\n                            or\n                            <sp-link\n                                href=\"http://stock.adobe.com\"\n                                target=\"blank\"\n                            >\n                                Search Adobe Stock\n                            </sp-link>\n                        </div>\n                    </div>\n                </sp-dropzone>\n            </div>\n        `;\n    });\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { storiesOf } from '@storybook/polymer';\nimport { withKnobs } from '@storybook/addon-knobs';\nimport { html } from 'lit-html';\n\nimport '../src/icon';\nimport { defineCustomElements } from '../src/define';\nimport * as MediumIcons from '../src/icons/icons-medium';\nimport * as LargeIcons from '../src/icons/icons-large';\n\ndefineCustomElements(\n    ...Object.values(MediumIcons),\n    ...Object.values(LargeIcons)\n);\n\nstoriesOf('Icons', module)\n    .addDecorator(withKnobs)\n    .add('Medium', () => {\n        return html`\n            <sp-icons-medium></sp-icons-medium>\n            <sp-icon size=\"xxs\" name=\"ui:Magnifier\"></sp-icon>\n            <sp-icon size=\"xs\" name=\"ui:Magnifier\"></sp-icon>\n            <sp-icon size=\"s\" name=\"ui:Magnifier\"></sp-icon>\n            <sp-icon size=\"m\" name=\"ui:Magnifier\"></sp-icon>\n            <sp-icon size=\"l\" name=\"ui:Magnifier\"></sp-icon>\n            <sp-icon size=\"xl\" name=\"ui:Magnifier\"></sp-icon>\n            <sp-icon size=\"xxl\" name=\"ui:Magnifier\"></sp-icon>\n        `;\n    })\n    .add('Large', () => {\n        return html`\n            <sp-icons-large></sp-icons-large>\n            <sp-icon size=\"xxs\" name=\"ui:Magnifier\"></sp-icon>\n            <sp-icon size=\"xs\" name=\"ui:Magnifier\"></sp-icon>\n            <sp-icon size=\"s\" name=\"ui:Magnifier\"></sp-icon>\n            <sp-icon size=\"m\" name=\"ui:Magnifier\"></sp-icon>\n            <sp-icon size=\"l\" name=\"ui:Magnifier\"></sp-icon>\n            <sp-icon size=\"xl\" name=\"ui:Magnifier\"></sp-icon>\n            <sp-icon size=\"xxl\" name=\"ui:Magnifier\"></sp-icon>\n        `;\n    });\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { storiesOf } from '@storybook/polymer';\nimport { withKnobs, boolean, radios, text } from '@storybook/addon-knobs';\nimport { html } from 'lit-html';\n\nimport '../src/illustrated-message';\n\nstoriesOf('IllustratedMessage', module)\n    .addDecorator(withKnobs)\n    .add('Default', () => {\n        return html`\n            <sp-illustrated-message\n                heading=\"Drag and Drop Your File\"\n                description=\"This message has italics\"\n            >\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"150\"\n                    height=\"103\"\n                    viewBox=\"0 0 150 103\"\n                >\n                    <use xlink:href=\"error_message_geometry.svg#error-notice\" />\n                </svg>\n            </sp-illustrated-message>\n        `;\n    })\n    .add('CTA', () => {\n        return html`\n            <sp-illustrated-message\n                heading=\"Drag and Drop Your File\"\n                description=\"This message has no italics\"\n                cta\n            >\n                <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"150\"\n                    height=\"103\"\n                    viewBox=\"0 0 150 103\"\n                >\n                    <use xlink:href=\"error_message_geometry.svg#error-notice\" />\n                </svg>\n            </sp-illustrated-message>\n        `;\n    });\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { storiesOf } from '@storybook/polymer';\nimport { html } from 'lit-html';\nimport '../src/link';\n\nstoriesOf('Link', module)\n    .add('Default', () => {\n        // prettier-ignore\n        return html`\n            This is a <sp-link href=\"#\">link</sp-link>.\n        `;\n    })\n    .add('Quiet', () => {\n        // prettier-ignore\n        return html`\n            This is a <sp-link quiet href=\"#\">quiet link</sp-link>.\n        `;\n    })\n    .add('Over Background', () => {\n        return html`\n            <div\n                style=\"background-color: rgb(15, 121, 125); padding: 15px 20px; display: inline-block;\"\n            >\n                <p style=\"color: rgb(240, 240, 240);\">\n                    This\n                    <sp-link over-background href=\"#\">link</sp-link>\n                    has a background.\n                </p>\n            </div>\n        `;\n    });\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { storiesOf } from '@storybook/polymer';\nimport { withKnobs, number, radios } from '@storybook/addon-knobs';\nimport { html } from 'lit-html';\n\nimport '../src/overlay-root';\nimport '../src/overlay-trigger';\nimport '../src/button';\nimport '../src/popover';\nimport '../src/slider';\n\nstoriesOf('Overlay Root', module)\n    .addDecorator(withKnobs)\n    .add('Default', () => {\n        const positionOptions = {\n            top: 'top',\n            bottom: 'bottom',\n            left: 'left',\n            right: 'right',\n        };\n        const position = radios(\n            'Type',\n            positionOptions,\n            positionOptions.bottom\n        );\n        const offset = number('Offset', 6);\n\n        return html`\n            <style>\n                html,\n                body,\n                #root,\n                #root-inner {\n                    height: 100%;\n                }\n\n                overlay-root {\n                    display: flex;\n                    align-items: center;\n                    justify-content: center;\n                }\n\n                overlay-trigger {\n                    flex: none;\n                }\n            </style>\n            <overlay-root placement=\"bottom\" offset=\"${offset}\">\n                <overlay-trigger\n                    id=\"trigger\"\n                    placement=\"${position}\"\n                    offset=\"${offset}\"\n                >\n                    <sp-button variant=\"primary\" slot=\"trigger\">\n                        Show Popover\n                    </sp-button>\n                    <sp-popover\n                        dialog\n                        slot=\"click-content\"\n                        direction=\"${position}\"\n                        tip\n                        open\n                    >\n                        <div class=\"options-popover-content\">\n                            <sp-slider\n                                value=\"5\"\n                                step=\"0.5\"\n                                min=\"0\"\n                                max=\"20\"\n                                label=\"Awesomeness\"\n                            ></sp-slider>\n                            <sp-button>Press Me</sp-button>\n                        </div>\n                    </sp-popover>\n                    <div slot=\"hover-content\" class=\"tooltip\" delay=\"100\">\n                        Tooltip\n                    </div>\n                </overlay-trigger>\n            </overlay-root>\n        `;\n    });\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { storiesOf } from '@storybook/polymer';\nimport { withKnobs, boolean, text, radios } from '@storybook/addon-knobs';\nimport { html } from 'lit-html';\n\nimport '../src/popover';\n\nstoriesOf('Popover', module)\n    .addDecorator(withKnobs)\n    .add('Default', () => {\n        const loremIpsum = 'The quick brown fox jumps over the lazy dog';\n        const content = text('Text content', loremIpsum);\n        return html`\n            <div style=\"color: var(--spectrum-global-color-gray-800)\">\n                <sp-popover variant=\"default\" open style=\"max-width: 320px\">\n                    <div style=\"font-size: 14px; padding: 10px\">\n                        ${content}\n                    </div>\n                </sp-popover>\n            </div>\n        `;\n    })\n    .add('Dialog', () => {\n        const tip = boolean('Has Tip', true);\n        const directions = {\n            top: 'top',\n            bottom: 'bottom',\n            left: 'left',\n            right: 'right',\n        };\n        const direction = radios('Direction', directions, directions.bottom);\n        return html`\n            <div\n                style=\"color: var(--spectrum-global-color-gray-800); position: relative\"\n            >\n                <sp-popover\n                    variant=\"dialog\"\n                    direction=${direction}\n                    open\n                    style=\" max-width: 320px\"\n                    .tip=\"${tip}\"\n                >\n                    <div\n                        style=\"padding-bottom: 30px; font-size: 18px; font-weight: 700\"\n                    >\n                        Popover Title\n                    </div>\n                    <div style=\"font-size: 14px\">\n                        Cupcake ipsum dolor sit amet jelly beans. Chocolate\n                        jelly caramels. Icing soufflé chupa chups donut\n                        cheesecake. Jelly-o chocolate cake sweet roll cake\n                        danish candy biscuit halvah\n                    </div>\n                </sp-popover>\n            </div>\n        `;\n    });\n","/*\nCopyright 2019 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { storiesOf } from '@storybook/polymer';\nimport { html } from 'lit-html';\nimport '../src/radio';\nimport '../src/radio-group';\n\nstoriesOf('Radio', module)\n    .add('Default', () => {\n        return html`\n            <sp-radio>Radio</sp-radio>\n        `;\n    })\n    .add('Checked', () => {\n        return html`\n            <sp-radio checked>Radio</sp-radio>\n        `;\n    })\n    .add('Quiet', () => {\n        return html`\n            <sp-radio quiet>Radio</sp-radio>\n        `;\n    })\n    .add('Quiet checked', () => {\n        return html`\n            <sp-radio quiet checked>Radio</sp-radio>\n        `;\n    })\n    .add('Autofocus', () => {\n        return html`\n            <sp-radio autofocus>Radio</sp-radio>\n        `;\n    })\n    .add('Invalid', () => {\n        return html`\n            <sp-radio invalid>Radio</sp-radio>\n        `;\n    })\n    .add('Invalid checked', () => {\n        return html`\n            <sp-radio invalid checked>Radio</sp-radio>\n        `;\n    })\n    .add('Disabled', () => {\n        return html`\n            <sp-radio disabled>Radio</sp-radio>\n        `;\n    })\n    .add('Disabled checked', () => {\n        return html`\n            <sp-radio disabled checked>Radio</sp-radio>\n        `;\n    })\n\n    .add('Label below', () => {\n        return html`\n            <sp-radio label-below>Radio</sp-radio>\n        `;\n    })\n    .add('Label below checked', () => {\n        return html`\n            <sp-radio label-below checked>Radio</sp-radio>\n        `;\n    })\n    .add('Group example', () => {\n        return html`\n            <sp-radio-group column selected=\"first\" name=\"group-example\">\n                <sp-radio value=\"first\">Option 1</sp-radio>\n                <sp-radio value=\"second\">Option 2</sp-radio>\n                <sp-radio value=\"third\">Option 3</sp-radio>\n                <sp-radio value=\"fourth\">Option 4</sp-radio>\n            </sp-radio-group>\n        `;\n    })\n    .add('Tab index example', () => {\n        return html`\n            <sp-radio-group column name=\"group-example\">\n                <sp-radio quiet value=\"zero\" tabindex=\"0\">Tab Index 0</sp-radio>\n                <sp-radio disabled value=\"three\" tabindex=\"3\">\n                    Tab Index 3\n                </sp-radio>\n                <sp-radio value=\"one\" tabindex=\"1\" autofocus>\n                    Tab Index 1\n                </sp-radio>\n                <sp-radio value=\"four\" tabindex=\"4\">Tab Index 4</sp-radio>\n                <sp-radio invalid value=\"two\" tabindex=\"2\">\n                    Tab Index 2\n                </sp-radio>\n            </sp-radio-group>\n        `;\n    });\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { storiesOf } from '@storybook/polymer';\nimport { decorate } from '@storybook/addon-actions';\nimport { html } from 'lit-html';\n\nimport {\n    defineCustomElements,\n    SideNav,\n    SideNavItem,\n    SideNavHeading,\n} from '../src';\n\ndefineCustomElements(SideNav, SideNavItem, SideNavHeading);\n\nconst eventValue = decorate([(args) => [args[0].detail.value]]);\n\nstoriesOf('Sidenav', module)\n    .add('Default', () => {\n        return html`\n            <sp-sidenav @select=${eventValue.action('select')}>\n                <sp-sidenav-item\n                    value=\"Section 1\"\n                    label=\"Section 1\"\n                ></sp-sidenav-item>\n                <sp-sidenav-item\n                    selected\n                    value=\"Section 2\"\n                    label=\"Section 2\"\n                ></sp-sidenav-item>\n                <sp-sidenav-heading label=\"CATEGORY 1\">\n                    <sp-sidenav-item\n                        value=\"Section 3\"\n                        label=\"Section 3\"\n                    ></sp-sidenav-item>\n                    <sp-sidenav-item\n                        value=\"Section 4\"\n                        label=\"Section 4\"\n                    ></sp-sidenav-item>\n                </sp-sidenav-heading>\n            </sp-sidenav>\n        `;\n    })\n    .add('MultiLevel', () => {\n        return html`\n            <sp-sidenav\n                variant=\"multilevel\"\n                value=\"2.3.1\"\n                @select=${eventValue.action('select')}\n            >\n                <sp-sidenav-item value=\"foo\" label=\"foo\"></sp-sidenav-item>\n                <sp-sidenav-item value=\"baz\" label=\"baz\">\n                    <sp-sidenav-item value=\"2.1\" label=\"2.1\"></sp-sidenav-item>\n                    <sp-sidenav-item value=\"2.2\" label=\"2.2\"></sp-sidenav-item>\n                    <sp-sidenav-item value=\"2.3\" label=\"2.3\">\n                        <sp-sidenav-item\n                            value=\"2.3.1\"\n                            label=\"2.3.1\"\n                        ></sp-sidenav-item>\n                        <sp-sidenav-item\n                            value=\"2.3.2\"\n                            label=\"2.3.2\"\n                        ></sp-sidenav-item>\n                    </sp-sidenav-item>\n                </sp-sidenav-item>\n                <sp-sidenav-item value=\"test\" label=\"test\"></sp-sidenav-item>\n                <sp-sidenav-item value=\"hi\" label=\"hi\"></sp-sidenav-item>\n            </sp-sidenav>\n        `;\n    })\n    .add('Hrefs', () => {\n        return html`\n            <sp-sidenav @select=${eventValue.action('select')}>\n                <sp-sidenav-heading label=\"GITHUB\">\n                    <sp-sidenav-item\n                        href=\"https://github.com/adobe/spectrum-web-components\"\n                        label=\"Code\"\n                    ></sp-sidenav-item>\n                    <sp-sidenav-item\n                        href=\"https://github.com/adobe/spectrum-web-components/issues\"\n                        label=\"Issues\"\n                    ></sp-sidenav-item>\n                    <sp-sidenav-item\n                        href=\"https://github.com/adobe/spectrum-web-components/pulls\"\n                        label=\"Pull Requests\"\n                    ></sp-sidenav-item>\n                </sp-sidenav-heading>\n            </sp-sidenav>\n        `;\n    });\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { storiesOf } from '@storybook/polymer';\nimport {\n    withKnobs,\n    boolean,\n    radios,\n    text,\n    number,\n} from '@storybook/addon-knobs';\nimport { html } from 'lit-html';\n\nimport '../src/slider';\n\nstoriesOf('Slider', module)\n    .addDecorator(withKnobs)\n    .add('Default', () => {\n        const value = number('Value', 50);\n        const min = number('Min', 0);\n        const max = number('Min', 100);\n        const step = number('Step', 1);\n        const label = text('Label', 'Opacity');\n        return html`\n            <div style=\"width: 500px; margin: 20px;\">\n                <sp-slider\n                    value=\"${value}\"\n                    step=\"${step}\"\n                    min=\"${min}\"\n                    max=\"${max}\"\n                    label=\"${label}\"\n                    id=\"opacity-slider\"\n                />\n            </div>\n        `;\n    })\n    .add('Disabled', () => {\n        const label = text('Label', 'Intensity');\n        return html`\n            <div style=\"width: 500px; margin: 20px;\">\n                <sp-slider\n                    disabled\n                    value=\"5\"\n                    step=\"0.5\"\n                    min=\"0\"\n                    max=\"20\"\n                    label=\"${label}\"\n                />\n            </div>\n        `;\n    })\n    .add('Color', () => {\n        return html`\n            <div style=\"width: 500px; margin: 20px;\">\n                <sp-slider\n                    variant=\"color\"\n                    value=\"5\"\n                    step=\"0.5\"\n                    min=\"0\"\n                    max=\"20\"\n                    label=\"Color\"\n                    id=\"color-slider\"\n                />\n            </div>\n        `;\n    })\n    .add('Color with Alpha', () => {\n        return html`\n            <div style=\"width: 500px; margin: 20px;\">\n                <sp-slider\n                    variant=\"color\"\n                    has-alpha\n                    value=\"5\"\n                    step=\"0.5\"\n                    min=\"0\"\n                    max=\"20\"\n                    label=\"Color\"\n                    id=\"color-slider\"\n                />\n            </div>\n        `;\n    })\n    .add('Color disabled', () => {\n        return html`\n            <div style=\"width: 500px; margin: 20px;\">\n                <sp-slider\n                    variant=\"color\"\n                    has-alpha\n                    disabled\n                    value=\"5\"\n                    step=\"0.5\"\n                    min=\"0\"\n                    max=\"20\"\n                    label=\"Color\"\n                    id=\"color-slider\"\n                />\n            </div>\n        `;\n    })\n    .add('Focus tab demo', () => {\n        const value = number('Value', 50);\n        const min = number('Min', 0);\n        const max = number('Min', 100);\n        const step = number('Step', 1);\n        return html`\n            <div style=\"width: 500px; margin: 20px;\">\n                <sp-slider\n                    value=\"${value}\"\n                    step=\"${step}\"\n                    min=\"${min}\"\n                    max=\"${max}\"\n                    label=\"Opacity\"\n                    id=\"opacity-slider-opacity\"\n                />\n            </div>\n            <div style=\"width: 500px; margin: 20px;\">\n                <sp-slider\n                    value=\"${value}\"\n                    step=\"${step}\"\n                    min=\"${min}\"\n                    max=\"${max}\"\n                    label=\"Lightness\"\n                    id=\"opacity-slider-lightness\"\n                />\n            </div>\n            <div style=\"width: 500px; margin: 20px;\">\n                <sp-slider\n                    value=\"${value}\"\n                    step=\"${step}\"\n                    min=\"${min}\"\n                    max=\"${max}\"\n                    label=\"Saturation\"\n                    id=\"opacity-slider-saturation\"\n                />\n            </div>\n        `;\n    });\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { storiesOf } from '@storybook/polymer';\nimport { html } from 'lit-html';\nimport { action } from '@storybook/addon-actions';\nimport '../src/switch';\n\nstoriesOf('Switch', module)\n    .add('Default', () => {\n        return html`\n            <sp-switch>Switch</sp-switch>\n        `;\n    })\n    .add('Checked', () => {\n        return html`\n            <sp-switch checked>Switch</sp-switch>\n        `;\n    })\n    .add('Quiet', () => {\n        return html`\n            <sp-switch quiet>Switch</sp-switch>\n        `;\n    })\n    .add('Quiet checked', () => {\n        return html`\n            <sp-switch quiet checked>Switch</sp-switch>\n        `;\n    })\n    .add('Autofocus', () => {\n        return html`\n            <sp-switch autofocus>Switch</sp-switch>\n        `;\n    })\n    .add('Disabled', () => {\n        return html`\n            <sp-switch disabled>Switch</sp-switch>\n        `;\n    })\n    .add('Disabled checked', () => {\n        return html`\n            <sp-switch disabled checked>Switch</sp-switch>\n        `;\n    });\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { storiesOf } from '@storybook/polymer';\nimport { radios, withKnobs } from '@storybook/addon-knobs';\nimport { html } from 'lit-html';\nimport * as MediumIcons from '../src/icons/icons-medium';\nimport '../src/tab-list';\nimport '../src/tab';\n\nimport { defineCustomElements, Icon } from '../src';\n\nstoriesOf('Tabs', module)\n    .addDecorator(withKnobs)\n    .add('Default', () => {\n        return html`\n            <sp-tab-list selected=\"1\">\n                <sp-tab label=\"Tab 1\" value=\"1\" tabindex=\"0\"></sp-tab>\n                <sp-tab label=\"Tab 2\" value=\"2\" tabindex=\"0\"></sp-tab>\n                <sp-tab label=\"Tab 3\" value=\"3\" tabindex=\"0\"></sp-tab>\n                <sp-tab label=\"Tab 4\" value=\"4\" tabindex=\"0\"></sp-tab>\n            </sp-tab-list>\n        `;\n    })\n    .add('Vertical', () => {\n        return html`\n            <sp-tab-list selected=\"1\" direction=\"vertical\">\n                <sp-tab label=\"Tab 1\" value=\"1\" tabindex=\"0\"></sp-tab>\n                <sp-tab label=\"Tab 2\" value=\"2\" tabindex=\"0\"></sp-tab>\n                <sp-tab label=\"Tab 3\" value=\"3\" tabindex=\"0\"></sp-tab>\n                <sp-tab label=\"Tab 4\" value=\"4\" tabindex=\"0\"></sp-tab>\n            </sp-tab-list>\n        `;\n    })\n    .add('Icons', () => {\n        const directions = {\n            horizontal: 'horizontal',\n            vertical: 'vertical',\n        };\n        const type = radios('Type', directions, directions.horizontal);\n        return html`\n            <sp-icons-medium></sp-icons-medium>\n            <sp-tab-list selected=\"1\" direction=\"${type}\">\n                <sp-tab label=\"Tab 1\" value=\"1\" tabindex=\"0\">\n                    <sp-icon\n                        slot=\"icon\"\n                        size=\"m\"\n                        name=\"ui:CheckmarkSmall\"\n                    ></sp-icon>\n                </sp-tab>\n                <sp-tab label=\"Tab 2\" value=\"2\" tabindex=\"0\">\n                    <sp-icon\n                        slot=\"icon\"\n                        size=\"m\"\n                        name=\"ui:CrossSmall\"\n                    ></sp-icon>\n                </sp-tab>\n                <sp-tab label=\"Tab 3\" value=\"3\" tabindex=\"0\">\n                    <sp-icon\n                        slot=\"icon\"\n                        size=\"m\"\n                        name=\"ui:ChevronDownSmall\"\n                    ></sp-icon>\n                </sp-tab>\n                <sp-tab label=\"Tab 4\" value=\"4\" tabindex=\"0\">\n                    <sp-icon slot=\"icon\" size=\"m\" name=\"ui:HelpSmall\"></sp-icon>\n                </sp-tab>\n            </sp-tab-list>\n        `;\n    })\n    .add('Quiet', () => {\n        const directions = {\n            horizontal: 'horizontal',\n            vertical: 'vertical',\n        };\n        const type = radios('Type', directions, directions.horizontal);\n        return html`\n            <sp-tab-list selected=\"1\" quiet direction=\"${type}\">\n                <sp-tab label=\"Tab 1\" value=\"1\" tabindex=\"0\"></sp-tab>\n                <sp-tab label=\"Tab 2\" value=\"2\" tabindex=\"0\"></sp-tab>\n                <sp-tab label=\"Tab 3\" value=\"3\" tabindex=\"0\"></sp-tab>\n                <sp-tab label=\"Tab 4\" value=\"4\" tabindex=\"0\"></sp-tab>\n            </sp-tab-list>\n        `;\n    })\n    .add('Compact', () => {\n        const directions = {\n            horizontal: 'horizontal',\n            vertical: 'vertical',\n        };\n        const type = radios('Type', directions, directions.horizontal);\n        return html`\n            <sp-tab-list selected=\"1\" compact direction=\"${type}\">\n                <sp-tab label=\"Tab 1\" value=\"1\" tabindex=\"0\"></sp-tab>\n                <sp-tab label=\"Tab 2\" value=\"2\" tabindex=\"0\"></sp-tab>\n                <sp-tab label=\"Tab 3\" value=\"3\" tabindex=\"0\"></sp-tab>\n                <sp-tab label=\"Tab 4\" value=\"4\" tabindex=\"0\"></sp-tab>\n            </sp-tab-list>\n        `;\n    })\n    .add('Quiet Compact', () => {\n        const directions = {\n            horizontal: 'horizontal',\n            vertical: 'vertical',\n        };\n        const type = radios('Type', directions, directions.horizontal);\n        return html`\n            <sp-tab-list selected=\"1\" quiet compact direction=\"${type}\">\n                <sp-tab label=\"Tab 1\" value=\"1\" tabindex=\"0\"></sp-tab>\n                <sp-tab label=\"Tab 2\" value=\"2\" tabindex=\"0\"></sp-tab>\n                <sp-tab label=\"Tab 3\" value=\"3\" tabindex=\"0\"></sp-tab>\n                <sp-tab label=\"Tab 4\" value=\"4\" tabindex=\"0\"></sp-tab>\n            </sp-tab-list>\n        `;\n    });\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { storiesOf } from '@storybook/polymer';\nimport { html } from 'lit-html';\nimport { withKnobs, boolean, radios, text } from '@storybook/addon-knobs';\nimport * as MediumIcons from '../src/icons/icons-medium';\n\nimport { defineCustomElements, Icon } from '../src';\n\nimport '../src/button';\nimport '../src/switch';\nimport '../src/slider';\nimport '../src/themes';\n\ndefineCustomElements(Icon, ...Object.values(MediumIcons));\n\nstoriesOf('Theme', module)\n    .addDecorator(withKnobs)\n    .add('Default', () => {\n        const colorOptions = {\n            Light: 'light',\n            Dark: 'dark',\n        };\n        const color = radios('Color stop', colorOptions, colorOptions.Light);\n        return html`\n            <style color=\"text/css\">\n                #example {\n                    width: 500px;\n                    padding: 3em;\n                    background-color: var(--spectrum-global-color-gray-100);\n                    color: var(--spectrum-global-color-gray-800);\n                }\n\n                #buttons {\n                    margin-top: 2em;\n                }\n            </style>\n            <sp-theme color=\"${color}\">\n                <div id=\"example\">\n                    <div>\n                        <sp-slider\n                            value=\"5\"\n                            step=\"1\"\n                            min=\"1\"\n                            max=\"11\"\n                            label=\"Volume\"\n                            id=\"volume-slider\"\n                        ></sp-slider>\n                    </div>\n                    <div><sp-switch>Overdrive</sp-switch></div>\n                    <div id=\"buttons\">\n                        <sp-button variant=\"primary\">Cancel</sp-button>\n                        <sp-button variant=\"cta\">Continue</sp-button>\n                    </div>\n                </div>\n            </sp-theme>\n        `;\n    })\n    .add('Nested theme', () => {\n        const colorOptions = {\n            Light: 'light',\n            Dark: 'dark',\n        };\n        const outer = radios(\n            'Outer color stop',\n            colorOptions,\n            colorOptions.Light\n        );\n        const inner = outer === 'light' ? 'dark' : 'light';\n        return html`\n            <style type=\"text/css\">\n                #outer {\n                    width: 500px;\n                    padding: 3em;\n                    background-color: var(--spectrum-global-color-gray-100);\n                    color: var(--spectrum-global-color-gray-800);\n                }\n\n                #inner {\n                    margin-top: 2em;\n                    padding: 2em;\n                    background-color: var(--spectrum-global-color-gray-100);\n                    color: var(--spectrum-global-color-gray-800);\n                }\n\n                #buttons {\n                    margin-top: 2em;\n                }\n            </style>\n            <sp-theme color=\"${outer}\">\n                <div id=\"outer\">\n                    <div>\n                        <sp-slider\n                            value=\"5\"\n                            step=\"1\"\n                            min=\"1\"\n                            max=\"11\"\n                            label=\"Volume\"\n                            id=\"volume-slider\"\n                        ></sp-slider>\n                    </div>\n                    <div><sp-switch>Overdrive</sp-switch></div>\n                    <div id=\"buttons\">\n                        <sp-button variant=\"primary\">Cancel</sp-button>\n                        <sp-button variant=\"cta\">Continue</sp-button>\n                    </div>\n                    <sp-theme color=\"${inner}\">\n                        <div id=\"inner\">\n                            <div>\n                                <sp-slider\n                                    value=\"5\"\n                                    step=\"1\"\n                                    min=\"1\"\n                                    max=\"11\"\n                                    label=\"Volume\"\n                                    id=\"volume-slider-inner\"\n                                ></sp-slider>\n                            </div>\n                            <div><sp-switch>Overdrive</sp-switch></div>\n                            <div id=\"buttons-inner\">\n                                <sp-button variant=\"primary\">Cancel</sp-button>\n                                <sp-button variant=\"cta\">Continue</sp-button>\n                            </div>\n                        </div>\n                    </sp-theme>\n                </div>\n            </sp-theme>\n        `;\n    })\n    .add('Nested color', () => {\n        return html`\n            <style type=\"text/css\">\n                #outer {\n                    width: 500px;\n                    padding: 3em;\n                    background-color: var(--spectrum-global-color-gray-100);\n                    color: var(--spectrum-global-color-gray-800);\n                }\n\n                #inner {\n                    margin-top: 2em;\n                    padding: 2em;\n                    background-color: var(--spectrum-global-color-gray-100);\n                    color: var(--spectrum-global-color-gray-800);\n                }\n\n                #buttons {\n                    margin-top: 2em;\n                }\n            </style>\n            <sp-theme color=\"dark\">\n                <div id=\"outer\">\n                    <div>\n                        <sp-slider\n                            value=\"5\"\n                            step=\"1\"\n                            min=\"1\"\n                            max=\"11\"\n                            label=\"Volume\"\n                            id=\"volume-slider\"\n                        ></sp-slider>\n                    </div>\n                    <div><sp-switch>Overdrive</sp-switch></div>\n                    <div id=\"buttons\">\n                        <sp-button variant=\"primary\">Cancel</sp-button>\n                        <sp-button variant=\"cta\">Continue</sp-button>\n                    </div>\n                    <sp-theme-light>\n                        <div id=\"inner\">\n                            <div>\n                                <sp-slider\n                                    value=\"5\"\n                                    step=\"1\"\n                                    min=\"1\"\n                                    max=\"11\"\n                                    label=\"Volume\"\n                                    id=\"volume-slider-inner\"\n                                ></sp-slider>\n                            </div>\n                            <div><sp-switch>Overdrive</sp-switch></div>\n                            <div id=\"buttons-inner\">\n                                <sp-button variant=\"primary\">Cancel</sp-button>\n                                <sp-button variant=\"cta\">Continue</sp-button>\n                            </div>\n                        </div>\n                    </sp-theme-light>\n                </div>\n            </sp-theme>\n        `;\n    });\n","import { css } from 'lit-element';\nconst styles = css`\n:host,:root{--spectrum-global-color-celery-400:#44b556;--spectrum-global-color-celery-500:#4bc35f;--spectrum-global-color-celery-600:#51d267;--spectrum-global-color-celery-700:#58e06f;--spectrum-global-color-chartreuse-400:#85d044;--spectrum-global-color-chartreuse-500:#8ede49;--spectrum-global-color-chartreuse-600:#9bec54;--spectrum-global-color-chartreuse-700:#a3f858;--spectrum-global-color-yellow-400:#dfbf00;--spectrum-global-color-yellow-500:#edcc00;--spectrum-global-color-yellow-600:#fad900;--spectrum-global-color-yellow-700:#ffe22e;--spectrum-global-color-magenta-400:#d83790;--spectrum-global-color-magenta-500:#e2499d;--spectrum-global-color-magenta-600:#ec5aaa;--spectrum-global-color-magenta-700:#f56bb7;--spectrum-global-color-fuchsia-400:#c038cc;--spectrum-global-color-fuchsia-500:#cf3edc;--spectrum-global-color-fuchsia-600:#d951e5;--spectrum-global-color-fuchsia-700:#e366ef;--spectrum-global-color-purple-400:#9256d9;--spectrum-global-color-purple-500:#9d64e1;--spectrum-global-color-purple-600:#a873e9;--spectrum-global-color-purple-700:#b483f0;--spectrum-global-color-indigo-400:#6767ec;--spectrum-global-color-indigo-500:#7575f1;--spectrum-global-color-indigo-600:#8282f6;--spectrum-global-color-indigo-700:#9090fa;--spectrum-global-color-seafoam-400:#1b959a;--spectrum-global-color-seafoam-500:#20a3a8;--spectrum-global-color-seafoam-600:#23b2b8;--spectrum-global-color-seafoam-700:#26c0c7;--spectrum-global-color-red-400:#e34850;--spectrum-global-color-red-500:#ec5b62;--spectrum-global-color-red-600:#f76d74;--spectrum-global-color-red-700:#ff7b82;--spectrum-global-color-orange-400:#e68619;--spectrum-global-color-orange-500:#f29423;--spectrum-global-color-orange-600:#f9a43f;--spectrum-global-color-orange-700:#ffb55b;--spectrum-global-color-green-400:#2d9d78;--spectrum-global-color-green-500:#33ab84;--spectrum-global-color-green-600:#39b990;--spectrum-global-color-green-700:#3fc89c;--spectrum-global-color-blue-400:#2680eb;--spectrum-global-color-blue-500:#378ef0;--spectrum-global-color-blue-600:#4b9cf5;--spectrum-global-color-blue-700:#5aa9fa;--spectrum-global-color-gray-50:#252525;--spectrum-alias-pasteboard-background-color:#252525;--spectrum-global-color-gray-75:#2f2f2f;--spectrum-global-color-gray-100:#323232;--spectrum-global-color-gray-200:#3e3e3e;--spectrum-global-color-gray-300:#4a4a4a;--spectrum-global-color-gray-400:#5a5a5a;--spectrum-global-color-gray-500:#6e6e6e;--spectrum-global-color-gray-600:#909090;--spectrum-global-color-gray-700:#b9b9b9;--spectrum-global-color-gray-800:#e3e3e3;--spectrum-global-color-gray-900:#fff;--spectrum-alias-background-color-modal-overlay:rgba(0,0,0,0.5);--spectrum-alias-dropshadow-color:rgba(0,0,0,0.5);--spectrum-alias-background-color-hover-overlay:hsla(0,0%,100%,0.06);--spectrum-alias-highlight-hover:hsla(0,0%,100%,0.07);--spectrum-alias-highlight-active:hsla(0,0%,100%,0.1);--spectrum-colorarea-border-color:hsla(0,0%,100%,0.1);--spectrum-alias-highlight-selected:rgba(55,142,240,0.15);--spectrum-alias-highlight-selected-hover:rgba(55,142,240,0.25);--spectrum-alias-background-color-quickactions:rgba(50,50,50,0.9);--spectrum-alias-radial-reaction-color-default:hsla(0,0%,89%,0.6);--spectrum-miller-column-item-background-color-selected:rgba(55,142,240,0.1);--spectrum-miller-column-item-background-color-selected-hover:rgba(55,142,240,0.2);--spectrum-well-background-color:hsla(0,0%,89%,0.02);--spectrum-well-border-color:hsla(0,0%,100%,0.05)}:host{display:block}\n`;\nexport default styles;","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { LitElement, CSSResultArray, html, TemplateResult } from 'lit-element';\nimport darkStyles from './theme-dark.css';\n\nexport class ThemeDark extends LitElement {\n    public static get styles(): CSSResultArray {\n        return [darkStyles];\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            <slot></slot>\n        `;\n    }\n}\n","import { css } from 'lit-element';\nconst styles = css`\n:host,:root{--spectrum-global-color-celery-400:#44b556;--spectrum-global-color-celery-500:#3da74e;--spectrum-global-color-celery-600:#379947;--spectrum-global-color-celery-700:#318b40;--spectrum-global-color-chartreuse-400:#85d044;--spectrum-global-color-chartreuse-500:#7cc33f;--spectrum-global-color-chartreuse-600:#73b53a;--spectrum-global-color-chartreuse-700:#6aa834;--spectrum-global-color-yellow-400:#dfbf00;--spectrum-global-color-yellow-500:#d2b200;--spectrum-global-color-yellow-600:#c4a600;--spectrum-global-color-yellow-700:#b79900;--spectrum-global-color-magenta-400:#d83790;--spectrum-global-color-magenta-500:#ce2783;--spectrum-global-color-magenta-600:#bc1c74;--spectrum-global-color-magenta-700:#ae0e66;--spectrum-global-color-fuchsia-400:#c038cc;--spectrum-global-color-fuchsia-500:#b130bd;--spectrum-global-color-fuchsia-600:#a228ad;--spectrum-global-color-fuchsia-700:#93219e;--spectrum-global-color-purple-400:#9256d9;--spectrum-global-color-purple-500:#864ccc;--spectrum-global-color-purple-600:#7a42bf;--spectrum-global-color-purple-700:#6f38b1;--spectrum-global-color-indigo-400:#6767ec;--spectrum-global-color-indigo-500:#5c5ce0;--spectrum-global-color-indigo-600:#5151d3;--spectrum-global-color-indigo-700:#4646c6;--spectrum-global-color-seafoam-400:#1b959a;--spectrum-global-color-seafoam-500:#16878c;--spectrum-global-color-seafoam-600:#0f797d;--spectrum-global-color-seafoam-700:#096c6f;--spectrum-global-color-red-400:#e34850;--spectrum-global-color-red-500:#d7373f;--spectrum-global-color-red-600:#c9252d;--spectrum-global-color-red-700:#bb121a;--spectrum-global-color-orange-400:#e68619;--spectrum-global-color-orange-500:#da7b11;--spectrum-global-color-orange-600:#cb6f10;--spectrum-global-color-orange-700:#bd640d;--spectrum-global-color-green-400:#2d9d78;--spectrum-global-color-green-500:#268e6c;--spectrum-global-color-green-600:#12805c;--spectrum-global-color-green-700:#107154;--spectrum-global-color-blue-400:#2680eb;--spectrum-global-color-blue-500:#1473e6;--spectrum-global-color-blue-600:#0d66d0;--spectrum-global-color-blue-700:#095aba;--spectrum-global-color-gray-50:#fff;--spectrum-alias-pasteboard-background-color:#e1e1e1;--spectrum-global-color-gray-75:#fafafa;--spectrum-global-color-gray-100:#f5f5f5;--spectrum-global-color-gray-200:#eaeaea;--spectrum-global-color-gray-300:#e1e1e1;--spectrum-global-color-gray-400:#cacaca;--spectrum-global-color-gray-500:#b3b3b3;--spectrum-global-color-gray-600:#8e8e8e;--spectrum-global-color-gray-700:#6e6e6e;--spectrum-global-color-gray-800:#4b4b4b;--spectrum-global-color-gray-900:#2c2c2c;--spectrum-alias-background-color-modal-overlay:rgba(0,0,0,0.4);--spectrum-alias-dropshadow-color:rgba(0,0,0,0.15);--spectrum-alias-background-color-hover-overlay:rgba(44,44,44,0.04);--spectrum-alias-highlight-hover:rgba(44,44,44,0.06);--spectrum-alias-highlight-active:rgba(44,44,44,0.1);--spectrum-colorarea-border-color:rgba(44,44,44,0.1);--spectrum-alias-highlight-selected:rgba(20,115,230,0.1);--spectrum-alias-highlight-selected-hover:rgba(20,115,230,0.2);--spectrum-alias-background-color-quickactions:hsla(0,0%,96.1%,0.9);--spectrum-alias-radial-reaction-color-default:rgba(75,75,75,0.6);--spectrum-miller-column-item-background-color-selected:rgba(20,115,230,0.1);--spectrum-miller-column-item-background-color-selected-hover:rgba(20,115,230,0.2);--spectrum-well-background-color:rgba(75,75,75,0.02);--spectrum-well-border-color:rgba(44,44,44,0.05)}:host{display:block}\n`;\nexport default styles;","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { LitElement, CSSResultArray, html, TemplateResult } from 'lit-element';\nimport lightStyles from './theme-light.css';\n\nexport class ThemeLight extends LitElement {\n    public static get styles(): CSSResultArray {\n        return [lightStyles];\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            <slot></slot>\n        `;\n    }\n}\n","import { css } from 'lit-element';\nconst styles = css`\n:host,:root{--spectrum-global-dimension-scale-factor:1;--spectrum-global-dimension-size-40:3px;--spectrum-actionbutton-touch-hit-x:8px;--spectrum-dropdown-quiet-touch-hit-y:32px;--spectrum-selectlist-option-icon-margin-top:5px;--spectrum-global-dimension-size-50:4px;--spectrum-global-dimension-size-65:5px;--spectrum-global-dimension-size-75:6px;--spectrum-colorhandle-loupe-margin:10px;--spectrum-radio-margin-bottom:0px;--spectrum-global-dimension-size-85:7px;--spectrum-colorslider-touch-hit-y:12px;--spectrum-global-dimension-size-100:8px;--spectrum-icon-skip-left-width:9px;--spectrum-global-dimension-size-115:9px;--spectrum-global-dimension-size-125:10px;--spectrum-global-dimension-font-size-50:11px;--spectrum-global-dimension-size-130:11px;--spectrum-slider-handle-touch-hit-x:16px;--spectrum-global-dimension-size-150:12px;--spectrum-dialog-content-text-size:14px;--spectrum-global-dimension-size-160:13px;--spectrum-icon-checkmark-medium-width:12px;--spectrum-selectlist-option-icon-padding-y:10px;--spectrum-global-dimension-size-175:14px;--spectrum-global-dimension-font-size-150:15px;--spectrum-global-dimension-size-200:16px;--spectrum-fieldbutton-quiet-min-width:18px;--spectrum-global-dimension-size-225:18px;--spectrum-alias-heading3-margin-top:20px;--spectrum-global-dimension-size-250:20px;--spectrum-tabs-baseline:18px;--spectrum-global-dimension-size-300:24px;--spectrum-global-dimension-size-350:28px;--spectrum-global-dimension-size-400:32px;--spectrum-dialog-content-margin-bottom:48px;--spectrum-global-dimension-size-450:36px;--spectrum-global-dimension-size-500:40px;--spectrum-global-dimension-size-550:44px;--spectrum-global-dimension-size-600:48px;--spectrum-global-dimension-size-700:56px;--spectrum-global-dimension-size-800:64px;--spectrum-global-dimension-size-900:72px;--spectrum-global-dimension-size-1000:80px;--spectrum-global-dimension-size-1200:96px;--spectrum-global-dimension-size-1600:128px;--spectrum-global-dimension-size-1700:136px;--spectrum-global-dimension-size-2400:192px;--spectrum-global-dimension-size-3000:240px;--spectrum-global-dimension-size-3400:272px;--spectrum-global-dimension-size-3600:288px;--spectrum-global-dimension-size-4600:368px;--spectrum-global-dimension-size-5000:400px;--spectrum-global-dimension-size-6000:480px;--spectrum-global-dimension-font-size-25:10px;--spectrum-checkbox-text-gap-key-focus:9px;--spectrum-global-dimension-font-size-100:14px;--spectrum-global-dimension-font-size-200:16px;--spectrum-dialog-title-text-size:18px;--spectrum-global-dimension-font-size-400:20px;--spectrum-alias-heading3-text-size:22px;--spectrum-dialog-padding:40px;--spectrum-global-dimension-font-size-500:22px;--spectrum-alias-heading2-margin-top:25px;--spectrum-global-dimension-font-size-600:25px;--spectrum-alias-heading2-text-size:28px;--spectrum-global-dimension-font-size-700:28px;--spectrum-alias-heading1-margin-top:32px;--spectrum-global-dimension-font-size-800:32px;--spectrum-alias-heading-display2-margin-top:36px;--spectrum-global-dimension-font-size-900:36px;--spectrum-alias-heading-display1-margin-top:40px;--spectrum-global-dimension-font-size-1000:40px;--spectrum-alias-heading-display1-text-size:45px;--spectrum-global-dimension-font-size-1100:45px;--spectrum-barloader-small-border-radius:2px;--spectrum-pagination-page-button-line-height:26px;--spectrum-button-cta-min-width:72px;--spectrum-selectlist-option-height:32px;--spectrum-colorwheel-min-size:192px;--spectrum-dialog-max-width:480px;--spectrum-switch-track-width:26px;--spectrum-tabs-compact-margin-left:-8px;--spectrum-tooltip-content-max-width:101px}:host{display:block}\n`;\nexport default styles;","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { LitElement, CSSResultArray, html, TemplateResult } from 'lit-element';\nimport mediumStyles from './scale-medium.css';\n\nexport class ScaleMedium extends LitElement {\n    public static get styles(): CSSResultArray {\n        return [mediumStyles];\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            <slot></slot>\n        `;\n    }\n}\n","import { css } from 'lit-element';\nconst styles = css`\n:host,:root{--spectrum-global-color-static-black:#000;--spectrum-global-color-static-white:#fff;--spectrum-global-color-static-blue:#1473e6;--spectrum-global-color-static-gray-50:#fff;--spectrum-global-color-static-gray-75:#fff;--spectrum-global-color-static-gray-100:#fff;--spectrum-global-color-static-gray-200:#f4f4f4;--spectrum-global-color-static-gray-300:#eaeaea;--spectrum-global-color-static-gray-400:#d3d3d3;--spectrum-global-color-static-gray-500:#bcbcbc;--spectrum-global-color-static-gray-600:#959595;--spectrum-global-color-static-gray-700:#747474;--spectrum-global-color-static-gray-800:#505050;--spectrum-global-color-static-gray-900:#323232;--spectrum-global-color-static-blue-400:#378ef0;--spectrum-global-color-static-blue-500:#2680eb;--spectrum-global-color-static-blue-600:#1473e6;--spectrum-global-color-static-blue-700:#0d66d0;--spectrum-global-color-static-red-400:#ec5b62;--spectrum-global-color-static-red-500:#e34850;--spectrum-global-color-static-red-600:#d7373f;--spectrum-global-color-static-red-700:#c9252d;--spectrum-global-color-static-orange-400:#f29423;--spectrum-global-color-static-orange-500:#e68619;--spectrum-global-color-static-orange-600:#da7b11;--spectrum-global-color-static-orange-700:#cb6f10;--spectrum-global-color-static-green-400:#33ab84;--spectrum-global-color-static-green-500:#2d9d78;--spectrum-global-color-static-green-600:#268e6c;--spectrum-global-color-static-green-700:#12805c;--spectrum-global-color-opacity-100:1;--spectrum-global-color-opacity-90:0.9;--spectrum-global-color-opacity-80:0.8;--spectrum-global-color-opacity-60:0.6;--spectrum-global-color-opacity-50:0.5;--spectrum-global-color-opacity-40:0.4;--spectrum-global-color-opacity-30:0.3;--spectrum-global-color-opacity-25:0.25;--spectrum-global-color-opacity-20:0.2;--spectrum-global-color-opacity-15:0.15;--spectrum-global-color-opacity-10:0.1;--spectrum-global-color-opacity-8:0.08;--spectrum-global-color-opacity-7:0.07;--spectrum-global-color-opacity-6:0.06;--spectrum-global-color-opacity-5:0.05;--spectrum-global-color-opacity-4:0.04;--spectrum-global-font-family-base:adobe-clean,\"Source Sans Pro\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Trebuchet MS\",\"Lucida Grande\",sans-serif;--spectrum-global-font-family-serif:adobe-clean-serif,\"Source Serif Pro\",Georgia,serif;--spectrum-global-font-family-code:\"Source Code Pro\",Monaco,monospace;--spectrum-global-font-weight-thin:100;--spectrum-global-font-weight-ultra-light:200;--spectrum-global-font-weight-light:300;--spectrum-global-font-weight-regular:400;--spectrum-global-font-weight-medium:500;--spectrum-global-font-weight-semi-bold:600;--spectrum-global-font-weight-bold:700;--spectrum-global-font-weight-extra-bold:800;--spectrum-global-font-weight-black:900;--spectrum-global-font-style-regular:normal;--spectrum-global-font-style-italic:italic;--spectrum-global-font-letter-spacing-none:0;--spectrum-global-font-letter-spacing-small:0.0125em;--spectrum-global-font-letter-spacing-han:0.05em;--spectrum-global-font-letter-spacing-medium:0.06em;--spectrum-global-font-line-height-large:1.7;--spectrum-global-font-line-height-medium:1.5;--spectrum-global-font-line-height-small:1.3;--spectrum-global-font-multiplier-25:0.25em;--spectrum-global-font-multiplier-75:0.75em;--spectrum-global-dimension-static-size-0:0px;--spectrum-global-dimension-static-size-10:1px;--spectrum-global-dimension-static-size-25:2px;--spectrum-global-dimension-static-size-50:4px;--spectrum-global-dimension-static-size-40:3px;--spectrum-global-dimension-static-size-65:5px;--spectrum-global-dimension-static-size-100:8px;--spectrum-global-dimension-static-size-115:9px;--spectrum-global-dimension-static-size-125:10px;--spectrum-global-dimension-static-size-150:12px;--spectrum-global-dimension-static-size-175:14px;--spectrum-global-dimension-static-size-200:16px;--spectrum-global-dimension-static-size-225:18px;--spectrum-global-dimension-static-size-250:20px;--spectrum-global-dimension-static-size-300:24px;--spectrum-global-dimension-static-size-400:32px;--spectrum-global-dimension-static-size-450:36px;--spectrum-global-dimension-static-size-500:40px;--spectrum-global-dimension-static-size-550:44px;--spectrum-global-dimension-static-size-600:48px;--spectrum-global-dimension-static-size-700:56px;--spectrum-global-dimension-static-size-800:64px;--spectrum-global-dimension-static-size-900:72px;--spectrum-global-dimension-static-size-1000:80px;--spectrum-global-dimension-static-size-1200:96px;--spectrum-global-dimension-static-size-1700:136px;--spectrum-global-dimension-static-size-2400:192px;--spectrum-global-dimension-static-size-2600:208px;--spectrum-global-dimension-static-size-3400:272px;--spectrum-global-dimension-static-size-3600:288px;--spectrum-global-dimension-static-size-4600:368px;--spectrum-global-dimension-static-size-5000:400px;--spectrum-global-dimension-static-size-6000:480px;--spectrum-global-dimension-static-font-size-50:11px;--spectrum-global-dimension-static-font-size-75:12px;--spectrum-global-dimension-static-font-size-100:14px;--spectrum-global-dimension-static-font-size-150:15px;--spectrum-global-dimension-static-font-size-200:16px;--spectrum-global-dimension-static-font-size-300:18px;--spectrum-global-dimension-static-font-size-400:20px;--spectrum-global-dimension-static-font-size-500:22px;--spectrum-global-dimension-static-font-size-600:25px;--spectrum-global-dimension-static-font-size-700:28px;--spectrum-global-dimension-static-font-size-800:32px;--spectrum-global-dimension-static-font-size-900:36px;--spectrum-global-dimension-static-font-size-1000:40px;--spectrum-global-dimension-static-percent-50:50%;--spectrum-global-dimension-static-percent-100:100%;--spectrum-global-dimension-static-breakpoint-xsmall:304px;--spectrum-global-dimension-static-breakpoint-small:768px;--spectrum-global-dimension-static-breakpoint-medium:1280px;--spectrum-global-dimension-static-breakpoint-large:1768px;--spectrum-global-dimension-static-breakpoint-xlarge:2160px;--spectrum-global-dimension-static-grid-columns:12;--spectrum-global-dimension-static-grid-fluid-width:100%;--spectrum-global-dimension-static-grid-fixed-max-width:1280px;--spectrum-global-animation-duration-0:0ms;--spectrum-global-animation-duration-100:130ms;--spectrum-global-animation-duration-200:160ms;--spectrum-global-animation-duration-300:190ms;--spectrum-global-animation-duration-400:220ms;--spectrum-global-animation-duration-500:250ms;--spectrum-global-animation-duration-600:300ms;--spectrum-global-animation-duration-700:350ms;--spectrum-global-animation-duration-800:400ms;--spectrum-global-animation-duration-900:450ms;--spectrum-global-animation-duration-1000:500ms;--spectrum-global-animation-duration-2000:1000ms;--spectrum-global-animation-duration-4000:2000ms;--spectrum-global-animation-ease-in-out:(0.45,0,0.4,1);--spectrum-global-animation-ease-in:(0.5,0,1,1);--spectrum-global-animation-ease-out:(0,0,0.4,1);--spectrum-global-animation-linear:(0,0,1,1);font-family:var(--spectrum-global-font-family-base);font-size:var(--spectrum-alias-font-size-default);--spectrum-font-fallbacks-sans:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,sans-serif;--spectrum-font-fallbacks-serif:serif;--spectrum-font-fallbacks-mono:monospace;--spectrum-font-family-ar:myriad-arabic,var(--spectrum-font-fallbacks-sans);--spectrum-font-family-article:adobe-clean-serif,\"Source Serif\",var(--spectrum-font-fallbacks-serif);--spectrum-font-family-article-ar:adobe-arabic,var(--spectrum-font-fallbacks-serif);--spectrum-font-family-article-he:adobe-hebrew,var(--spectrum-font-fallbacks-serif);--spectrum-font-family-article-ja:source-han-serif-japanese,var(--spectrum-font-fallbacks-serif);--spectrum-font-family-article-ko:source-han-serif-korean,var(--spectrum-font-fallbacks-serif);--spectrum-font-family-article-zh-hans:source-han-serif-sc,var(--spectrum-font-fallbacks-serif);--spectrum-font-family-article-zh-hant:source-han-serif-tc,var(--spectrum-font-fallbacks-serif);--spectrum-font-family-base:adobe-clean,\"Source Sans Pro\",var(--spectrum-font-fallbacks-sans);--spectrum-font-family-code:source-code-pro,\"Source Code Pro\",var(--spectrum-font-fallbacks-mono);--spectrum-font-family-han:adobe-clean-han-japanese,var(--spectrum-font-fallbacks-sans);--spectrum-font-family-he:var(--spectrum-font-fallbacks-sans);--spectrum-font-family-zh:var(--spectrum-font-family-han);--spectrum-font-family-zhhans:var(--spectrum-font-family-han);--spectrum-font-family-ko:var(--spectrum-font-family-han);--spectrum-font-family-ja:var(--spectrum-font-family-han);--spectrum-font-family-condensed:adobe-clean-condensed,var(--spectrum-font-family-base);--spectrum-text-size:var(--spectrum-alias-font-size-default);--spectrum-text-body-line-height:var(--spectrum-alias-line-height-medium);--spectrum-text-size-text-label:var(--spectrum-label-text-size);--spectrum-line-height-text-label:var(--spectrum-label-text-line-height)}:host{position:relative;display:block}#scale,#theme{width:100%;height:100%}\n`;\nexport default styles;","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    LitElement,\n    CSSResultArray,\n    html,\n    TemplateResult,\n    property,\n} from 'lit-element';\nimport commonStyles from './theme.css';\n\nexport class Theme extends LitElement {\n    /**\n     * The color theme to apply to Spectrum controls\n     */\n    @property({ reflect: true })\n    public color: 'light' | 'dark' = 'light';\n\n    /**\n     * The scale to apply to Spectrum controls. Currently only medium is supported\n     */\n    @property({ reflect: true })\n    public scale: 'medium' = 'medium';\n\n    public static get styles(): CSSResultArray {\n        return [commonStyles];\n    }\n\n    private renderTheme(children: TemplateResult): TemplateResult {\n        let result;\n        if (this.color === 'light') {\n            result = html`\n                <sp-theme-light id=\"theme\">${children}</sp-theme-light>\n            `;\n        } else if (this.color === 'dark') {\n            result = html`\n                <sp-theme-dark id=\"theme\">${children}</sp-theme-dark>\n            `;\n        } else {\n            console.warn(`Unknown color ${this.color} for sp-theme`);\n            return children;\n        }\n        if (!customElements.get(`sp-theme-${this.color}`)) {\n            console.warn(\n                `Theme component sp-theme-${this.color} has not been registered`\n            );\n        }\n        return result;\n    }\n\n    private renderScale(children: TemplateResult): TemplateResult {\n        let result;\n        if (this.scale === 'medium') {\n            result = html`\n                <sp-scale-medium id=\"scale\">${children}</sp-scale-medium>\n            `;\n        } else {\n            console.warn(`Unknown scale ${this.scale} for sp-theme`);\n            return children;\n        }\n        if (!customElements.get(`sp-theme-${this.color}`)) {\n            console.warn(\n                `Theme component sp-scale-${this.scale} has not been registered`\n            );\n        }\n        return result;\n    }\n\n    protected render(): TemplateResult {\n        return this.renderTheme(\n            this.renderScale(\n                html`\n                    <slot></slot>\n                `\n            )\n        );\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\n// Borrowed from react-spectrum project\n\ninterface Scroll {\n    top: number;\n    left: number;\n    [index: string]: number;\n}\n\ninterface ContainerDimensions {\n    width: number;\n    height: number;\n    scroll: Scroll;\n    top: number;\n    left: number;\n    [index: string]: number | Scroll;\n}\n\ninterface Offset {\n    bottom: number;\n    height: number;\n    left: number;\n    right: number;\n    top: number;\n    width: number;\n    x: number;\n    y: number;\n    [index: string]: number;\n}\n\ninterface PlacementInfo {\n    axis: string;\n    crossAxis: string;\n    crossPlacement: string;\n    crossSize: string;\n    size: string;\n    placement: string;\n}\n\ninterface Margins {\n    top: number;\n    bottom: number;\n    left: number;\n    right: number;\n}\n\ninterface Position {\n    top: number;\n    bottom: number;\n    left: number;\n    right: number;\n    [index: string]: number;\n}\n\ninterface PossiblePosition {\n    top: number | null;\n    bottom: number | null;\n    left: number | null;\n    right: number | null;\n    [index: string]: number | null;\n}\n\ninterface ParsedPlacementCache {\n    [propName: string]: PlacementInfo;\n}\n\ninterface DirectionMap {\n    left: string;\n    top: string;\n    right: string;\n    bottom: string;\n    [index: string]: string;\n}\n\ninterface OrientationMap {\n    top: string;\n    left: string;\n    [index: string]: string;\n}\n\nexport interface PositionResult {\n    arrowOffsetLeft: number;\n    arrowOffsetTop: number;\n    maxHeight: number;\n    placement: string;\n    positionLeft: number;\n    positionTop: number;\n}\n\nconst AXIS: DirectionMap = {\n    bottom: 'top',\n    left: 'left',\n    right: 'left',\n    top: 'top',\n};\n\nconst FLIPPED_DIRECTION: DirectionMap = {\n    bottom: 'top',\n    left: 'right',\n    right: 'left',\n    top: 'bottom',\n};\n\nconst CROSS_AXIS: OrientationMap = {\n    left: 'top',\n    top: 'left',\n};\n\nconst AXIS_SIZE: OrientationMap = {\n    left: 'width',\n    top: 'height',\n};\n\nconst PARSED_PLACEMENT_CACHE: ParsedPlacementCache = {};\n\nfunction getContainerDimensions(\n    containerDOMNode: Element\n): ContainerDimensions {\n    let width;\n    let height;\n    let top = 0;\n    let left = 0;\n    const scroll: Scroll = { top: 0, left: 0 };\n\n    if (containerDOMNode.tagName === 'BODY') {\n        width = window.innerWidth;\n        height = window.innerHeight;\n\n        if (containerDOMNode.ownerDocument) {\n            scroll.top =\n                containerDOMNode.ownerDocument.documentElement.scrollTop;\n            scroll.left =\n                containerDOMNode.ownerDocument.documentElement.scrollLeft;\n        } else {\n            scroll.top = containerDOMNode.scrollTop;\n            scroll.left = containerDOMNode.scrollLeft;\n        }\n    } else {\n        ({\n            width,\n            height,\n            top,\n            left,\n        } = containerDOMNode.getBoundingClientRect() as DOMRect);\n        scroll.top = containerDOMNode.scrollTop;\n        scroll.left = containerDOMNode.scrollLeft;\n    }\n\n    return { width, height, scroll, top, left };\n}\n\nfunction getDelta(\n    axis: string,\n    offset: number,\n    size: number,\n    containerDimensions: ContainerDimensions,\n    padding: number\n): number {\n    const containerScroll = containerDimensions.scroll[axis];\n    const containerHeight: number = containerDimensions[\n        AXIS_SIZE[axis]\n    ] as number;\n\n    const startEdgeOffset = offset - padding - containerScroll;\n    const endEdgeOffset: number = offset + padding - containerScroll + size;\n\n    if (startEdgeOffset < 0) {\n        return -startEdgeOffset;\n    } else if (endEdgeOffset > containerHeight) {\n        return Math.max(containerHeight - endEdgeOffset, -startEdgeOffset);\n    } else {\n        return 0;\n    }\n}\n\nfunction shouldFlip(\n    axis: string,\n    offset: number,\n    size: number,\n    padding: number,\n    placement: string,\n    flipContainerDimensions: ContainerDimensions,\n    containerOffsetWithBoundary: Offset\n): boolean {\n    const containerScroll = flipContainerDimensions.scroll[axis];\n    const containerHeight = flipContainerDimensions[AXIS_SIZE[axis]];\n\n    const startEdgeOffset =\n        containerOffsetWithBoundary[axis] + offset - padding - containerScroll;\n    const endEdgeOffset =\n        containerOffsetWithBoundary[axis] +\n        offset +\n        padding -\n        containerScroll +\n        size;\n\n    if (startEdgeOffset < 0 && (placement === 'top' || placement === 'left')) {\n        return true;\n    } else if (\n        endEdgeOffset > containerHeight &&\n        (placement === 'bottom' || placement === 'right')\n    ) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\nfunction getMargins(node: Element): Margins {\n    const style = window.getComputedStyle(node);\n    return {\n        bottom: parseInt(style.marginBottom as string, 10) || 0,\n        left: parseInt(style.marginLeft as string, 10) || 0,\n        right: parseInt(style.marginRight as string, 10) || 0,\n        top: parseInt(style.marginTop as string, 10) || 0,\n    };\n}\n\nfunction parsePlacement(input: string): PlacementInfo {\n    if (PARSED_PLACEMENT_CACHE[input]) {\n        return PARSED_PLACEMENT_CACHE[input];\n    }\n    const [placement] = input.split(' ');\n    let [, crossPlacement] = input.split(' ');\n    const axis = AXIS[placement] || 'right';\n    const crossAxis = CROSS_AXIS[axis];\n\n    if (!AXIS[crossPlacement]) {\n        crossPlacement = 'center';\n    }\n\n    const size = AXIS_SIZE[axis];\n    const crossSize = AXIS_SIZE[crossAxis];\n    PARSED_PLACEMENT_CACHE[input] = {\n        axis,\n        crossAxis,\n        crossPlacement,\n        crossSize,\n        placement,\n        size,\n    };\n    return PARSED_PLACEMENT_CACHE[input];\n}\n\nfunction computePosition(\n    childOffset: Offset,\n    containerDimensions: ContainerDimensions,\n    overlaySize: Offset,\n    placementInfo: PlacementInfo,\n    offset: number,\n    crossOffset: number\n): Position {\n    const {\n        axis,\n        crossAxis,\n        crossPlacement,\n        crossSize,\n        size,\n        placement,\n    } = placementInfo;\n\n    const position: Position = {\n        top: 0,\n        left: 0,\n        bottom: 0,\n        right: 0,\n    };\n\n    position[crossAxis] = childOffset[crossAxis] + crossOffset;\n    if (crossPlacement === 'center') {\n        position[crossAxis] +=\n            (childOffset[crossSize] - overlaySize[crossSize]) / 2;\n    } else if (crossPlacement !== crossAxis) {\n        position[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];\n    }\n\n    // Ensure overlay sticks to target(ignore for overlays smaller than target)\n    if (childOffset[crossSize] < overlaySize[crossSize]) {\n        const positionForPositiveSideOverflow = Math.min(\n            position[crossAxis],\n            childOffset[crossAxis]\n        );\n        position[crossAxis] = Math.max(\n            positionForPositiveSideOverflow,\n            childOffset[crossAxis] -\n                overlaySize[crossSize] +\n                childOffset[crossSize]\n        );\n    }\n\n    position[axis] =\n        placement === axis\n            ? childOffset[axis] - overlaySize[size] - offset\n            : childOffset[axis] + childOffset[size] + offset;\n\n    return position;\n}\n\nexport function calculatePositionInternal(\n    placementInput: string,\n    containerDimensions: ContainerDimensions,\n    childOffset: Offset,\n    overlaySize: Offset,\n    margins: Margins,\n    padding: number,\n    flip: boolean,\n    boundaryDimensions: ContainerDimensions,\n    containerOffsetWithBoundary: Offset,\n    offset: number,\n    crossOffset: number\n): PositionResult {\n    let placementInfo = parsePlacement(placementInput);\n    const {\n        axis,\n        size,\n        crossAxis,\n        crossSize,\n        placement,\n        crossPlacement,\n    } = placementInfo;\n    let position = computePosition(\n        childOffset,\n        containerDimensions,\n        overlaySize,\n        placementInfo,\n        offset,\n        crossOffset\n    );\n    let normalizedOffset = offset;\n\n    // First check if placement should be flipped\n    if (\n        flip &&\n        shouldFlip(\n            axis,\n            position[axis],\n            overlaySize[size],\n            padding,\n            placement,\n            boundaryDimensions,\n            containerOffsetWithBoundary\n        )\n    ) {\n        const flippedPlacementInfo = parsePlacement(\n            `${FLIPPED_DIRECTION[placement]} ${crossPlacement}`\n        );\n        const flippedAxis = flippedPlacementInfo.axis;\n        const flippedSize = flippedPlacementInfo.size;\n\n        const flippedPosition = computePosition(\n            childOffset,\n            containerDimensions,\n            overlaySize,\n            flippedPlacementInfo,\n            -1 * offset,\n            crossOffset\n        );\n\n        // Check if flipped placement has enough space otherwise flip is not possible\n        if (\n            !shouldFlip(\n                flippedAxis,\n                flippedPosition[flippedAxis],\n                overlaySize[flippedSize],\n                padding,\n                FLIPPED_DIRECTION[placement],\n                boundaryDimensions,\n                containerOffsetWithBoundary\n            )\n        ) {\n            placementInfo = flippedPlacementInfo;\n            position = flippedPosition;\n            normalizedOffset = -1 * offset;\n        }\n    }\n\n    let delta = getDelta(\n        crossAxis,\n        position[crossAxis],\n        overlaySize[crossSize],\n        boundaryDimensions,\n        padding\n    );\n    position[crossAxis] += delta;\n\n    const maxHeight = Math.max(\n        0,\n        boundaryDimensions.height +\n            boundaryDimensions.top +\n            boundaryDimensions.scroll.top -\n            containerOffsetWithBoundary.top -\n            position.top -\n            margins.top -\n            margins.bottom -\n            padding\n    );\n    overlaySize.height = Math.min(overlaySize.height, maxHeight);\n\n    position = computePosition(\n        childOffset,\n        containerDimensions,\n        overlaySize,\n        placementInfo,\n        normalizedOffset,\n        crossOffset\n    );\n    delta = delta = getDelta(\n        crossAxis,\n        position[crossAxis],\n        overlaySize[crossSize],\n        boundaryDimensions,\n        padding\n    );\n\n    position[crossAxis] += delta;\n\n    const arrowPosition: PossiblePosition = {\n        top: 0,\n        bottom: 0,\n        left: 0,\n        right: 0,\n    };\n    arrowPosition[crossAxis] =\n        childOffset[crossSize] > overlaySize[crossSize]\n            ? null\n            : childOffset[crossAxis] -\n              position[crossAxis] +\n              childOffset[crossSize] / 2;\n\n    return {\n        arrowOffsetLeft: arrowPosition.left || 0,\n        arrowOffsetTop: arrowPosition.top || 0,\n        maxHeight,\n        placement: placementInfo.placement,\n        positionLeft: position.left || 0,\n        positionTop: position.top || 0,\n    };\n}\n\nfunction getShadowPosition(\n    target: HTMLElement,\n    container: HTMLElement\n): Offset {\n    const targetPosition = target.getBoundingClientRect() as Offset;\n    const containerPosition = container.getBoundingClientRect() as Offset;\n    return {\n        bottom: targetPosition.bottom - containerPosition.bottom,\n        height: targetPosition.height,\n        left: targetPosition.left - containerPosition.left,\n        right: targetPosition.right - containerPosition.right,\n        top: targetPosition.top - containerPosition.top,\n        width: targetPosition.width,\n        x: targetPosition.x,\n        y: targetPosition.y,\n    };\n}\n\nexport default function calculatePosition(\n    placementInput: string,\n    overlayNode: HTMLElement,\n    target: HTMLElement,\n    container: HTMLElement,\n    padding: number,\n    flip: boolean,\n    boundariesElement: HTMLElement,\n    offset: number,\n    crossOffset: number\n): PositionResult {\n    const isBodyContainer = container.tagName === 'BODY';\n    const childOffset = isBodyContainer\n        ? (target.getBoundingClientRect() as Offset)\n        : (getShadowPosition(target, container) as Offset);\n\n    if (!isBodyContainer) {\n        childOffset.top += parseInt(target.style.marginTop as string, 10) || 0;\n        childOffset.left +=\n            parseInt(target.style.marginLeft as string, 10) || 0;\n    }\n\n    const {\n        top,\n        right,\n        bottom,\n        left,\n        width,\n        height,\n        x,\n        y,\n    } = overlayNode.getBoundingClientRect() as Offset;\n    const overlaySize = { top, right, bottom, left, width, height, x, y };\n    const margins = getMargins(overlayNode);\n    overlaySize.width += margins.left + margins.right;\n    overlaySize.height += margins.top + margins.bottom;\n\n    const containerDimensions = getContainerDimensions(container);\n    const boundaryContainer = container;\n    const boundaryDimensions = getContainerDimensions(boundaryContainer);\n    const containerOffsetWithBoundary =\n        boundaryContainer.tagName === 'BODY'\n            ? (container.getBoundingClientRect() as Offset)\n            : (getShadowPosition(container, boundaryContainer) as Offset);\n    return calculatePositionInternal(\n        placementInput,\n        containerDimensions,\n        childOffset,\n        overlaySize,\n        margins,\n        padding,\n        flip,\n        boundaryDimensions,\n        containerOffsetWithBoundary,\n        offset,\n        crossOffset\n    );\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\n//TODO: Closing overlay should also have transition\n\nimport {\n    html,\n    LitElement,\n    property,\n    TemplateResult,\n    CSSResultArray,\n} from 'lit-element';\n\nimport overlayStyles from './overlay-root.css';\n\nimport calculatePosition, { PositionResult } from './calculate-position';\nimport { strictCustomEvent, StrictCustomEvent } from '../events';\n\nexport type TriggerInteractions = 'click' | 'hover';\n\nexport type Placement = 'top' | 'right' | 'bottom' | 'left';\n\nexport interface OverlayOpenDetail {\n    content: HTMLElement;\n    delay: number;\n    offset: number;\n    placement: Placement;\n    trigger: HTMLElement;\n    interaction: TriggerInteractions;\n}\n\nexport interface OverlayCloseDetail {\n    content: HTMLElement;\n}\n\ninterface CalculatePositionOptions {\n    containerPadding: number;\n    crossOffset: number;\n    flip: boolean;\n    offset: number;\n    placement: string;\n}\n\nconst defaultOptions: CalculatePositionOptions = {\n    containerPadding: 10,\n    crossOffset: 0,\n    flip: true,\n    offset: 0,\n    placement: 'left',\n};\n\nexport class OverlayRoot extends LitElement {\n    public static is = 'overlay-root';\n\n    public static get styles(): CSSResultArray {\n        return [overlayStyles];\n    }\n\n    @property({ type: Boolean, reflect: true })\n    public visible = false;\n\n    @property({ reflect: true })\n    public placement: Placement = 'bottom';\n\n    @property({ type: Number, reflect: true })\n    public offset = 6;\n\n    @property()\n    private interaction: TriggerInteractions = 'hover';\n\n    @property({ type: Boolean, reflect: true })\n    private active = false;\n\n    @property()\n    private position?: PositionResult;\n\n    @property()\n    private trigger?: HTMLElement;\n\n    @property()\n    private overlayContent?: HTMLElement;\n\n    private timeout?: number;\n\n    public onMaskClick(ev: Event): void {\n        const secondClick = this.detectSecondClick(ev);\n\n        if (!this.active) {\n            return;\n        }\n\n        if (this.interaction === 'click' && secondClick) {\n            //Prevent second clicks from reopening the overlay\n            ev.stopPropagation();\n        }\n\n        this.removeOverlay();\n\n        const clickOutEvent = strictCustomEvent('sp-overlay:click-out', {\n            bubbles: true,\n            composed: true,\n            detail: ev,\n        });\n        this.dispatchEvent(clickOutEvent);\n        this.active = false;\n        this.visible = false;\n    }\n\n    public onOverlayOpen(ev: StrictCustomEvent<'sp-overlay:open'>): void {\n        if (this.active) {\n            return;\n        }\n        this.active = true;\n        this.removeOverlay();\n        this.extractEventDetail(ev);\n        if (this.overlayContent) {\n            this.overlayContent.setAttribute('slot', 'overlay');\n            this.appendChild(this.overlayContent);\n        }\n\n        this.timeout = window.setTimeout(() => {\n            this.visible = true;\n            this.updateOverlayPosition();\n        }, ev.detail.delay);\n    }\n\n    public onOverlayClose(ev: StrictCustomEvent<'sp-overlay:close'>): void {\n        if (this.timeout) {\n            clearTimeout(this.timeout);\n        }\n        if (ev.detail.content === this.overlayContent) {\n            this.removeOverlay();\n            this.active = false;\n            this.visible = false;\n        }\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            <slot></slot>\n            <div\n                id=\"overlay\"\n                ?active=${this.active}\n                ?visible=${this.visible}\n                style=${this.overlayStyles}\n            >\n                <slot name=\"overlay\"></slot>\n            </div>\n        `;\n    }\n\n    private detectSecondClick(ev: Event): boolean {\n        //TODO: event.composedPath is not supported in internet explorer or edge.\n        // Consider using another implementation for the future\n\n        const path = Array.from(ev.composedPath());\n\n        if (path && path.length) {\n            //Check if current active trigger is in the event path\n            for (const eventTarget of path) {\n                const element = eventTarget as HTMLElement;\n                if (element === this.trigger) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }\n\n    private removeOverlay(): void {\n        if (this.overlayContent && this.overlayContent.parentNode) {\n            this.overlayContent.parentNode.removeChild(this.overlayContent);\n        }\n    }\n\n    private extractEventDetail(ev: CustomEvent<OverlayOpenDetail>): void {\n        this.overlayContent = ev.detail.content;\n        this.trigger = ev.detail.trigger;\n        this.placement = ev.detail.placement;\n        this.offset = ev.detail.offset;\n        this.interaction = ev.detail.interaction;\n    }\n\n    private updateOverlayPosition(): void {\n        if (!this.trigger || !this.overlayContent) {\n            return;\n        }\n\n        const options: CalculatePositionOptions = {\n            containerPadding: 0,\n            crossOffset: 0,\n            flip: false,\n            offset: this.offset,\n            placement: this.placement,\n        };\n\n        const positionOptions = { ...defaultOptions, ...options };\n\n        this.position = calculatePosition(\n            positionOptions.placement,\n            this.overlayContent,\n            this.trigger,\n            this,\n            positionOptions.containerPadding,\n            positionOptions.flip,\n            this,\n            positionOptions.offset,\n            positionOptions.crossOffset\n        );\n    }\n\n    private get overlayStyles(): string {\n        if (this.position) {\n            return `top: ${this.position.positionTop}px; left: ${\n                this.position.positionLeft\n            }px`;\n        }\n\n        return '';\n    }\n\n    public connectedCallback(): void {\n        super.connectedCallback();\n        this.addEventListener('click', this.onMaskClick, true);\n        this.addEventListener('sp-overlay:open', this\n            .onOverlayOpen as EventListener);\n        this.addEventListener('sp-overlay:close', this\n            .onOverlayClose as EventListener);\n    }\n\n    public disconnectedCallback(): void {\n        this.removeEventListener('click', this.onMaskClick, true);\n        this.removeEventListener('sp-overlay:open', this\n            .onOverlayOpen as EventListener);\n        this.removeEventListener('sp-overlay:close', this\n            .onOverlayClose as EventListener);\n        super.disconnectedCallback();\n    }\n}\n\ndeclare global {\n    interface GlobalEventHandlersEventMap {\n        'sp-overlay:click-out': CustomEvent<Event>;\n        'sp-overlay:open': CustomEvent<OverlayOpenDetail>;\n        'sp-overlay:close': CustomEvent<OverlayCloseDetail>;\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    html,\n    LitElement,\n    property,\n    CSSResultArray,\n    TemplateResult,\n} from 'lit-element';\n\nimport dropzoneStyles from './dropzone.css';\nimport { strictCustomEvent } from '../events';\n\nexport type DropzoneEventDetail = DragEvent;\n\nexport type DropEffects = 'copy' | 'move' | 'link' | 'none';\n\n/**\n * @slot default - This is the illustrated message slot\n */\nexport class Dropzone extends LitElement {\n    public static readonly is = 'sp-dropzone';\n\n    public static get styles(): CSSResultArray {\n        return [dropzoneStyles];\n    }\n\n    private _dropEffect: DropEffects = 'copy';\n    public get dropEffect(): DropEffects {\n        return this._dropEffect;\n    }\n    public set dropEffect(value: DropEffects) {\n        if (['copy', 'move', 'link', 'none'].includes(value)) {\n            this._dropEffect = value;\n        }\n    }\n\n    @property({ type: Boolean, reflect: true, attribute: 'dragged' })\n    public isDragged = false;\n\n    private debouncedDragLeave: number | null = null;\n\n    public connectedCallback(): void {\n        super.connectedCallback();\n\n        this.addEventListener('drop', this.onDrop);\n        this.addEventListener('dragover', this.onDragOver);\n        this.addEventListener('dragleave', this.onDragLeave);\n    }\n\n    public disconnectedCallback(): void {\n        super.disconnectedCallback();\n\n        this.removeEventListener('drop', this.onDrop);\n        this.removeEventListener('dragover', this.onDragOver);\n        this.removeEventListener('dragleave', this.onDragLeave);\n    }\n\n    public onDragOver(ev: DragEvent): void {\n        const shouldAcceptEvent = strictCustomEvent(\n            'sp-dropzone:should-accept',\n            {\n                bubbles: true,\n                cancelable: true,\n                composed: true,\n                detail: ev,\n            }\n        );\n        // dispatch event returns true if preventDefault() is not called\n        const shouldAccept = this.dispatchEvent(shouldAcceptEvent);\n        if (!ev.dataTransfer) {\n            return;\n        }\n        if (!shouldAccept) {\n            ev.dataTransfer.dropEffect = 'none';\n            return;\n        }\n\n        ev.preventDefault();\n\n        this.clearDebouncedDragLeave();\n\n        this.isDragged = true;\n\n        ev.dataTransfer.dropEffect = this.dropEffect;\n        const dragOverEvent = strictCustomEvent('sp-dropzone:dragover', {\n            bubbles: true,\n            composed: true,\n            detail: ev,\n        });\n        this.dispatchEvent(dragOverEvent);\n    }\n\n    public onDragLeave(ev: DragEvent): void {\n        this.clearDebouncedDragLeave();\n\n        this.debouncedDragLeave = window.setTimeout(() => {\n            if (this.isDragged) {\n                this.isDragged = false;\n            }\n\n            const dragLeave = strictCustomEvent('sp-dropzone:dragleave', {\n                bubbles: true,\n                composed: true,\n                detail: ev,\n            });\n            this.dispatchEvent(dragLeave);\n        }, 100);\n    }\n\n    public onDrop(ev: DragEvent): void {\n        ev.preventDefault();\n\n        this.clearDebouncedDragLeave();\n\n        if (this.isDragged) {\n            this.isDragged = false;\n        }\n        const dropEvent = strictCustomEvent('sp-dropzone:drop', {\n            bubbles: true,\n            composed: true,\n            detail: ev,\n        });\n        this.dispatchEvent(dropEvent);\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            <slot></slot>\n        `;\n    }\n\n    protected clearDebouncedDragLeave(): void {\n        if (this.debouncedDragLeave) {\n            clearTimeout(this.debouncedDragLeave);\n            this.debouncedDragLeave = null;\n        }\n    }\n}\n\ndeclare global {\n    interface GlobalEventHandlersEventMap {\n        'sp-dropzone:should-accept': CustomEvent<DragEvent>;\n        'sp-dropzone:dragover': CustomEvent<DragEvent>;\n        'sp-dropzone:dragleave': CustomEvent<DragEvent>;\n        'sp-dropzone:drop': CustomEvent<DragEvent>;\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    html,\n    LitElement,\n    property,\n    CSSResultArray,\n    TemplateResult,\n} from 'lit-element';\n\nimport overlayTriggerStyles from './overlay-trigger.css';\n\nimport {\n    OverlayCloseDetail,\n    OverlayOpenDetail,\n    TriggerInteractions,\n    Placement,\n} from '../overlay-root';\nimport { strictCustomEvent } from '../events';\n\n/**\n * A overlay trigger component for displaying overlays relative to other content.\n * @element overlay-trigger\n *\n * @slot hover-content - The content that will be displayed on hover\n * @slot click-content - The content that will be displayed on click\n */\nexport class OverlayTrigger extends LitElement {\n    public static is = 'overlay-trigger';\n\n    public static get styles(): CSSResultArray {\n        return [overlayTriggerStyles];\n    }\n\n    @property({ reflect: true })\n    public placement: Placement = 'bottom';\n\n    @property({ type: Number, reflect: true })\n    public offset = 6;\n\n    private clickContent?: HTMLElement;\n\n    private hoverContent?: HTMLElement;\n\n    public onOverlayOpen(ev: Event, interaction: TriggerInteractions): void {\n        const isClick = interaction === 'click';\n        // if (!isClick) return;\n        const overlayElement = isClick ? this.clickContent : this.hoverContent;\n        const delayAttribute = overlayElement\n            ? overlayElement.getAttribute('delay')\n            : null;\n        const delay = delayAttribute ? parseFloat(delayAttribute) : 0;\n\n        if (!overlayElement) {\n            return;\n        }\n        const overlayOpenDetail: OverlayOpenDetail = {\n            content: overlayElement,\n            delay: delay,\n            offset: this.offset,\n            placement: this.placement,\n            trigger: this,\n            interaction: interaction,\n        };\n\n        const overlayOpenEvent = strictCustomEvent('sp-overlay:open', {\n            bubbles: true,\n            composed: true,\n            detail: overlayOpenDetail,\n        });\n\n        this.dispatchEvent(overlayOpenEvent);\n    }\n\n    public onOverlayClose(ev: Event, interaction: TriggerInteractions): void {\n        const isClick = interaction === 'click';\n        const overlayElement = isClick ? this.clickContent : this.hoverContent;\n\n        if (!overlayElement) {\n            return;\n        }\n\n        const overlayCloseDetail: OverlayCloseDetail = {\n            content: overlayElement,\n        };\n\n        const overlayCloseEvent = strictCustomEvent('sp-overlay:close', {\n            bubbles: true,\n            composed: true,\n            detail: overlayCloseDetail,\n        });\n\n        this.dispatchEvent(overlayCloseEvent);\n    }\n\n    public onTriggerClick(ev: Event): void {\n        if (this.clickContent) {\n            this.onOverlayOpen(ev, 'click');\n        }\n    }\n\n    public onTriggerMouseOver(ev: Event): void {\n        if (this.hoverContent) {\n            this.onOverlayOpen(ev, 'hover');\n        }\n    }\n\n    public onTriggerMouseLeave(ev: Event): void {\n        if (this.hoverContent) {\n            this.onOverlayClose(ev, 'hover');\n        }\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            <div\n                id=\"trigger\"\n                @click=${this.onTriggerClick}\n                @mouseenter=${this.onTriggerMouseOver}\n                @mouseleave=${this.onTriggerMouseLeave}\n            >\n                <slot name=\"trigger\"></slot>\n            </div>\n            <div id=\"overlay-content\">\n                <slot\n                    @slotchange=${this.onClickSlotChange}\n                    name=\"click-content\"\n                ></slot>\n                <slot\n                    @slotchange=${this.onHoverSlotChange}\n                    name=\"hover-content\"\n                ></slot>\n            </div>\n        `;\n    }\n\n    private onClickSlotChange(ev: Event): void {\n        if (ev.target) {\n            const slot = ev.target as HTMLSlotElement;\n            const content = this.extractSlotContent(slot);\n\n            if (content) {\n                this.clickContent = content;\n            }\n        }\n    }\n\n    private onHoverSlotChange(ev: Event): void {\n        if (ev.target) {\n            const slot = ev.target as HTMLSlotElement;\n            const content = this.extractSlotContent(slot);\n\n            if (content) {\n                this.hoverContent = content;\n            }\n        }\n    }\n\n    private extractSlotContent(slot: HTMLSlotElement): HTMLElement | null {\n        const nodes = slot.assignedNodes();\n\n        if (nodes.length) {\n            return nodes[0] as HTMLElement;\n        }\n\n        return null;\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    html,\n    LitElement,\n    property,\n    CSSResultArray,\n    TemplateResult,\n} from 'lit-element';\n\nimport radioGroupStyles from './radio-group.css';\nimport { RadioChangeDetail } from '../radio/radio';\nimport { Radio } from '../radio/radio';\n\n/**\n * Radio group component\n *\n * @attr column - arranges radio buttons vertically\n */\nexport class RadioGroup extends LitElement {\n    public static get styles(): CSSResultArray {\n        return [radioGroupStyles];\n    }\n\n    @property({ type: String, reflect: true })\n    public name = '';\n\n    private _selected = '';\n\n    @property({ reflect: true })\n    public get selected(): string {\n        return this._selected;\n    }\n\n    public set selected(value: string) {\n        const radio = value\n            ? (this.querySelector(`sp-radio[value=${value}]`) as Radio)\n            : undefined;\n\n        this.deselectChecked();\n\n        if (radio) {\n            this._selected = value;\n            radio.checked = true;\n        } else {\n            // If no matching radio, selected is reset to empty string\n            this._selected = '';\n        }\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            <slot></slot>\n        `;\n    }\n\n    protected firstUpdated(): void {\n        const checkedRadio = this.querySelector('sp-radio[checked]') as Radio;\n        const checkedRadioValue = checkedRadio ? checkedRadio.value : '';\n\n        // If selected already assigned, don't overwrite\n        this.selected = this.selected || checkedRadioValue;\n\n        this.addEventListener(\n            'sp-radio:change',\n            (ev: CustomEvent<RadioChangeDetail>) => {\n                this.selected = ev.detail.value;\n            }\n        );\n    }\n\n    private deselectChecked(): void {\n        const previousChecked = this.querySelectorAll('sp-radio[checked]');\n\n        previousChecked.forEach((element) => {\n            const radio = element as Radio;\n            radio.checked = false;\n        });\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    html,\n    LitElement,\n    property,\n    CSSResultArray,\n    TemplateResult,\n} from 'lit-element';\n\nimport cardStyles from './card.css';\n\n/**\n * @slot preview - This is the preview image for Gallery Cards\n * @slot cover-photo - This is the cover photo for Default and Quiet Cards\n * @slot description - A description of the card\n * @slot footer - Footer text\n */\nexport class Card extends LitElement {\n    @property({ reflect: true })\n    public variant: 'default' | 'gallery' | 'quiet' = 'default';\n\n    public static get styles(): CSSResultArray {\n        return [cardStyles];\n    }\n\n    @property()\n    public title = '';\n\n    @property()\n    public subtitle = '';\n\n    protected renderGallery(): TemplateResult {\n        return html`\n            <slot name=\"preview\"></slot>\n            <div id=\"body\">\n                <div id=\"header\">\n                    <div id=\"title\">${this.title}</div>\n                    <div id=\"subtitle\">${this.subtitle}</div>\n                    <slot name=\"description\"></slot>\n                </div>\n            </div>\n        `;\n    }\n\n    protected renderQuiet(): TemplateResult {\n        return html`\n            <slot name=\"preview\"></slot>\n            <div id=\"body\">\n                <div id=\"header\"><div id=\"title\">${this.title}</div></div>\n                <div id=\"content\">\n                    <div id=\"subtitle\">${this.subtitle}</div>\n                    <slot name=\"description\"></slot>\n                </div>\n            </div>\n        `;\n    }\n\n    protected renderDefault(): TemplateResult {\n        return html`\n            <slot name=\"cover-photo\" id=\"cover-photo\"></slot>\n            <div id=\"body\">\n                <div id=\"header\">\n                    <div id=\"title\">${this.title}</div>\n                </div>\n                <div id=\"content\">\n                    <div id=\"subtitle\">${this.subtitle}</div>\n                </div>\n            </div>\n            <div id=\"footer\"><slot name=\"footer\"></slot></div>\n        `;\n    }\n\n    protected render(): TemplateResult {\n        switch (this.variant) {\n            case 'gallery':\n                return this.renderGallery();\n            case 'quiet':\n                return this.renderQuiet();\n            default:\n                return this.renderDefault();\n        }\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    html,\n    LitElement,\n    property,\n    CSSResultArray,\n    TemplateResult,\n} from 'lit-element';\n\nimport bannerStyles from './banner.css';\n\n/**\n * Banner component\n *\n * @attr type - Determines the style, can be \"info\", \"warning\", or \"error\". Default is \"info\"\n * @attr corner - Determines if banner sets position at upper right corner or not.\n *\n * @slot header - Primary message of the banner.\n * @slot content - Secondary message of the banner. Used to provide a description.\n */\nexport class Banner extends LitElement {\n    @property({ reflect: true, type: String })\n    public type: 'info' | 'warning' | 'error' = 'info';\n\n    @property({ reflect: true, type: Boolean })\n    public corner = false;\n\n    public static get styles(): CSSResultArray {\n        return [bannerStyles];\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            <div id=\"header\"><slot name=\"header\"></slot></div>\n            <div id=\"content\"><slot name=\"content\"></slot></div>\n        `;\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    html,\n    property,\n    query,\n    CSSResultArray,\n    TemplateResult,\n} from 'lit-element';\n\nimport radioStyles from './radio.css';\nimport { Focusable } from '../shared/focusable';\nimport { strictCustomEvent } from '../events';\n\nexport interface RadioChangeDetail {\n    value: string;\n}\n\n/**\n * Spectrum Radio Button Component\n *\n * @attr quiet - Uses the quiet style\n * @attr label-below - Moves the label below the radio button\n * @attr invalid - Uses the invalid style\n * @attr disabled - Uses the disabled style\n * @attr checked - Represents when the input is checked\n * @attr name - Represents the group this radio is a part of\n * @attr value - Identifies this radio button within its radio group\n *\n * @event sp-radio:change - When the input is interacted with and its state is changed\n */\nexport class Radio extends Focusable {\n    public static get styles(): CSSResultArray {\n        return [radioStyles];\n    }\n    @property({ type: String, reflect: true })\n    public name = '';\n\n    @property({ type: String, reflect: true })\n    public value = '';\n\n    @property({ type: Boolean, reflect: true })\n    public checked: boolean = false;\n\n    @query('#input')\n    private inputElement!: HTMLInputElement;\n\n    public get focusElement(): HTMLElement {\n        return this.inputElement;\n    }\n\n    public handleChange(): void {\n        this.checked = this.inputElement.checked;\n        this.dispatchEvent(\n            strictCustomEvent('sp-radio:change', {\n                bubbles: true,\n                composed: true,\n                detail: {\n                    value: this.value,\n                },\n            })\n        );\n    }\n\n    protected render(): TemplateResult {\n        return html`\n        <label id=\"root\">\n            <input\n                id=\"input\"\n                type=\"radio\"\n                name=${this.name}\n                value=${this.value}\n                .checked=${this.checked}\n                @change=${this.handleChange}\n            />\n            <span id=\"button\"></span>\n            <span id=\"label\"><slot></slot></span>\n        </div>\n        `;\n    }\n}\n\ndeclare global {\n    interface GlobalEventHandlersEventMap {\n        'sp-radio:change': CustomEvent<RadioChangeDetail>;\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    html,\n    LitElement,\n    property,\n    CSSResultArray,\n    TemplateResult,\n} from 'lit-element';\n\nimport tabStyles from './tab-list.css';\n\n/**\n * @slot - Child tab elements\n * @attr {Boolean} quiet - The tab-list border is a lot smaller\n * @attr {Boolean} compact - The collection of tabs take up less space\n */\n\nexport class TabList extends LitElement {\n    public static get styles(): CSSResultArray {\n        return [tabStyles];\n    }\n    @property({ reflect: true })\n    public direction: 'vertical' | 'horizontal' = 'horizontal';\n\n    @property()\n    public selectionIndicatorStyle = '';\n\n    @property({ type: String, reflect: true })\n    public value = '';\n\n    @property({ reflect: true })\n    public get selected(): string {\n        return this._selected;\n    }\n\n    public set selected(value: string) {\n        const oldValue = this.selected;\n\n        if (value === oldValue) {\n            return;\n        }\n        this.updateCheckedState(value);\n\n        this._selected = value;\n        this.requestUpdate('selected', oldValue);\n    }\n\n    private _selected = '';\n\n    protected render(): TemplateResult {\n        return html`\n            <slot\n                @click=${this.onClick}\n                @keydown=${this.onKeyDown}\n                @slotchange=${this.onSlotChange}\n            ></slot>\n            <div\n                id=\"selectionIndicator\"\n                style=${this.selectionIndicatorStyle}\n            ></div>\n        `;\n    }\n\n    private onClick(ev: Event): void {\n        const target = ev.target as HTMLElement;\n        if (target) {\n            this.selectTarget(target);\n        }\n    }\n\n    private onKeyDown(ev: KeyboardEvent): void {\n        if (ev.key === 'Enter' || ev.key === ' ') {\n            ev.preventDefault();\n            const target = ev.target as HTMLElement;\n            if (target) {\n                this.selectTarget(target);\n            }\n        }\n    }\n\n    private selectTarget(target: HTMLElement): void {\n        const value = target.getAttribute('value');\n        if (value) {\n            const applyDefault = this.dispatchEvent(new Event('change'));\n            if (applyDefault) {\n                this.selected = value;\n            }\n        }\n    }\n\n    private onSlotChange(): void {\n        this.updateCheckedState(this.selected);\n    }\n\n    private updateCheckedState(value: string): void {\n        const previousChecked = this.querySelectorAll('[selected]');\n\n        previousChecked.forEach((element) => {\n            element.removeAttribute('selected');\n        });\n\n        if (value.length) {\n            const currentChecked = this.querySelector(`[value=\"${value}\"]`);\n\n            if (currentChecked) {\n                currentChecked.setAttribute('selected', '');\n            }\n        }\n\n        this.updateSelectionIndicator();\n    }\n\n    private updateSelectionIndicator(): void {\n        const selectedElement = this.querySelector('[selected]');\n        if (!selectedElement) {\n            return;\n        }\n        const bounds = selectedElement.getBoundingClientRect();\n\n        if (this.direction === 'horizontal') {\n            const width = bounds.width;\n            const parentOffset = this.getBoundingClientRect().left;\n            const offset = bounds.left - parentOffset;\n\n            this.selectionIndicatorStyle = `width: ${width}px; transform: translateX(${offset}px)`;\n        } else {\n            const height = bounds.height;\n            const parentOffset = this.getBoundingClientRect().top;\n            const offset = bounds.top - parentOffset;\n\n            this.selectionIndicatorStyle = `height: ${height}px; transform: translateY(${offset}px)`;\n        }\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    html,\n    property,\n    CSSResultArray,\n    query,\n    TemplateResult,\n} from 'lit-element';\n\nimport { Focusable } from '../shared/focusable';\n\nimport tabItemStyles from './tab.css';\n\n/**\n * @slot icon - The icon that appears on the left of the label\n */\n\nexport class Tab extends Focusable {\n    public static get styles(): CSSResultArray {\n        return [tabItemStyles];\n    }\n\n    @query('#tab')\n    private tabElement!: HTMLElement;\n\n    @property({ reflect: true })\n    public label = '';\n\n    @property({ type: Boolean, reflect: true })\n    public selected = false;\n\n    @property({ type: String, reflect: true })\n    public value = '';\n\n    public get focusElement(): HTMLElement {\n        return this.tabElement;\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            <div id=\"tab\">\n                <slot name=\"icon\"></slot>\n                <label id=\"itemLabel\">\n                    ${this.label}\n                </label>\n            </div>\n        `;\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    html,\n    LitElement,\n    property,\n    CSSResultArray,\n    TemplateResult,\n} from 'lit-element';\n\nimport messageStyles from './illustrated-message.css';\n\n/**\n * @slot - The SVG that represents the illustration\n */\n\nexport class IllustratedMessage extends LitElement {\n    public static readonly is = 'sp-illustrated-message';\n\n    public static get styles(): CSSResultArray {\n        return [messageStyles];\n    }\n\n    @property()\n    public heading = '';\n\n    @property()\n    public description = '';\n\n    protected render(): TemplateResult {\n        return html`\n            <div id=\"illustration\"><slot></slot></div>\n            <div id=\"heading\">${this.heading}</div>\n            <div id=\"description\">${this.description}</div>\n        `;\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport {\n    html,\n    LitElement,\n    property,\n    CSSResultArray,\n    TemplateResult,\n} from 'lit-element';\nimport { ifDefined } from 'lit-html/directives/if-defined';\n\nimport linkStyles from './link.css';\n\n/**\n * Spectrum Link Component\n *\n * @attr quiet - uses quiet styles or not\n * @attr over-background - uses over background styles or not\n */\nexport class Link extends LitElement {\n    public static get styles(): CSSResultArray {\n        return [linkStyles];\n    }\n\n    @property({ reflect: true })\n    public href: string | undefined = undefined;\n\n    @property({ reflect: true })\n    public target: string | undefined = undefined;\n\n    protected render(): TemplateResult {\n        // prettier-ignore\n        return html\n        `<a href=${ifDefined(this.href)} target=${ifDefined(this.target)}><slot></slot></a>`\n        ;\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { CSSResultArray, TemplateResult, html, property } from 'lit-element';\nimport { CheckboxBase } from './checkbox-base';\nimport checkboxStyles from './checkbox.css';\nimport '../icon';\n\nexport class Checkbox extends CheckboxBase {\n    @property({ type: Boolean, reflect: true })\n    public indeterminate: boolean = false;\n\n    @property({ type: Boolean, reflect: true })\n    public invalid: boolean = false;\n\n    public static get styles(): CSSResultArray {\n        return [checkboxStyles];\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            <label id=\"root\">\n                ${super.render()}\n                <span id=\"box\">\n                    <sp-icon\n                        id=\"checkmark\"\n                        size=\"s\"\n                        name=\"ui:CheckmarkSmall\"\n                        aria-hidden=\"true\"\n                    ></sp-icon>\n                    <sp-icon\n                        id=\"partialCheckmark\"\n                        size=\"s\"\n                        name=\"ui:DashSmall\"\n                        aria-hidden=\"true\"\n                    ></sp-icon>\n                </span>\n                <span id=\"label\"><slot></slot></span>\n            </label>\n        `;\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { property, html, TemplateResult } from 'lit-element';\nimport { Focusable } from '../shared/focusable';\n\nexport class ButtonBase extends Focusable {\n    /**\n     * Supplies an address that the browser will navigate to when this button is\n     * clicked\n     */\n    @property()\n    public href?: string;\n\n    @property({ type: Boolean, reflect: true, attribute: 'icon-right' })\n    protected iconRight = false;\n\n    private get hasIcon(): boolean {\n        return !!this.querySelector('[slot=\"icon\"]');\n    }\n\n    public get focusElement(): HTMLElement {\n        if (this.shadowRoot) {\n            return this.shadowRoot.querySelector('#button') as HTMLElement;\n        }\n        return this;\n    }\n\n    protected get buttonContent(): TemplateResult[] {\n        const icon = html`\n            <slot name=\"icon\"></slot>\n        `;\n        const content = [\n            html`\n                <div id=\"label\"><slot></slot></div>\n            `,\n        ];\n        if (!this.hasIcon) {\n            return content;\n        }\n        this.iconRight ? content.push(icon) : content.unshift(icon);\n        return content;\n    }\n\n    protected render(): TemplateResult {\n        return this.href && this.href.length > 0\n            ? html`\n                  <a href=\"${this.href}\" id=\"button\">\n                      ${this.buttonContent}\n                  </a>\n              `\n            : html`\n                  <button id=\"button\">${this.buttonContent}</button>\n              `;\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { CSSResultArray, property } from 'lit-element';\nimport { ButtonBase } from './button-base';\nimport buttonStyles from './button.css';\n\n/**\n * A Spectrum button control.\n * @element sp-button\n */\nexport class Button extends ButtonBase {\n    /**\n     * The visual variant to apply to this button.\n     */\n    @property({ reflect: true })\n    public variant:\n        | 'cta'\n        | 'overBackground'\n        | 'primary'\n        | 'secondary'\n        | 'negative' = 'cta';\n\n    /**\n     * There is a warning in place for this control\n     */\n    @property({ type: Boolean, reflect: true })\n    public warning: boolean = false;\n\n    /**\n     * Style this button to be less obvious\n     */\n    @property({ type: Boolean, reflect: true })\n    public quiet: boolean = false;\n\n    public static get styles(): CSSResultArray {\n        return [buttonStyles];\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { CSSResultArray, property } from 'lit-element';\nimport { ButtonBase } from './button-base';\nimport buttonStyles from './action-button.css';\n\nexport class ActionButton extends ButtonBase {\n    @property({ type: Boolean, reflect: true })\n    public quiet: boolean = false;\n\n    @property({ type: Boolean, reflect: true })\n    public selected: boolean = false;\n\n    @property({ type: Boolean, reflect: true, attribute: 'hold-affordance' })\n    public holdAffordance: boolean = false;\n\n    public static get styles(): CSSResultArray {\n        return [buttonStyles];\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { html, query, TemplateResult, PropertyValues } from 'lit-element';\n\nimport { Iconset } from './iconset';\n\nexport class IconsetSVG extends Iconset {\n    public static is = 'sp-iconset-svg';\n    private iconMap: Map<string, SVGSymbolElement> = new Map();\n\n    @query('slot')\n    private slotContainer?: HTMLSlotElement;\n\n    /**\n     * First updated handler just ensures we've processed any slotted symbols\n     */\n    public updated(changedProperties: PropertyValues): void {\n        if (!this.slotContainer) {\n            return;\n        }\n        const currentSVGNodes = this.getSVGNodes(this.slotContainer);\n        this.updateSVG(currentSVGNodes);\n        super.updated(changedProperties);\n    }\n    /**\n     * Applies the requested icon from this iconset instance to the given element.\n     *\n     * @param el - the element to apply the icon to\n     * @param icon - the name of the icon within this set to apply.\n     */\n    public async applyIconToElement(\n        el: HTMLElement,\n        icon: string,\n        size: string,\n        label: string\n    ): Promise<void> {\n        await this.updateComplete;\n        const iconSymbol = this.iconMap.get(icon);\n        if (!iconSymbol) {\n            throw new Error(`Unable to find icon ${icon}`);\n        }\n        // we cannot share a single SVG globally across shadowroot boundaries\n        // so copy the template node so we can inject it where we need it\n        const clonedNode = this.prepareSvgClone(iconSymbol);\n        clonedNode.setAttribute('role', 'img');\n        if (label) {\n            clonedNode.setAttribute('aria-label', label);\n        } else {\n            clonedNode.setAttribute('aria-hidden', 'true');\n        }\n        // append the svg to the node either in its shadowroot or directly into its dom\n        if (el.shadowRoot) {\n            el.shadowRoot.appendChild(clonedNode);\n        } else {\n            el.appendChild(clonedNode);\n        }\n    }\n\n    /**\n     * Returns a list of all icons in this iconset.\n     */\n    public getIconList(): string[] {\n        return [...this.iconMap.keys()];\n    }\n\n    protected prepareSvgClone(sourceSvg: SVGSymbolElement): SVGSVGElement {\n        const content = sourceSvg.cloneNode(true) as SVGSymbolElement;\n        // we're going to create a new svg element that will have our symbol geometry inside\n        const svg = document.createElementNS(\n            'http://www.w3.org/2000/svg',\n            'svg'\n        );\n        const viewBox = content.getAttribute('viewBox') || '';\n        // inline style isn't ideal but will work in all cases and means our icons don't need to know\n        // if they are svg or spritesheet provided\n        const cssText =\n            'pointer-events: none; display: block; width: 100%; height: 100%;';\n        svg.style.cssText = cssText;\n        // copy the viewbox and other properties into the svg\n        svg.setAttribute('viewBox', viewBox);\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false');\n        // move all the child nodes over to the svg\n        while (content.childNodes.length > 0) {\n            svg.appendChild(content.childNodes[0]);\n        }\n        return svg;\n    }\n    protected getSVGIconName(icon: string): string {\n        return icon;\n    }\n    protected getSanitizedIconName(icon: string): string {\n        return icon;\n    }\n    protected renderDefaultContent(): TemplateResult {\n        return html``;\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            <slot @slotchange=${this.onSlotChange}>\n                ${this.renderDefaultContent()}\n            </slot>\n        `;\n    }\n\n    protected updateSVG(nodes: SVGElement[]): void {\n        // iterate over the nodes that were passed in, and find all the top level symbols\n        const symbols = nodes.reduce(\n            (prev, svgNode) => {\n                const containedSymbols = svgNode.querySelectorAll('symbol');\n                prev.push(...containedSymbols);\n                return prev;\n            },\n            [] as SVGSymbolElement[]\n        );\n        symbols.forEach((symbol) => {\n            this.iconMap.set(this.getSanitizedIconName(symbol.id), symbol);\n        });\n    }\n\n    protected getSVGNodes(slotTarget: HTMLSlotElement): SVGElement[] {\n        const nodes = slotTarget.assignedNodes({ flatten: true });\n        // find all the svg nodes\n        const svgNodes = nodes.filter((node) => {\n            return node.nodeName === 'svg';\n        }) as SVGElement[];\n        return svgNodes;\n    }\n\n    private onSlotChange(evt: Event): void {\n        const slotTarget = evt.target as HTMLSlotElement;\n        const svgNodes = this.getSVGNodes(slotTarget);\n        this.updateSVG(svgNodes);\n    }\n}\n","/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\nimport { property, html, TemplateResult, query } from 'lit-element';\nimport { Focusable } from '../shared/focusable';\n\nexport class CheckboxBase extends Focusable {\n    @property({ type: Boolean, reflect: true })\n    public checked: boolean = false;\n\n    @property({ type: Boolean, reflect: true })\n    public quiet: boolean = false;\n\n    @query('#input')\n    private inputElement!: HTMLInputElement;\n\n    public get focusElement(): HTMLElement {\n        return this.inputElement;\n    }\n\n    public handleChange(event: Event): void {\n        this.checked = this.inputElement.checked;\n\n        // Change events from the shadow DOM are not transmitted into\n        // the parent light DOM\n        const changeEvent = new CustomEvent('change', {\n            detail: {\n                sourceEvent: event,\n            },\n            bubbles: event.bubbles,\n            cancelable: event.cancelable,\n        });\n        this.dispatchEvent(changeEvent);\n    }\n\n    protected render(): TemplateResult {\n        return html`\n            <input\n                id=\"input\"\n                type=\"checkbox\"\n                .checked=${this.checked}\n                @change=${this.handleChange}\n            />\n        `;\n    }\n}\n"],"mappings":"AAQA;;;;;;ACkBA;AAoEA;AAIA;AA4CA;AAEA;AAEA;AAvHA;;;;;;;;;;;;;;;;;;;;;;ACvBA;;ACuBA;AAiEA;AACA;AAMA;;AAGA;;;;;;;AAOA;;;AAMA;;;AAIA;AACA;AACA;AACA;AACA;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAMA;AAEA;;AAEA;;;;AAIA;;;AAGA;;;;;;AASA;AAEA;;AAEA;;AAKA;;ACpJA;AAgBA;;;;;AAfA;;;;;;ACFA;;AAoFA;AACA;AACA;AACA;;;AAGA;;AAEA;;AAIA;AA/FA;;ACJA;AAYA;;;;AAXA;;;;;;;ACRA;AAOA;;;ACRA;;;;ACcA;;AAmBA;;AAGA;AArBA;;ACNA;AACA;AACA;AACA;;;;AAVA;;AAsBA;AACA;;AAtBA;;;;ACeA;AACA;AACA;;;AAKA;;;;;;;;;;;;;AAgBA;;;;;;;;;ACxDA;;AAoMA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAEA;AACA;AACA;;AAEA;;AAMA;AAGA;AAxMA;;;;AAgCA;;AAMA;;;;AAuBA;;AAOA;;;;;;;;AAUA;;;;;;;;;;AAcA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyDA;;;;;;;AAQA;;AAMA;;;;ACxLA;;;;;;;;;;;AAiCA;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;ACjDA;;;AA0BA;AACA;;;;AAMA;;;AAMA;;;AAMA;;;AAMA;;;AAMA;;;AAMA;;;AAMA;;;AAMA;;;AAMA;;;AAMA;;;AAMA;;;AAMA;;;AAMA;;;;;;;;;;;;;;;;;ACzGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;;;;;;;;;AAuCA;;;;;;;;;ACvCA;;;;;;;;;;;;;;AAoCA;;;;;;;;;;;;;;;ACpCA;;AAsBA;;AAMA;;;;;;;;;;AC5BA;;;;;;;;;;;;;;;;;;;AAuDA;;;AAGA;AACA;;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;;ACnEA;;;;AAyBA;;;;AAMA;;;;;;AAeA;;;AAGA;;;;;;;;;;;;;;;ACjDA;;AAsBA;;AAKA;;AAKA;;AAKA;;AAKA;;AAKA;;AAKA;;AAKA;;AAMA;;AAKA;;AAKA;;;;;;;AAUA;;;;;;;;;;;;;;ACnFA;AA6BA;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;AAKA;;;;;;;;;;;;;;;;;;;;AAsBA;AAEA;;;;;;;;;;;;;;;;ACjFA;;;AAkCA;AACA;AACA;AACA;AACA;;;;AAMA;;;;;;;;AAUA;;;AAKA;;;;;;;;;;;;AAeA;;;;;;;;;;;;;AAgBA;;;;;;;;;;;;;;AAiBA;;;AAQA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;;;;;;;AAOA;AACA;AACA;AACA;;;;;AC1IA;;AAsBA;;AAKA;;AAKA;;AAKA;;AAKA;;AAKA;;AC/CA;;;;;;;AAgCA;;;;;;;AAUA;;AAQA;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BA;AAOA;;;;;;AAQA;AAOA;;;;;;AAQA;AAOA;;;;;;ACnHA;;;;;;;;;;;;;AA8CA;;;;;;;;;;;;;;;;;;;AAqBA;;;;;;;;;;;;;;;;;;;;AA+BA;;;;;;;;;;;;;;;;;AAiBA;;;;;;;;;;;;;;;;;;;;;AAuBA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtIA;;ACWA;;ACXA;;ACWA;;ACXA;;ACWA;;ACXA;;ACiBA;AAqBA;AAEA;AAEA;AAWA;AAOA;AAMA;;AA5CA;;AC0EA;;;;ACmDA;AACA;AACA;;;;AAOA;;AClIA;;AAgHA;;ACzGA;;;AA0FA;AACA;AACA;;;;;;AAMA;;;;AAIA;;;;AAOA;;ACrHA;;AAqCA;;;;;;ACtCA;;;;AAmBA;AACA;;;;AAOA;;;AAIA;;AAEA;;;;AAOA;;;;AAKA;;;AAGA;;;;AAOA;;ACpDA;;;AAEA;;;;;;;;;ACQA;;;;;AAuCA;AACA;AACA;AACA;;;;;AArCA;;;;;;;;AClBA;;AAmCA;AACA;AACA;;;;AAIA;;AAKA;;;AC9CA;;;;AA0BA;;;AApBA;;ACRA;;AAgBA;AACA;AAhBA;;ACEA;;;;;;;;;;;;;ACZA;;AAcA;;;;;;;;;;;;;;;;;AAZA;;ACsBA;;AAKA;AAUA;AACA;;AAGA;AACA;AAxCA;;;;ACDA;;;;;;;;;ACJA;AC8FA;AACA;;AAKA;;;;ACnEA;AACA;;AAjCA","sourceRoot":""}