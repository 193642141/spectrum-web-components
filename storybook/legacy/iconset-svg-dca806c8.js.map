{"version":3,"file":"iconset-svg-dca806c8.js","sources":["../../../../packages/iconset/lib/iconset-registry.js","../../../../packages/icon/lib/icon.css.js","../../../../packages/icon/lib/icon.js","../../../../packages/icon/lib/index.js","../../../../packages/iconset/lib/iconset.js","../../../../packages/iconset/lib/iconset-svg.js"],"sourcesContent":["export class IconsetRegistry {\n    constructor() {\n        this.iconsetMap = new Map();\n    }\n    // singleton getter\n    static getInstance() {\n        if (!IconsetRegistry.instance) {\n            IconsetRegistry.instance = new IconsetRegistry();\n        }\n        return IconsetRegistry.instance;\n    }\n    addIconset(name, iconset) {\n        this.iconsetMap.set(name, iconset);\n        // dispatch a sp-iconset-added event on window to let everyone know we have a new iconset\n        // note we're using window here for efficiency since we don't need to bubble through the dom since everyone\n        // will know where to look for this event\n        const event = new CustomEvent('sp-iconset-added', {\n            bubbles: true,\n            composed: true,\n            detail: { name, iconset },\n        });\n        // we're dispatching this event in the next tick to allow the iconset to finish any slotchange or other event\n        // listeners caused by connection to the dom and first render to complete, this way any icons listening for\n        // this iconset will be able to access the completed iconset\n        setTimeout(() => window.dispatchEvent(event), 0);\n    }\n    removeIconset(name) {\n        this.iconsetMap.delete(name);\n        // dispatch a sp-iconset-removed event on window to let everyone know we have a new iconset\n        // note we're using window here for efficiency since we don't need to bubble through the dom since everyone\n        // will know where to look for this event\n        const event = new CustomEvent('sp-iconset-removed', {\n            bubbles: true,\n            composed: true,\n            detail: { name },\n        });\n        // we're dispatching this event in the next tick To keep the event model consistent with the added event\n        setTimeout(() => window.dispatchEvent(event), 0);\n    }\n    getIconset(name) {\n        return this.iconsetMap.get(name);\n    }\n}\n//# sourceMappingURL=iconset-registry.js.map","/*\nCopyright 2019 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { css } from 'lit-element';\nconst styles = css `\n:host{display:inline-block;color:inherit;fill:currentColor;pointer-events:none}:host(:not(:root)){overflow:hidden}:host([size=xxs]),:host([size=xxs]) img,:host([size=xxs]) svg{height:calc(var(--spectrum-alias-workflow-icon-size,\nvar(--spectrum-global-dimension-size-225))/2);width:calc(var(--spectrum-alias-workflow-icon-size,\nvar(--spectrum-global-dimension-size-225))/2)}:host([size=xs]),:host([size=xs]) img,:host([size=xs]) svg{height:calc(var(--spectrum-global-dimension-size-300)/2);width:calc(var(--spectrum-global-dimension-size-300)/2)}:host([size=s]),:host([size=s]) img,:host([size=s]) svg{height:var(--spectrum-alias-workflow-icon-size,var(--spectrum-global-dimension-size-225));width:var(--spectrum-alias-workflow-icon-size,var(--spectrum-global-dimension-size-225))}:host([size=m]),:host([size=m]) img,:host([size=m]) svg{height:var(--spectrum-global-dimension-size-300);width:var(--spectrum-global-dimension-size-300)}:host([size=l]),:host([size=l]) img,:host([size=l]) svg{height:calc(var(--spectrum-alias-workflow-icon-size,\nvar(--spectrum-global-dimension-size-225))*2);width:calc(var(--spectrum-alias-workflow-icon-size,\nvar(--spectrum-global-dimension-size-225))*2)}:host([size=xl]),:host([size=xl]) img,:host([size=xl]) svg{height:calc(var(--spectrum-global-dimension-size-300)*2);width:calc(var(--spectrum-global-dimension-size-300)*2)}:host([size=xxl]),:host([size=xxl]) img,:host([size=xxl]) svg{height:calc(var(--spectrum-global-dimension-size-300)*3);width:calc(var(--spectrum-global-dimension-size-300)*3)}#container{height:100%}img{height:auto}::slotted(*),img{width:100%;vertical-align:top}::slotted(*){height:100%}\n`;\nexport default styles;\n//# sourceMappingURL=icon.css.js.map","/*\nCopyright 2019 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { __decorate } from \"tslib\";\nimport { html, LitElement, property, query, } from 'lit-element';\nimport { IconsetRegistry } from '@spectrum-web-components/iconset/lib/iconset-registry.js';\nimport iconStyles from './icon.css.js';\nimport { ifDefined } from 'lit-html/directives/if-defined';\nexport class Icon extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.size = 'm';\n        this.iconsetListener = (event) => {\n            if (!this.name) {\n                return;\n            }\n            // parse the icon name to get iconset name\n            const icon = this.parseIcon(this.name);\n            if (event.detail.name === icon.iconset) {\n                this.updateIconPromise = this.updateIcon();\n            }\n        };\n    }\n    static get styles() {\n        return [iconStyles];\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        window.addEventListener('sp-iconset-added', this.iconsetListener);\n    }\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        window.removeEventListener('sp-iconset-added', this.iconsetListener);\n    }\n    firstUpdated() {\n        this.updateIconPromise = this.updateIcon();\n    }\n    attributeChangedCallback(name, old, value) {\n        super.attributeChangedCallback(name, old, value);\n        this.updateIconPromise = this.updateIcon(); // any of our attributes change, update our icon\n    }\n    render() {\n        if (this.name) {\n            return html `\n                <div id=\"container\"></div>\n            `;\n        }\n        else if (this.src) {\n            return html `\n                <img src=\"${this.src}\" alt=${ifDefined(this.label)} />\n            `;\n        }\n        return html `\n            <slot></slot>\n        `;\n    }\n    async updateIcon() {\n        if (!this.name) {\n            return Promise.resolve();\n        }\n        // parse the icon name to get iconset name\n        const icon = this.parseIcon(this.name);\n        // try to retrieve the iconset\n        const iconset = IconsetRegistry.getInstance().getIconset(icon.iconset);\n        if (!iconset) {\n            // we can stop here as there's nothing to be done till we get the iconset\n            return Promise.resolve();\n        }\n        if (!this.iconContainer) {\n            return Promise.resolve();\n        }\n        this.iconContainer.innerHTML = '';\n        return iconset.applyIconToElement(this.iconContainer, icon.icon, this.size, this.label ? this.label : '');\n    }\n    parseIcon(icon) {\n        const iconParts = icon.split(':');\n        let iconsetName = 'default';\n        let iconName = icon;\n        if (iconParts.length > 1) {\n            iconsetName = iconParts[0];\n            iconName = iconParts[1];\n        }\n        return { iconset: iconsetName, icon: iconName };\n    }\n    async _getUpdateComplete() {\n        await super._getUpdateComplete();\n        await this.updateIconPromise;\n    }\n}\nIcon.is = 'sp-icon';\n__decorate([\n    property()\n], Icon.prototype, \"src\", void 0);\n__decorate([\n    property()\n], Icon.prototype, \"name\", void 0);\n__decorate([\n    property({ reflect: true })\n], Icon.prototype, \"size\", void 0);\n__decorate([\n    property()\n], Icon.prototype, \"label\", void 0);\n__decorate([\n    query('#container')\n], Icon.prototype, \"iconContainer\", void 0);\n//# sourceMappingURL=icon.js.map","/*\nCopyright 2019 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nexport * from './icon.js';\nimport { Icon } from './icon.js';\n/* istanbul ignore else */\nif (!customElements.get('sp-icon')) {\n    customElements.define('sp-icon', Icon);\n}\n//# sourceMappingURL=index.js.map","import { __decorate } from \"tslib\";\n/*\nCopyright 2019 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { IconsetRegistry } from './iconset-registry.js';\nimport { LitElement, property } from 'lit-element';\nexport class Iconset extends LitElement {\n    constructor() {\n        super(...arguments);\n        this.registered = false;\n        this.handleRemoved = ({ detail, }) => {\n            if (detail.name === this.name) {\n                this.registered = false;\n                this.addIconset();\n            }\n        };\n    }\n    firstUpdated() {\n        // force no display for all iconsets\n        this.style.display = 'none';\n    }\n    /**\n     * Name of the iconset, used by the IconsetRegistry to serve this icon set\n     * to consuming icons.\n     */\n    set name(value) {\n        // if we're already registered in the iconset registry\n        // we'll need to update our registration\n        if (this.registered) {\n            if (this._name) {\n                // remove from the iconset map using the old name\n                IconsetRegistry.getInstance().removeIconset(this._name);\n            }\n            if (value) {\n                // set in the map using the new name\n                IconsetRegistry.getInstance().addIconset(value, this);\n            }\n        }\n        this._name = value;\n    }\n    get name() {\n        return this._name;\n    }\n    /**\n     * On updated we register the iconset if we're not already registered\n     */\n    connectedCallback() {\n        super.connectedCallback();\n        this.addIconset();\n        window.addEventListener('sp-iconset-removed', this.handleRemoved);\n    }\n    /**\n     * On disconnected we remove the iconset\n     */\n    disconnectedCallback() {\n        super.disconnectedCallback();\n        window.removeEventListener('sp-iconset-removed', this.handleRemoved);\n        this.removeIconset();\n    }\n    addIconset() {\n        if (!this.name || this.registered) {\n            return;\n        }\n        IconsetRegistry.getInstance().addIconset(this.name, this);\n        this.registered = true;\n    }\n    removeIconset() {\n        if (!this.name) {\n            return;\n        }\n        IconsetRegistry.getInstance().removeIconset(this.name);\n        this.registered = false;\n    }\n}\n__decorate([\n    property()\n], Iconset.prototype, \"name\", null);\n//# sourceMappingURL=iconset.js.map","/*\nCopyright 2019 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\nimport { __decorate } from \"tslib\";\nimport { html, query } from 'lit-element';\nimport { Iconset } from './iconset.js';\nexport class IconsetSVG extends Iconset {\n    constructor() {\n        super(...arguments);\n        this.iconMap = new Map();\n    }\n    /**\n     * First updated handler just ensures we've processed any slotted symbols\n     */\n    updated(changedProperties) {\n        if (!this.slotContainer) {\n            return;\n        }\n        const currentSVGNodes = this.getSVGNodes(this.slotContainer);\n        this.updateSVG(currentSVGNodes);\n        super.updated(changedProperties);\n    }\n    /**\n     * Applies the requested icon from this iconset instance to the given element.\n     *\n     * @param el - the element to apply the icon to\n     * @param icon - the name of the icon within this set to apply.\n     */\n    async applyIconToElement(el, icon, size, label) {\n        await this.updateComplete;\n        const iconSymbol = this.iconMap.get(icon);\n        if (!iconSymbol) {\n            throw new Error(`Unable to find icon ${icon}`);\n        }\n        // we cannot share a single SVG globally across shadowroot boundaries\n        // so copy the template node so we can inject it where we need it\n        const clonedNode = this.prepareSvgClone(iconSymbol);\n        clonedNode.setAttribute('role', 'img');\n        if (label) {\n            clonedNode.setAttribute('aria-label', label);\n        }\n        else {\n            clonedNode.setAttribute('aria-hidden', 'true');\n        }\n        // append the svg to the node either in its shadowroot or directly into its dom\n        if (el.shadowRoot) {\n            el.shadowRoot.appendChild(clonedNode);\n        }\n        else {\n            el.appendChild(clonedNode);\n        }\n    }\n    /**\n     * Returns a list of all icons in this iconset.\n     */\n    getIconList() {\n        return [...this.iconMap.keys()];\n    }\n    prepareSvgClone(sourceSvg) {\n        const content = sourceSvg.cloneNode(true);\n        // we're going to create a new svg element that will have our symbol geometry inside\n        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\n        const viewBox = content.getAttribute('viewBox') || '';\n        // inline style isn't ideal but will work in all cases and means our icons don't need to know\n        // if they are svg or spritesheet provided\n        const cssText = 'pointer-events: none; display: block; width: 100%; height: 100%;';\n        svg.style.cssText = cssText;\n        // copy the viewbox and other properties into the svg\n        svg.setAttribute('viewBox', viewBox);\n        svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');\n        svg.setAttribute('focusable', 'false');\n        // move all the child nodes over to the svg\n        while (content.childNodes.length > 0) {\n            svg.appendChild(content.childNodes[0]);\n        }\n        return svg;\n    }\n    getSVGIconName(icon) {\n        return icon;\n    }\n    getSanitizedIconName(icon) {\n        return icon;\n    }\n    renderDefaultContent() {\n        return html ``;\n    }\n    render() {\n        return html `\n            <slot @slotchange=${this.onSlotChange}>\n                ${this.renderDefaultContent()}\n            </slot>\n        `;\n    }\n    updateSVG(nodes) {\n        // iterate over the nodes that were passed in, and find all the top level symbols\n        const symbols = nodes.reduce((prev, svgNode) => {\n            const containedSymbols = svgNode.querySelectorAll('symbol');\n            prev.push(...containedSymbols);\n            return prev;\n        }, []);\n        symbols.forEach((symbol) => {\n            this.iconMap.set(this.getSanitizedIconName(symbol.id), symbol);\n        });\n    }\n    getSVGNodes(slotTarget) {\n        const nodes = slotTarget.assignedNodes({ flatten: true });\n        // find all the svg nodes\n        const svgNodes = nodes.filter((node) => {\n            return node.nodeName === 'svg';\n        });\n        return svgNodes;\n    }\n    onSlotChange(event) {\n        const slotTarget = event.target;\n        const svgNodes = this.getSVGNodes(slotTarget);\n        this.updateSVG(svgNodes);\n    }\n}\n__decorate([\n    query('slot')\n], IconsetSVG.prototype, \"slotContainer\", void 0);\n//# sourceMappingURL=iconset-svg.js.map"],"names":["IconsetRegistry","iconsetMap","Map","name","iconset","set","event","CustomEvent","bubbles","composed","detail","setTimeout","window","dispatchEvent","delete","this","get","instance","styles","css","Icon","size","iconsetListener","_this","icon","parseIcon","updateIconPromise","updateIcon","addEventListener","removeEventListener","old","value","html","src","ifDefined","label","Promise","resolve","getInstance","getIconset","iconContainer","innerHTML","applyIconToElement","iconParts","split","iconsetName","iconName","length","iconStyles","LitElement","is","__decorate","property","reflect","query","customElements","define","Iconset","registered","handleRemoved","addIconset","style","display","removeIconset","_name","IconsetSVG","iconMap","changedProperties","slotContainer","currentSVGNodes","getSVGNodes","updateSVG","el","updateComplete","iconSymbol","Error","clonedNode","prepareSvgClone","setAttribute","shadowRoot","appendChild","keys","sourceSvg","content","cloneNode","svg","document","createElementNS","viewBox","getAttribute","cssText","childNodes","onSlotChange","renderDefaultContent","nodes","reduce","prev","svgNode","containedSymbols","querySelectorAll","push","forEach","symbol","_this2","getSanitizedIconName","id","slotTarget","assignedNodes","flatten","filter","node","nodeName","target","svgNodes"],"mappings":"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"}