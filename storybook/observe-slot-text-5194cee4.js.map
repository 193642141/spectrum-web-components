{"version":3,"file":"observe-slot-text-5194cee4.js","sources":["../../../packages/shared/lib/observe-slot-text.js"],"sourcesContent":["const observedSlotElement = Symbol('observedSlotElement');\nconst slotElementObserver = Symbol('slotElementObserver');\nconst startObserving = Symbol('startObserving');\nexport function ObserveSlotText(constructor, slotSelector = '#slot') {\n    return class SlotTextObservingElement extends constructor {\n        constructor() {\n            super(...arguments);\n            this.slotHasContent = false;\n        }\n        manageObservedSlot() {\n            this[observedSlotElement] = (this[observedSlotElement] ||\n                (this.shadowRoot\n                    ? this.shadowRoot.querySelector(slotSelector)\n                    : undefined));\n            if (!this[observedSlotElement]) {\n                return;\n            }\n            const slot = this[observedSlotElement];\n            let assignedNodes = slot.assignedNodes\n                ? slot.assignedNodes()\n                : [...this.childNodes].filter((node) => {\n                    const el = node;\n                    return !el.hasAttribute('slot');\n                });\n            assignedNodes = assignedNodes.filter((node) => {\n                if (node.tagName) {\n                    return true;\n                }\n                return node.textContent ? node.textContent.trim() : false;\n            });\n            this.slotHasContent = assignedNodes.length > 0;\n            this.requestUpdate();\n        }\n        firstUpdated(changedProperties) {\n            super.firstUpdated(changedProperties);\n            this.manageObservedSlot();\n        }\n        [startObserving]() {\n            const config = { characterData: true, subtree: true };\n            if (!this[slotElementObserver]) {\n                const callback = (mutationsList) => {\n                    for (const mutation of mutationsList) {\n                        /* istanbul ignore else */\n                        if (mutation.type === 'characterData') {\n                            this.manageObservedSlot();\n                        }\n                    }\n                };\n                this[slotElementObserver] = new MutationObserver(callback);\n            }\n            this[slotElementObserver].observe(this, config);\n        }\n        connectedCallback() {\n            super.connectedCallback();\n            this[startObserving]();\n        }\n        disconnectedCallback() {\n            /* istanbul ignore else */\n            if (this[slotElementObserver]) {\n                this[slotElementObserver].disconnect();\n            }\n            super.disconnectedCallback();\n        }\n    };\n}\n//# sourceMappingURL=observe-slot-text.js.map"],"names":["observedSlotElement","Symbol","slotElementObserver","startObserving","ObserveSlotText","constructor","slotSelector","[object Object]","slotHasContent","this","shadowRoot","querySelector","undefined","slot","assignedNodes","childNodes","filter","node","hasAttribute","tagName","textContent","trim","length","requestUpdate","changedProperties","firstUpdated","manageObservedSlot","MutationObserver","mutationsList","mutation","type","observe","characterData","subtree","connectedCallback","disconnect","disconnectedCallback"],"mappings":"AAaA,IAAMA,EAAsBC,OAAO,uBAC7BC,EAAsBD,OAAO,uBAC7BE,EAAiBF,OAAO,kBAa9B,SAAgBG,EACZC,EACAC,EAAe,gBAER,cAAuCD,EAAvCE,uCAMIC,gBAAiB,EAEjBD,6BACEP,GAAwBS,KAAKT,KAC7BS,KAAKC,WACAD,KAAKC,WAAWC,cAAcL,QAC9BM,GACLH,KAAKT,QAGJa,EAAOJ,KAAKT,GACdc,EAAgBD,EAAKC,cACnBD,EAAKC,gBACL,IAAIL,KAAKM,YAAYC,OAAQC,WACdA,EACAC,aAAa,UAElCJ,EAAgBA,EAAcE,OAAQC,KAC7BA,EAAqBE,WAGnBF,EAAKG,aAAcH,EAAKG,YAAYC,aAE1Cb,eAAiBM,EAAcQ,OAAS,OACxCC,iBAGChB,aAAaiB,SACbC,aAAaD,QACdE,sBAGAvB,SAEAM,KAAKP,GAAsB,MAWvBA,GAAuB,IAAIyB,iBAT5BC,QAEK,IAAMC,KAAYD,EAEG,kBAAlBC,EAASC,WACJJ,4BAMhBxB,GAAqB6B,QAAQtB,KAdnB,CAAEuB,eAAe,EAAMC,SAAS,IAiB5C1B,0BACG2B,yBACD/B,KAGFI,uBAECE,KAAKP,SACAA,GAAqBiC,mBAExBC"}