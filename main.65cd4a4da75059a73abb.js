/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	function webpackJsonpCallback(data) {
/******/ 		var chunkIds = data[0];
/******/ 		var moreModules = data[1];
/******/
/******/
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [];
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(data);
/******/
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// object to store loaded and loading chunks
/******/ 	// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 	// Promise = chunk loading, 0 = chunk loaded
/******/ 	var installedChunks = {
/******/ 		1: 0
/******/ 	};
/******/
/******/
/******/
/******/ 	// script path function
/******/ 	function jsonpScriptSrc(chunkId) {
/******/ 		return __webpack_require__.p + "" + ({}[chunkId]||chunkId) + "." + {"0":"35f176e4517f23af4d17","2":"17f7c54119daff9062d0","3":"91671a8025e32532c6bb","4":"02fcb3615bd98d5925e3"}[chunkId] + ".js"
/******/ 	}
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var promises = [];
/******/
/******/
/******/ 		// JSONP chunk loading for javascript
/******/
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData !== 0) { // 0 means "already installed".
/******/
/******/ 			// a Promise means "currently loading".
/******/ 			if(installedChunkData) {
/******/ 				promises.push(installedChunkData[2]);
/******/ 			} else {
/******/ 				// setup Promise in chunk cache
/******/ 				var promise = new Promise(function(resolve, reject) {
/******/ 					installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 				});
/******/ 				promises.push(installedChunkData[2] = promise);
/******/
/******/ 				// start chunk loading
/******/ 				var script = document.createElement('script');
/******/ 				var onScriptComplete;
/******/
/******/ 				script.charset = 'utf-8';
/******/ 				script.timeout = 120;
/******/ 				if (__webpack_require__.nc) {
/******/ 					script.setAttribute("nonce", __webpack_require__.nc);
/******/ 				}
/******/ 				script.src = jsonpScriptSrc(chunkId);
/******/
/******/ 				// create error before stack unwound to get useful stacktrace later
/******/ 				var error = new Error();
/******/ 				onScriptComplete = function (event) {
/******/ 					// avoid mem leaks in IE.
/******/ 					script.onerror = script.onload = null;
/******/ 					clearTimeout(timeout);
/******/ 					var chunk = installedChunks[chunkId];
/******/ 					if(chunk !== 0) {
/******/ 						if(chunk) {
/******/ 							var errorType = event && (event.type === 'load' ? 'missing' : event.type);
/******/ 							var realSrc = event && event.target && event.target.src;
/******/ 							error.message = 'Loading chunk ' + chunkId + ' failed.\n(' + errorType + ': ' + realSrc + ')';
/******/ 							error.type = errorType;
/******/ 							error.request = realSrc;
/******/ 							chunk[1](error);
/******/ 						}
/******/ 						installedChunks[chunkId] = undefined;
/******/ 					}
/******/ 				};
/******/ 				var timeout = setTimeout(function(){
/******/ 					onScriptComplete({ type: 'timeout', target: script });
/******/ 				}, 120000);
/******/ 				script.onerror = script.onload = onScriptComplete;
/******/ 				document.head.appendChild(script);
/******/ 			}
/******/ 		}
/******/ 		return Promise.all(promises);
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	var jsonpArray = window["webpackJsonp"] = window["webpackJsonp"] || [];
/******/ 	var oldJsonpFunction = jsonpArray.push.bind(jsonpArray);
/******/ 	jsonpArray.push = webpackJsonpCallback;
/******/ 	jsonpArray = jsonpArray.slice();
/******/ 	for(var i = 0; i < jsonpArray.length; i++) webpackJsonpCallback(jsonpArray[i]);
/******/ 	var parentJsonpFunction = oldJsonpFunction;
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 11);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/lit-html/lit-html.js + 1 modules
var lit_html = __webpack_require__(4);

// EXTERNAL MODULE: ./node_modules/lit-html/lib/dom.js
var dom = __webpack_require__(5);

// EXTERNAL MODULE: ./node_modules/lit-html/lib/template.js
var lib_template = __webpack_require__(1);

// CONCATENATED MODULE: ./node_modules/lit-html/lib/modify-template.js
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

/**
 * @module shady-render
 */

const walkerNodeFilter = 133
/* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */
;
/**
 * Removes the list of nodes from a Template safely. In addition to removing
 * nodes from the Template, the Template part indices are updated to match
 * the mutated Template DOM.
 *
 * As the template is walked the removal state is tracked and
 * part indices are adjusted as needed.
 *
 * div
 *   div#1 (remove) <-- start removing (removing node is div#1)
 *     div
 *       div#2 (remove)  <-- continue removing (removing node is still div#1)
 *         div
 * div <-- stop removing since previous sibling is the removing node (div#1,
 * removed 4 nodes)
 */

function removeNodesFromTemplate(template, nodesToRemove) {
  const {
    element: {
      content
    },
    parts
  } = template;
  const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
  let partIndex = nextActiveIndexInTemplateParts(parts);
  let part = parts[partIndex];
  let nodeIndex = -1;
  let removeCount = 0;
  const nodesToRemoveInTemplate = [];
  let currentRemovingNode = null;

  while (walker.nextNode()) {
    nodeIndex++;
    const node = walker.currentNode; // End removal if stepped past the removing node

    if (node.previousSibling === currentRemovingNode) {
      currentRemovingNode = null;
    } // A node to remove was found in the template


    if (nodesToRemove.has(node)) {
      nodesToRemoveInTemplate.push(node); // Track node we're removing

      if (currentRemovingNode === null) {
        currentRemovingNode = node;
      }
    } // When removing, increment count by which to adjust subsequent part indices


    if (currentRemovingNode !== null) {
      removeCount++;
    }

    while (part !== undefined && part.index === nodeIndex) {
      // If part is in a removed node deactivate it by setting index to -1 or
      // adjust the index as needed.
      part.index = currentRemovingNode !== null ? -1 : part.index - removeCount; // go to the next active part.

      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
      part = parts[partIndex];
    }
  }

  nodesToRemoveInTemplate.forEach(n => n.parentNode.removeChild(n));
}

const countNodes = node => {
  let count = node.nodeType === 11
  /* Node.DOCUMENT_FRAGMENT_NODE */
  ? 0 : 1;
  const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);

  while (walker.nextNode()) {
    count++;
  }

  return count;
};

const nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {
  for (let i = startIndex + 1; i < parts.length; i++) {
    const part = parts[i];

    if (Object(lib_template["d" /* isTemplatePartActive */])(part)) {
      return i;
    }
  }

  return -1;
};
/**
 * Inserts the given node into the Template, optionally before the given
 * refNode. In addition to inserting the node into the Template, the Template
 * part indices are updated to match the mutated Template DOM.
 */


function insertNodeIntoTemplate(template, node, refNode = null) {
  const {
    element: {
      content
    },
    parts
  } = template; // If there's no refNode, then put node at end of template.
  // No part indices need to be shifted in this case.

  if (refNode === null || refNode === undefined) {
    content.appendChild(node);
    return;
  }

  const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);
  let partIndex = nextActiveIndexInTemplateParts(parts);
  let insertCount = 0;
  let walkerIndex = -1;

  while (walker.nextNode()) {
    walkerIndex++;
    const walkerNode = walker.currentNode;

    if (walkerNode === refNode) {
      insertCount = countNodes(node);
      refNode.parentNode.insertBefore(node, refNode);
    }

    while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {
      // If we've inserted the node, simply adjust all subsequent parts
      if (insertCount > 0) {
        while (partIndex !== -1) {
          parts[partIndex].index += insertCount;
          partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
        }

        return;
      }

      partIndex = nextActiveIndexInTemplateParts(parts, partIndex);
    }
  }
}
// EXTERNAL MODULE: ./node_modules/lit-html/lib/render.js
var render = __webpack_require__(9);

// EXTERNAL MODULE: ./node_modules/lit-html/lib/template-factory.js
var template_factory = __webpack_require__(7);

// EXTERNAL MODULE: ./node_modules/lit-html/lib/template-instance.js
var template_instance = __webpack_require__(10);

// EXTERNAL MODULE: ./node_modules/lit-html/lib/template-result.js
var template_result = __webpack_require__(6);

// CONCATENATED MODULE: ./node_modules/lit-html/lib/shady-render.js
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

/**
 * Module to add shady DOM/shady CSS polyfill support to lit-html template
 * rendering. See the [[render]] method for details.
 *
 * @module shady-render
 * @preferred
 */

/**
 * Do not remove this comment; it keeps typedoc from misplacing the module
 * docs.
 */







 // Get a key to lookup in `templateCaches`.

const getTemplateCacheKey = (type, scopeName) => "".concat(type, "--").concat(scopeName);

let compatibleShadyCSSVersion = true;

if (typeof window.ShadyCSS === 'undefined') {
  compatibleShadyCSSVersion = false;
} else if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {
  console.warn("Incompatible ShadyCSS version detected." + "Please update to at least @webcomponents/webcomponentsjs@2.0.2 and" + "@webcomponents/shadycss@1.3.1.");
  compatibleShadyCSSVersion = false;
}
/**
 * Template factory which scopes template DOM using ShadyCSS.
 * @param scopeName {string}
 */


const shadyTemplateFactory = scopeName => result => {
  const cacheKey = getTemplateCacheKey(result.type, scopeName);
  let templateCache = template_factory["a" /* templateCaches */].get(cacheKey);

  if (templateCache === undefined) {
    templateCache = {
      stringsArray: new WeakMap(),
      keyString: new Map()
    };
    template_factory["a" /* templateCaches */].set(cacheKey, templateCache);
  }

  let template = templateCache.stringsArray.get(result.strings);

  if (template !== undefined) {
    return template;
  }

  const key = result.strings.join(lib_template["f" /* marker */]);
  template = templateCache.keyString.get(key);

  if (template === undefined) {
    const element = result.getTemplateElement();

    if (compatibleShadyCSSVersion) {
      window.ShadyCSS.prepareTemplateDom(element, scopeName);
    }

    template = new lib_template["a" /* Template */](result, element);
    templateCache.keyString.set(key, template);
  }

  templateCache.stringsArray.set(result.strings, template);
  return template;
};

const TEMPLATE_TYPES = ['html', 'svg'];
/**
 * Removes all style elements from Templates for the given scopeName.
 */

const removeStylesFromLitTemplates = scopeName => {
  TEMPLATE_TYPES.forEach(type => {
    const templates = template_factory["a" /* templateCaches */].get(getTemplateCacheKey(type, scopeName));

    if (templates !== undefined) {
      templates.keyString.forEach(template => {
        const {
          element: {
            content
          }
        } = template; // IE 11 doesn't support the iterable param Set constructor

        const styles = new Set();
        Array.from(content.querySelectorAll('style')).forEach(s => {
          styles.add(s);
        });
        removeNodesFromTemplate(template, styles);
      });
    }
  });
};

const shadyRenderSet = new Set();
/**
 * For the given scope name, ensures that ShadyCSS style scoping is performed.
 * This is done just once per scope name so the fragment and template cannot
 * be modified.
 * (1) extracts styles from the rendered fragment and hands them to ShadyCSS
 * to be scoped and appended to the document
 * (2) removes style elements from all lit-html Templates for this scope name.
 *
 * Note, <style> elements can only be placed into templates for the
 * initial rendering of the scope. If <style> elements are included in templates
 * dynamically rendered to the scope (after the first scope render), they will
 * not be scoped and the <style> will be left in the template and rendered
 * output.
 */

const prepareTemplateStyles = (renderedDOM, template, scopeName) => {
  shadyRenderSet.add(scopeName); // Move styles out of rendered DOM and store.

  const styles = renderedDOM.querySelectorAll('style'); // If there are no styles, skip unnecessary work

  if (styles.length === 0) {
    // Ensure prepareTemplateStyles is called to support adding
    // styles via `prepareAdoptedCssText` since that requires that
    // `prepareTemplateStyles` is called.
    window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);
    return;
  }

  const condensedStyle = document.createElement('style'); // Collect styles into a single style. This helps us make sure ShadyCSS
  // manipulations will not prevent us from being able to fix up template
  // part indices.
  // NOTE: collecting styles is inefficient for browsers but ShadyCSS
  // currently does this anyway. When it does not, this should be changed.

  for (let i = 0; i < styles.length; i++) {
    const style = styles[i];
    style.parentNode.removeChild(style);
    condensedStyle.textContent += style.textContent;
  } // Remove styles from nested templates in this scope.


  removeStylesFromLitTemplates(scopeName); // And then put the condensed style into the "root" template passed in as
  // `template`.

  insertNodeIntoTemplate(template, condensedStyle, template.element.content.firstChild); // Note, it's important that ShadyCSS gets the template that `lit-html`
  // will actually render so that it can update the style inside when
  // needed (e.g. @apply native Shadow DOM case).

  window.ShadyCSS.prepareTemplateStyles(template.element, scopeName);

  if (window.ShadyCSS.nativeShadow) {
    // When in native Shadow DOM, re-add styling to rendered content using
    // the style ShadyCSS produced.
    const style = template.element.content.querySelector('style');
    renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);
  } else {
    // When not in native Shadow DOM, at this point ShadyCSS will have
    // removed the style from the lit template and parts will be broken as a
    // result. To fix this, we put back the style node ShadyCSS removed
    // and then tell lit to remove that node from the template.
    // NOTE, ShadyCSS creates its own style so we can safely add/remove
    // `condensedStyle` here.
    template.element.content.insertBefore(condensedStyle, template.element.content.firstChild);
    const removes = new Set();
    removes.add(condensedStyle);
    removeNodesFromTemplate(template, removes);
  }
};
/**
 * Extension to the standard `render` method which supports rendering
 * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)
 * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used
 * or when the webcomponentsjs
 * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.
 *
 * Adds a `scopeName` option which is used to scope element DOM and stylesheets
 * when native ShadowDOM is unavailable. The `scopeName` will be added to
 * the class attribute of all rendered DOM. In addition, any style elements will
 * be automatically re-written with this `scopeName` selector and moved out
 * of the rendered DOM and into the document `<head>`.
 *
 * It is common to use this render method in conjunction with a custom element
 * which renders a shadowRoot. When this is done, typically the element's
 * `localName` should be used as the `scopeName`.
 *
 * In addition to DOM scoping, ShadyCSS also supports a basic shim for css
 * custom properties (needed only on older browsers like IE11) and a shim for
 * a deprecated feature called `@apply` that supports applying a set of css
 * custom properties to a given location.
 *
 * Usage considerations:
 *
 * * Part values in `<style>` elements are only applied the first time a given
 * `scopeName` renders. Subsequent changes to parts in style elements will have
 * no effect. Because of this, parts in style elements should only be used for
 * values that will never change, for example parts that set scope-wide theme
 * values or parts which render shared style elements.
 *
 * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a
 * custom element's `constructor` is not supported. Instead rendering should
 * either done asynchronously, for example at microtask timing (for example
 * `Promise.resolve()`), or be deferred until the first time the element's
 * `connectedCallback` runs.
 *
 * Usage considerations when using shimmed custom properties or `@apply`:
 *
 * * Whenever any dynamic changes are made which affect
 * css custom properties, `ShadyCSS.styleElement(element)` must be called
 * to update the element. There are two cases when this is needed:
 * (1) the element is connected to a new parent, (2) a class is added to the
 * element that causes it to match different custom properties.
 * To address the first case when rendering a custom element, `styleElement`
 * should be called in the element's `connectedCallback`.
 *
 * * Shimmed custom properties may only be defined either for an entire
 * shadowRoot (for example, in a `:host` rule) or via a rule that directly
 * matches an element with a shadowRoot. In other words, instead of flowing from
 * parent to child as do native css custom properties, shimmed custom properties
 * flow only from shadowRoots to nested shadowRoots.
 *
 * * When using `@apply` mixing css shorthand property names with
 * non-shorthand names (for example `border` and `border-width`) is not
 * supported.
 */


const shady_render_render = (result, container, options) => {
  const scopeName = options.scopeName;
  const hasRendered = render["a" /* parts */].has(container);
  const needsScoping = container instanceof ShadowRoot && compatibleShadyCSSVersion && result instanceof template_result["b" /* TemplateResult */]; // Handle first render to a scope specially...

  const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName); // On first scope render, render into a fragment; this cannot be a single
  // fragment that is reused since nested renders can occur synchronously.

  const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;
  Object(render["b" /* render */])(result, renderContainer, Object.assign({
    templateFactory: shadyTemplateFactory(scopeName)
  }, options)); // When performing first scope render,
  // (1) We've rendered into a fragment so that there's a chance to
  // `prepareTemplateStyles` before sub-elements hit the DOM
  // (which might cause them to render based on a common pattern of
  // rendering in a custom element's `connectedCallback`);
  // (2) Scope the template with ShadyCSS one time only for this scope.
  // (3) Render the fragment into the container and make sure the
  // container knows its `part` is the one we just rendered. This ensures
  // DOM will be re-used on subsequent renders.

  if (firstScopeRender) {
    const part = render["a" /* parts */].get(renderContainer);
    render["a" /* parts */].delete(renderContainer);

    if (part.value instanceof template_instance["a" /* TemplateInstance */]) {
      prepareTemplateStyles(renderContainer, part.value.template, scopeName);
    }

    Object(dom["b" /* removeNodes */])(container, container.firstChild);
    container.appendChild(renderContainer);
    render["a" /* parts */].set(container, part);
  } // After elements have hit the DOM, update styling if this is the
  // initial render to this container.
  // This is needed whenever dynamic changes are made so it would be
  // safest to do every render; however, this would regress performance
  // so we leave it up to the user to call `ShadyCSSS.styleElement`
  // for dynamic changes.


  if (!hasRendered && needsScoping) {
    window.ShadyCSS.styleElement(container.host);
  }
};
// CONCATENATED MODULE: ./node_modules/lit-element/lib/updating-element.js
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }

function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }

/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

/**
 * When using Closure Compiler, JSCompiler_renameProperty(property, object) is
 * replaced at compile time by the munged name for object[property]. We cannot
 * alias this function, so we have to use a small shim that has the same
 * behavior when not compiling.
 */
window.JSCompiler_renameProperty = (prop, _obj) => prop;

const defaultConverter = {
  toAttribute(value, type) {
    switch (type) {
      case Boolean:
        return value ? '' : null;

      case Object:
      case Array:
        // if the value is `null` or `undefined` pass this through
        // to allow removing/no change behavior.
        return value == null ? value : JSON.stringify(value);
    }

    return value;
  },

  fromAttribute(value, type) {
    switch (type) {
      case Boolean:
        return value !== null;

      case Number:
        return value === null ? null : Number(value);

      case Object:
      case Array:
        return JSON.parse(value);
    }

    return value;
  }

};
/**
 * Change function that returns true if `value` is different from `oldValue`.
 * This method is used as the default for a property's `hasChanged` function.
 */

const notEqual = (value, old) => {
  // This ensures (old==NaN, value==NaN) always returns false
  return old !== value && (old === old || value === value);
};
const defaultPropertyDeclaration = {
  attribute: true,
  type: String,
  converter: defaultConverter,
  reflect: false,
  hasChanged: notEqual
};
const microtaskPromise = Promise.resolve(true);
const STATE_HAS_UPDATED = 1;
const STATE_UPDATE_REQUESTED = 1 << 2;
const STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;
const STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;
const STATE_HAS_CONNECTED = 1 << 5;
/**
 * Base element class which manages element properties and attributes. When
 * properties change, the `update` method is asynchronously called. This method
 * should be supplied by subclassers to render updates as desired.
 */

class UpdatingElement extends HTMLElement {
  constructor() {
    super();
    this._updateState = 0;
    this._instanceProperties = undefined;
    this._updatePromise = microtaskPromise;
    this._hasConnectedResolver = undefined;
    /**
     * Map with keys for any properties that have changed since the last
     * update cycle with previous values.
     */

    this._changedProperties = new Map();
    /**
     * Map with keys of properties that should be reflected when updated.
     */

    this._reflectingProperties = undefined;
    this.initialize();
  }
  /**
   * Returns a list of attributes corresponding to the registered properties.
   * @nocollapse
   */


  static get observedAttributes() {
    // note: piggy backing on this to ensure we're finalized.
    this.finalize();
    const attributes = []; // Use forEach so this works even if for/of loops are compiled to for loops
    // expecting arrays

    this._classProperties.forEach((v, p) => {
      const attr = this._attributeNameForProperty(p, v);

      if (attr !== undefined) {
        this._attributeToPropertyMap.set(attr, p);

        attributes.push(attr);
      }
    });

    return attributes;
  }
  /**
   * Ensures the private `_classProperties` property metadata is created.
   * In addition to `finalize` this is also called in `createProperty` to
   * ensure the `@property` decorator can add property metadata.
   */

  /** @nocollapse */


  static _ensureClassProperties() {
    // ensure private storage for property declarations.
    if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {
      this._classProperties = new Map(); // NOTE: Workaround IE11 not supporting Map constructor argument.

      const superProperties = Object.getPrototypeOf(this)._classProperties;

      if (superProperties !== undefined) {
        superProperties.forEach((v, k) => this._classProperties.set(k, v));
      }
    }
  }
  /**
   * Creates a property accessor on the element prototype if one does not exist.
   * The property setter calls the property's `hasChanged` property option
   * or uses a strict identity check to determine whether or not to request
   * an update.
   * @nocollapse
   */


  static createProperty(name, options = defaultPropertyDeclaration) {
    // Note, since this can be called by the `@property` decorator which
    // is called before `finalize`, we ensure storage exists for property
    // metadata.
    this._ensureClassProperties();

    this._classProperties.set(name, options); // Do not generate an accessor if the prototype already has one, since
    // it would be lost otherwise and that would never be the user's intention;
    // Instead, we expect users to call `requestUpdate` themselves from
    // user-defined accessors. Note that if the super has an accessor we will
    // still overwrite it


    if (options.noAccessor || this.prototype.hasOwnProperty(name)) {
      return;
    }

    const key = typeof name === 'symbol' ? Symbol() : "__".concat(name);
    Object.defineProperty(this.prototype, name, {
      // tslint:disable-next-line:no-any no symbol in index
      get() {
        return this[key];
      },

      set(value) {
        // tslint:disable-next-line:no-any no symbol in index
        const oldValue = this[name]; // tslint:disable-next-line:no-any no symbol in index

        this[key] = value;

        this._requestUpdate(name, oldValue);
      },

      configurable: true,
      enumerable: true
    });
  }
  /**
   * Creates property accessors for registered properties and ensures
   * any superclasses are also finalized.
   * @nocollapse
   */


  static finalize() {
    if (this.hasOwnProperty(JSCompiler_renameProperty('finalized', this)) && this.finalized) {
      return;
    } // finalize any superclasses


    const superCtor = Object.getPrototypeOf(this);

    if (typeof superCtor.finalize === 'function') {
      superCtor.finalize();
    }

    this.finalized = true;

    this._ensureClassProperties(); // initialize Map populated in observedAttributes


    this._attributeToPropertyMap = new Map(); // make any properties
    // Note, only process "own" properties since this element will inherit
    // any properties defined on the superClass, and finalization ensures
    // the entire prototype chain is finalized.

    if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {
      const props = this.properties; // support symbols in properties (IE11 does not support this)

      const propKeys = [...Object.getOwnPropertyNames(props), ...(typeof Object.getOwnPropertySymbols === 'function' ? Object.getOwnPropertySymbols(props) : [])]; // This for/of is ok because propKeys is an array

      for (const p of propKeys) {
        // note, use of `any` is due to TypeSript lack of support for symbol in
        // index types
        // tslint:disable-next-line:no-any no symbol in index
        this.createProperty(p, props[p]);
      }
    }
  }
  /**
   * Returns the property name for the given attribute `name`.
   * @nocollapse
   */


  static _attributeNameForProperty(name, options) {
    const attribute = options.attribute;
    return attribute === false ? undefined : typeof attribute === 'string' ? attribute : typeof name === 'string' ? name.toLowerCase() : undefined;
  }
  /**
   * Returns true if a property should request an update.
   * Called when a property value is set and uses the `hasChanged`
   * option for the property if present or a strict identity check.
   * @nocollapse
   */


  static _valueHasChanged(value, old, hasChanged = notEqual) {
    return hasChanged(value, old);
  }
  /**
   * Returns the property value for the given attribute value.
   * Called via the `attributeChangedCallback` and uses the property's
   * `converter` or `converter.fromAttribute` property option.
   * @nocollapse
   */


  static _propertyValueFromAttribute(value, options) {
    const type = options.type;
    const converter = options.converter || defaultConverter;
    const fromAttribute = typeof converter === 'function' ? converter : converter.fromAttribute;
    return fromAttribute ? fromAttribute(value, type) : value;
  }
  /**
   * Returns the attribute value for the given property value. If this
   * returns undefined, the property will *not* be reflected to an attribute.
   * If this returns null, the attribute will be removed, otherwise the
   * attribute will be set to the value.
   * This uses the property's `reflect` and `type.toAttribute` property options.
   * @nocollapse
   */


  static _propertyValueToAttribute(value, options) {
    if (options.reflect === undefined) {
      return;
    }

    const type = options.type;
    const converter = options.converter;
    const toAttribute = converter && converter.toAttribute || defaultConverter.toAttribute;
    return toAttribute(value, type);
  }
  /**
   * Performs element initialization. By default captures any pre-set values for
   * registered properties.
   */


  initialize() {
    this._saveInstanceProperties(); // ensures first update will be caught by an early access of `updateComplete`


    this._requestUpdate();
  }
  /**
   * Fixes any properties set on the instance before upgrade time.
   * Otherwise these would shadow the accessor and break these properties.
   * The properties are stored in a Map which is played back after the
   * constructor runs. Note, on very old versions of Safari (<=9) or Chrome
   * (<=41), properties created for native platform properties like (`id` or
   * `name`) may not have default values set in the element constructor. On
   * these browsers native properties appear on instances and therefore their
   * default value will overwrite any element default (e.g. if the element sets
   * this.id = 'id' in the constructor, the 'id' will become '' since this is
   * the native platform default).
   */


  _saveInstanceProperties() {
    // Use forEach so this works even if for/of loops are compiled to for loops
    // expecting arrays
    this.constructor._classProperties.forEach((_v, p) => {
      if (this.hasOwnProperty(p)) {
        const value = this[p];
        delete this[p];

        if (!this._instanceProperties) {
          this._instanceProperties = new Map();
        }

        this._instanceProperties.set(p, value);
      }
    });
  }
  /**
   * Applies previously saved instance properties.
   */


  _applyInstanceProperties() {
    // Use forEach so this works even if for/of loops are compiled to for loops
    // expecting arrays
    // tslint:disable-next-line:no-any
    this._instanceProperties.forEach((v, p) => this[p] = v);

    this._instanceProperties = undefined;
  }

  connectedCallback() {
    this._updateState = this._updateState | STATE_HAS_CONNECTED; // Ensure first connection completes an update. Updates cannot complete before
    // connection and if one is pending connection the `_hasConnectionResolver`
    // will exist. If so, resolve it to complete the update, otherwise
    // requestUpdate.

    if (this._hasConnectedResolver) {
      this._hasConnectedResolver();

      this._hasConnectedResolver = undefined;
    }
  }
  /**
   * Allows for `super.disconnectedCallback()` in extensions while
   * reserving the possibility of making non-breaking feature additions
   * when disconnecting at some point in the future.
   */


  disconnectedCallback() {}
  /**
   * Synchronizes property values when attributes change.
   */


  attributeChangedCallback(name, old, value) {
    if (old !== value) {
      this._attributeToProperty(name, value);
    }
  }

  _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {
    const ctor = this.constructor;

    const attr = ctor._attributeNameForProperty(name, options);

    if (attr !== undefined) {
      const attrValue = ctor._propertyValueToAttribute(value, options); // an undefined value does not change the attribute.


      if (attrValue === undefined) {
        return;
      } // Track if the property is being reflected to avoid
      // setting the property again via `attributeChangedCallback`. Note:
      // 1. this takes advantage of the fact that the callback is synchronous.
      // 2. will behave incorrectly if multiple attributes are in the reaction
      // stack at time of calling. However, since we process attributes
      // in `update` this should not be possible (or an extreme corner case
      // that we'd like to discover).
      // mark state reflecting


      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;

      if (attrValue == null) {
        this.removeAttribute(attr);
      } else {
        this.setAttribute(attr, attrValue);
      } // mark state not reflecting


      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;
    }
  }

  _attributeToProperty(name, value) {
    // Use tracking info to avoid deserializing attribute value if it was
    // just set from a property setter.
    if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {
      return;
    }

    const ctor = this.constructor;

    const propName = ctor._attributeToPropertyMap.get(name);

    if (propName !== undefined) {
      const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration; // mark state reflecting

      this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;
      this[propName] = // tslint:disable-next-line:no-any
      ctor._propertyValueFromAttribute(value, options); // mark state not reflecting

      this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;
    }
  }
  /**
   * This private version of `requestUpdate` does not access or return the
   * `updateComplete` promise. This promise can be overridden and is therefore
   * not free to access.
   */


  _requestUpdate(name, oldValue) {
    let shouldRequestUpdate = true; // If we have a property key, perform property update steps.

    if (name !== undefined) {
      const ctor = this.constructor;
      const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;

      if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {
        if (!this._changedProperties.has(name)) {
          this._changedProperties.set(name, oldValue);
        } // Add to reflecting properties set.
        // Note, it's important that every change has a chance to add the
        // property to `_reflectingProperties`. This ensures setting
        // attribute + property reflects correctly.


        if (options.reflect === true && !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {
          if (this._reflectingProperties === undefined) {
            this._reflectingProperties = new Map();
          }

          this._reflectingProperties.set(name, options);
        }
      } else {
        // Abort the request if the property should not be considered changed.
        shouldRequestUpdate = false;
      }
    }

    if (!this._hasRequestedUpdate && shouldRequestUpdate) {
      this._enqueueUpdate();
    }
  }
  /**
   * Requests an update which is processed asynchronously. This should
   * be called when an element should update based on some state not triggered
   * by setting a property. In this case, pass no arguments. It should also be
   * called when manually implementing a property setter. In this case, pass the
   * property `name` and `oldValue` to ensure that any configured property
   * options are honored. Returns the `updateComplete` Promise which is resolved
   * when the update completes.
   *
   * @param name {PropertyKey} (optional) name of requesting property
   * @param oldValue {any} (optional) old value of requesting property
   * @returns {Promise} A Promise that is resolved when the update completes.
   */


  requestUpdate(name, oldValue) {
    this._requestUpdate(name, oldValue);

    return this.updateComplete;
  }
  /**
   * Sets up the element to asynchronously update.
   */


  _enqueueUpdate() {
    var _this = this;

    return _asyncToGenerator(function* () {
      // Mark state updating...
      _this._updateState = _this._updateState | STATE_UPDATE_REQUESTED;
      let resolve;
      let reject;
      const previousUpdatePromise = _this._updatePromise;
      _this._updatePromise = new Promise((res, rej) => {
        resolve = res;
        reject = rej;
      });

      try {
        // Ensure any previous update has resolved before updating.
        // This `await` also ensures that property changes are batched.
        yield previousUpdatePromise;
      } catch (e) {} // Ignore any previous errors. We only care that the previous cycle is
      // done. Any error should have been handled in the previous update.
      // Make sure the element has connected before updating.


      if (!_this._hasConnected) {
        yield new Promise(res => _this._hasConnectedResolver = res);
      }

      try {
        const result = _this.performUpdate(); // If `performUpdate` returns a Promise, we await it. This is done to
        // enable coordinating updates with a scheduler. Note, the result is
        // checked to avoid delaying an additional microtask unless we need to.


        if (result != null) {
          yield result;
        }
      } catch (e) {
        reject(e);
      }

      resolve(!_this._hasRequestedUpdate);
    })();
  }

  get _hasConnected() {
    return this._updateState & STATE_HAS_CONNECTED;
  }

  get _hasRequestedUpdate() {
    return this._updateState & STATE_UPDATE_REQUESTED;
  }

  get hasUpdated() {
    return this._updateState & STATE_HAS_UPDATED;
  }
  /**
   * Performs an element update. Note, if an exception is thrown during the
   * update, `firstUpdated` and `updated` will not be called.
   *
   * You can override this method to change the timing of updates. If this
   * method is overridden, `super.performUpdate()` must be called.
   *
   * For instance, to schedule updates to occur just before the next frame:
   *
   * ```
   * protected async performUpdate(): Promise<unknown> {
   *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));
   *   super.performUpdate();
   * }
   * ```
   */


  performUpdate() {
    // Mixin instance properties once, if they exist.
    if (this._instanceProperties) {
      this._applyInstanceProperties();
    }

    let shouldUpdate = false;
    const changedProperties = this._changedProperties;

    try {
      shouldUpdate = this.shouldUpdate(changedProperties);

      if (shouldUpdate) {
        this.update(changedProperties);
      }
    } catch (e) {
      // Prevent `firstUpdated` and `updated` from running when there's an
      // update exception.
      shouldUpdate = false;
      throw e;
    } finally {
      // Ensure element can accept additional updates after an exception.
      this._markUpdated();
    }

    if (shouldUpdate) {
      if (!(this._updateState & STATE_HAS_UPDATED)) {
        this._updateState = this._updateState | STATE_HAS_UPDATED;
        this.firstUpdated(changedProperties);
      }

      this.updated(changedProperties);
    }
  }

  _markUpdated() {
    this._changedProperties = new Map();
    this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;
  }
  /**
   * Returns a Promise that resolves when the element has completed updating.
   * The Promise value is a boolean that is `true` if the element completed the
   * update without triggering another update. The Promise result is `false` if
   * a property was set inside `updated()`. If the Promise is rejected, an
   * exception was thrown during the update. This getter can be implemented to
   * await additional state. For example, it is sometimes useful to await a
   * rendered element before fulfilling this Promise. To do this, first await
   * `super.updateComplete` then any subsequent state.
   *
   * @returns {Promise} The Promise returns a boolean that indicates if the
   * update resolved without triggering another update.
   */


  get updateComplete() {
    return this._updatePromise;
  }
  /**
   * Controls whether or not `update` should be called when the element requests
   * an update. By default, this method always returns `true`, but this can be
   * customized to control when to update.
   *
   * * @param _changedProperties Map of changed properties with old values
   */


  shouldUpdate(_changedProperties) {
    return true;
  }
  /**
   * Updates the element. This method reflects property values to attributes.
   * It can be overridden to render and keep updated element DOM.
   * Setting properties inside this method will *not* trigger
   * another update.
   *
   * * @param _changedProperties Map of changed properties with old values
   */


  update(_changedProperties) {
    if (this._reflectingProperties !== undefined && this._reflectingProperties.size > 0) {
      // Use forEach so this works even if for/of loops are compiled to for
      // loops expecting arrays
      this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));

      this._reflectingProperties = undefined;
    }
  }
  /**
   * Invoked whenever the element is updated. Implement to perform
   * post-updating tasks via DOM APIs, for example, focusing an element.
   *
   * Setting properties inside this method will trigger the element to update
   * again after this update cycle completes.
   *
   * * @param _changedProperties Map of changed properties with old values
   */


  updated(_changedProperties) {}
  /**
   * Invoked when the element is first updated. Implement to perform one time
   * work on the element after update.
   *
   * Setting properties inside this method will trigger the element to update
   * again after this update cycle completes.
   *
   * * @param _changedProperties Map of changed properties with old values
   */


  firstUpdated(_changedProperties) {}

}
/**
 * Marks class as having finished creating properties.
 */

UpdatingElement.finalized = true;
// CONCATENATED MODULE: ./node_modules/lit-element/lib/decorators.js
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const legacyCustomElement = (tagName, clazz) => {
  window.customElements.define(tagName, clazz); // Cast as any because TS doesn't recognize the return type as being a
  // subtype of the decorated class when clazz is typed as
  // `Constructor<HTMLElement>` for some reason.
  // `Constructor<HTMLElement>` is helpful to make sure the decorator is
  // applied to elements however.
  // tslint:disable-next-line:no-any

  return clazz;
};

const standardCustomElement = (tagName, descriptor) => {
  const {
    kind,
    elements
  } = descriptor;
  return {
    kind,
    elements,

    // This callback is called once the class is otherwise fully defined
    finisher(clazz) {
      window.customElements.define(tagName, clazz);
    }

  };
};
/**
 * Class decorator factory that defines the decorated class as a custom element.
 *
 * @param tagName the name of the custom element to define
 */


const customElement = tagName => classOrDescriptor => typeof classOrDescriptor === 'function' ? legacyCustomElement(tagName, classOrDescriptor) : standardCustomElement(tagName, classOrDescriptor);

const standardProperty = (options, element) => {
  // When decorating an accessor, pass it through and add property metadata.
  // Note, the `hasOwnProperty` check in `createProperty` ensures we don't
  // stomp over the user's accessor.
  if (element.kind === 'method' && element.descriptor && !('value' in element.descriptor)) {
    return Object.assign({}, element, {
      finisher(clazz) {
        clazz.createProperty(element.key, options);
      }

    });
  } else {
    // createProperty() takes care of defining the property, but we still
    // must return some kind of descriptor, so return a descriptor for an
    // unused prototype field. The finisher calls createProperty().
    return {
      kind: 'field',
      key: Symbol(),
      placement: 'own',
      descriptor: {},

      // When @babel/plugin-proposal-decorators implements initializers,
      // do this instead of the initializer below. See:
      // https://github.com/babel/babel/issues/9260 extras: [
      //   {
      //     kind: 'initializer',
      //     placement: 'own',
      //     initializer: descriptor.initializer,
      //   }
      // ],
      // tslint:disable-next-line:no-any decorator
      initializer() {
        if (typeof element.initializer === 'function') {
          this[element.key] = element.initializer.call(this);
        }
      },

      finisher(clazz) {
        clazz.createProperty(element.key, options);
      }

    };
  }
};

const legacyProperty = (options, proto, name) => {
  proto.constructor.createProperty(name, options);
};
/**
 * A property decorator which creates a LitElement property which reflects a
 * corresponding attribute value. A `PropertyDeclaration` may optionally be
 * supplied to configure property features.
 *
 * @ExportDecoratedItems
 */


function property(options) {
  // tslint:disable-next-line:no-any decorator
  return (protoOrDescriptor, name) => name !== undefined ? legacyProperty(options, protoOrDescriptor, name) : standardProperty(options, protoOrDescriptor);
}
/**
 * A property decorator that converts a class property into a getter that
 * executes a querySelector on the element's renderRoot.
 *
 * @ExportDecoratedItems
 */

function query(selector) {
  return (protoOrDescriptor, // tslint:disable-next-line:no-any decorator
  name) => {
    const descriptor = {
      get() {
        return this.renderRoot.querySelector(selector);
      },

      enumerable: true,
      configurable: true
    };
    return name !== undefined ? legacyQuery(descriptor, protoOrDescriptor, name) : standardQuery(descriptor, protoOrDescriptor);
  };
}
/**
 * A property decorator that converts a class property into a getter
 * that executes a querySelectorAll on the element's renderRoot.
 *
 * @ExportDecoratedItems
 */

function queryAll(selector) {
  return (protoOrDescriptor, // tslint:disable-next-line:no-any decorator
  name) => {
    const descriptor = {
      get() {
        return this.renderRoot.querySelectorAll(selector);
      },

      enumerable: true,
      configurable: true
    };
    return name !== undefined ? legacyQuery(descriptor, protoOrDescriptor, name) : standardQuery(descriptor, protoOrDescriptor);
  };
}

const legacyQuery = (descriptor, proto, name) => {
  Object.defineProperty(proto, name, descriptor);
};

const standardQuery = (descriptor, element) => ({
  kind: 'method',
  placement: 'prototype',
  key: element.key,
  descriptor
});

const standardEventOptions = (options, element) => {
  return Object.assign({}, element, {
    finisher(clazz) {
      Object.assign(clazz.prototype[element.key], options);
    }

  });
};

const legacyEventOptions = // tslint:disable-next-line:no-any legacy decorator
(options, proto, name) => {
  Object.assign(proto[name], options);
};
/**
 * Adds event listener options to a method used as an event listener in a
 * lit-html template.
 *
 * @param options An object that specifis event listener options as accepted by
 * `EventTarget#addEventListener` and `EventTarget#removeEventListener`.
 *
 * Current browsers support the `capture`, `passive`, and `once` options. See:
 * https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListener#Parameters
 *
 * @example
 *
 *     class MyElement {
 *
 *       clicked = false;
 *
 *       render() {
 *         return html`<div @click=${this._onClick}`><button></button></div>`;
 *       }
 *
 *       @eventOptions({capture: true})
 *       _onClick(e) {
 *         this.clicked = true;
 *       }
 *     }
 */


const eventOptions = options => // Return value typed as any to prevent TypeScript from complaining that
// standard decorator function signature does not match TypeScript decorator
// signature
// TODO(kschaaf): unclear why it was only failing on this decorator and not
// the others
(protoOrDescriptor, name) => name !== undefined ? legacyEventOptions(options, protoOrDescriptor, name) : standardEventOptions(options, protoOrDescriptor);
// CONCATENATED MODULE: ./node_modules/lit-element/lib/css-tag.js
/**
@license
Copyright (c) 2019 The Polymer Project Authors. All rights reserved.
This code may only be used under the BSD style license found at
http://polymer.github.io/LICENSE.txt The complete set of authors may be found at
http://polymer.github.io/AUTHORS.txt The complete set of contributors may be
found at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as
part of the polymer project is also subject to an additional IP rights grant
found at http://polymer.github.io/PATENTS.txt
*/
const supportsAdoptingStyleSheets = 'adoptedStyleSheets' in Document.prototype && 'replace' in CSSStyleSheet.prototype;
const constructionToken = Symbol();
class CSSResult {
  constructor(cssText, safeToken) {
    if (safeToken !== constructionToken) {
      throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');
    }

    this.cssText = cssText;
  } // Note, this is a getter so that it's lazy. In practice, this means
  // stylesheets are not created until the first element instance is made.


  get styleSheet() {
    if (this._styleSheet === undefined) {
      // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet
      // is constructable.
      if (supportsAdoptingStyleSheets) {
        this._styleSheet = new CSSStyleSheet();

        this._styleSheet.replaceSync(this.cssText);
      } else {
        this._styleSheet = null;
      }
    }

    return this._styleSheet;
  }

  toString() {
    return this.cssText;
  }

}
/**
 * Wrap a value for interpolation in a css tagged template literal.
 *
 * This is unsafe because untrusted CSS text can be used to phone home
 * or exfiltrate data to an attacker controlled site. Take care to only use
 * this with trusted input.
 */

const unsafeCSS = value => {
  return new CSSResult(String(value), constructionToken);
};

const textFromCSSResult = value => {
  if (value instanceof CSSResult) {
    return value.cssText;
  } else {
    throw new Error("Value passed to 'css' function must be a 'css' function result: ".concat(value, ". Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security."));
  }
};
/**
 * Template tag which which can be used with LitElement's `style` property to
 * set element styles. For security reasons, only literal string values may be
 * used. To incorporate non-literal values `unsafeCSS` may be used inside a
 * template string part.
 */


const css = (strings, ...values) => {
  const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);
  return new CSSResult(cssText, constructionToken);
};
// CONCATENATED MODULE: ./node_modules/lit-element/lit-element.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return lit_element_LitElement; });
/* unused concated harmony import defaultConverter */
/* unused concated harmony import notEqual */
/* unused concated harmony import UpdatingElement */
/* unused concated harmony import customElement */
/* concated harmony reexport property */__webpack_require__.d(__webpack_exports__, "d", function() { return property; });
/* concated harmony reexport query */__webpack_require__.d(__webpack_exports__, "e", function() { return query; });
/* unused concated harmony import queryAll */
/* unused concated harmony import eventOptions */
/* concated harmony reexport html */__webpack_require__.d(__webpack_exports__, "c", function() { return lit_html["d" /* html */]; });
/* concated harmony reexport svg */__webpack_require__.d(__webpack_exports__, "f", function() { return lit_html["f" /* svg */]; });
/* unused concated harmony import TemplateResult */
/* unused concated harmony import SVGTemplateResult */
/* unused concated harmony import supportsAdoptingStyleSheets */
/* unused concated harmony import CSSResult */
/* unused concated harmony import unsafeCSS */
/* concated harmony reexport css */__webpack_require__.d(__webpack_exports__, "b", function() { return css; });
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */







 // IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for LitElement usage.
// TODO(justinfagnani): inject version number at build time

(window['litElementVersions'] || (window['litElementVersions'] = [])).push('2.0.1');
/**
 * Minimal implementation of Array.prototype.flat
 * @param arr the array to flatten
 * @param result the accumlated result
 */

function arrayFlat(styles, result = []) {
  for (let i = 0, length = styles.length; i < length; i++) {
    const value = styles[i];

    if (Array.isArray(value)) {
      arrayFlat(value, result);
    } else {
      result.push(value);
    }
  }

  return result;
}
/** Deeply flattens styles array. Uses native flat if available. */


const flattenStyles = styles => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);

class lit_element_LitElement extends UpdatingElement {
  /** @nocollapse */
  static finalize() {
    super.finalize(); // Prepare styling that is stamped at first render time. Styling
    // is built from user provided `styles` or is inherited from the superclass.

    this._styles = this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ? this._getUniqueStyles() : this._styles || [];
  }
  /** @nocollapse */


  static _getUniqueStyles() {
    // Take care not to call `this.styles` multiple times since this generates
    // new CSSResults each time.
    // TODO(sorvell): Since we do not cache CSSResults by input, any
    // shared styles will generate new stylesheet objects, which is wasteful.
    // This should be addressed when a browser ships constructable
    // stylesheets.
    const userStyles = this.styles;
    const styles = [];

    if (Array.isArray(userStyles)) {
      const flatStyles = flattenStyles(userStyles); // As a performance optimization to avoid duplicated styling that can
      // occur especially when composing via subclassing, de-duplicate styles
      // preserving the last item in the list. The last item is kept to
      // try to preserve cascade order with the assumption that it's most
      // important that last added styles override previous styles.

      const styleSet = flatStyles.reduceRight((set, s) => {
        set.add(s); // on IE set.add does not return the set.

        return set;
      }, new Set()); // Array.from does not work on Set in IE

      styleSet.forEach(v => styles.unshift(v));
    } else if (userStyles) {
      styles.push(userStyles);
    }

    return styles;
  }
  /**
   * Performs element initialization. By default this calls `createRenderRoot`
   * to create the element `renderRoot` node and captures any pre-set values for
   * registered properties.
   */


  initialize() {
    super.initialize();
    this.renderRoot = this.createRenderRoot(); // Note, if renderRoot is not a shadowRoot, styles would/could apply to the
    // element's getRootNode(). While this could be done, we're choosing not to
    // support this now since it would require different logic around de-duping.

    if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {
      this.adoptStyles();
    }
  }
  /**
   * Returns the node into which the element should render and by default
   * creates and returns an open shadowRoot. Implement to customize where the
   * element's DOM is rendered. For example, to render into the element's
   * childNodes, return `this`.
   * @returns {Element|DocumentFragment} Returns a node into which to render.
   */


  createRenderRoot() {
    return this.attachShadow({
      mode: 'open'
    });
  }
  /**
   * Applies styling to the element shadowRoot using the `static get styles`
   * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where
   * available and will fallback otherwise. When Shadow DOM is polyfilled,
   * ShadyCSS scopes styles and adds them to the document. When Shadow DOM
   * is available but `adoptedStyleSheets` is not, styles are appended to the
   * end of the `shadowRoot` to [mimic spec
   * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).
   */


  adoptStyles() {
    const styles = this.constructor._styles;

    if (styles.length === 0) {
      return;
    } // There are three separate cases here based on Shadow DOM support.
    // (1) shadowRoot polyfilled: use ShadyCSS
    // (2) shadowRoot.adoptedStyleSheets available: use it.
    // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after
    // rendering


    if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {
      window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map(s => s.cssText), this.localName);
    } else if (supportsAdoptingStyleSheets) {
      this.renderRoot.adoptedStyleSheets = styles.map(s => s.styleSheet);
    } else {
      // This must be done after rendering so the actual style insertion is done
      // in `update`.
      this._needsShimAdoptedStyleSheets = true;
    }
  }

  connectedCallback() {
    super.connectedCallback(); // Note, first update/render handles styleElement so we only call this if
    // connected after first update.

    if (this.hasUpdated && window.ShadyCSS !== undefined) {
      window.ShadyCSS.styleElement(this);
    }
  }
  /**
   * Updates the element. This method reflects property values to attributes
   * and calls `render` to render DOM via lit-html. Setting properties inside
   * this method will *not* trigger another update.
   * * @param _changedProperties Map of changed properties with old values
   */


  update(changedProperties) {
    super.update(changedProperties);
    const templateResult = this.render();

    if (templateResult instanceof lit_html["b" /* TemplateResult */]) {
      this.constructor.render(templateResult, this.renderRoot, {
        scopeName: this.localName,
        eventContext: this
      });
    } // When native Shadow DOM is used but adoptedStyles are not supported,
    // insert styling after rendering to ensure adoptedStyles have highest
    // priority.


    if (this._needsShimAdoptedStyleSheets) {
      this._needsShimAdoptedStyleSheets = false;

      this.constructor._styles.forEach(s => {
        const style = document.createElement('style');
        style.textContent = s.cssText;
        this.renderRoot.appendChild(style);
      });
    }
  }
  /**
   * Invoked on each update to perform rendering tasks. This method must return
   * a lit-html TemplateResult. Setting properties inside this method will *not*
   * trigger the element to update.
   */


  render() {}

}
/**
 * Ensure this class is marked as `finalized` as an optimization ensuring
 * it will not needlessly try to `finalize`.
 */

lit_element_LitElement.finalized = true;
/**
 * Render method used to render the lit-html TemplateResult to the element's
 * DOM.
 * @param {TemplateResult} Template to render.
 * @param {Element|DocumentFragment} Node into which to render.
 * @param {String} Element name.
 * @nocollapse
 */

lit_element_LitElement.render = shady_render_render;

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return marker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return nodeMarker; });
/* unused harmony export markerRegex */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return boundAttributeSuffix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return Template; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return isTemplatePartActive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return createMarker; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return lastAttributeNameRegex; });
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

/**
 * An expression marker with embedded unique key to avoid collision with
 * possible text in templates.
 */
const marker = "{{lit-".concat(String(Math.random()).slice(2), "}}");
/**
 * An expression marker used text-positions, multi-binding attributes, and
 * attributes with markup-like text values.
 */

const nodeMarker = "<!--".concat(marker, "-->");
const markerRegex = new RegExp("".concat(marker, "|").concat(nodeMarker));
/**
 * Suffix appended to all bound attribute names.
 */

const boundAttributeSuffix = '$lit$';
/**
 * An updateable Template that tracks the location of dynamic parts.
 */

class Template {
  constructor(result, element) {
    this.parts = [];
    this.element = element;
    let index = -1;
    let partIndex = 0;
    const nodesToRemove = [];

    const _prepareTemplate = template => {
      const content = template.content; // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be
      // null

      const walker = document.createTreeWalker(content, 133
      /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */
      , null, false); // Keeps track of the last index associated with a part. We try to delete
      // unnecessary nodes, but we never want to associate two different parts
      // to the same index. They must have a constant node between.

      let lastPartIndex = 0;

      while (walker.nextNode()) {
        index++;
        const node = walker.currentNode;

        if (node.nodeType === 1
        /* Node.ELEMENT_NODE */
        ) {
            if (node.hasAttributes()) {
              const attributes = node.attributes; // Per
              // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,
              // attributes are not guaranteed to be returned in document order.
              // In particular, Edge/IE can return them out of order, so we cannot
              // assume a correspondance between part index and attribute index.

              let count = 0;

              for (let i = 0; i < attributes.length; i++) {
                if (attributes[i].value.indexOf(marker) >= 0) {
                  count++;
                }
              }

              while (count-- > 0) {
                // Get the template literal section leading up to the first
                // expression in this attribute
                const stringForPart = result.strings[partIndex]; // Find the attribute name

                const name = lastAttributeNameRegex.exec(stringForPart)[2]; // Find the corresponding attribute
                // All bound attributes have had a suffix added in
                // TemplateResult#getHTML to opt out of special attribute
                // handling. To look up the attribute value we also need to add
                // the suffix.

                const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;
                const attributeValue = node.getAttribute(attributeLookupName);
                const strings = attributeValue.split(markerRegex);
                this.parts.push({
                  type: 'attribute',
                  index,
                  name,
                  strings
                });
                node.removeAttribute(attributeLookupName);
                partIndex += strings.length - 1;
              }
            }

            if (node.tagName === 'TEMPLATE') {
              _prepareTemplate(node);
            }
          } else if (node.nodeType === 3
        /* Node.TEXT_NODE */
        ) {
            const data = node.data;

            if (data.indexOf(marker) >= 0) {
              const parent = node.parentNode;
              const strings = data.split(markerRegex);
              const lastIndex = strings.length - 1; // Generate a new text node for each literal section
              // These nodes are also used as the markers for node parts

              for (let i = 0; i < lastIndex; i++) {
                parent.insertBefore(strings[i] === '' ? createMarker() : document.createTextNode(strings[i]), node);
                this.parts.push({
                  type: 'node',
                  index: ++index
                });
              } // If there's no text, we must insert a comment to mark our place.
              // Else, we can trust it will stick around after cloning.


              if (strings[lastIndex] === '') {
                parent.insertBefore(createMarker(), node);
                nodesToRemove.push(node);
              } else {
                node.data = strings[lastIndex];
              } // We have a part for each match found


              partIndex += lastIndex;
            }
          } else if (node.nodeType === 8
        /* Node.COMMENT_NODE */
        ) {
            if (node.data === marker) {
              const parent = node.parentNode; // Add a new marker node to be the startNode of the Part if any of
              // the following are true:
              //  * We don't have a previousSibling
              //  * The previousSibling is already the start of a previous part

              if (node.previousSibling === null || index === lastPartIndex) {
                index++;
                parent.insertBefore(createMarker(), node);
              }

              lastPartIndex = index;
              this.parts.push({
                type: 'node',
                index
              }); // If we don't have a nextSibling, keep this node so we have an end.
              // Else, we can remove it to save future costs.

              if (node.nextSibling === null) {
                node.data = '';
              } else {
                nodesToRemove.push(node);
                index--;
              }

              partIndex++;
            } else {
              let i = -1;

              while ((i = node.data.indexOf(marker, i + 1)) !== -1) {
                // Comment node has a binding marker inside, make an inactive part
                // The binding won't work, but subsequent bindings will
                // TODO (justinfagnani): consider whether it's even worth it to
                // make bindings in comments work
                this.parts.push({
                  type: 'node',
                  index: -1
                });
              }
            }
          }
      }
    };

    _prepareTemplate(element); // Remove text binding nodes after the walk to not disturb the TreeWalker


    for (const n of nodesToRemove) {
      n.parentNode.removeChild(n);
    }
  }

}
const isTemplatePartActive = part => part.index !== -1; // Allows `document.createComment('')` to be renamed for a
// small manual size-savings.

const createMarker = () => document.createComment('');
/**
 * This regex extracts the attribute name preceding an attribute-position
 * expression. It does this by matching the syntax allowed for attributes
 * against the string literal directly preceding the expression, assuming that
 * the expression is in an attribute-value position.
 *
 * See attributes in the HTML spec:
 * https://www.w3.org/TR/html5/syntax.html#attributes-0
 *
 * "\0-\x1F\x7F-\x9F" are Unicode control characters
 *
 * " \x09\x0a\x0c\x0d" are HTML space characters:
 * https://www.w3.org/TR/html5/infrastructure.html#space-character
 *
 * So an attribute is:
 *  * The name: any character except a control character, space character, ('),
 *    ("), ">", "=", or "/"
 *  * Followed by zero or more space characters
 *  * Followed by "="
 *  * Followed by zero or more space characters
 *  * Followed by:
 *    * Any character except space, ('), ("), "<", ">", "=", (`), or
 *    * (") then any non-("), or
 *    * (') then any non-(')
 */

const lastAttributeNameRegex = /([ \x09\x0a\x0c\x0d])([^\0-\x1F\x7F-\x9F \x09\x0a\x0c\x0d"'>=/]+)([ \x09\x0a\x0c\x0d]*=[ \x09\x0a\x0c\x0d]*(?:[^ \x09\x0a\x0c\x0d"'`<>=]*|"[^"]*|'[^']*))$/;

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export isPrimitive */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return AttributeCommitter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return AttributePart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return NodePart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return BooleanAttributePart; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return PropertyCommitter; });
/* unused harmony export PropertyPart */
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return EventPart; });
/* harmony import */ var _directive_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(8);
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(5);
/* harmony import */ var _part_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(3);
/* harmony import */ var _template_instance_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(10);
/* harmony import */ var _template_result_js__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(6);
/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(1);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

/**
 * @module lit-html
 */






const isPrimitive = value => {
  return value === null || !(typeof value === 'object' || typeof value === 'function');
};
/**
 * Sets attribute values for AttributeParts, so that the value is only set once
 * even if there are multiple parts for an attribute.
 */

class AttributeCommitter {
  constructor(element, name, strings) {
    this.dirty = true;
    this.element = element;
    this.name = name;
    this.strings = strings;
    this.parts = [];

    for (let i = 0; i < strings.length - 1; i++) {
      this.parts[i] = this._createPart();
    }
  }
  /**
   * Creates a single part. Override this to create a differnt type of part.
   */


  _createPart() {
    return new AttributePart(this);
  }

  _getValue() {
    const strings = this.strings;
    const l = strings.length - 1;
    let text = '';

    for (let i = 0; i < l; i++) {
      text += strings[i];
      const part = this.parts[i];

      if (part !== undefined) {
        const v = part.value;

        if (v != null && (Array.isArray(v) || // tslint:disable-next-line:no-any
        typeof v !== 'string' && v[Symbol.iterator])) {
          for (const t of v) {
            text += typeof t === 'string' ? t : String(t);
          }
        } else {
          text += typeof v === 'string' ? v : String(v);
        }
      }
    }

    text += strings[l];
    return text;
  }

  commit() {
    if (this.dirty) {
      this.dirty = false;
      this.element.setAttribute(this.name, this._getValue());
    }
  }

}
class AttributePart {
  constructor(comitter) {
    this.value = undefined;
    this.committer = comitter;
  }

  setValue(value) {
    if (value !== _part_js__WEBPACK_IMPORTED_MODULE_2__[/* noChange */ "a"] && (!isPrimitive(value) || value !== this.value)) {
      this.value = value; // If the value is a not a directive, dirty the committer so that it'll
      // call setAttribute. If the value is a directive, it'll dirty the
      // committer if it calls setValue().

      if (!Object(_directive_js__WEBPACK_IMPORTED_MODULE_0__[/* isDirective */ "b"])(value)) {
        this.committer.dirty = true;
      }
    }
  }

  commit() {
    while (Object(_directive_js__WEBPACK_IMPORTED_MODULE_0__[/* isDirective */ "b"])(this.value)) {
      const directive = this.value;
      this.value = _part_js__WEBPACK_IMPORTED_MODULE_2__[/* noChange */ "a"];
      directive(this);
    }

    if (this.value === _part_js__WEBPACK_IMPORTED_MODULE_2__[/* noChange */ "a"]) {
      return;
    }

    this.committer.commit();
  }

}
class NodePart {
  constructor(options) {
    this.value = undefined;
    this._pendingValue = undefined;
    this.options = options;
  }
  /**
   * Inserts this part into a container.
   *
   * This part must be empty, as its contents are not automatically moved.
   */


  appendInto(container) {
    this.startNode = container.appendChild(Object(_template_js__WEBPACK_IMPORTED_MODULE_5__[/* createMarker */ "c"])());
    this.endNode = container.appendChild(Object(_template_js__WEBPACK_IMPORTED_MODULE_5__[/* createMarker */ "c"])());
  }
  /**
   * Inserts this part between `ref` and `ref`'s next sibling. Both `ref` and
   * its next sibling must be static, unchanging nodes such as those that appear
   * in a literal section of a template.
   *
   * This part must be empty, as its contents are not automatically moved.
   */


  insertAfterNode(ref) {
    this.startNode = ref;
    this.endNode = ref.nextSibling;
  }
  /**
   * Appends this part into a parent part.
   *
   * This part must be empty, as its contents are not automatically moved.
   */


  appendIntoPart(part) {
    part._insert(this.startNode = Object(_template_js__WEBPACK_IMPORTED_MODULE_5__[/* createMarker */ "c"])());

    part._insert(this.endNode = Object(_template_js__WEBPACK_IMPORTED_MODULE_5__[/* createMarker */ "c"])());
  }
  /**
   * Appends this part after `ref`
   *
   * This part must be empty, as its contents are not automatically moved.
   */


  insertAfterPart(ref) {
    ref._insert(this.startNode = Object(_template_js__WEBPACK_IMPORTED_MODULE_5__[/* createMarker */ "c"])());

    this.endNode = ref.endNode;
    ref.endNode = this.startNode;
  }

  setValue(value) {
    this._pendingValue = value;
  }

  commit() {
    while (Object(_directive_js__WEBPACK_IMPORTED_MODULE_0__[/* isDirective */ "b"])(this._pendingValue)) {
      const directive = this._pendingValue;
      this._pendingValue = _part_js__WEBPACK_IMPORTED_MODULE_2__[/* noChange */ "a"];
      directive(this);
    }

    const value = this._pendingValue;

    if (value === _part_js__WEBPACK_IMPORTED_MODULE_2__[/* noChange */ "a"]) {
      return;
    }

    if (isPrimitive(value)) {
      if (value !== this.value) {
        this._commitText(value);
      }
    } else if (value instanceof _template_result_js__WEBPACK_IMPORTED_MODULE_4__[/* TemplateResult */ "b"]) {
      this._commitTemplateResult(value);
    } else if (value instanceof Node) {
      this._commitNode(value);
    } else if (Array.isArray(value) || // tslint:disable-next-line:no-any
    value[Symbol.iterator]) {
      this._commitIterable(value);
    } else if (value === _part_js__WEBPACK_IMPORTED_MODULE_2__[/* nothing */ "b"]) {
      this.value = _part_js__WEBPACK_IMPORTED_MODULE_2__[/* nothing */ "b"];
      this.clear();
    } else {
      // Fallback, will render the string representation
      this._commitText(value);
    }
  }

  _insert(node) {
    this.endNode.parentNode.insertBefore(node, this.endNode);
  }

  _commitNode(value) {
    if (this.value === value) {
      return;
    }

    this.clear();

    this._insert(value);

    this.value = value;
  }

  _commitText(value) {
    const node = this.startNode.nextSibling;
    value = value == null ? '' : value;

    if (node === this.endNode.previousSibling && node.nodeType === 3
    /* Node.TEXT_NODE */
    ) {
        // If we only have a single text node between the markers, we can just
        // set its value, rather than replacing it.
        // TODO(justinfagnani): Can we just check if this.value is primitive?
        node.data = value;
      } else {
      this._commitNode(document.createTextNode(typeof value === 'string' ? value : String(value)));
    }

    this.value = value;
  }

  _commitTemplateResult(value) {
    const template = this.options.templateFactory(value);

    if (this.value instanceof _template_instance_js__WEBPACK_IMPORTED_MODULE_3__[/* TemplateInstance */ "a"] && this.value.template === template) {
      this.value.update(value.values);
    } else {
      // Make sure we propagate the template processor from the TemplateResult
      // so that we use its syntax extension, etc. The template factory comes
      // from the render function options so that it can control template
      // caching and preprocessing.
      const instance = new _template_instance_js__WEBPACK_IMPORTED_MODULE_3__[/* TemplateInstance */ "a"](template, value.processor, this.options);

      const fragment = instance._clone();

      instance.update(value.values);

      this._commitNode(fragment);

      this.value = instance;
    }
  }

  _commitIterable(value) {
    // For an Iterable, we create a new InstancePart per item, then set its
    // value to the item. This is a little bit of overhead for every item in
    // an Iterable, but it lets us recurse easily and efficiently update Arrays
    // of TemplateResults that will be commonly returned from expressions like:
    // array.map((i) => html`${i}`), by reusing existing TemplateInstances.
    // If _value is an array, then the previous render was of an
    // iterable and _value will contain the NodeParts from the previous
    // render. If _value is not an array, clear this part and make a new
    // array for NodeParts.
    if (!Array.isArray(this.value)) {
      this.value = [];
      this.clear();
    } // Lets us keep track of how many items we stamped so we can clear leftover
    // items from a previous render


    const itemParts = this.value;
    let partIndex = 0;
    let itemPart;

    for (const item of value) {
      // Try to reuse an existing part
      itemPart = itemParts[partIndex]; // If no existing part, create a new one

      if (itemPart === undefined) {
        itemPart = new NodePart(this.options);
        itemParts.push(itemPart);

        if (partIndex === 0) {
          itemPart.appendIntoPart(this);
        } else {
          itemPart.insertAfterPart(itemParts[partIndex - 1]);
        }
      }

      itemPart.setValue(item);
      itemPart.commit();
      partIndex++;
    }

    if (partIndex < itemParts.length) {
      // Truncate the parts array so _value reflects the current state
      itemParts.length = partIndex;
      this.clear(itemPart && itemPart.endNode);
    }
  }

  clear(startNode = this.startNode) {
    Object(_dom_js__WEBPACK_IMPORTED_MODULE_1__[/* removeNodes */ "b"])(this.startNode.parentNode, startNode.nextSibling, this.endNode);
  }

}
/**
 * Implements a boolean attribute, roughly as defined in the HTML
 * specification.
 *
 * If the value is truthy, then the attribute is present with a value of
 * ''. If the value is falsey, the attribute is removed.
 */

class BooleanAttributePart {
  constructor(element, name, strings) {
    this.value = undefined;
    this._pendingValue = undefined;

    if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {
      throw new Error('Boolean attributes can only contain a single expression');
    }

    this.element = element;
    this.name = name;
    this.strings = strings;
  }

  setValue(value) {
    this._pendingValue = value;
  }

  commit() {
    while (Object(_directive_js__WEBPACK_IMPORTED_MODULE_0__[/* isDirective */ "b"])(this._pendingValue)) {
      const directive = this._pendingValue;
      this._pendingValue = _part_js__WEBPACK_IMPORTED_MODULE_2__[/* noChange */ "a"];
      directive(this);
    }

    if (this._pendingValue === _part_js__WEBPACK_IMPORTED_MODULE_2__[/* noChange */ "a"]) {
      return;
    }

    const value = !!this._pendingValue;

    if (this.value !== value) {
      if (value) {
        this.element.setAttribute(this.name, '');
      } else {
        this.element.removeAttribute(this.name);
      }
    }

    this.value = value;
    this._pendingValue = _part_js__WEBPACK_IMPORTED_MODULE_2__[/* noChange */ "a"];
  }

}
/**
 * Sets attribute values for PropertyParts, so that the value is only set once
 * even if there are multiple parts for a property.
 *
 * If an expression controls the whole property value, then the value is simply
 * assigned to the property under control. If there are string literals or
 * multiple expressions, then the strings are expressions are interpolated into
 * a string first.
 */

class PropertyCommitter extends AttributeCommitter {
  constructor(element, name, strings) {
    super(element, name, strings);
    this.single = strings.length === 2 && strings[0] === '' && strings[1] === '';
  }

  _createPart() {
    return new PropertyPart(this);
  }

  _getValue() {
    if (this.single) {
      return this.parts[0].value;
    }

    return super._getValue();
  }

  commit() {
    if (this.dirty) {
      this.dirty = false; // tslint:disable-next-line:no-any

      this.element[this.name] = this._getValue();
    }
  }

}
class PropertyPart extends AttributePart {} // Detect event listener options support. If the `capture` property is read
// from the options object, then options are supported. If not, then the thrid
// argument to add/removeEventListener is interpreted as the boolean capture
// value so we should only pass the `capture` property.

let eventOptionsSupported = false;

try {
  const options = {
    get capture() {
      eventOptionsSupported = true;
      return false;
    }

  }; // tslint:disable-next-line:no-any

  window.addEventListener('test', options, options); // tslint:disable-next-line:no-any

  window.removeEventListener('test', options, options);
} catch (_e) {}

class EventPart {
  constructor(element, eventName, eventContext) {
    this.value = undefined;
    this._pendingValue = undefined;
    this.element = element;
    this.eventName = eventName;
    this.eventContext = eventContext;

    this._boundHandleEvent = e => this.handleEvent(e);
  }

  setValue(value) {
    this._pendingValue = value;
  }

  commit() {
    while (Object(_directive_js__WEBPACK_IMPORTED_MODULE_0__[/* isDirective */ "b"])(this._pendingValue)) {
      const directive = this._pendingValue;
      this._pendingValue = _part_js__WEBPACK_IMPORTED_MODULE_2__[/* noChange */ "a"];
      directive(this);
    }

    if (this._pendingValue === _part_js__WEBPACK_IMPORTED_MODULE_2__[/* noChange */ "a"]) {
      return;
    }

    const newListener = this._pendingValue;
    const oldListener = this.value;
    const shouldRemoveListener = newListener == null || oldListener != null && (newListener.capture !== oldListener.capture || newListener.once !== oldListener.once || newListener.passive !== oldListener.passive);
    const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);

    if (shouldRemoveListener) {
      this.element.removeEventListener(this.eventName, this._boundHandleEvent, this._options);
    }

    if (shouldAddListener) {
      this._options = getOptions(newListener);
      this.element.addEventListener(this.eventName, this._boundHandleEvent, this._options);
    }

    this.value = newListener;
    this._pendingValue = _part_js__WEBPACK_IMPORTED_MODULE_2__[/* noChange */ "a"];
  }

  handleEvent(event) {
    if (typeof this.value === 'function') {
      this.value.call(this.eventContext || this.element, event);
    } else {
      this.value.handleEvent(event);
    }
  }

} // We copy options because of the inconsistent behavior of browsers when reading
// the third argument of add/removeEventListener. IE11 doesn't support options
// at all. Chrome 41 only reads `capture` if the argument is an object.

const getOptions = o => o && (eventOptionsSupported ? {
  capture: o.capture,
  passive: o.passive,
  once: o.once
} : o.capture);

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return noChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return nothing; });
/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

/**
 * A sentinel value that signals that a value was handled by a directive and
 * should not be written to the DOM.
 */
const noChange = {};
/**
 * A sentinel value that signals a NodePart to fully clear its content.
 */

const nothing = {};

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";

// EXTERNAL MODULE: ./node_modules/lit-html/lib/parts.js
var parts = __webpack_require__(2);

// CONCATENATED MODULE: ./node_modules/lit-html/lib/default-template-processor.js
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

/**
 * Creates Parts when a template is instantiated.
 */

class default_template_processor_DefaultTemplateProcessor {
  /**
   * Create parts for an attribute-position binding, given the event, attribute
   * name, and string literals.
   *
   * @param element The element containing the binding
   * @param name  The attribute name
   * @param strings The string literals. There are always at least two strings,
   *   event for fully-controlled bindings with a single expression.
   */
  handleAttributeExpressions(element, name, strings, options) {
    const prefix = name[0];

    if (prefix === '.') {
      const comitter = new parts["f" /* PropertyCommitter */](element, name.slice(1), strings);
      return comitter.parts;
    }

    if (prefix === '@') {
      return [new parts["d" /* EventPart */](element, name.slice(1), options.eventContext)];
    }

    if (prefix === '?') {
      return [new parts["c" /* BooleanAttributePart */](element, name.slice(1), strings)];
    }

    const comitter = new parts["a" /* AttributeCommitter */](element, name, strings);
    return comitter.parts;
  }
  /**
   * Create parts for a text-position binding.
   * @param templateFactory
   */


  handleTextExpression(options) {
    return new parts["e" /* NodePart */](options);
  }

}
const defaultTemplateProcessor = new default_template_processor_DefaultTemplateProcessor();
// EXTERNAL MODULE: ./node_modules/lit-html/lib/template-result.js
var template_result = __webpack_require__(6);

// EXTERNAL MODULE: ./node_modules/lit-html/lib/directive.js
var directive = __webpack_require__(8);

// EXTERNAL MODULE: ./node_modules/lit-html/lib/dom.js
var dom = __webpack_require__(5);

// EXTERNAL MODULE: ./node_modules/lit-html/lib/part.js
var part = __webpack_require__(3);

// EXTERNAL MODULE: ./node_modules/lit-html/lib/render.js
var render = __webpack_require__(9);

// EXTERNAL MODULE: ./node_modules/lit-html/lib/template-factory.js
var template_factory = __webpack_require__(7);

// EXTERNAL MODULE: ./node_modules/lit-html/lib/template-instance.js
var template_instance = __webpack_require__(10);

// EXTERNAL MODULE: ./node_modules/lit-html/lib/template.js
var template = __webpack_require__(1);

// CONCATENATED MODULE: ./node_modules/lit-html/lit-html.js
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return html; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return svg; });
/* unused concated harmony import DefaultTemplateProcessor */
/* unused concated harmony import defaultTemplateProcessor */
/* concated harmony reexport directive */__webpack_require__.d(__webpack_exports__, "c", function() { return directive["a" /* directive */]; });
/* unused concated harmony import isDirective */
/* unused concated harmony import removeNodes */
/* unused concated harmony import reparentNodes */
/* unused concated harmony import noChange */
/* concated harmony reexport nothing */__webpack_require__.d(__webpack_exports__, "e", function() { return part["b" /* nothing */]; });
/* unused concated harmony import AttributeCommitter */
/* concated harmony reexport AttributePart */__webpack_require__.d(__webpack_exports__, "a", function() { return parts["b" /* AttributePart */]; });
/* unused concated harmony import BooleanAttributePart */
/* unused concated harmony import EventPart */
/* unused concated harmony import isPrimitive */
/* unused concated harmony import NodePart */
/* unused concated harmony import PropertyCommitter */
/* unused concated harmony import PropertyPart */
/* unused concated harmony import parts */
/* unused concated harmony import render */
/* unused concated harmony import templateCaches */
/* unused concated harmony import templateFactory */
/* unused concated harmony import TemplateInstance */
/* unused concated harmony import SVGTemplateResult */
/* concated harmony reexport TemplateResult */__webpack_require__.d(__webpack_exports__, "b", function() { return template_result["b" /* TemplateResult */]; });
/* unused concated harmony import createMarker */
/* unused concated harmony import isTemplatePartActive */
/* unused concated harmony import Template */
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

/**
 *
 * Main lit-html module.
 *
 * Main exports:
 *
 * -  [[html]]
 * -  [[svg]]
 * -  [[render]]
 *
 * @module lit-html
 * @preferred
 */

/**
 * Do not remove this comment; it keeps typedoc from misplacing the module
 * docs.
 */



 // TODO(justinfagnani): remove line when we get NodePart moving methods








 // IMPORTANT: do not change the property name or the assignment expression.
// This line will be used in regexes to search for lit-html usage.
// TODO(justinfagnani): inject version number at build time

(window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.0.0');
/**
 * Interprets a template literal as an HTML template that can efficiently
 * render to and update a container.
 */

const html = (strings, ...values) => new template_result["b" /* TemplateResult */](strings, values, 'html', defaultTemplateProcessor);
/**
 * Interprets a template literal as an SVG template that can efficiently
 * render to and update a container.
 */

const svg = (strings, ...values) => new template_result["a" /* SVGTemplateResult */](strings, values, 'svg', defaultTemplateProcessor);

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return isCEPolyfill; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return reparentNodes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return removeNodes; });
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

/**
 * True if the custom elements polyfill is in use.
 */
const isCEPolyfill = window.customElements !== undefined && window.customElements.polyfillWrapFlushCallback !== undefined;
/**
 * Reparents nodes, starting from `startNode` (inclusive) to `endNode`
 * (exclusive), into another container (could be the same container), before
 * `beforeNode`. If `beforeNode` is null, it appends the nodes to the
 * container.
 */

const reparentNodes = (container, start, end = null, before = null) => {
  let node = start;

  while (node !== end) {
    const n = node.nextSibling;
    container.insertBefore(node, before);
    node = n;
  }
};
/**
 * Removes nodes, starting from `startNode` (inclusive) to `endNode`
 * (exclusive), from `container`.
 */

const removeNodes = (container, startNode, endNode = null) => {
  let node = startNode;

  while (node !== endNode) {
    const n = node.nextSibling;
    container.removeChild(node);
    node = n;
  }
};

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return TemplateResult; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return SVGTemplateResult; });
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

/**
 * @module lit-html
 */


/**
 * The return type of `html`, which holds a Template and the values from
 * interpolated expressions.
 */

class TemplateResult {
  constructor(strings, values, type, processor) {
    this.strings = strings;
    this.values = values;
    this.type = type;
    this.processor = processor;
  }
  /**
   * Returns a string of HTML used to create a `<template>` element.
   */


  getHTML() {
    const endIndex = this.strings.length - 1;
    let html = '';

    for (let i = 0; i < endIndex; i++) {
      const s = this.strings[i]; // This exec() call does two things:
      // 1) Appends a suffix to the bound attribute name to opt out of special
      // attribute value parsing that IE11 and Edge do, like for style and
      // many SVG attributes. The Template class also appends the same suffix
      // when looking up attributes to create Parts.
      // 2) Adds an unquoted-attribute-safe marker for the first expression in
      // an attribute. Subsequent attribute expressions will use node markers,
      // and this is safe since attributes with multiple expressions are
      // guaranteed to be quoted.

      const match = _template_js__WEBPACK_IMPORTED_MODULE_1__[/* lastAttributeNameRegex */ "e"].exec(s);

      if (match) {
        // We're starting a new bound attribute.
        // Add the safe attribute suffix, and use unquoted-attribute-safe
        // marker.
        html += s.substr(0, match.index) + match[1] + match[2] + _template_js__WEBPACK_IMPORTED_MODULE_1__[/* boundAttributeSuffix */ "b"] + match[3] + _template_js__WEBPACK_IMPORTED_MODULE_1__[/* marker */ "f"];
      } else {
        // We're either in a bound node, or trailing bound attribute.
        // Either way, nodeMarker is safe to use.
        html += s + _template_js__WEBPACK_IMPORTED_MODULE_1__[/* nodeMarker */ "g"];
      }
    }

    return html + this.strings[endIndex];
  }

  getTemplateElement() {
    const template = document.createElement('template');
    template.innerHTML = this.getHTML();
    return template;
  }

}
/**
 * A TemplateResult for SVG fragments.
 *
 * This class wraps HTMl in an `<svg>` tag in order to parse its contents in the
 * SVG namespace, then modifies the template to remove the `<svg>` tag so that
 * clones only container the original fragment.
 */

class SVGTemplateResult extends TemplateResult {
  getHTML() {
    return "<svg>".concat(super.getHTML(), "</svg>");
  }

  getTemplateElement() {
    const template = super.getTemplateElement();
    const content = template.content;
    const svgElement = content.firstChild;
    content.removeChild(svgElement);
    Object(_dom_js__WEBPACK_IMPORTED_MODULE_0__[/* reparentNodes */ "c"])(content, svgElement.firstChild);
    return template;
  }

}

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return templateFactory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return templateCaches; });
/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(1);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

/**
 * The default TemplateFactory which caches Templates keyed on
 * result.type and result.strings.
 */

function templateFactory(result) {
  let templateCache = templateCaches.get(result.type);

  if (templateCache === undefined) {
    templateCache = {
      stringsArray: new WeakMap(),
      keyString: new Map()
    };
    templateCaches.set(result.type, templateCache);
  }

  let template = templateCache.stringsArray.get(result.strings);

  if (template !== undefined) {
    return template;
  } // If the TemplateStringsArray is new, generate a key from the strings
  // This key is shared between all templates with identical content


  const key = result.strings.join(_template_js__WEBPACK_IMPORTED_MODULE_0__[/* marker */ "f"]); // Check if we already have a Template for this key

  template = templateCache.keyString.get(key);

  if (template === undefined) {
    // If we have not seen this key before, create a new Template
    template = new _template_js__WEBPACK_IMPORTED_MODULE_0__[/* Template */ "a"](result, result.getTemplateElement()); // Cache the Template for this key

    templateCache.keyString.set(key, template);
  } // Cache all future queries for this TemplateStringsArray


  templateCache.stringsArray.set(result.strings, template);
  return template;
}
const templateCaches = new Map();

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return directive; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return isDirective; });
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */
const directives = new WeakMap();
/**
 * Brands a function as a directive so that lit-html will call the function
 * during template rendering, rather than passing as a value.
 *
 * @param f The directive factory function. Must be a function that returns a
 * function of the signature `(part: Part) => void`. The returned function will
 * be called with the part object
 *
 * @example
 *
 * ```
 * import {directive, html} from 'lit-html';
 *
 * const immutable = directive((v) => (part) => {
 *   if (part.value !== v) {
 *     part.setValue(v)
 *   }
 * });
 * ```
 */
// tslint:disable-next-line:no-any

const directive = f => (...args) => {
  const d = f(...args);
  directives.set(d, true);
  return d;
};
const isDirective = o => {
  return typeof o === 'function' && directives.has(o);
};

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return parts; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return render; });
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _parts_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(2);
/* harmony import */ var _template_factory_js__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(7);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

/**
 * @module lit-html
 */



const parts = new WeakMap();
/**
 * Renders a template to a container.
 *
 * To update a container with new values, reevaluate the template literal and
 * call `render` with the new result.
 *
 * @param result a TemplateResult created by evaluating a template tag like
 *     `html` or `svg`.
 * @param container A DOM parent to render to. The entire contents are either
 *     replaced, or efficiently updated if the same result type was previous
 *     rendered there.
 * @param options RenderOptions for the entire render tree rendered to this
 *     container. Render options must *not* change between renders to the same
 *     container, as those changes will not effect previously rendered DOM.
 */

const render = (result, container, options) => {
  let part = parts.get(container);

  if (part === undefined) {
    Object(_dom_js__WEBPACK_IMPORTED_MODULE_0__[/* removeNodes */ "b"])(container, container.firstChild);
    parts.set(container, part = new _parts_js__WEBPACK_IMPORTED_MODULE_1__[/* NodePart */ "e"](Object.assign({
      templateFactory: _template_factory_js__WEBPACK_IMPORTED_MODULE_2__[/* templateFactory */ "b"]
    }, options)));
    part.appendInto(container);
  }

  part.setValue(result);
  part.commit();
};

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return TemplateInstance; });
/* harmony import */ var _dom_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(5);
/* harmony import */ var _template_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(1);
/**
 * @license
 * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

/**
 * @module lit-html
 */


/**
 * An instance of a `Template` that can be attached to the DOM and updated
 * with new values.
 */

class TemplateInstance {
  constructor(template, processor, options) {
    this._parts = [];
    this.template = template;
    this.processor = processor;
    this.options = options;
  }

  update(values) {
    let i = 0;

    for (const part of this._parts) {
      if (part !== undefined) {
        part.setValue(values[i]);
      }

      i++;
    }

    for (const part of this._parts) {
      if (part !== undefined) {
        part.commit();
      }
    }
  }

  _clone() {
    // When using the Custom Elements polyfill, clone the node, rather than
    // importing it, to keep the fragment in the template's document. This
    // leaves the fragment inert so custom elements won't upgrade and
    // potentially modify their contents by creating a polyfilled ShadowRoot
    // while we traverse the tree.
    const fragment = _dom_js__WEBPACK_IMPORTED_MODULE_0__[/* isCEPolyfill */ "a"] ? this.template.element.content.cloneNode(true) : document.importNode(this.template.element.content, true);
    const parts = this.template.parts;
    let partIndex = 0;
    let nodeIndex = 0;

    const _prepareInstance = fragment => {
      // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be
      // null
      const walker = document.createTreeWalker(fragment, 133
      /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */
      , null, false);
      let node = walker.nextNode(); // Loop through all the nodes and parts of a template

      while (partIndex < parts.length && node !== null) {
        const part = parts[partIndex]; // Consecutive Parts may have the same node index, in the case of
        // multiple bound attributes on an element. So each iteration we either
        // increment the nodeIndex, if we aren't on a node with a part, or the
        // partIndex if we are. By not incrementing the nodeIndex when we find a
        // part, we allow for the next part to be associated with the current
        // node if neccessasry.

        if (!Object(_template_js__WEBPACK_IMPORTED_MODULE_1__[/* isTemplatePartActive */ "d"])(part)) {
          this._parts.push(undefined);

          partIndex++;
        } else if (nodeIndex === part.index) {
          if (part.type === 'node') {
            const part = this.processor.handleTextExpression(this.options);
            part.insertAfterNode(node.previousSibling);

            this._parts.push(part);
          } else {
            this._parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));
          }

          partIndex++;
        } else {
          nodeIndex++;

          if (node.nodeName === 'TEMPLATE') {
            _prepareInstance(node.content);
          }

          node = walker.nextNode();
        }
      }
    };

    _prepareInstance(fragment);

    if (_dom_js__WEBPACK_IMPORTED_MODULE_0__[/* isCEPolyfill */ "a"]) {
      document.adoptNode(fragment);
      customElements.upgrade(fragment);
    }

    return fragment;
  }

}

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

module.exports = __webpack_require__(19);


/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/




/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {


var content = __webpack_require__(14);

if(typeof content === 'string') content = [[module.i, content, '']];

var transform;
var insertInto;



var options = {"hmr":true}

options.transform = transform
options.insertInto = undefined;

var update = __webpack_require__(16)(content, options);

if(content.locals) module.exports = content.locals;

if(false) {}

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

exports = module.exports = __webpack_require__(15)(false);
// Module
exports.push([module.i, "/*\nCopyright 2018 Adobe. All rights reserved.\nThis file is licensed to you under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License. You may obtain a copy\nof the License at http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software distributed under\nthe License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS\nOF ANY KIND, either express or implied. See the License for the specific language\ngoverning permissions and limitations under the License.\n*/\n\n:root,\nbody {\n    width: 100%;\n    height: 100%;\n    overflow: hidden;\n    margin: 0;\n}\n", ""]);



/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
  MIT License http://www.opensource.org/licenses/mit-license.php
  Author Tobias Koppers @sokra
*/
// css base code, injected by the css-loader

module.exports = function (useSourceMap) {
  var list = []; // return the list of modules as css string

  list.toString = function toString() {
    return this.map(function (item) {
      var content = cssWithMappingToString(item, useSourceMap);

      if (item[2]) {
        return '@media ' + item[2] + '{' + content + '}';
      } else {
        return content;
      }
    }).join('');
  }; // import a list of modules into the list


  list.i = function (modules, mediaQuery) {
    if (typeof modules === 'string') {
      modules = [[null, modules, '']];
    }

    var alreadyImportedModules = {};

    for (var i = 0; i < this.length; i++) {
      var id = this[i][0];

      if (id != null) {
        alreadyImportedModules[id] = true;
      }
    }

    for (i = 0; i < modules.length; i++) {
      var item = modules[i]; // skip already imported module
      // this implementation is not 100% perfect for weird media query combinations
      // when a module is imported multiple times with different media queries.
      // I hope this will never occur (Hey this way we have smaller bundles)

      if (item[0] == null || !alreadyImportedModules[item[0]]) {
        if (mediaQuery && !item[2]) {
          item[2] = mediaQuery;
        } else if (mediaQuery) {
          item[2] = '(' + item[2] + ') and (' + mediaQuery + ')';
        }

        list.push(item);
      }
    }
  };

  return list;
};

function cssWithMappingToString(item, useSourceMap) {
  var content = item[1] || '';
  var cssMapping = item[3];

  if (!cssMapping) {
    return content;
  }

  if (useSourceMap && typeof btoa === 'function') {
    var sourceMapping = toComment(cssMapping);
    var sourceURLs = cssMapping.sources.map(function (source) {
      return '/*# sourceURL=' + cssMapping.sourceRoot + source + ' */';
    });
    return [content].concat(sourceURLs).concat([sourceMapping]).join('\n');
  }

  return [content].join('\n');
} // Adapted from convert-source-map (MIT)


function toComment(sourceMap) {
  // eslint-disable-next-line no-undef
  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));
  var data = 'sourceMappingURL=data:application/json;charset=utf-8;base64,' + base64;
  return '/*# ' + data + ' */';
}

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

/*
	MIT License http://www.opensource.org/licenses/mit-license.php
	Author Tobias Koppers @sokra
*/

var stylesInDom = {};

var	memoize = function (fn) {
	var memo;

	return function () {
		if (typeof memo === "undefined") memo = fn.apply(this, arguments);
		return memo;
	};
};

var isOldIE = memoize(function () {
	// Test for IE <= 9 as proposed by Browserhacks
	// @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805
	// Tests for existence of standard globals is to allow style-loader
	// to operate correctly into non-standard environments
	// @see https://github.com/webpack-contrib/style-loader/issues/177
	return window && document && document.all && !window.atob;
});

var getTarget = function (target, parent) {
  if (parent){
    return parent.querySelector(target);
  }
  return document.querySelector(target);
};

var getElement = (function (fn) {
	var memo = {};

	return function(target, parent) {
                // If passing function in options, then use it for resolve "head" element.
                // Useful for Shadow Root style i.e
                // {
                //   insertInto: function () { return document.querySelector("#foo").shadowRoot }
                // }
                if (typeof target === 'function') {
                        return target();
                }
                if (typeof memo[target] === "undefined") {
			var styleTarget = getTarget.call(this, target, parent);
			// Special case to return head of iframe instead of iframe itself
			if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {
				try {
					// This will throw an exception if access to iframe is blocked
					// due to cross-origin restrictions
					styleTarget = styleTarget.contentDocument.head;
				} catch(e) {
					styleTarget = null;
				}
			}
			memo[target] = styleTarget;
		}
		return memo[target]
	};
})();

var singleton = null;
var	singletonCounter = 0;
var	stylesInsertedAtTop = [];

var	fixUrls = __webpack_require__(17);

module.exports = function(list, options) {
	if (typeof DEBUG !== "undefined" && DEBUG) {
		if (typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
	}

	options = options || {};

	options.attrs = typeof options.attrs === "object" ? options.attrs : {};

	// Force single-tag solution on IE6-9, which has a hard limit on the # of <style>
	// tags it will allow on a page
	if (!options.singleton && typeof options.singleton !== "boolean") options.singleton = isOldIE();

	// By default, add <style> tags to the <head> element
        if (!options.insertInto) options.insertInto = "head";

	// By default, add <style> tags to the bottom of the target
	if (!options.insertAt) options.insertAt = "bottom";

	var styles = listToStyles(list, options);

	addStylesToDom(styles, options);

	return function update (newList) {
		var mayRemove = [];

		for (var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];

			domStyle.refs--;
			mayRemove.push(domStyle);
		}

		if(newList) {
			var newStyles = listToStyles(newList, options);
			addStylesToDom(newStyles, options);
		}

		for (var i = 0; i < mayRemove.length; i++) {
			var domStyle = mayRemove[i];

			if(domStyle.refs === 0) {
				for (var j = 0; j < domStyle.parts.length; j++) domStyle.parts[j]();

				delete stylesInDom[domStyle.id];
			}
		}
	};
};

function addStylesToDom (styles, options) {
	for (var i = 0; i < styles.length; i++) {
		var item = styles[i];
		var domStyle = stylesInDom[item.id];

		if(domStyle) {
			domStyle.refs++;

			for(var j = 0; j < domStyle.parts.length; j++) {
				domStyle.parts[j](item.parts[j]);
			}

			for(; j < item.parts.length; j++) {
				domStyle.parts.push(addStyle(item.parts[j], options));
			}
		} else {
			var parts = [];

			for(var j = 0; j < item.parts.length; j++) {
				parts.push(addStyle(item.parts[j], options));
			}

			stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
		}
	}
}

function listToStyles (list, options) {
	var styles = [];
	var newStyles = {};

	for (var i = 0; i < list.length; i++) {
		var item = list[i];
		var id = options.base ? item[0] + options.base : item[0];
		var css = item[1];
		var media = item[2];
		var sourceMap = item[3];
		var part = {css: css, media: media, sourceMap: sourceMap};

		if(!newStyles[id]) styles.push(newStyles[id] = {id: id, parts: [part]});
		else newStyles[id].parts.push(part);
	}

	return styles;
}

function insertStyleElement (options, style) {
	var target = getElement(options.insertInto)

	if (!target) {
		throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");
	}

	var lastStyleElementInsertedAtTop = stylesInsertedAtTop[stylesInsertedAtTop.length - 1];

	if (options.insertAt === "top") {
		if (!lastStyleElementInsertedAtTop) {
			target.insertBefore(style, target.firstChild);
		} else if (lastStyleElementInsertedAtTop.nextSibling) {
			target.insertBefore(style, lastStyleElementInsertedAtTop.nextSibling);
		} else {
			target.appendChild(style);
		}
		stylesInsertedAtTop.push(style);
	} else if (options.insertAt === "bottom") {
		target.appendChild(style);
	} else if (typeof options.insertAt === "object" && options.insertAt.before) {
		var nextSibling = getElement(options.insertAt.before, target);
		target.insertBefore(style, nextSibling);
	} else {
		throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");
	}
}

function removeStyleElement (style) {
	if (style.parentNode === null) return false;
	style.parentNode.removeChild(style);

	var idx = stylesInsertedAtTop.indexOf(style);
	if(idx >= 0) {
		stylesInsertedAtTop.splice(idx, 1);
	}
}

function createStyleElement (options) {
	var style = document.createElement("style");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}

	if(options.attrs.nonce === undefined) {
		var nonce = getNonce();
		if (nonce) {
			options.attrs.nonce = nonce;
		}
	}

	addAttrs(style, options.attrs);
	insertStyleElement(options, style);

	return style;
}

function createLinkElement (options) {
	var link = document.createElement("link");

	if(options.attrs.type === undefined) {
		options.attrs.type = "text/css";
	}
	options.attrs.rel = "stylesheet";

	addAttrs(link, options.attrs);
	insertStyleElement(options, link);

	return link;
}

function addAttrs (el, attrs) {
	Object.keys(attrs).forEach(function (key) {
		el.setAttribute(key, attrs[key]);
	});
}

function getNonce() {
	if (false) {}

	return __webpack_require__.nc;
}

function addStyle (obj, options) {
	var style, update, remove, result;

	// If a transform function was defined, run it on the css
	if (options.transform && obj.css) {
	    result = typeof options.transform === 'function'
		 ? options.transform(obj.css) 
		 : options.transform.default(obj.css);

	    if (result) {
	    	// If transform returns a value, use that instead of the original css.
	    	// This allows running runtime transformations on the css.
	    	obj.css = result;
	    } else {
	    	// If the transform function returns a falsy value, don't add this css.
	    	// This allows conditional loading of css
	    	return function() {
	    		// noop
	    	};
	    }
	}

	if (options.singleton) {
		var styleIndex = singletonCounter++;

		style = singleton || (singleton = createStyleElement(options));

		update = applyToSingletonTag.bind(null, style, styleIndex, false);
		remove = applyToSingletonTag.bind(null, style, styleIndex, true);

	} else if (
		obj.sourceMap &&
		typeof URL === "function" &&
		typeof URL.createObjectURL === "function" &&
		typeof URL.revokeObjectURL === "function" &&
		typeof Blob === "function" &&
		typeof btoa === "function"
	) {
		style = createLinkElement(options);
		update = updateLink.bind(null, style, options);
		remove = function () {
			removeStyleElement(style);

			if(style.href) URL.revokeObjectURL(style.href);
		};
	} else {
		style = createStyleElement(options);
		update = applyToTag.bind(null, style);
		remove = function () {
			removeStyleElement(style);
		};
	}

	update(obj);

	return function updateStyle (newObj) {
		if (newObj) {
			if (
				newObj.css === obj.css &&
				newObj.media === obj.media &&
				newObj.sourceMap === obj.sourceMap
			) {
				return;
			}

			update(obj = newObj);
		} else {
			remove();
		}
	};
}

var replaceText = (function () {
	var textStore = [];

	return function (index, replacement) {
		textStore[index] = replacement;

		return textStore.filter(Boolean).join('\n');
	};
})();

function applyToSingletonTag (style, index, remove, obj) {
	var css = remove ? "" : obj.css;

	if (style.styleSheet) {
		style.styleSheet.cssText = replaceText(index, css);
	} else {
		var cssNode = document.createTextNode(css);
		var childNodes = style.childNodes;

		if (childNodes[index]) style.removeChild(childNodes[index]);

		if (childNodes.length) {
			style.insertBefore(cssNode, childNodes[index]);
		} else {
			style.appendChild(cssNode);
		}
	}
}

function applyToTag (style, obj) {
	var css = obj.css;
	var media = obj.media;

	if(media) {
		style.setAttribute("media", media)
	}

	if(style.styleSheet) {
		style.styleSheet.cssText = css;
	} else {
		while(style.firstChild) {
			style.removeChild(style.firstChild);
		}

		style.appendChild(document.createTextNode(css));
	}
}

function updateLink (link, options, obj) {
	var css = obj.css;
	var sourceMap = obj.sourceMap;

	/*
		If convertToAbsoluteUrls isn't defined, but sourcemaps are enabled
		and there is no publicPath defined then lets turn convertToAbsoluteUrls
		on by default.  Otherwise default to the convertToAbsoluteUrls option
		directly
	*/
	var autoFixUrls = options.convertToAbsoluteUrls === undefined && sourceMap;

	if (options.convertToAbsoluteUrls || autoFixUrls) {
		css = fixUrls(css);
	}

	if (sourceMap) {
		// http://stackoverflow.com/a/26603875
		css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))) + " */";
	}

	var blob = new Blob([css], { type: "text/css" });

	var oldSrc = link.href;

	link.href = URL.createObjectURL(blob);

	if(oldSrc) URL.revokeObjectURL(oldSrc);
}


/***/ }),
/* 17 */
/***/ (function(module, exports) {

/**
 * When source maps are enabled, `style-loader` uses a link element with a data-uri to
 * embed the css on the page. This breaks all relative urls because now they are relative to a
 * bundle instead of the current page.
 *
 * One solution is to only use full urls, but that may be impossible.
 *
 * Instead, this function "fixes" the relative urls to be absolute according to the current page location.
 *
 * A rudimentary test suite is located at `test/fixUrls.js` and can be run via the `npm test` command.
 *
 */
module.exports = function (css) {
  // get current location
  var location = typeof window !== "undefined" && window.location;

  if (!location) {
    throw new Error("fixUrls requires window.location");
  } // blank or null?


  if (!css || typeof css !== "string") {
    return css;
  }

  var baseUrl = location.protocol + "//" + location.host;
  var currentDir = baseUrl + location.pathname.replace(/\/[^\/]*$/, "/"); // convert each url(...)

  /*
  This regular expression is just a way to recursively match brackets within
  a string.
  	 /url\s*\(  = Match on the word "url" with any whitespace after it and then a parens
     (  = Start a capturing group
       (?:  = Start a non-capturing group
           [^)(]  = Match anything that isn't a parentheses
           |  = OR
           \(  = Match a start parentheses
               (?:  = Start another non-capturing groups
                   [^)(]+  = Match anything that isn't a parentheses
                   |  = OR
                   \(  = Match a start parentheses
                       [^)(]*  = Match anything that isn't a parentheses
                   \)  = Match a end parentheses
               )  = End Group
               *\) = Match anything and then a close parens
           )  = Close non-capturing group
           *  = Match anything
        )  = Close capturing group
   \)  = Match a close parens
  	 /gi  = Get all matches, not the first.  Be case insensitive.
   */

  var fixedCss = css.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi, function (fullMatch, origUrl) {
    // strip quotes (if they exist)
    var unquotedOrigUrl = origUrl.trim().replace(/^"(.*)"$/, function (o, $1) {
      return $1;
    }).replace(/^'(.*)'$/, function (o, $1) {
      return $1;
    }); // already a full url? no change

    if (/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(unquotedOrigUrl)) {
      return fullMatch;
    } // convert the url to a full url


    var newUrl;

    if (unquotedOrigUrl.indexOf("//") === 0) {
      //TODO: should we add protocol?
      newUrl = unquotedOrigUrl;
    } else if (unquotedOrigUrl.indexOf("/") === 0) {
      // path should be relative to the base url
      newUrl = baseUrl + unquotedOrigUrl; // already starts with '/'
    } else {
      // path should be relative to current directory
      newUrl = currentDir + unquotedOrigUrl.replace(/^\.\//, ""); // Strip leading './'
    } // send back the fixed url(...)


    return "url(" + JSON.stringify(newUrl) + ")";
  }); // send back the fixed css

  return fixedCss;
};

/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var icons_medium_namespaceObject = {};
__webpack_require__.r(icons_medium_namespaceObject);
__webpack_require__.d(icons_medium_namespaceObject, "IconsMedium", function() { return icons_medium_IconsMedium; });
var src_namespaceObject = {};
__webpack_require__.r(src_namespaceObject);
__webpack_require__.d(src_namespaceObject, "IconsMedium", function() { return icons_medium_IconsMedium; });
__webpack_require__.d(src_namespaceObject, "IconsetSVG", function() { return iconset_svg_IconsetSVG; });
__webpack_require__.d(src_namespaceObject, "defineCustomElement", function() { return defineCustomElement; });
__webpack_require__.d(src_namespaceObject, "defineCustomElements", function() { return defineCustomElements; });
__webpack_require__.d(src_namespaceObject, "strictCustomEvent", function() { return strictCustomEvent; });
__webpack_require__.d(src_namespaceObject, "Banner", function() { return banner_Banner; });
__webpack_require__.d(src_namespaceObject, "Button", function() { return button_Button; });
__webpack_require__.d(src_namespaceObject, "ActionButton", function() { return action_button_ActionButton; });
__webpack_require__.d(src_namespaceObject, "Card", function() { return card_Card; });
__webpack_require__.d(src_namespaceObject, "CardQuiet", function() { return card_quiet_CardQuiet; });
__webpack_require__.d(src_namespaceObject, "CardGallery", function() { return card_gallery_CardGallery; });
__webpack_require__.d(src_namespaceObject, "Checkbox", function() { return checkbox_Checkbox; });
__webpack_require__.d(src_namespaceObject, "Dropzone", function() { return dropzone_Dropzone; });
__webpack_require__.d(src_namespaceObject, "IllustratedMessage", function() { return illustrated_message_IllustratedMessage; });
__webpack_require__.d(src_namespaceObject, "Link", function() { return link_Link; });
__webpack_require__.d(src_namespaceObject, "Radio", function() { return radio_Radio; });
__webpack_require__.d(src_namespaceObject, "RadioGroup", function() { return radio_group_RadioGroup; });
__webpack_require__.d(src_namespaceObject, "Slider", function() { return slider_Slider; });
__webpack_require__.d(src_namespaceObject, "Icon", function() { return icon_Icon; });
__webpack_require__.d(src_namespaceObject, "IconsLarge", function() { return icons_large_IconsLarge; });
__webpack_require__.d(src_namespaceObject, "Iconset", function() { return iconset_Iconset; });
__webpack_require__.d(src_namespaceObject, "IconsetRegistry", function() { return iconset_registry_IconsetRegistry; });
__webpack_require__.d(src_namespaceObject, "SideNav", function() { return sidenav_SideNav; });
__webpack_require__.d(src_namespaceObject, "SideNavItem", function() { return sidenav_item_SideNavItem; });
__webpack_require__.d(src_namespaceObject, "SideNavHeading", function() { return sidenav_heading_SideNavHeading; });
__webpack_require__.d(src_namespaceObject, "Switch", function() { return switch_Switch; });
__webpack_require__.d(src_namespaceObject, "Tab", function() { return tab_Tab; });
__webpack_require__.d(src_namespaceObject, "TabList", function() { return tab_list_TabList; });
__webpack_require__.d(src_namespaceObject, "ThemeDark", function() { return theme_dark_ThemeDark; });
__webpack_require__.d(src_namespaceObject, "ScaleMedium", function() { return scale_medium_ScaleMedium; });
__webpack_require__.d(src_namespaceObject, "OverlayRoot", function() { return overlay_root_OverlayRoot; });
__webpack_require__.d(src_namespaceObject, "OverlayTrigger", function() { return overlay_trigger_OverlayTrigger; });
__webpack_require__.d(src_namespaceObject, "Popover", function() { return popover_Popover; });

// EXTERNAL MODULE: ./node_modules/lit-element/lit-element.js + 5 modules
var lit_element = __webpack_require__(0);

// CONCATENATED MODULE: ./src/banner/banner.css
function _templateObject() {
  const data = _taggedTemplateLiteral(["\n:host{display:inline-block;border-radius:var(--spectrum-banner-border-radius);padding:var(--spectrum-banner-padding-y) var(--spectrum-banner-padding-x);font-size:var(--spectrum-banner-text-size);line-height:var(--spectrum-banner-text-line-height);color:var(--spectrum-banner-text-color)}#header{font-weight:700}:host([corner]){position:absolute;top:-10px;right:-10px}:host([type=info]){background-color:var(--spectrum-banner-info-background-color)}:host([type=warning]){background-color:var(--spectrum-banner-warning-background-color)}:host([type=error]){background-color:var(--spectrum-banner-error-background-color)}\n"]);

  _templateObject = function () {
    return data;
  };

  return data;
}

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const styles = Object(lit_element["b" /* css */])(_templateObject());
/* harmony default export */ var banner = (styles);
// CONCATENATED MODULE: ./src/banner/banner.ts
function banner_templateObject() {
  const data = banner_taggedTemplateLiteral(["\n            <div id=\"header\"><slot name=\"header\"></slot></div>\n            <div id=\"content\"><slot name=\"content\"></slot></div>\n        "]);

  banner_templateObject = function () {
    return data;
  };

  return data;
}

function banner_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var __decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class banner_Banner extends lit_element["a" /* LitElement */] {
  constructor() {
    super(...arguments);
    this.type = 'info';
    this.corner = false;
  }

  static get styles() {
    return [banner];
  }

  render() {
    return Object(lit_element["c" /* html */])(banner_templateObject());
  }

}
banner_Banner.is = 'sp-banner';

__decorate([Object(lit_element["d" /* property */])({
  reflect: true
})], banner_Banner.prototype, "type", void 0);

__decorate([Object(lit_element["d" /* property */])({
  reflect: true,
  type: Boolean
})], banner_Banner.prototype, "corner", void 0);
// CONCATENATED MODULE: ./src/banner/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

// CONCATENATED MODULE: ./src/shared/focusable.ts
var focusable_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/



/**
 * Focusable base class handles tabindex setting into shadowed elements automatically.
 *
 * This implementation is based heavily on the aybolit delegate-focus-mixin at
 * https://github.com/web-padawan/aybolit/blob/master/packages/core/src/mixins/delegate-focus-mixin.js
 */

class focusable_Focusable extends lit_element["a" /* LitElement */] {
  constructor() {
    super(...arguments);
    /**
     * Disable this control. It will not receive focus or events
     */

    this.disabled = false;
    /**
     * When this control is rendered, focus it automatically
     */

    this.autofocus = false;
    /**
     * The tab index to apply to this control. See general documentation about
     * the tabindex HTML property
     */

    this.tabIndex = 0;
    this.isShiftTabbing = false;
  }

  get focusElement() {
    throw new Error('Must implement focusElement getter!');
  }

  focus() {
    if (this.disabled) {
      return;
    }

    this.focusElement.focus();
  }

  blur() {
    this.focusElement.blur();
  }

  firstUpdated() {
    if (!this.hasAttribute('tabindex')) {
      this.tabIndex = 0;
    }

    if (this.autofocus) {
      this.focus();
    }

    this.addEventListener('focusin', event => {
      if (event.composedPath()[0] === this) {
        this.handleFocus();
      }
    });
    this.addEventListener('keydown', event => {
      if (!event.defaultPrevented && event.shiftKey && event.keyCode === 9) {
        this.isShiftTabbing = true;
        HTMLElement.prototype.focus.apply(this);
        setTimeout(() => this.isShiftTabbing = false, 0);
      }
    });
  }

  update(changedProperties) {
    if (changedProperties.has('disabled')) {
      this.handleDisabledChanged(this.disabled, changedProperties.get('disabled'));
    }

    if (changedProperties.has('tabIndex')) {
      // save value of tabindex, as it can be overridden to
      // undefined in case if the element is disabled
      this.newTabindex = this.tabIndex;
      this.handleTabIndexChanged(this.tabIndex);
    }

    super.update(changedProperties);
  }

  updated(changedProperties) {
    super.updated(changedProperties);

    if (changedProperties.has('disabled')) {
      if (this.focusElement instanceof HTMLInputElement) {
        this.focusElement.disabled = this.disabled;
      }

      if (this.disabled) {
        this.blur();
      }
    }

    if (changedProperties.has('tabIndex') && this.newTabindex !== undefined) {
      this.focusElement.tabIndex = this.newTabindex;
      this.newTabindex = undefined;
    }
  }

  handleFocus() {
    if (this.isShiftTabbing) {
      return;
    }

    this.focusElement.focus();
  }

  handleDisabledChanged(disabled, oldDisabled) {
    if (disabled) {
      this.oldTabindex = this.tabIndex;
      this.tabIndex = -1;
      this.setAttribute('aria-disabled', 'true');
    } else if (oldDisabled) {
      if (this.oldTabindex !== undefined) {
        this.tabIndex = this.oldTabindex;
      }

      this.removeAttribute('aria-disabled');
    }
  }

  handleTabIndexChanged(tabindex) {
    if (this.disabled && tabindex) {
      if (this.tabIndex !== -1) {
        this.oldTabindex = this.tabIndex;
      }

      this.tabIndex = -1;
    }
  }

}

focusable_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true
})], focusable_Focusable.prototype, "disabled", void 0);

focusable_decorate([Object(lit_element["d" /* property */])({
  type: Boolean
})], focusable_Focusable.prototype, "autofocus", void 0);

focusable_decorate([Object(lit_element["d" /* property */])({
  type: Number,
  reflect: true
})], focusable_Focusable.prototype, "tabIndex", void 0);
// CONCATENATED MODULE: ./src/button/button-base.ts
function _templateObject6() {
  const data = button_base_taggedTemplateLiteral(["\n                  <button id=\"button\">", "</button>\n              "]);

  _templateObject6 = function () {
    return data;
  };

  return data;
}

function _templateObject5() {
  const data = button_base_taggedTemplateLiteral(["\n                  <a href=\"", "\" id=\"button\">", "</a>\n              "]);

  _templateObject5 = function () {
    return data;
  };

  return data;
}

function _templateObject4() {
  const data = button_base_taggedTemplateLiteral(["\n                      <div id=\"label\"><slot></slot></div>\n                  "]);

  _templateObject4 = function () {
    return data;
  };

  return data;
}

function _templateObject3() {
  const data = button_base_taggedTemplateLiteral(["\n            ", "\n        "]);

  _templateObject3 = function () {
    return data;
  };

  return data;
}

function _templateObject2() {
  const data = button_base_taggedTemplateLiteral(["\n                  <slot name=\"icon\"></slot>\n                  <div id=\"label\"><slot></slot></div>\n              "]);

  _templateObject2 = function () {
    return data;
  };

  return data;
}

function button_base_templateObject() {
  const data = button_base_taggedTemplateLiteral(["\n                  <div id=\"label\"><slot></slot></div>\n                  <slot name=\"icon\"></slot>\n              "]);

  button_base_templateObject = function () {
    return data;
  };

  return data;
}

function button_base_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var button_base_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class button_base_ButtonBase extends focusable_Focusable {
  constructor() {
    super(...arguments);
    this.iconRight = false;
  }

  get hasIcon() {
    return !!this.querySelector('[slot="icon"]');
  }

  get focusElement() {
    if (this.shadowRoot) {
      return this.shadowRoot.querySelector('#button');
    }

    return this;
  }

  renderWithIcon() {
    return this.iconRight ? Object(lit_element["c" /* html */])(button_base_templateObject()) : Object(lit_element["c" /* html */])(_templateObject2());
  }

  render() {
    const buttonContents = Object(lit_element["c" /* html */])(_templateObject3(), this.hasIcon ? this.renderWithIcon() : Object(lit_element["c" /* html */])(_templateObject4()));
    return this.href && this.href.length > 0 ? Object(lit_element["c" /* html */])(_templateObject5(), this.href, buttonContents) : Object(lit_element["c" /* html */])(_templateObject6(), buttonContents);
  }

}

button_base_decorate([Object(lit_element["d" /* property */])()], button_base_ButtonBase.prototype, "href", void 0);

button_base_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true,
  attribute: 'icon-right'
})], button_base_ButtonBase.prototype, "iconRight", void 0);
// CONCATENATED MODULE: ./src/button/button.css
function button_templateObject() {
  const data = button_taggedTemplateLiteral(["\n#button{display:inline-flex;box-sizing:border-box;align-items:center;justify-content:center;overflow:visible;margin:0;text-transform:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;-webkit-appearance:button;vertical-align:top;transition:background var(--spectrum-global-animation-duration-100,.13s) ease-out,border-color var(--spectrum-global-animation-duration-100,.13s) ease-out,color var(--spectrum-global-animation-duration-100,.13s) ease-out,box-shadow var(--spectrum-global-animation-duration-100,.13s) ease-out;text-decoration:none;font-family:adobe-clean,Source Sans Pro,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,sans-serif;line-height:1.3;cursor:pointer;border-width:var(--spectrum-button-primary-border-size,2px);border-style:solid;border-radius:var(--spectrum-button-primary-border-radius,var(--spectrum-global-dimension-size-200));min-height:var(--spectrum-button-primary-height,var(--spectrum-global-dimension-size-400));height:auto;min-width:var(--spectrum-button-primary-min-width,var(--spectrum-button-cta-min-width));padding:var(--spectrum-global-dimension-size-50) calc(var(--spectrum-button-primary-padding-x,\nvar(--spectrum-global-dimension-size-200)) - var(--spectrum-button-primary-border-size, 2px));padding-bottom:calc(var(--spectrum-global-dimension-size-50) + .5px);padding-top:calc(var(--spectrum-global-dimension-size-50) - .5px);font-size:var(--spectrum-button-primary-text-size,var(--spectrum-global-dimension-font-size-150));font-weight:var(--spectrum-button-primary-text-font-weight,700)}#button:focus{outline:none;box-shadow:0 0 0 var(--spectrum-button-primary-border-size-increase-key-focus,1px) var(--spectrum-button-primary-border-color-key-focus,#1473e6)}#button::-moz-focus-inner{border:0;border-style:none;padding:0;margin-top:-2px;margin-bottom:-2px}#button:-moz-focusring{outline:1px dotted ButtonText}:host([disabled]) #button{cursor:default}::slotted([slot=icon]){max-height:100%;flex-shrink:0}#button:active,#button:hover{box-shadow:none}slot[name=icon]+#label{margin-left:var(--spectrum-button-primary-text-gap,var(--spectrum-global-dimension-size-100))}#label+::slotted([slot=icon]){margin-left:calc(var(--spectrum-button-primary-text-gap,\nvar(--spectrum-global-dimension-size-100))/2)}#label{align-self:center;justify-self:center;width:100%}#label:empty{display:none}#button:active{box-shadow:none}:host([variant=cta]) #button{background-color:var(--spectrum-button-cta-background-color,#1473e6);border-color:var(--spectrum-button-cta-border-color,#1473e6);color:var(--spectrum-button-cta-text-color,#fff)}:host([variant=cta]) #button:hover{background-color:var(--spectrum-button-cta-background-color-hover,#0d66d0);border-color:var(--spectrum-button-cta-border-color-hover,#0d66d0);color:var(--spectrum-button-cta-text-color-hover,#fff)}:host([variant=cta]) #button:focus{background-color:var(--spectrum-button-cta-background-color-key-focus,#1473e6);border-color:var(--spectrum-button-cta-border-color-key-focus,#1473e6);color:var(--spectrum-button-cta-text-color-key-focus,#fff)}:host([variant=cta]) #button:active{background-color:var(--spectrum-button-cta-background-color-down,#0d66d0);border-color:var(--spectrum-button-cta-border-color-down,#0d66d0);color:var(--spectrum-button-cta-text-color-down,#fff)}:host([variant=cta][disabled]) #button{background-color:var(--spectrum-button-cta-background-color-disabled,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-cta-border-color-disabled,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-cta-text-color-disabled,var(--spectrum-global-color-gray-500))}:host([variant=primary]) #button{background-color:var(--spectrum-button-primary-background-color,transparent);border-color:var(--spectrum-button-primary-border-color,var(--spectrum-global-color-gray-800));color:var(--spectrum-button-primary-text-color,var(--spectrum-global-color-gray-800))}:host([variant=primary]) #button:hover{background-color:var(--spectrum-button-primary-background-color-hover,var(--spectrum-global-color-gray-800));border-color:var(--spectrum-button-primary-border-color-hover,var(--spectrum-global-color-gray-800));color:var(--spectrum-button-primary-text-color-hover,var(--spectrum-global-color-gray-50))}:host([variant=primary]) #button:focus{background-color:var(--spectrum-button-primary-background-color-key-focus,#1473e6);border-color:var(--spectrum-button-primary-border-color-key-focus,#1473e6);color:var(--spectrum-button-primary-text-color-key-focus,#fff)}:host([variant=primary]) #button:active{background-color:var(--spectrum-button-primary-background-color-down,var(--spectrum-global-color-gray-900));border-color:var(--spectrum-button-primary-border-color-down,var(--spectrum-global-color-gray-900));color:var(--spectrum-button-primary-text-color-down,var(--spectrum-global-color-gray-50))}:host([variant=primary][disabled]) #button{background-color:var(--spectrum-button-primary-background-color-disabled,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-primary-border-color-disabled,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-primary-text-color-disabled,var(--spectrum-global-color-gray-500))}:host([variant=secondary]) #button{background-color:var(--spectrum-button-secondary-background-color,transparent);border-color:var(--spectrum-button-secondary-border-color,var(--spectrum-global-color-gray-700));color:var(--spectrum-button-secondary-text-color,var(--spectrum-global-color-gray-700))}:host([variant=secondary]) #button:hover{background-color:var(--spectrum-button-secondary-background-color-hover,var(--spectrum-global-color-gray-700));border-color:var(--spectrum-button-secondary-border-color-hover,var(--spectrum-global-color-gray-700));color:var(--spectrum-button-secondary-text-color-hover,var(--spectrum-global-color-gray-50))}:host([variant=secondary]) #button:focus{background-color:var(--spectrum-button-secondary-background-color-key-focus,#1473e6);border-color:var(--spectrum-button-secondary-border-color-key-focus,#1473e6);color:var(--spectrum-button-secondary-text-color-key-focus,#fff)}:host([variant=secondary]) #button:active{background-color:var(--spectrum-button-secondary-background-color-down,var(--spectrum-global-color-gray-800));border-color:var(--spectrum-button-secondary-border-color-down,var(--spectrum-global-color-gray-800));color:var(--spectrum-button-secondary-text-color-down,var(--spectrum-global-color-gray-50))}:host([variant=secondary][disabled]) #button{background-color:var(--spectrum-button-secondary-background-color-disabled,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-secondary-border-color-disabled,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-secondary-text-color-disabled,var(--spectrum-global-color-gray-500))}:host([variant=negative]) #button{background-color:var(--spectrum-button-warning-background-color,transparent);border-color:var(--spectrum-button-warning-border-color,var(--spectrum-global-color-red-600));color:var(--spectrum-button-warning-text-color,var(--spectrum-global-color-red-600))}:host([variant=negative]) #button:hover{background-color:var(--spectrum-button-warning-background-color-hover,var(--spectrum-global-color-red-600));border-color:var(--spectrum-button-warning-border-color-hover,var(--spectrum-global-color-red-600));color:var(--spectrum-button-warning-text-color-hover,var(--spectrum-global-color-gray-50))}:host([variant=negative]) #button:focus{background-color:var(--spectrum-button-warning-background-color-key-focus,#1473e6);border-color:var(--spectrum-button-warning-border-color-key-focus,#1473e6);color:var(--spectrum-button-warning-text-color-key-focus,#fff)}:host([variant=negative]) #button:active{background-color:var(--spectrum-button-warning-background-color-down,var(--spectrum-global-color-red-700));border-color:var(--spectrum-button-warning-border-color-down,var(--spectrum-global-color-red-700));color:var(--spectrum-button-warning-text-color-down,var(--spectrum-global-color-gray-50))}:host([variant=negative][disabled]) #button{background-color:var(--spectrum-button-warning-background-color-disabled,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-warning-border-color-disabled,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-warning-text-color-disabled,var(--spectrum-global-color-gray-500))}:host([variant=overBackground]) #button{background-color:var(--spectrum-button-over-background-background-color,transparent);border-color:var(--spectrum-button-over-background-border-color,#fff);color:var(--spectrum-button-over-background-text-color,#fff)}:host([variant=overBackground]) #button:hover{background-color:var(--spectrum-button-over-background-background-color-hover,#fff);border-color:var(--spectrum-button-over-background-border-color-hover,#fff);color:inherit}:host([variant=overBackground]) #button:focus{background-color:var(--spectrum-button-over-background-background-color-key-focus,#fff);border-color:var(--spectrum-button-over-background-border-color-key-focus,#fff);color:inherit;box-shadow:0 0 0 var(--spectrum-button-primary-border-size-increase-key-focus,1px) var(--spectrum-button-over-background-border-color-key-focus,#fff)}:host([variant=overBackground]) #button:active{background-color:var(--spectrum-button-over-background-background-color-down,#fff);border-color:var(--spectrum-button-over-background-border-color-down,#fff);color:inherit;box-shadow:none}:host([variant=overBackground][disabled]) #button{background-color:var(--spectrum-button-over-background-background-color-disabled,hsla(0,0%,100%,.1));border-color:var(--spectrum-button-over-background-border-color-disabled,transparent);color:var(--spectrum-button-over-background-text-color-disabled,hsla(0,0%,100%,.35))}:host([variant=overBackground][quiet]) #button{background-color:var(--spectrum-button-quiet-over-background-background-color,transparent);border-color:var(--spectrum-button-quiet-over-background-border-color,transparent);color:var(--spectrum-button-quiet-over-background-text-color,#fff)}:host([variant=overBackground][quiet]) #button:hover{background-color:var(--spectrum-button-quiet-over-background-background-color-hover,hsla(0,0%,100%,.1));border-color:var(--spectrum-button-quiet-over-background-border-color-hover,transparent);color:var(--spectrum-button-quiet-over-background-text-color-hover,#fff)}:host([variant=overBackground][quiet]) #button:focus{background-color:var(--spectrum-button-quiet-over-background-background-color-key-focus,#fff);border-color:var(--spectrum-button-quiet-over-background-border-color-key-focus,#fff);color:inherit;box-shadow:0 0 0 var(--spectrum-button-primary-border-size-increase-key-focus,1px) var(--spectrum-button-quiet-over-background-border-color-key-focus,#fff)}:host([variant=overBackground][quiet]) #button:active{background-color:var(--spectrum-button-quiet-over-background-background-color-down,hsla(0,0%,100%,.15));border-color:var(--spectrum-button-quiet-over-background-border-color-down,transparent);color:var(--spectrum-button-quiet-over-background-text-color-down,#fff);box-shadow:none}:host([variant=overBackground][quiet][disabled]) #button{background-color:var(--spectrum-button-quiet-over-background-background-color-disabled,transparent);border-color:var(--spectrum-button-quiet-over-background-border-color-disabled,transparent);color:var(--spectrum-button-quiet-over-background-text-color-disabled,hsla(0,0%,100%,.15))}:host([variant=primary][quiet]) #button{background-color:var(--spectrum-button-quiet-primary-background-color,transparent);border-color:var(--spectrum-button-quiet-primary-border-color,transparent);color:var(--spectrum-button-quiet-primary-text-color,var(--spectrum-global-color-gray-800))}:host([variant=primary][quiet]) #button:hover{background-color:var(--spectrum-button-quiet-primary-background-color-hover,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-quiet-primary-border-color-hover,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-quiet-primary-text-color-hover,var(--spectrum-global-color-gray-900))}:host([variant=primary][quiet]) #button:focus{background-color:var(--spectrum-button-quiet-primary-background-color-key-focus,#1473e6);border-color:var(--spectrum-button-quiet-primary-border-color-key-focus,#1473e6);color:var(--spectrum-button-quiet-primary-text-color-key-focus,#fff)}:host([variant=primary][quiet]) #button:active{background-color:var(--spectrum-button-quiet-primary-background-color-down,var(--spectrum-global-color-gray-300));border-color:var(--spectrum-button-quiet-primary-border-color-down,var(--spectrum-global-color-gray-300));color:var(--spectrum-button-quiet-primary-text-color-down,var(--spectrum-global-color-gray-900))}:host([variant=primary][quiet][disabled]) #button{background-color:var(--spectrum-button-quiet-primary-background-color-disabled,transparent);border-color:var(--spectrum-button-quiet-primary-border-color-disabled,transparent);color:var(--spectrum-button-quiet-primary-text-color-disabled,var(--spectrum-global-color-gray-500))}:host([variant=secondary][quiet]) #button{background-color:var(--spectrum-button-quiet-secondary-background-color,transparent);border-color:var(--spectrum-button-quiet-secondary-border-color,transparent);color:var(--spectrum-button-quiet-secondary-text-color,var(--spectrum-global-color-gray-700))}:host([variant=secondary][quiet]) #button:hover{background-color:var(--spectrum-button-quiet-secondary-background-color-hover,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-quiet-secondary-border-color-hover,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-quiet-secondary-text-color-hover,var(--spectrum-global-color-gray-800))}:host([variant=secondary][quiet]) #button:focus{background-color:var(--spectrum-button-quiet-secondary-background-color-key-focus,#1473e6);border-color:var(--spectrum-button-quiet-secondary-border-color-key-focus,#1473e6);color:var(--spectrum-button-quiet-secondary-text-color-key-focus,#fff)}:host([variant=secondary][quiet]) #button:active{background-color:var(--spectrum-button-quiet-secondary-background-color-down,var(--spectrum-global-color-gray-300));border-color:var(--spectrum-button-quiet-secondary-border-color-down,var(--spectrum-global-color-gray-300));color:var(--spectrum-button-quiet-secondary-text-color-down,var(--spectrum-global-color-gray-800))}:host([variant=secondary][quiet][disabled]) #button{background-color:var(--spectrum-button-quiet-secondary-background-color-disabled,transparent);border-color:var(--spectrum-button-quiet-secondary-border-color-disabled,transparent);color:var(--spectrum-button-quiet-secondary-text-color-disabled,var(--spectrum-global-color-gray-500))}:host([variant=negative][quiet]) #button{background-color:var(--spectrum-button-quiet-warning-background-color,transparent);border-color:var(--spectrum-button-quiet-warning-border-color,transparent);color:var(--spectrum-button-quiet-warning-text-color,var(--spectrum-global-color-red-500))}:host([variant=negative][quiet]) #button:hover{background-color:var(--spectrum-button-quiet-warning-background-color-hover,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-button-quiet-warning-border-color-hover,var(--spectrum-global-color-gray-200));color:var(--spectrum-button-quiet-warning-text-color-hover,var(--spectrum-global-color-red-600))}:host([variant=negative][quiet]) #button:focus{background-color:var(--spectrum-button-quiet-warning-background-color-key-focus,#1473e6);border-color:var(--spectrum-button-quiet-warning-border-color-key-focus,#1473e6);color:var(--spectrum-button-quiet-warning-text-color-key-focus,#fff)}:host([variant=negative][quiet]) #button:active{background-color:var(--spectrum-button-quiet-warning-background-color-down,var(--spectrum-global-color-gray-300));border-color:var(--spectrum-button-quiet-warning-border-color-down,var(--spectrum-global-color-gray-300));color:var(--spectrum-button-quiet-warning-text-color-down,var(--spectrum-global-color-red-600))}:host([variant=negative][quiet][disabled]) #button{background-color:var(--spectrum-button-quiet-warning-background-color-disabled,transparent);border-color:var(--spectrum-button-quiet-warning-border-color-disabled,transparent);color:var(--spectrum-button-quiet-warning-text-color-disabled,var(--spectrum-global-color-gray-500))}:host{display:inline-flex;flex-direction:row}#button{display:flex;flex:1 1 auto;-webkit-appearance:none}#button:focus,:host(:focus){outline:none}:host([disabled]){pointer-events:none}slot[name=icon]::slotted(svg){fill:currentColor;stroke:currentColor;width:var(--spectrum-alias-workflow-icon-size,18px);height:var(--spectrum-alias-workflow-icon-size,18px)}\n"]);

  button_templateObject = function () {
    return data;
  };

  return data;
}

function button_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const button_styles = Object(lit_element["b" /* css */])(button_templateObject());
/* harmony default export */ var button_button = (button_styles);
// CONCATENATED MODULE: ./src/button/button.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var button_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};




/**
 * A Spectrum button control.
 * @element sp-button
 */

class button_Button extends button_base_ButtonBase {
  constructor() {
    super(...arguments);
    /**
     * The visual variant to apply to this button.
     */

    this.variant = 'cta';
    /**
     * There is a warning in place for this control
     */

    this.warning = false;
    /**
     * Style this button to be less obvious
     */

    this.quiet = false;
  }

  static get styles() {
    return [button_button];
  }

}

button_decorate([Object(lit_element["d" /* property */])({
  reflect: true
})], button_Button.prototype, "variant", void 0);

button_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true
})], button_Button.prototype, "warning", void 0);

button_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true
})], button_Button.prototype, "quiet", void 0);
// CONCATENATED MODULE: ./src/button/action-button.css
function action_button_templateObject() {
  const data = action_button_taggedTemplateLiteral(["\n#button{display:inline-flex;box-sizing:border-box;align-items:center;justify-content:center;overflow:visible;margin:0;text-transform:none;-webkit-font-smoothing:antialiased;-moz-osx-font-smoothing:grayscale;-webkit-appearance:button;vertical-align:top;transition:background var(--spectrum-global-animation-duration-100,.13s) ease-out,border-color var(--spectrum-global-animation-duration-100,.13s) ease-out,color var(--spectrum-global-animation-duration-100,.13s) ease-out,box-shadow var(--spectrum-global-animation-duration-100,.13s) ease-out;text-decoration:none;font-family:adobe-clean,Source Sans Pro,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,sans-serif;line-height:1.3;cursor:pointer;position:relative;height:var(--spectrum-actionbutton-height,var(--spectrum-global-dimension-size-400));min-width:var(--spectrum-actionbutton-min-width,var(--spectrum-global-dimension-size-400));padding:0 calc(var(--spectrum-actionbutton-icon-padding-x,\nvar(--spectrum-global-dimension-size-85)) - var(--spectrum-actionbutton-border-size, 1px));border-radius:var(--spectrum-actionbutton-border-radius,var(--spectrum-global-dimension-size-50));font-size:var(--spectrum-actionbutton-text-size,var(--spectrum-global-dimension-font-size-100));font-weight:var(--spectrum-actionbutton-text-font-weight,400);background-color:var(--spectrum-actionbutton-background-color,var(--spectrum-global-color-gray-75));border:var(--spectrum-actionbutton-border-size,1px) solid var(--spectrum-actionbutton-border-color,var(--spectrum-global-color-gray-300));color:var(--spectrum-actionbutton-text-color,var(--spectrum-global-color-gray-800))}#button:focus{outline:none;background-color:var(--spectrum-actionbutton-background-color-key-focus,var(--spectrum-global-color-gray-50));border-color:var(--spectrum-actionbutton-border-color-key-focus,var(--spectrum-global-color-blue-400));box-shadow:0 0 0 var(--spectrum-button-primary-border-size-increase-key-focus,1px) var(--spectrum-actionbutton-border-color-key-focus,var(--spectrum-global-color-blue-400));color:var(--spectrum-actionbutton-text-color-key-focus,var(--spectrum-global-color-gray-900))}#button::-moz-focus-inner{border:0;border-style:none;padding:0;margin-top:-2px;margin-bottom:-2px}#button:-moz-focusring{outline:1px dotted ButtonText}:host([disabled]) #button{cursor:default;background-color:var(--spectrum-actionbutton-background-color-disabled,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-border-color-disabled,var(--spectrum-global-color-gray-200));color:var(--spectrum-actionbutton-text-color-disabled,var(--spectrum-global-color-gray-500))}.spectrum-Icon{max-height:100%;flex-shrink:0;color:var(--spectrum-actionbutton-icon-color,var(--spectrum-global-color-gray-700))}.spectrum-Icon+#label{padding-left:var(--spectrum-actionbutton-icon-padding-x,var(--spectrum-global-dimension-size-85));padding-right:calc(var(--spectrum-actionbutton-text-padding-x,\nvar(--spectrum-global-dimension-size-150)) - var(--spectrum-actionbutton-icon-padding-x,\nvar(--spectrum-global-dimension-size-85)))}.spectrum-Icon--sizeS:only-child{position:absolute;top:calc(50% - var(--spectrum-actionbutton-icon-size,\nvar(--spectrum-global-dimension-size-225))/2);left:calc(50% - var(--spectrum-actionbutton-icon-size,\nvar(--spectrum-global-dimension-size-225))/2)}#label:only-child{padding:0 calc(var(--spectrum-actionbutton-text-padding-x,\nvar(--spectrum-global-dimension-size-150)) - var(--spectrum-actionbutton-icon-padding-x,\nvar(--spectrum-global-dimension-size-85)))}#hold-affordance{position:absolute;right:var(--spectrum-actionbutton-hold-icon-padding-right,var(--spectrum-global-dimension-size-40));bottom:var(--spectrum-actionbutton-hold-icon-padding-bottom,var(--spectrum-global-dimension-size-40));color:var(--spectrum-actionbutton-hold-icon-color,var(--spectrum-global-color-gray-700))}#label{align-self:center;justify-self:center;width:100%;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}#label:empty{display:none}:host([quiet]) #button{border-width:var(--spectrum-actionbutton-quiet-border-size,1px);border-radius:var(--spectrum-actionbutton-quiet-border-radius,var(--spectrum-global-dimension-size-50));font-size:var(--spectrum-actionbutton-quiet-text-size,var(--spectrum-global-dimension-font-size-100));font-weight:var(--spectrum-actionbutton-quiet-text-font-weight,400);background-color:var(--spectrum-actionbutton-quiet-background-color,transparent);border-color:var(--spectrum-actionbutton-quiet-border-color,transparent);color:var(--spectrum-actionbutton-quiet-text-color,var(--spectrum-global-color-gray-800))}#button:hover{background-color:var(--spectrum-actionbutton-background-color-hover,var(--spectrum-global-color-gray-50));border-color:var(--spectrum-actionbutton-border-color-hover,var(--spectrum-global-color-gray-400));box-shadow:none;color:var(--spectrum-actionbutton-text-color-hover,var(--spectrum-global-color-gray-900))}#button:hover .spectrum-Icon{color:var(--spectrum-actionbutton-icon-color-hover,var(--spectrum-global-color-gray-900))}#button:hover #hold-affordance{color:var(--spectrum-actionbutton-hold-icon-color-hover,var(--spectrum-global-color-gray-900))}#button:focus .spectrum-Icon{color:var(--spectrum-actionbutton-icon-color-key-focus,var(--spectrum-global-color-gray-900))}#button:focus #hold-affordance{color:var(--spectrum-actionbutton-hold-icon-color-key-focus,var(--spectrum-global-color-gray-900))}#button:active{background-color:var(--spectrum-actionbutton-background-color-down,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-border-color-down,var(--spectrum-global-color-gray-400));box-shadow:none;color:var(--spectrum-actionbutton-text-color-down,var(--spectrum-global-color-gray-900))}#button:active #hold-affordance{color:var(--spectrum-actionbutton-hold-icon-color-down,var(--spectrum-global-color-gray-900))}:host([disabled]) #button .spectrum-Icon{color:var(--spectrum-actionbutton-icon-color-disabled,var(--spectrum-global-color-gray-400))}:host([disabled]) #button #hold-affordance{color:var(--spectrum-actionbutton-hold-icon-color-disabled,var(--spectrum-global-color-gray-400))}:host([selected]) #button{background-color:var(--spectrum-actionbutton-background-color-selected,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-border-color-selected,var(--spectrum-global-color-gray-300));color:var(--spectrum-actionbutton-text-color-selected,var(--spectrum-global-color-gray-800))}:host([selected]) #button .spectrum-Icon{color:var(--spectrum-actionbutton-icon-color-selected,var(--spectrum-global-color-gray-700))}:host([selected]) #button:focus{background-color:var(--spectrum-actionbutton-background-color-selected-key-focus,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-border-color-selected-key-focus,var(--spectrum-global-color-blue-400));color:var(--spectrum-actionbutton-text-color-selected-key-focus,var(--spectrum-global-color-gray-900))}:host([selected]) #button:focus .spectrum-Icon{color:var(--spectrum-actionbutton-icon-color-selected-key-focus,var(--spectrum-global-color-gray-900))}:host([selected]) #button:hover{background-color:var(--spectrum-actionbutton-background-color-selected-hover,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-border-color-selected-hover,var(--spectrum-global-color-gray-400));color:var(--spectrum-actionbutton-text-color-selected-hover,var(--spectrum-global-color-gray-900))}:host([selected]) #button:hover .spectrum-Icon{color:var(--spectrum-actionbutton-icon-color-selected-hover,var(--spectrum-global-color-gray-900))}:host([selected]) #button:active{background-color:var(--spectrum-actionbutton-background-color-selected-down,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-border-color-selected-down,var(--spectrum-global-color-gray-400));color:var(--spectrum-actionbutton-text-color-selected-down,var(--spectrum-global-color-gray-900))}:host([selected]) #button:active .spectrum-Icon{color:var(--spectrum-actionbutton-icon-color-selected-down,var(--spectrum-global-color-gray-900))}:host([selected][disabled]) #button{background-color:var(--spectrum-actionbutton-background-color-selected-disabled,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-border-color-selected-disabled,var(--spectrum-global-color-gray-200));color:var(--spectrum-actionbutton-text-color-selected-disabled,var(--spectrum-global-color-gray-500))}:host([selected][disabled]) #button .spectrum-Icon{color:var(--spectrum-actionbutton-icon-color-selected-disabled,var(--spectrum-global-color-gray-400))}:host([quiet]) #button:hover{background-color:var(--spectrum-actionbutton-quiet-background-color-hover,transparent);border-color:var(--spectrum-actionbutton-quiet-border-color-hover,transparent);color:var(--spectrum-actionbutton-quiet-text-color-hover,var(--spectrum-global-color-gray-900));box-shadow:none}:host([quiet]) #button:focus{background-color:var(--spectrum-actionbutton-quiet-background-color-key-focus,transparent);box-shadow:0 0 0 var(--spectrum-actionbutton-quiet-border-size-key-focus,2px) var(--spectrum-actionbutton-quiet-border-color-key-focus,var(--spectrum-global-color-blue-400));border-color:var(--spectrum-actionbutton-quiet-border-color-key-focus,var(--spectrum-global-color-blue-400));color:var(--spectrum-actionbutton-quiet-text-color-key-focus,var(--spectrum-global-color-gray-900))}:host([quiet]) #button:active{background-color:var(--spectrum-actionbutton-quiet-background-color-down,var(--spectrum-global-color-gray-300));border-color:var(--spectrum-actionbutton-quiet-border-color-down,var(--spectrum-global-color-gray-300));color:var(--spectrum-actionbutton-quiet-text-color-down,var(--spectrum-global-color-gray-900));box-shadow:none}:host([quiet][disabled]) #button{background-color:var(--spectrum-actionbutton-quiet-background-color-disabled,transparent);border-color:var(--spectrum-actionbutton-quiet-border-color-disabled,transparent);color:var(--spectrum-actionbutton-quiet-text-color-disabled,var(--spectrum-global-color-gray-500))}:host([quiet][selected]) #button{background-color:var(--spectrum-actionbutton-quiet-background-color-selected,var(--spectrum-global-color-gray-300));border-color:var(--spectrum-actionbutton-quiet-border-color-selected,var(--spectrum-global-color-gray-300));color:var(--spectrum-actionbutton-quiet-text-color-selected,var(--spectrum-global-color-gray-800))}:host([quiet][selected]) #button:focus{background-color:var(--spectrum-actionbutton-quiet-background-color-selected-key-focus,var(--spectrum-global-color-gray-300));border-color:var(--spectrum-actionbutton-quiet-border-color-selected-key-focus,var(--spectrum-global-color-blue-400));color:var(--spectrum-actionbutton-quiet-text-color-selected-key-focus,var(--spectrum-global-color-gray-900))}:host([quiet][selected]) #button:hover{background-color:var(--spectrum-actionbutton-quiet-background-color-selected-hover,var(--spectrum-global-color-gray-300));border-color:var(--spectrum-actionbutton-quiet-border-color-selected-hover,var(--spectrum-global-color-gray-300));color:var(--spectrum-actionbutton-quiet-text-color-selected-hover,var(--spectrum-global-color-gray-900))}:host([quiet][selected]) #button:active{background-color:var(--spectrum-actionbutton-quiet-background-color-selected-down,var(--spectrum-global-color-gray-300));border-color:var(--spectrum-actionbutton-quiet-border-color-selected-down,var(--spectrum-global-color-gray-300));color:var(--spectrum-actionbutton-quiet-text-color-selected-down,var(--spectrum-global-color-gray-900))}:host([quiet][selected][disabled]) #button{background-color:var(--spectrum-actionbutton-quiet-background-color-selected-disabled,var(--spectrum-global-color-gray-200));border-color:var(--spectrum-actionbutton-quiet-border-color-selected-disabled,var(--spectrum-global-color-gray-200));color:var(--spectrum-actionbutton-quiet-text-color-selected-disabled,var(--spectrum-global-color-gray-500))}:host{display:inline-flex;flex-direction:row}#button{display:flex;flex:1 1 auto;-webkit-appearance:none}#button:focus,:host(:focus){outline:none}:host([disabled]){pointer-events:none}slot[name=icon]::slotted(svg){fill:currentColor;stroke:currentColor;width:var(--spectrum-alias-workflow-icon-size,18px);height:var(--spectrum-alias-workflow-icon-size,18px)}\n"]);

  action_button_templateObject = function () {
    return data;
  };

  return data;
}

function action_button_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const action_button_styles = Object(lit_element["b" /* css */])(action_button_templateObject());
/* harmony default export */ var action_button = (action_button_styles);
// CONCATENATED MODULE: ./src/button/action-button.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var action_button_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};




class action_button_ActionButton extends button_base_ButtonBase {
  constructor() {
    super(...arguments);
    this.quiet = false;
    this.selected = false;
    this.holdAffordance = false;
  }

  static get styles() {
    return [action_button];
  }

}

action_button_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true
})], action_button_ActionButton.prototype, "quiet", void 0);

action_button_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true
})], action_button_ActionButton.prototype, "selected", void 0);

action_button_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true,
  attribute: 'hold-affordance'
})], action_button_ActionButton.prototype, "holdAffordance", void 0);
// CONCATENATED MODULE: ./src/button/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/





if (!customElements.get('sp-action-button')) {
  customElements.define('sp-action-button', action_button_ActionButton);
}

if (!customElements.get('sp-button')) {
  customElements.define('sp-button', button_Button);
}
// CONCATENATED MODULE: ./src/card/card-base.css
function card_base_templateObject() {
  const data = card_base_taggedTemplateLiteral(["\n:host{position:relative;display:inline-flex;flex-direction:column;box-sizing:border-box;min-width:var(--spectrum-card-min-width);border:var(--spectrum-card-border-size) solid transparent;border-radius:var(--spectrum-card-border-radius);background-color:var(--spectrum-card-background-color)}:host(:focus){outline:none}:host(:hover){border-color:var(--spectrum-card-border-color-hover)}:host(:focus) .actions,:host(:focus) .quick-actions,:host(:hover) .actions,:host(:hover) .quick-actions,:host([selected]) .actions,:host([selected]) .quick-actions{visibility:visible;opacity:1;pointer-events:all}:host(:focus),:host([drop-target]),:host([selected]){border-color:var(--spectrum-card-border-color-key-focus);box-shadow:0 0 0 1px var(--spectrum-card-border-color-key-focus)}:host([drop-target]){background-color:var(--spectrum-alias-highlight-selected)}#title{font-size:var(--spectrum-card-title-text-size);white-space:nowrap;overflow:hidden;text-overflow:ellipsis;padding-right:var(--spectrum-card-title-padding-right);color:var(--spectrum-card-quiet-title-text-color)}#subtitle{font-size:var(--spectrum-card-subtitle-text-size);letter-spacing:var(--spectrum-card-subtitle-letter-spacing);text-transform:uppercase;padding-right:var(--spectrum-card-subtitle-padding-right);color:var(--spectrum-card-quiet-subtitle-text-color)}#header{display:flex;align-items:baseline;height:var(--spectrum-card-body-header-height)}#body{padding:var(--spectrum-card-body-padding-top) var(--spectrum-card-body-padding-right) var(--spectrum-card-body-padding-bottom) var(--spectrum-card-body-padding-left)}#body:last-child{border-radius:0 0 var(--spectrum-card-border-radius) var(--spectrum-card-border-radius)}#content{display:flex;height:var(--spectrum-card-body-content-height);margin-top:var(--spectrum-card-body-content-margin-top)}#actions{right:var(--spectrum-card-actions-margin);top:var(--spectrum-card-actions-margin)}#actions,#quick-actions{position:absolute;height:var(--spectrum-quickactions-height);visibility:hidden}#quick-actions{left:var(--spectrum-card-checkbox-margin);top:var(--spectrum-card-checkbox-margin);width:var(--spectrum-quickactions-height)}#quick-actions .spectrum-Checkbox{margin:0}#action-button{flex:1;align-self:center;display:flex;justify-content:flex-end}\n"]);

  card_base_templateObject = function () {
    return data;
  };

  return data;
}

function card_base_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const card_base_styles = Object(lit_element["b" /* css */])(card_base_templateObject());
/* harmony default export */ var card_base = (card_base_styles);
// CONCATENATED MODULE: ./src/card/card.css
function card_templateObject() {
  const data = card_taggedTemplateLiteral(["\nslot[name=cover-photo]::slotted(*){height:var(--spectrum-card-coverphoto-height);box-sizing:border-box;display:flex;align-items:center;justify-content:center;border-bottom-color:transparent;border-radius:calc(var(--spectrum-card-border-radius) - 1px) calc(var(--spectrum-card-border-radius) - 1px) 0 0;background-size:cover;background-position:50%;background-color:var(--spectrum-card-coverphoto-background-color);border-bottom:var(--spectrum-card-coverphoto-border-bottom-size) solid var(--spectrum-card-coverphoto-border-color)}#footer{padding-top:var(--spectrum-card-footer-padding-top);margin-right:var(--spectrum-card-body-padding-right);padding-bottom:var(--spectrum-card-body-padding-bottom);margin-left:var(--spectrum-card-body-padding-left);border-top:var(--spectrum-card-footer-border-top-size) solid;border-color:var(--spectrum-card-border-color)}\n"]);

  card_templateObject = function () {
    return data;
  };

  return data;
}

function card_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const card_styles = Object(lit_element["b" /* css */])(card_templateObject());
/* harmony default export */ var card = (card_styles);
// CONCATENATED MODULE: ./src/card/card.ts
function card_card_templateObject() {
  const data = card_card_taggedTemplateLiteral(["\n            <slot name=\"cover-photo\"></slot>\n            <div id=\"body\">\n                <div id=\"header\"><div id=\"title\">", "</div></div>\n                <div id=\"content\">\n                    <div id=\"subtitle\">", "</div>\n                </div>\n            </div>\n            <div id=\"footer\"><slot name=\"footer\"></slot></div>\n        "]);

  card_card_templateObject = function () {
    return data;
  };

  return data;
}

function card_card_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var card_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};




class card_Card extends lit_element["a" /* LitElement */] {
  constructor() {
    super(...arguments);
    this.title = '';
    this.subtitle = '';
  }

  static get styles() {
    return [card_base, card];
  }

  render() {
    return Object(lit_element["c" /* html */])(card_card_templateObject(), this.title, this.subtitle);
  }

}
card_Card.is = 'sp-card';

card_decorate([Object(lit_element["d" /* property */])()], card_Card.prototype, "title", void 0);

card_decorate([Object(lit_element["d" /* property */])()], card_Card.prototype, "subtitle", void 0);
// CONCATENATED MODULE: ./src/card/card-quiet.css
function card_quiet_templateObject() {
  const data = card_quiet_taggedTemplateLiteral(["\n:host{width:100%;height:100%;min-width:var(--spectrum-card-quiet-min-size);border-width:0;border-radius:0;overflow:visible;background-color:initial}:host,:host(:hover){border-color:transparent}:host(:focus),:host([drop-target]),:host([selected]){border-color:transparent;box-shadow:none}:host([drop-target]){background-color:initial}#subtitle{letter-spacing:var(--spectrum-card-subtitle-letter-spacing);text-transform:uppercase;padding-right:var(--spectrum-card-subtitle-padding-right);color:var(--spectrum-card-quiet-subtitle-text-color)}#subtitle,slot[name=description]::slotted(*){font-size:var(--spectrum-card-subtitle-text-size)}slot[name=description]::slotted(*){color:var(--spectrum-card-description-text-color)}#subtitle+slot[name=description]:before{content:\"\u2022\";padding-right:var(--spectrum-card-subtitle-padding-right)}slot[name=preview]::slotted(*){width:100%;flex:1;min-height:var(--spectrum-card-quiet-min-size);padding:var(--spectrum-card-quiet-preview-padding);margin:0 auto;box-sizing:border-box;border-radius:var(--spectrum-card-quiet-border-radius);position:relative;transition:background-color var(--spectrum-transition-time);background-color:var(--spectrum-card-quiet-preview-background-color);overflow:hidden}slot[name=preview]::slotted(*):before{content:\"\";position:absolute;top:0;left:0;width:100%;height:100%;box-sizing:border-box;border-radius:inherit;border:var(--spectrum-card-quiet-border-size) solid transparent}#header{height:var(--spectrum-card-quiet-body-header-height);margin-top:var(--spectrum-card-quiet-body-header-margin-top)}#body{padding:0}:host(:hover) slot[name=preview]::slotted(*){background-color:var(--spectrum-card-quiet-preview-background-color-hover)}:host(:focus) slot[name=preview]::slotted(*),:host([selected]) slot[name=preview]::slotted(*){background-color:var(--spectrum-card-quiet-preview-background-color)}:host([drop-target]) slot[name=preview]::slotted(*){transition:none;background-color:var(--spectrum-alias-highlight-selected)}:host([drop-target]) slot[name=preview]::slotted(*):before{border-color:var(--spectrum-card-quiet-border-color-selected);box-shadow:0 0 0 1px var(--spectrum-card-quiet-border-color-selected)}:host([drop-target]) #file-background,:host([drop-target]) #folder-background{fill:var(--spectrum-alias-highlight-selected)}:host([drop-target]) #file-outline,:host([drop-target]) #folder-outline{fill:var(--spectrum-card-quiet-border-color-selected)}\n"]);

  card_quiet_templateObject = function () {
    return data;
  };

  return data;
}

function card_quiet_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const card_quiet_styles = Object(lit_element["b" /* css */])(card_quiet_templateObject());
/* harmony default export */ var card_quiet = (card_quiet_styles);
// CONCATENATED MODULE: ./src/card/card-quiet.ts
function card_card_quiet_templateObject() {
  const data = card_card_quiet_taggedTemplateLiteral(["\n            <slot name=\"preview\"></slot>\n            <div id=\"body\">\n                <div id=\"header\"><div id=\"title\">", "</div></div>\n                <div id=\"content\">\n                    <div id=\"subtitle\">", "</div>\n                </div>\n            </div>\n        "]);

  card_card_quiet_templateObject = function () {
    return data;
  };

  return data;
}

function card_card_quiet_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var card_quiet_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};




class card_quiet_CardQuiet extends lit_element["a" /* LitElement */] {
  constructor() {
    super(...arguments);
    this.title = '';
    this.subtitle = '';
  }

  static get styles() {
    return [card_base, card_quiet];
  }

  render() {
    return Object(lit_element["c" /* html */])(card_card_quiet_templateObject(), this.title, this.subtitle);
  }

}
card_quiet_CardQuiet.is = 'sp-card-quiet';

card_quiet_decorate([Object(lit_element["d" /* property */])({
  type: String
})], card_quiet_CardQuiet.prototype, "title", void 0);

card_quiet_decorate([Object(lit_element["d" /* property */])({
  type: String
})], card_quiet_CardQuiet.prototype, "subtitle", void 0);
// CONCATENATED MODULE: ./src/card/card-gallery.css
function card_gallery_templateObject() {
  const data = card_gallery_taggedTemplateLiteral(["\n:host{min-width:0}slot[name=preview]::slotted(*){padding:0;border-radius:0}\n"]);

  card_gallery_templateObject = function () {
    return data;
  };

  return data;
}

function card_gallery_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const card_gallery_styles = Object(lit_element["b" /* css */])(card_gallery_templateObject());
/* harmony default export */ var card_gallery = (card_gallery_styles);
// CONCATENATED MODULE: ./src/card/card-gallery.ts
function card_card_gallery_templateObject() {
  const data = card_card_gallery_taggedTemplateLiteral(["\n            <slot name=\"cover-photo\"></slot>\n            <slot name=\"preview\"></slot>\n            <div id=\"body\">\n                <div id=\"header\">\n                    <div id=\"title\">", "</div>\n                    <div id=\"subtitle\">", "</div>\n                    <slot name=\"description\"></slot>\n                </div>\n            </div>\n        "]);

  card_card_gallery_templateObject = function () {
    return data;
  };

  return data;
}

function card_card_gallery_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var card_gallery_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};





class card_gallery_CardGallery extends lit_element["a" /* LitElement */] {
  constructor() {
    super(...arguments);
    this.title = '';
    this.subtitle = '';
  }

  static get styles() {
    return [card_base, card_quiet, card_gallery];
  }

  render() {
    return Object(lit_element["c" /* html */])(card_card_gallery_templateObject(), this.title, this.subtitle);
  }

}
card_gallery_CardGallery.is = 'sp-card-gallery';

card_gallery_decorate([Object(lit_element["d" /* property */])()], card_gallery_CardGallery.prototype, "title", void 0);

card_gallery_decorate([Object(lit_element["d" /* property */])()], card_gallery_CardGallery.prototype, "subtitle", void 0);
// CONCATENATED MODULE: ./src/card/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/



// CONCATENATED MODULE: ./src/checkbox/checkbox-base.ts
function checkbox_base_templateObject() {
  const data = checkbox_base_taggedTemplateLiteral(["\n            <input\n                id=\"input\"\n                type=\"checkbox\"\n                .checked=", "\n                @change=", "\n            />\n        "]);

  checkbox_base_templateObject = function () {
    return data;
  };

  return data;
}

function checkbox_base_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var checkbox_base_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class checkbox_base_CheckboxBase extends focusable_Focusable {
  constructor() {
    super(...arguments);
    this.checked = false;
    this.quiet = false;
  }

  get focusElement() {
    return this.inputElement;
  }

  handleChange(event) {
    this.checked = this.inputElement.checked; // Change events from the shadow DOM are not transmitted into
    // the parent light DOM

    const changeEvent = new CustomEvent('change', {
      detail: {
        sourceEvent: event
      },
      bubbles: event.bubbles,
      cancelable: event.cancelable
    });
    this.dispatchEvent(changeEvent);
  }

  render() {
    return Object(lit_element["c" /* html */])(checkbox_base_templateObject(), this.checked, this.handleChange);
  }

}

checkbox_base_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true
})], checkbox_base_CheckboxBase.prototype, "checked", void 0);

checkbox_base_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true
})], checkbox_base_CheckboxBase.prototype, "quiet", void 0);

checkbox_base_decorate([Object(lit_element["e" /* query */])('#input')], checkbox_base_CheckboxBase.prototype, "inputElement", void 0);
// CONCATENATED MODULE: ./src/checkbox/checkbox.css
function checkbox_templateObject() {
  const data = checkbox_taggedTemplateLiteral(["\n#root{display:inline-flex;align-items:flex-start;position:relative;min-height:var(--spectrum-checkbox-height,var(--spectrum-global-dimension-size-400));max-width:100%;margin-right:calc(var(--spectrum-checkbox-cursor-hit-x,\nvar(--spectrum-global-dimension-size-100))*2);vertical-align:top;border-color:var(--spectrum-checkbox-box-border-color,var(--spectrum-global-color-gray-600))}#input{font-family:inherit;font-size:100%;line-height:1.15;margin:0;overflow:visible;box-sizing:border-box;padding:0;position:absolute;top:0;left:calc(var(--spectrum-checkbox-cursor-hit-x,\nvar(--spectrum-global-dimension-size-100))*-1);width:calc(100% + var(--spectrum-checkbox-cursor-hit-x,\nvar(--spectrum-global-dimension-size-100))*2);height:100%;opacity:.0001;z-index:1;cursor:pointer}:host([disabled]) #input{cursor:default}#input:checked+#box{border-width:calc(var(--spectrum-checkbox-box-size,\nvar(--spectrum-global-dimension-size-175))/2)}#input:checked+#box #checkmark{transform:scale(1);opacity:1}:host([indeterminate]) #root #box,:host([indeterminate]) #root #input:checked+#box{border-width:calc(var(--spectrum-checkbox-box-size,\nvar(--spectrum-global-dimension-size-175))/2)}:host([indeterminate]) #root #box #checkmark,:host([indeterminate]) #root #input:checked+#box #checkmark{display:none}:host([indeterminate]) #root #box #partialCheckmark,:host([indeterminate]) #root #input:checked+#box #partialCheckmark{display:block;transform:scale(1);opacity:1}#label{margin-left:var(--spectrum-checkbox-text-gap,var(--spectrum-global-dimension-size-125));font-size:var(--spectrum-checkbox-text-size,var(--spectrum-global-dimension-font-size-100));font-weight:var(--spectrum-checkbox-text-font-weight,400);transition:color var(--spectrum-global-animation-duration-100,.13s) ease-in-out;margin-top:var(--spectrum-global-dimension-size-75);color:var(--spectrum-checkbox-text-color,var(--spectrum-global-color-gray-800))}#box{position:relative;box-sizing:border-box;width:var(--spectrum-checkbox-box-size,var(--spectrum-global-dimension-size-175));height:var(--spectrum-checkbox-box-size,var(--spectrum-global-dimension-size-175));margin:calc((var(--spectrum-checkbox-height,\nvar(--spectrum-global-dimension-size-400)) - var(--spectrum-checkbox-box-size,\nvar(--spectrum-global-dimension-size-175)))/2) 0;flex-grow:0;flex-shrink:0;border-radius:var(--spectrum-checkbox-box-border-radius,2px);transition:border var(--spectrum-global-animation-duration-100,.13s) ease-in-out,box-shadow var(--spectrum-global-animation-duration-100,.13s) ease-in-out;border:var(--spectrum-checkbox-box-border-size,2px) solid var(--spectrum-checkbox-box-border-color,var(--spectrum-global-color-gray-600));background-color:var(--spectrum-checkbox-box-background-color,var(--spectrum-global-color-gray-75))}#checkmark,#partialCheckmark{position:absolute;top:50%;left:50%;margin-top:calc(var(--spectrum-icon-checkmark-small-height,\nvar(--spectrum-global-dimension-font-size-25))/-2);margin-left:calc(var(--spectrum-icon-checkmark-small-width,\nvar(--spectrum-global-dimension-font-size-25))/-2);opacity:0;transform:scale(0);transition:opacity var(--spectrum-global-animation-duration-100,.13s) ease-in-out,transform var(--spectrum-global-animation-duration-100,.13s) ease-in-out}#partialCheckmark{display:none}#checkmark,#partialCheckmark{color:var(--spectrum-checkbox-checkmark-color,var(--spectrum-global-color-gray-75))}#input:checked+#box,:host([indeterminate]) #root #box{border-color:var(--spectrum-checkbox-box-border-color-selected,var(--spectrum-global-color-blue-500))}#root:hover #input:checked+#box,:host([indeterminate]) #root:hover #box{border-color:var(--spectrum-checkbox-box-border-color-selected-hover,var(--spectrum-global-color-blue-600))}#root:active #input:checked+#box,:host([indeterminate]) #root:active #box{border-color:var(--spectrum-checkbox-box-border-color-selected-down,var(--spectrum-global-color-blue-700))}#root:hover #box{border-color:var(--spectrum-checkbox-box-border-color-hover,var(--spectrum-global-color-gray-700));box-shadow:none}#root:hover #label{color:var(--spectrum-checkbox-text-color-hover,var(--spectrum-global-color-gray-900))}#root:active #box{border-color:var(--spectrum-checkbox-box-border-color-down,var(--spectrum-global-color-gray-800))}#root:active #label{color:var(--spectrum-checkbox-text-color-down,var(--spectrum-global-color-gray-900))}:host([disabled]) #input+#box{border-color:var(--spectrum-checkbox-box-border-color-disabled,var(--spectrum-global-color-gray-400))!important;background-color:var(--spectrum-checkbox-box-background-color-disabled,var(--spectrum-global-color-gray-75))}:host([disabled]) #input~#label{color:var(--spectrum-checkbox-text-color-disabled,var(--spectrum-global-color-gray-500))}#input:focus+#box{border-color:var(--spectrum-checkbox-box-border-color-key-focus,var(--spectrum-global-color-blue-400))!important;box-shadow:0 0 0 1px var(--spectrum-checkbox-box-border-color-key-focus,var(--spectrum-global-color-blue-400))!important}#input:focus~#label{color:var(--spectrum-checkbox-text-color-key-focus,var(--spectrum-global-color-blue-600))!important}:host([quiet]) #input:checked+#box,:host([quiet][indeterminate]) #root #box{border-color:var(--spectrum-checkbox-quiet-box-border-color-selected,var(--spectrum-global-color-gray-700))}:host([quiet]) #root:hover #input:checked+#box,:host([quiet][indeterminate]) #root:hover #box{border-color:var(--spectrum-checkbox-quiet-box-border-color-selected-hover,var(--spectrum-global-color-gray-800))}:host([quiet]) #root:active #input:checked+#box,:host([quiet][indeterminate]) #root:active #box{border-color:var(--spectrum-checkbox-quiet-box-border-color-selected-down,var(--spectrum-global-color-gray-900))}:host([invalid]) #root #box,:host([invalid]) #root #input:checked+#box{border-color:var(--spectrum-checkbox-box-border-color-error,var(--spectrum-global-color-red-500))}:host([invalid]) #root #label{color:var(--spectrum-checkbox-text-color-error,var(--spectrum-global-color-red-600))}:host([invalid]) #root:hover #box,:host([invalid]) #root:hover #input:checked+#box{border-color:var(--spectrum-checkbox-box-border-color-error-hover,var(--spectrum-global-color-red-600))}:host([invalid]) #root:hover #label{color:var(--spectrum-checkbox-text-color-error-hover,var(--spectrum-global-color-red-700))}:host([invalid]) #root:active #box,:host([invalid]) #root:active #input:checked+#box{border-color:var(--spectrum-checkbox-box-border-color-error-down,var(--spectrum-global-color-red-700))}:host([invalid]) #root:active #label{color:var(--spectrum-checkbox-text-color-error-down,var(--spectrum-global-color-red-700))}:host{display:inline-flex}#box sp-icon#checkmark,#box sp-icon#partialCheckmark{margin-top:calc(var(--spectrum-icon-size, var(--spectrum-global-dimension-font-size-25))/-2);margin-left:calc(var(--spectrum-icon-size, var(--spectrum-global-dimension-font-size-25))/-2)}#label{overflow:visible}\n"]);

  checkbox_templateObject = function () {
    return data;
  };

  return data;
}

function checkbox_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const checkbox_styles = Object(lit_element["b" /* css */])(checkbox_templateObject());
/* harmony default export */ var checkbox_checkbox = (checkbox_styles);
// CONCATENATED MODULE: ./src/events.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

/**
 * Creates a strictly typed CustomEvent<T> using the DocumentEventMap.
 *
 * To make use of this helper ensure that your events are added to the DocumentEventMap. The
 * easiest way to do this is to include them in the GlobalEventMap
 *
 * @param name The name of the CustomEvent to create
 * @param payload The arguments for the CustomEvent constructor
 */
function strictCustomEvent(name, payload) {
  return new CustomEvent(name, payload);
}
// CONCATENATED MODULE: ./src/iconset/iconset-registry.ts

class iconset_registry_IconsetRegistry {
  constructor() {
    this.iconsetMap = new Map();
  } // singleton getter


  static getInstance() {
    if (!iconset_registry_IconsetRegistry.instance) {
      iconset_registry_IconsetRegistry.instance = new iconset_registry_IconsetRegistry();
    }

    return iconset_registry_IconsetRegistry.instance;
  }

  addIconset(name, iconset) {
    this.iconsetMap.set(name, iconset); // dispatch a sp-iconset-added event on window to let everyone know we have a new iconset
    // note we're using window here for efficiency since we don't need to bubble through the dom since everyone
    // will know where to look for this event

    const event = strictCustomEvent('sp-iconset:added', {
      detail: {
        name,
        iconset
      }
    }); // we're dispatching this event in the next tick to allow the iconset to finish any slotchange or other event
    // listeners caused by connection to the dom and first render to complete, this way any icons listening for
    // this iconset will be able to access the completed iconset

    setTimeout(() => window.dispatchEvent(event), 0);
  }

  removeIconset(name) {
    this.iconsetMap.delete(name); // dispatch a sp-iconset-removed event on window to let everyone know we have a new iconset
    // note we're using window here for efficiency since we don't need to bubble through the dom since everyone
    // will know where to look for this event

    const event = strictCustomEvent('sp-iconset:removed', {
      detail: {
        name
      }
    }); // we're dispatching this event in the next tick To keep the event model consistent with the added event

    setTimeout(() => window.dispatchEvent(event), 0);
  }

  getIconset(name) {
    return this.iconsetMap.get(name);
  }

}
// CONCATENATED MODULE: ./src/icon/icon.css
function icon_templateObject() {
  const data = icon_taggedTemplateLiteral(["\n:host{display:inline-block;color:inherit;fill:currentColor;pointer-events:none;--spectrum-icon-size-s:var(--spectrum-alias-workflow-icon-size);--spectrum-icon-size-m:var(--spectrum-global-dimension-size-300);--spectrum-icon-size-xxs:calc(var(--spectrum-icon-size-s)/2);--spectrum-icon-size-xs:calc(var(--spectrum-icon-size-m)/2);--spectrum-icon-size-l:calc(var(--spectrum-icon-size-s)*2);--spectrum-icon-size-xl:calc(var(--spectrum-icon-size-m)*2);--spectrum-icon-size-xxl:calc(var(--spectrum-icon-size-m)*3);--spectrum-icon-size:var(--spectrum-icon-size-m)}:host,img,svg{height:var(--spectrum-icon-size);width:var(--spectrum-icon-size)}:host([size=xxs]){--spectrum-icon-size:var(--spectrum-icon-size-xxs)}:host([size=xs]){--spectrum-icon-size:var(--spectrum-icon-size-xs)}:host([size=s]){--spectrum-icon-size:var(--spectrum-icon-size-s)}:host([size=m]){--spectrum-icon-size:var(--spectrum-icon-size-m)}:host([size=l]){--spectrum-icon-size:var(--spectrum-icon-size-l)}:host([size=xl]){--spectrum-icon-size:var(--spectrum-icon-size-xl)}:host([size=xxl]){--spectrum-icon-size:var(--spectrum-icon-size-xxl)}\n"]);

  icon_templateObject = function () {
    return data;
  };

  return data;
}

function icon_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const icon_styles = Object(lit_element["b" /* css */])(icon_templateObject());
/* harmony default export */ var icon_icon = (icon_styles);
// EXTERNAL MODULE: ./node_modules/lit-html/lit-html.js + 1 modules
var lit_html = __webpack_require__(4);

// CONCATENATED MODULE: ./src/icon/icon.ts
function icon_templateObject3() {
  const data = icon_icon_taggedTemplateLiteral(["\n                      <img src=\"", "\" />\n                  "]);

  icon_templateObject3 = function () {
    return data;
  };

  return data;
}

function icon_templateObject2() {
  const data = icon_icon_taggedTemplateLiteral(["\n            ", "\n        "]);

  icon_templateObject2 = function () {
    return data;
  };

  return data;
}

function icon_icon_templateObject() {
  const data = icon_icon_taggedTemplateLiteral(["\n            <div id=\"container\">", "</div>\n        "]);

  icon_icon_templateObject = function () {
    return data;
  };

  return data;
}

function icon_icon_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var icon_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};





class icon_Icon extends lit_element["a" /* LitElement */] {
  constructor() {
    super(...arguments);
    this.size = 'm';
  }

  static get styles() {
    return [icon_icon];
  }

  connectedCallback() {
    super.connectedCallback(); // start listening for iconset-added and do updateIcon if we get one later

    this.iconsetListener = ev => {
      if (!this.name) {
        return;
      } // parse the icon name to get iconset name


      const icon = this.parseIcon(this.name);

      if (!icon) {
        return;
      }

      if (ev.detail.name === icon.iconset) {
        this.updateIcon();
      }
    };

    window.addEventListener('sp-iconset:added', this.iconsetListener);
  }

  disconnectedCallback() {
    super.disconnectedCallback();

    if (this.iconsetListener) {
      window.removeEventListener('sp-iconset:added', this.iconsetListener);
    }
  }

  firstUpdated() {
    this.updateIcon();
  }

  attributeChangedCallback(name, old, value) {
    super.attributeChangedCallback(name, old, value);
    this.updateIcon(); // any of our attributes change, update our icon
  }

  render() {
    return Object(lit_element["c" /* html */])(icon_icon_templateObject(), this.renderIcon());
  }

  updateIcon() {
    if (!this.name) {
      return;
    } // parse the icon name to get iconset name


    const icon = this.parseIcon(this.name);

    if (!icon) {
      return;
    } // try to retrieve the iconset


    const iconset = iconset_registry_IconsetRegistry.getInstance().getIconset(icon.iconset);

    if (!iconset) {
      // we can stop here as there's nothing to be done till we get the iconset
      return;
    }

    if (!this.iconContainer) {
      return;
    }

    this.iconContainer.innerHTML = '';
    iconset.applyIconToElement(this.iconContainer, icon.icon, this.size ? this.size : '');
  }

  parseIcon(icon) {
    if (!icon) {
      return null;
    }

    const iconParts = icon.split(':');
    let iconsetName = 'default';
    let iconName = icon;

    if (iconParts.length > 1) {
      iconsetName = iconParts[0];
      iconName = iconParts[1];
    }

    return {
      iconset: iconsetName,
      icon: iconName
    };
  }

  renderIcon() {
    // handle src image case
    return Object(lit_element["c" /* html */])(icon_templateObject2(), this.src ? Object(lit_element["c" /* html */])(icon_templateObject3(), this.src) : lit_html["e" /* nothing */]);
  }

}
icon_Icon.is = 'sp-icon';

icon_decorate([Object(lit_element["d" /* property */])()], icon_Icon.prototype, "src", void 0);

icon_decorate([Object(lit_element["d" /* property */])()], icon_Icon.prototype, "name", void 0);

icon_decorate([Object(lit_element["d" /* property */])()], icon_Icon.prototype, "size", void 0);

icon_decorate([Object(lit_element["e" /* query */])('#container')], icon_Icon.prototype, "iconContainer", void 0);
// CONCATENATED MODULE: ./src/icon/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/



if (!customElements.get('sp-icon')) {
  customElements.define('sp-icon', icon_Icon);
}
// CONCATENATED MODULE: ./src/checkbox/checkbox.ts
function checkbox_checkbox_templateObject() {
  const data = checkbox_checkbox_taggedTemplateLiteral(["\n            <label id=\"root\">\n                ", "\n                <span id=\"box\">\n                    <sp-icon\n                        id=\"checkmark\"\n                        size=\"s\"\n                        name=\"ui:CheckmarkSmall\"\n                        aria-hidden=\"true\"\n                    ></sp-icon>\n                    <sp-icon\n                        id=\"partialCheckmark\"\n                        size=\"s\"\n                        name=\"ui:DashSmall\"\n                        aria-hidden=\"true\"\n                    ></sp-icon>\n                </span>\n                <span id=\"label\"><slot></slot></span>\n            </label>\n        "]);

  checkbox_checkbox_templateObject = function () {
    return data;
  };

  return data;
}

function checkbox_checkbox_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var checkbox_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};





class checkbox_Checkbox extends checkbox_base_CheckboxBase {
  constructor() {
    super(...arguments);
    this.indeterminate = false;
    this.invalid = false;
  }

  static get styles() {
    return [checkbox_checkbox];
  }

  render() {
    return Object(lit_element["c" /* html */])(checkbox_checkbox_templateObject(), super.render());
  }

}

checkbox_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true
})], checkbox_Checkbox.prototype, "indeterminate", void 0);

checkbox_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true
})], checkbox_Checkbox.prototype, "invalid", void 0);
// CONCATENATED MODULE: ./src/checkbox/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/



if (!customElements.get('sp-checkbox')) {
  customElements.define('sp-checkbox', checkbox_Checkbox);
}
// CONCATENATED MODULE: ./src/dropzone/dropzone.css
function dropzone_templateObject() {
  const data = dropzone_taggedTemplateLiteral(["\n:host{display:block;text-align:center;border-radius:var(--spectrum-dropzone-border-radius);padding:var(--spectrum-dropzone-padding);border:var(--spectrum-dropzone-border-width) dashed var(--spectrum-dropzone-border-color);color:var(--spectrum-global-color-static-gray-700)}:host(:focus){border-color:var(--spectrum-dropzone-border-color);outline:0;border-style:dashed}:host([is-dragged]){border-color:var(--spectrum-dropzone-border-color-selected-hover);background-color:var(--spectrum-dropzone-background-color-selected-hover);border-style:solid}:host([is-dragged]) ::slotted(*){color:var(--spectrum-global-color-static-blue-400)}\n"]);

  dropzone_templateObject = function () {
    return data;
  };

  return data;
}

function dropzone_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const dropzone_styles = Object(lit_element["b" /* css */])(dropzone_templateObject());
/* harmony default export */ var dropzone = (dropzone_styles);
// CONCATENATED MODULE: ./src/dropzone/dropzone.ts
function dropzone_dropzone_templateObject() {
  const data = dropzone_dropzone_taggedTemplateLiteral(["\n            <div\n                id=\"container\"\n                @drop=\"", "\"\n                @dragover=\"", "\"\n                @dragleave=\"", "\"\n            >\n                <slot></slot>\n            </div>\n        "]);

  dropzone_dropzone_templateObject = function () {
    return data;
  };

  return data;
}

function dropzone_dropzone_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var dropzone_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};




class dropzone_Dropzone extends lit_element["a" /* LitElement */] {
  constructor() {
    super(...arguments);
    this._dropEffect = 'copy';
    this.isDragged = false;
    this.debouncedDragLeave = null;
  }

  static get styles() {
    return [dropzone];
  }

  get dropEffect() {
    return this._dropEffect;
  }

  set dropEffect(value) {
    if (['copy', 'move', 'link', 'none'].includes(value)) {
      this._dropEffect = value;
    }
  }

  onDragOver(ev) {
    const shouldAcceptEvent = strictCustomEvent('sp-dropzone:should-accept', {
      bubbles: true,
      cancelable: true,
      composed: true,
      detail: ev
    }); // dispatch event returns true if preventDefault() is not called

    const shouldAccept = this.dispatchEvent(shouldAcceptEvent);

    if (!ev.dataTransfer) {
      return;
    }

    if (!shouldAccept) {
      ev.dataTransfer.dropEffect = 'none';
      return;
    }

    ev.preventDefault();
    this.clearDebouncedDragLeave();
    this.isDragged = true;
    ev.dataTransfer.dropEffect = this.dropEffect;
    const dragOverEvent = strictCustomEvent('sp-dropzone:dragover', {
      bubbles: true,
      composed: true,
      detail: ev
    });
    this.dispatchEvent(dragOverEvent);
  }

  onDragLeave(ev) {
    this.clearDebouncedDragLeave();
    this.debouncedDragLeave = window.setTimeout(() => {
      if (this.isDragged) {
        this.isDragged = false;
      }

      const dragLeave = strictCustomEvent('sp-dropzone:dragleave', {
        bubbles: true,
        composed: true,
        detail: ev
      });
      this.dispatchEvent(dragLeave);
    }, 100);
  }

  onDrop(ev) {
    ev.preventDefault();
    this.clearDebouncedDragLeave();

    if (this.isDragged) {
      this.isDragged = false;
    }

    const dropEvent = strictCustomEvent('sp-dropzone:drop', {
      bubbles: true,
      composed: true,
      detail: ev
    });
    this.dispatchEvent(dropEvent);
  }

  render() {
    return Object(lit_element["c" /* html */])(dropzone_dropzone_templateObject(), this.onDrop, this.onDragOver, this.onDragLeave);
  }

  clearDebouncedDragLeave() {
    if (this.debouncedDragLeave) {
      clearTimeout(this.debouncedDragLeave);
      this.debouncedDragLeave = null;
    }
  }

}
dropzone_Dropzone.is = 'sp-dropzone';

dropzone_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true,
  attribute: 'is-dragged'
})], dropzone_Dropzone.prototype, "isDragged", void 0);
// CONCATENATED MODULE: ./src/dropzone/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

// CONCATENATED MODULE: ./src/illustrated-message/illustrated-message.css
function illustrated_message_templateObject() {
  const data = illustrated_message_taggedTemplateLiteral(["\n:host{height:100%;display:flex;flex-direction:column;align-items:center;justify-content:center;text-align:center;color:var(--spectrum-global-color-static-gray-500)}::slotted(*){margin-bottom:var(--spectrum-illustrated-message-illustration-margin-bottom);fill:currentColor;stroke:currentColor}#heading{max-width:var(--spectrum-illustrated-message-heading-max-width);margin:var(--spectrum-illustrated-message-heading-margin)}#description,#heading{color:var(--spectrum-global-color-static-gray-700)}#description{max-width:var(--spectrum-illustrated-message-description-max-width);margin:var(--spectrum-illustrated-message-description-margin);font-style:italic}\n"]);

  illustrated_message_templateObject = function () {
    return data;
  };

  return data;
}

function illustrated_message_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const illustrated_message_styles = Object(lit_element["b" /* css */])(illustrated_message_templateObject());
/* harmony default export */ var illustrated_message = (illustrated_message_styles);
// CONCATENATED MODULE: ./src/illustrated-message/illustrated-message.ts
function illustrated_message_illustrated_message_templateObject() {
  const data = illustrated_message_illustrated_message_taggedTemplateLiteral(["\n            <slot></slot>\n            <div id=\"heading\">", "</div>\n            <div id=\"description\">", "</div>\n        "]);

  illustrated_message_illustrated_message_templateObject = function () {
    return data;
  };

  return data;
}

function illustrated_message_illustrated_message_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var illustrated_message_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class illustrated_message_IllustratedMessage extends lit_element["a" /* LitElement */] {
  constructor() {
    super(...arguments);
    this.heading = '';
    this.description = '';
  }

  static get styles() {
    return [illustrated_message];
  }

  render() {
    return Object(lit_element["c" /* html */])(illustrated_message_illustrated_message_templateObject(), this.heading, this.description);
  }

}
illustrated_message_IllustratedMessage.is = 'sp-illustrated-message';

illustrated_message_decorate([Object(lit_element["d" /* property */])()], illustrated_message_IllustratedMessage.prototype, "heading", void 0);

illustrated_message_decorate([Object(lit_element["d" /* property */])()], illustrated_message_IllustratedMessage.prototype, "description", void 0);
// CONCATENATED MODULE: ./src/illustrated-message/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

// CONCATENATED MODULE: ./node_modules/lit-html/directives/if-defined.js
/**
 * @license
 * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.
 * This code may only be used under the BSD style license found at
 * http://polymer.github.io/LICENSE.txt
 * The complete set of authors may be found at
 * http://polymer.github.io/AUTHORS.txt
 * The complete set of contributors may be found at
 * http://polymer.github.io/CONTRIBUTORS.txt
 * Code distributed by Google as part of the polymer project is also
 * subject to an additional IP rights grant found at
 * http://polymer.github.io/PATENTS.txt
 */

/**
 * For AttributeParts, sets the attribute if the value is defined and removes
 * the attribute if the value is undefined.
 *
 * For other part types, this directive is a no-op.
 */

const ifDefined = Object(lit_html["c" /* directive */])(value => part => {
  if (value === undefined && part instanceof lit_html["a" /* AttributePart */]) {
    if (value !== part.value) {
      const name = part.committer.name;
      part.committer.element.removeAttribute(name);
    }
  } else {
    part.setValue(value);
  }
});
// CONCATENATED MODULE: ./src/link/link.css
function link_templateObject() {
  const data = link_taggedTemplateLiteral(["\n:host,a:-webkit-any-link{background-color:initial;text-decoration:none;transition:color var(--spectrum-global-animation-duration-100) ease-in-out;outline:none;color:var(--spectrum-link-text-color)}:host,a:-webkit-any-link,a:any-link{background-color:initial;text-decoration:none;transition:color var(--spectrum-global-animation-duration-100) ease-in-out;outline:none;color:var(--spectrum-link-text-color)}:host(:hover) a{text-decoration:underline;color:var(--spectrum-link-text-color-hover);cursor:pointer}:host([disabled]){cursor:default;pointer-events:none}:host([disabled]:focus) a,:host([disabled]:hover) a{text-decoration:none}\n"]);

  link_templateObject = function () {
    return data;
  };

  return data;
}

function link_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const link_styles = Object(lit_element["b" /* css */])(link_templateObject());
/* harmony default export */ var link_link = (link_styles);
// CONCATENATED MODULE: ./src/link/link.ts
function link_link_templateObject() {
  const data = link_link_taggedTemplateLiteral(["\n            <a href=", " target=", ">\n                <slot></slot>\n            </a>\n        "]);

  link_link_templateObject = function () {
    return data;
  };

  return data;
}

function link_link_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var link_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};




class link_Link extends lit_element["a" /* LitElement */] {
  constructor() {
    super(...arguments);
    this.href = undefined;
    this.target = undefined;
  }

  static get styles() {
    return [link_link];
  }

  render() {
    return Object(lit_element["c" /* html */])(link_link_templateObject(), ifDefined(this.href), ifDefined(this.target));
  }

}
link_Link.is = 'sp-link';

link_decorate([Object(lit_element["d" /* property */])()], link_Link.prototype, "href", void 0);

link_decorate([Object(lit_element["d" /* property */])()], link_Link.prototype, "target", void 0);
// CONCATENATED MODULE: ./src/link/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

// CONCATENATED MODULE: ./src/radio/radio.css
function radio_templateObject() {
  const data = radio_taggedTemplateLiteral(["\n#root{display:inline-flex;align-items:flex-start;position:relative;min-height:var(--spectrum-radio-height,var(--spectrum-global-dimension-size-400));max-width:100%;margin-right:calc(var(--spectrum-radio-cursor-hit-x,\nvar(--spectrum-global-dimension-size-100))*2);vertical-align:top}#input{font-family:inherit;font-size:100%;line-height:1.15;margin:0;overflow:visible;box-sizing:border-box;padding:0;position:absolute;top:0;left:calc(var(--spectrum-radio-cursor-hit-x,\nvar(--spectrum-global-dimension-size-100))*-1);width:calc(100% + var(--spectrum-radio-cursor-hit-x,\nvar(--spectrum-global-dimension-size-100))*2);height:100%;opacity:.0001;z-index:1;cursor:pointer}:host([disabled]) #input{cursor:default}:host([checked]) #input+#button{border-width:calc(var(--spectrum-radio-circle-diameter,\nvar(--spectrum-global-dimension-size-175))/2 - var(--spectrum-radio-circle-dot-size, 4px)/2);border-color:var(--spectrum-radio-circle-border-color-selected,var(--spectrum-global-color-blue-500))}#label{margin-left:var(--spectrum-radio-text-gap,var(--spectrum-global-dimension-size-125));font-size:var(--spectrum-radio-text-size,var(--spectrum-global-dimension-font-size-100));transition:color var(--spectrum-global-animation-duration-100,.13s) ease-in-out;margin-top:var(--spectrum-global-dimension-size-75);color:var(--spectrum-radio-text-color,var(--spectrum-global-color-gray-800))}#button{position:relative;box-sizing:border-box;width:var(--spectrum-radio-circle-diameter,var(--spectrum-global-dimension-size-175));height:var(--spectrum-radio-circle-diameter,var(--spectrum-global-dimension-size-175));margin:calc((var(--spectrum-radio-height,\nvar(--spectrum-global-dimension-size-400)) - var(--spectrum-radio-circle-diameter,\nvar(--spectrum-global-dimension-size-175)))/2) 0;flex-grow:0;flex-shrink:0;border-radius:calc(var(--spectrum-radio-circle-diameter,\nvar(--spectrum-global-dimension-size-175))/2);transition:border var(--spectrum-global-animation-duration-100,.13s) ease-in-out,box-shadow var(--spectrum-global-animation-duration-100,.13s) ease-in-out;background-color:var(--spectrum-radio-circle-background-color,var(--spectrum-global-color-gray-75));border:var(--spectrum-radio-circle-border-size,2px) solid var(--spectrum-radio-circle-border-color,var(--spectrum-global-color-gray-600))}:host([label-below]) #root{display:inline-flex;flex-direction:column;align-items:center;height:auto}:host([label-below]) #button{flex-shrink:0}:host([label-below]) #label{margin:var(--spectrum-global-dimension-size-40) 0 0 0}#root:hover #button{border-color:var(--spectrum-radio-circle-border-color-hover,var(--spectrum-global-color-gray-700));box-shadow:none}:host([checked]) #root:hover #input+#button{border-color:var(--spectrum-radio-circle-border-color-selected-hover,var(--spectrum-global-color-blue-600))}#root:hover #label{color:var(--spectrum-radio-text-color-hover,var(--spectrum-global-color-gray-900))}#root:active #button{border-color:var(--spectrum-radio-circle-border-color-down,var(--spectrum-global-color-gray-800))}:host([checked]) #root:active #input+#button{border-color:var(--spectrum-radio-circle-border-color-selected-down,var(--spectrum-global-color-blue-700))}#root:active #label{color:var(--spectrum-radio-text-color-down,var(--spectrum-global-color-gray-900))}:host([quiet][checked]) #input+#button{border-color:var(--spectrum-radio-quiet-circle-border-color-selected,var(--spectrum-global-color-gray-700))}:host([quiet][checked]) #root:hover #input+#button{border-color:var(--spectrum-radio-quiet-circle-border-color-selected-hover,var(--spectrum-global-color-gray-800))}:host([quiet][checked]) #root:active #input+#button{border-color:var(--spectrum-radio-quiet-circle-border-color-selected-down,var(--spectrum-global-color-gray-900))}:host([invalid]) #root:hover #input+#button,:host([quiet][invalid]) #root:hover #input+#button{border-color:var(--spectrum-radio-circle-border-color-error-hover,var(--spectrum-global-color-red-600))}:host([invalid]) #root:hover #label,:host([quiet][invalid]) #root:hover #label{color:var(--spectrum-radio-circle-border-color-error-hover,var(--spectrum-global-color-red-600))}:host([invalid]) #root:active #input+#button,:host([quiet][invalid]) #root:active #input+#button{border-color:var(--spectrum-radio-circle-border-color-error-down,var(--spectrum-global-color-red-700))}:host([invalid]) #root:active #label,:host([quiet][invalid]) #root:active #label{color:var(--spectrum-radio-circle-border-color-error-down,var(--spectrum-global-color-red-700))}:host([invalid]) #root #button,:host([invalid][checked]) #root #input+#button,:host([quiet][invalid]) #root #button,:host([quiet][invalid][checked]) #root #input+#button{border-color:var(--spectrum-radio-circle-border-color-error,var(--spectrum-global-color-red-500))}:host([invalid]) #root #label,:host([quiet][invalid]) #root #label{color:var(--spectrum-radio-circle-border-color-error,var(--spectrum-global-color-red-500))}:host([disabled]) #input+#button{border-color:var(--spectrum-radio-circle-border-color-disabled,var(--spectrum-global-color-gray-400))!important}:host([disabled]) #input~#label{color:var(--spectrum-radio-text-color-disabled,var(--spectrum-global-color-gray-500))!important}#input:focus+#button,#root:hover #input:focus+#button,:host([quiet]) #input:focus+#button,:host([quiet]) #root:hover #input:focus+#button{border-color:var(--spectrum-radio-circle-border-color-key-focus,var(--spectrum-global-color-blue-400));box-shadow:0 0 0 1px var(--spectrum-radio-circle-border-color-key-focus,var(--spectrum-global-color-blue-400))}#input:focus~#label,#root:hover #input:focus~#label,:host([quiet]) #input:focus~#label,:host([quiet]) #root:hover #input:focus~#label{color:var(--spectrum-radio-text-color-key-focus,var(--spectrum-global-color-blue-600))}:host([invalid][checked]) #root #input:focus+#button,:host([quiet][invalid][checked]) #root #input:focus+#button{border-color:var(--spectrum-radio-circle-border-color-key-focus,var(--spectrum-global-color-blue-400));box-shadow:0 0 0 1px var(--spectrum-radio-circle-border-color-key-focus,var(--spectrum-global-color-blue-400))}\n"]);

  radio_templateObject = function () {
    return data;
  };

  return data;
}

function radio_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const radio_styles = Object(lit_element["b" /* css */])(radio_templateObject());
/* harmony default export */ var radio_radio = (radio_styles);
// CONCATENATED MODULE: ./src/radio/radio.ts
function radio_radio_templateObject() {
  const data = radio_radio_taggedTemplateLiteral(["\n        <label id=\"root\">\n            <input\n                id=\"input\"\n                type=\"radio\"\n                name=", "\n                value=", "\n                .checked=", "\n                @change=", "\n            />\n            <span id=\"button\"></span>\n            <span id=\"label\"><slot></slot></span>\n        </div>\n        "]);

  radio_radio_templateObject = function () {
    return data;
  };

  return data;
}

function radio_radio_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var radio_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};





/**
 * Radio button component
 *
 * @attr quiet - uses the quiet style
 * @attr label-below - moves the label below the radio button
 * @attr invalid - uses the invalid style
 * @attr disabled - uses the disabled style
 * @attr checked - represents when the input is checked
 */

class radio_Radio extends focusable_Focusable {
  constructor() {
    super(...arguments);
    this.name = '';
    this.value = '';
    this.checked = false;
  }

  static get styles() {
    return [radio_radio];
  }

  get focusElement() {
    return this.inputElement;
  }

  handleChange() {
    this.checked = this.inputElement.checked;
    this.dispatchEvent(strictCustomEvent('sp-radio:change', {
      bubbles: true,
      composed: true,
      detail: {
        value: this.value
      }
    }));
  }

  render() {
    return Object(lit_element["c" /* html */])(radio_radio_templateObject(), this.name, this.value, this.checked, this.handleChange);
  }

}

radio_decorate([Object(lit_element["d" /* property */])({
  type: String,
  reflect: true
})], radio_Radio.prototype, "name", void 0);

radio_decorate([Object(lit_element["d" /* property */])({
  type: String,
  reflect: true
})], radio_Radio.prototype, "value", void 0);

radio_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true
})], radio_Radio.prototype, "checked", void 0);

radio_decorate([Object(lit_element["e" /* query */])('#input')], radio_Radio.prototype, "inputElement", void 0);
// CONCATENATED MODULE: ./src/radio/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/



if (!customElements.get('sp-radio')) {
  customElements.define('sp-radio', radio_Radio);
}
// CONCATENATED MODULE: ./src/radio-group/radio-group.css
function radio_group_templateObject() {
  const data = radio_group_taggedTemplateLiteral(["\n:host{display:flex;flex-direction:row}:host([column]){flex-direction:column}\n"]);

  radio_group_templateObject = function () {
    return data;
  };

  return data;
}

function radio_group_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const radio_group_styles = Object(lit_element["b" /* css */])(radio_group_templateObject());
/* harmony default export */ var radio_group = (radio_group_styles);
// CONCATENATED MODULE: ./src/radio-group/radio-group.ts
function radio_group_radio_group_templateObject() {
  const data = radio_group_radio_group_taggedTemplateLiteral(["\n            <slot></slot>\n        "]);

  radio_group_radio_group_templateObject = function () {
    return data;
  };

  return data;
}

function radio_group_radio_group_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var radio_group_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};



/**
 * Radio group component
 *
 * @attr column - arranges radio buttons vertically
 */

class radio_group_RadioGroup extends lit_element["a" /* LitElement */] {
  constructor() {
    super(...arguments);
    this.name = '';
    this._selected = '';
  }

  static get styles() {
    return [radio_group];
  }

  get selected() {
    return this._selected;
  }

  set selected(value) {
    const radio = value ? this.querySelector("sp-radio[value=".concat(value, "]")) : undefined;
    this.deselectChecked();

    if (radio) {
      this._selected = value;
      radio.checked = true;
    } else {
      // If no matching radio, selected is reset to empty string
      this._selected = '';
    }
  }

  render() {
    return Object(lit_element["c" /* html */])(radio_group_radio_group_templateObject());
  }

  firstUpdated() {
    const checkedRadio = this.querySelector('sp-radio[checked]');
    const checkedRadioValue = checkedRadio ? checkedRadio.value : ''; // If selected already assigned, don't overwrite

    this.selected = this.selected || checkedRadioValue;
    this.addEventListener('sp-radio:change', ev => {
      this.selected = ev.detail.value;
    });
  }

  deselectChecked() {
    const previousChecked = this.querySelectorAll('sp-radio[checked]');
    previousChecked.forEach(element => {
      const radio = element;
      radio.checked = false;
    });
  }

}

radio_group_decorate([Object(lit_element["d" /* property */])({
  type: String,
  reflect: true
})], radio_group_RadioGroup.prototype, "name", void 0);

radio_group_decorate([Object(lit_element["d" /* property */])({
  reflect: true
})], radio_group_RadioGroup.prototype, "selected", null);
// CONCATENATED MODULE: ./src/radio-group/index.ts
/*
Copyright 2019 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/



if (!customElements.get('sp-radio-group')) {
  customElements.define('sp-radio-group', radio_group_RadioGroup);
}
// CONCATENATED MODULE: ./src/slider/spectrum-slider.css
function spectrum_slider_templateObject() {
  const data = spectrum_slider_taggedTemplateLiteral(["\n:host{z-index:1;display:block;min-width:var(--spectrum-slider-min-width,var(--spectrum-global-dimension-size-1600));-webkit-user-select:none;-moz-user-select:none;user-select:none}#controls,:host{position:relative;min-height:var(--spectrum-slider-height,var(--spectrum-global-dimension-size-400))}#controls{display:inline-block;box-sizing:border-box;z-index:auto;width:calc(100% - var(--spectrum-slider-handle-width,\nvar(--spectrum-global-dimension-size-200))/2*2);margin-left:calc(var(--spectrum-slider-handle-width,\nvar(--spectrum-global-dimension-size-200))/2);vertical-align:top}#buffer,#fill,#ramp,.track{height:var(--spectrum-slider-track-height,2px);box-sizing:border-box;position:absolute;z-index:1;top:calc(var(--spectrum-slider-height, var(--spectrum-global-dimension-size-400))/2);left:0;right:auto;margin-top:calc(var(--spectrum-slider-fill-track-height, 2px)/-2);pointer-events:none}#buffer,#fill,.track{padding:0 var(--spectrum-slider-handle-gap,4px) 0 0;margin-left:calc(var(--spectrum-slider-handle-width,\nvar(--spectrum-global-dimension-size-200))/2*-1)}#buffer:before,#fill:before,.track:before{content:\"\";display:block;height:100%;border-radius:var(--spectrum-slider-track-border-radius,1px)}#fill{margin-left:0;padding:0 0 0 calc(var(--spectrum-slider-handle-width,\nvar(--spectrum-global-dimension-size-200))/2 + var(--spectrum-slider-handle-gap, 4px))}.spectrum-Slider-fill--right{padding:0 calc(var(--spectrum-slider-handle-width,\nvar(--spectrum-global-dimension-size-200))/2 + var(--spectrum-slider-handle-gap, 4px)) 0 0}#buffer{padding:0 var(--spectrum-slider-handle-gap,4px) 0 0;z-index:2}#buffer~#buffer,.track~.track{left:auto;right:0;padding:0 0 0 var(--spectrum-slider-handle-gap,4px);margin-left:0;margin-right:calc(var(--spectrum-slider-handle-width,\nvar(--spectrum-global-dimension-size-200))/2*-1)}#buffer~#buffer{margin-right:0;padding:0 0 0 calc(var(--spectrum-slider-handle-gap, 4px) + var(--spectrum-slider-handle-width,\nvar(--spectrum-global-dimension-size-200))/2)}#buffer~#buffer:after{display:none}:host([variant=range]) #value{-webkit-user-select:text;-moz-user-select:text;user-select:text}:host([variant=range]) .track:first-of-type{padding:0 var(--spectrum-slider-handle-gap,4px) 0 0;left:0;right:auto;margin-left:calc(var(--spectrum-slider-handle-width,\nvar(--spectrum-global-dimension-size-200))/2*-1)}:host([variant=range]) .track{padding:0 calc(var(--spectrum-slider-handle-gap, 4px) + var(--spectrum-slider-handle-width,\nvar(--spectrum-global-dimension-size-200))/2) 0 calc(var(--spectrum-slider-handle-gap, 4px) + var(--spectrum-slider-handle-width,\nvar(--spectrum-global-dimension-size-200))/2);left:auto;right:auto;margin:0}:host([variant=range]) .track:last-of-type{padding:0 0 0 var(--spectrum-slider-handle-gap,4px);left:auto;right:0;margin-right:calc(var(--spectrum-slider-handle-width,\nvar(--spectrum-global-dimension-size-200))/2*-1)}#ramp{margin-top:0;height:var(--spectrum-slider-ramp-track-height,16px);position:absolute;left:calc(var(--spectrum-slider-handle-width,\nvar(--spectrum-global-dimension-size-200))/2*-1);right:calc(var(--spectrum-slider-handle-width,\nvar(--spectrum-global-dimension-size-200))/2*-1);top:calc(var(--spectrum-slider-ramp-track-height, 16px)/2)}#ramp svg{width:100%;height:100%}#handle{position:absolute;left:0;top:calc(var(--spectrum-slider-height, var(--spectrum-global-dimension-size-400))/2);z-index:2;display:inline-block;box-sizing:border-box;width:var(--spectrum-slider-handle-width,var(--spectrum-global-dimension-size-200));height:var(--spectrum-slider-handle-height,var(--spectrum-global-dimension-size-200));margin:calc(var(--spectrum-slider-handle-width,\nvar(--spectrum-global-dimension-size-200))/-2) 0 0 calc(var(--spectrum-slider-handle-width,\nvar(--spectrum-global-dimension-size-200))/-2);border-radius:var(--spectrum-slider-handle-border-radius,var(--spectrum-global-dimension-size-100));transition:border-width var(--spectrum-slider-animation-duration,.13s) ease-in-out;outline:none;cursor:pointer;cursor:-webkit-grab;cursor:grab;border:var(--spectrum-slider-handle-border-size,2px) solid var(--spectrum-slider-handle-border-color,var(--spectrum-global-color-gray-700));background:var(--spectrum-alias-background-color-default,var(--spectrum-global-color-gray-100))}#handle:active,:host([dragging]) #handle,:host([handle-highlight]) #handle{border-width:var(--spectrum-slider-handle-border-size-down,var(--spectrum-global-dimension-size-75));cursor:ns-resize;cursor:-webkit-grabbing;cursor:grabbing}#handle.is-tophandle,#handle:active,:host([dragging]) #handle,:host([handle-highlight]) #handle{z-index:3}#input{margin:0;width:var(--spectrum-slider-handle-width,var(--spectrum-global-dimension-size-200));height:var(--spectrum-slider-handle-height,var(--spectrum-global-dimension-size-200));padding:0;position:absolute;top:calc(var(--spectrum-slider-handle-width,\nvar(--spectrum-global-dimension-size-200))/-2/4);left:calc(var(--spectrum-slider-handle-width,\nvar(--spectrum-global-dimension-size-200))/-2/4);overflow:hidden;opacity:.000001;cursor:default;-webkit-appearance:none;border:0;pointer-events:none;background:transparent}#input:focus{outline:none}#labelContainer{display:flex;position:relative;width:auto;padding-top:var(--spectrum-fieldlabel-padding-top,var(--spectrum-global-dimension-size-50));font-size:var(--spectrum-label-text-size,var(--spectrum-global-dimension-size-150));line-height:var(--spectrum-label-text-line-height,1.3);color:var(--spectrum-label-text-color,var(--spectrum-global-color-gray-700))}#label{padding-left:0;flex-grow:1}#value{flex-grow:0;padding-right:0;cursor:default;margin-left:var(--spectrum-slider-label-gap-x,var(--spectrum-global-dimension-size-200))}.spectrum-Slider-ticks{display:flex;justify-content:space-between;z-index:0;margin:0 calc(var(--spectrum-slider-handle-width,\nvar(--spectrum-global-dimension-size-200))/2*-1);margin-top:calc(var(--spectrum-slider-tick-mark-height, 10px) + var(--spectrum-slider-track-height, 2px)/2)}#tick{position:relative}#tick,#tick:after{width:var(--spectrum-slider-tick-mark-width,2px)}#tick:after{display:block;position:absolute;top:0;left:calc(50% - var(--spectrum-slider-tick-mark-width, 2px)/2);content:\"\";height:var(--spectrum-slider-tick-mark-height,10px);border-radius:var(--spectrum-slider-tick-mark-border-radius,1px);background-color:var(--spectrum-slider-tick-mark-color,var(--spectrum-global-color-gray-300))}#tick #tickLabel{display:flex;align-items:center;justify-content:center;margin:var(--spectrum-slider-label-gap-x,var(--spectrum-global-dimension-size-200)) calc(var(--spectrum-slider-label-gap-x,\nvar(--spectrum-global-dimension-size-200))*-1) 0 calc(var(--spectrum-slider-label-gap-x,\nvar(--spectrum-global-dimension-size-200))*-1);font-size:var(--spectrum-label-text-size,var(--spectrum-global-dimension-size-150));line-height:var(--spectrum-label-text-line-height,1.3)}#tick:first-of-type #tickLabel,#tick:last-of-type #tickLabel{display:block;position:absolute;margin:var(--spectrum-slider-label-gap-x,var(--spectrum-global-dimension-size-200)) 0 0 0}#tick:first-of-type #tickLabel{left:0}#tick:last-of-type #tickLabel{right:0}:host([variant=color]) #labelContainer,:host([variant=color]) .spectrum-Dial-labelContainer{padding-bottom:var(--spectrum-fieldlabel-padding-bottom,var(--spectrum-global-dimension-size-65))}:host([variant=color]) #controls,:host([variant=color]) #controls:before,:host([variant=color]) .spectrum-Dial-controls,:host([variant=color]) .spectrum-Dial-controls:before,:host([variant=color]) .track{min-height:auto;height:var(--spectrum-slider-color-track-height,24px);margin-left:0;width:100%}:host([variant=color]) #controls:before,:host([variant=color]) .spectrum-Dial-controls:before{display:block;content:\"\"}:host([variant=color]) #controls:before,:host([variant=color]) .spectrum-Dial-controls:before,:host([variant=color]) .track{top:0;padding:0;margin-top:0;margin-right:0;border-radius:var(--spectrum-alias-border-radius-regular,var(--spectrum-global-dimension-size-50))}:host([variant=color]) #handle,:host([variant=color]) .spectrum-Dial-handle{top:50%}:host([disabled]){cursor:default}:host([disabled]) #handle,:host([disabled]) .spectrum-Dial-handle{cursor:default;pointer-events:none}:host([disabled][variant=color]) #handle:active,:host([disabled][variant=color]) #handle:hover,:host([disabled][variant=color]) .spectrum-Dial-handle:active,:host([disabled][variant=color]) .spectrum-Dial-handle:hover{border-width:var(--spectrum-slider-color-handle-outset-border-size,1px)}.track:before{background:var(--spectrum-slider-track-color,var(--spectrum-global-color-gray-300))}#fill:before,:host([variant=filled]) .track:first-child:before{background:var(--spectrum-slider-fill-track-color,var(--spectrum-global-color-gray-700))}#buffer:after,#buffer:before{background:var(--spectrum-slider-player-track-buffer-color,var(--spectrum-global-color-gray-500))}#ramp path{fill:var(--spectrum-slider-track-color,var(--spectrum-global-color-gray-300))}#handle:hover{border-color:var(--spectrum-slider-handle-border-color-hover,var(--spectrum-global-color-gray-800))}:host([handle-highlight]) #handle{border-color:var(--spectrum-slider-handle-border-color-key-focus,var(--spectrum-global-color-blue-400));background:var(--spectrum-slider-handle-background-color-key-focus,var(--spectrum-global-color-blue-400))}#handle:active,:host([dragging]) #handle{border-color:var(--spectrum-slider-handle-border-color-down,var(--spectrum-global-color-gray-800))}.spectrum-Slider--ramp #handle,.spectrum-Slider--ramp .spectrum-Dial-handle{box-shadow:0 0 0 4px var(--spectrum-alias-background-color-default,var(--spectrum-global-color-gray-100))}:host([dragging]) #handle{border-color:var(--spectrum-slider-handle-border-color-down,var(--spectrum-global-color-gray-800));background:var(--spectrum-slider-handle-background-color-down,transparent)}:host([variant=range]) .track:not(:first-of-type):not(:last-of-type):before{background:var(--spectrum-slider-fill-track-color,var(--spectrum-global-color-gray-700))}:host([variant=color]) #controls:before,:host([variant=color]) .spectrum-Dial-controls:before{background-color:var(--spectrum-global-color-static-white,#fff);background-image:linear-gradient(-45deg,transparent 75.5%,var(--spectrum-global-color-static-gray-500,#bcbcbc) 0),linear-gradient(45deg,transparent 75.5%,var(--spectrum-global-color-static-gray-500,#bcbcbc) 0),linear-gradient(-45deg,var(--spectrum-global-color-static-gray-500,#bcbcbc) 25.5%,transparent 0),linear-gradient(45deg,var(--spectrum-global-color-static-gray-500,#bcbcbc) 25.5%,transparent 0);background-size:var(--spectrum-global-dimension-static-size-200,16px) var(--spectrum-global-dimension-static-size-200,16px);background-position:0 0,0 var(--spectrum-global-dimension-static-size-100,8px),var(--spectrum-global-dimension-static-size-100,8px) calc(-1*var(--spectrum-global-dimension-static-size-100, 8px)),calc(-1*var(--spectrum-global-dimension-static-size-100, 8px)) 0;z-index:0}:host([variant=color]) .track{background-color:initial;background-image:linear-gradient(90deg,var(--spectrum-slider-color-track-background-color-gradient-start,var(--spectrum-global-color-blue-400)),var(--spectrum-slider-color-track-background-color-gradient-end,var(--spectrum-global-color-blue-700)));box-shadow:inset 0 0 0 1px var(--spectrum-slider-color-track-border-color,rgba(0,0,0,.05))}:host([variant=color]) .track:before{display:none}:host([variant=color]) #handle,:host([variant=color]) .spectrum-Dial-handle{box-shadow:inset 0 0 0 1px var(--spectrum-slider-color-handle-inset-border-color,rgba(0,0,0,.05)),0 0 0 1px var(--spectrum-slider-color-handle-outset-border-color,rgba(0,0,0,.05));border-color:var(--spectrum-slider-color-handle-border-color,var(--spectrum-global-color-gray-50));background:var(--spectrum-slider-color-handle-color,transparent)}:host([variant=color][handle-highlight]) #handle{box-shadow:0 0 0 1px var(--spectrum-slider-color-handle-outset-border-color-key-focus,rgba(0,0,0,.05))}:host([disabled]) #labelContainer,:host([disabled]) .spectrum-Dial-labelContainer{color:var(--spectrum-label-text-color-disabled,var(--spectrum-global-color-gray-500))}:host([disabled]) #handle,:host([disabled]) .spectrum-Dial-handle{border-color:var(--spectrum-slider-handle-border-color-disabled,var(--spectrum-global-color-gray-400));background:var(--spectrum-alias-background-color-default,var(--spectrum-global-color-gray-100))}:host([disabled]) #handle:active,:host([disabled]) #handle:hover,:host([disabled]) .spectrum-Dial-handle:active,:host([disabled]) .spectrum-Dial-handle:hover{border-color:var(--spectrum-slider-handle-border-color-disabled,var(--spectrum-global-color-gray-400));background:var(--spectrum-slider-handle-background-color,transparent)}:host([disabled]) .track:before{background:var(--spectrum-slider-track-color-disabled,var(--spectrum-global-color-gray-300))}:host([disabled]) #fill:before,:host([disabled][variant=filled]) .track:first-child:before{background:var(--spectrum-slider-fill-track-color-disabled,var(--spectrum-global-color-gray-300))}:host([disabled]) #buffer:before{background:var(--spectrum-slider-player-track-buffer-color-disabled,var(--spectrum-global-color-gray-300))}:host([disabled]) #ramp path{fill:var(--spectrum-slider-ramp-track-color-disabled,var(--spectrum-global-color-gray-200))}:host([disabled][variant=color]) .track{background:var(--spectrum-slider-color-track-color-disabled,var(--spectrum-global-color-gray-200))!important;box-shadow:none}:host([disabled][variant=color]) #handle,:host([disabled][variant=color]) #handle:active,:host([disabled][variant=color]) #handle:hover,:host([disabled][variant=color]) .spectrum-Dial-handle,:host([disabled][variant=color]) .spectrum-Dial-handle:active,:host([disabled][variant=color]) .spectrum-Dial-handle:hover{background:var(--spectrum-slider-color-handle-color-disabled,transparent);box-shadow:none;border-color:var(--spectrum-slider-color-handle-border-color-disabled,var(--spectrum-global-color-gray-400))}:host([disabled][variant=range]) .track:not(:first-of-type):not(:last-of-type):before{background:var(--spectrum-slider-fill-track-color-disabled,var(--spectrum-global-color-gray-300))}\n"]);

  spectrum_slider_templateObject = function () {
    return data;
  };

  return data;
}

function spectrum_slider_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const spectrum_slider_styles = Object(lit_element["b" /* css */])(spectrum_slider_templateObject());
/* harmony default export */ var spectrum_slider = (spectrum_slider_styles);
// CONCATENATED MODULE: ./src/slider/slider.css
function slider_templateObject() {
  const data = slider_taggedTemplateLiteral(["\n:host(:focus){outline-width:0}:host([has-alpha][variant=color]) .track{background:linear-gradient(90deg,rgba(38,128,235,.5),#095aba)}\n"]);

  slider_templateObject = function () {
    return data;
  };

  return data;
}

function slider_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const slider_styles = Object(lit_element["b" /* css */])(slider_templateObject());
/* harmony default export */ var slider = (slider_styles);
// CONCATENATED MODULE: ./src/slider/slider.ts
function slider_templateObject5() {
  const data = slider_slider_taggedTemplateLiteral(["\n            <div id=\"controls\" @pointerdown=", ">\n                <div class=\"track\"></div>\n                ", "\n            </div>\n        "]);

  slider_templateObject5 = function () {
    return data;
  };

  return data;
}

function slider_templateObject4() {
  const data = slider_slider_taggedTemplateLiteral(["\n            <div id=\"controls\" @pointerdown=", ">\n                <div class=\"track\" id=\"track-left\"\n                    style=", " \n                    role=\"presentation\"\n                >\n                </div>\n                ", "\n                <div class=\"track\"\n                    id=\"track-right\"\n                    style=", "\n                    role=\"presentation\"\n                >\n                </div>\n                </div>\n            </div>\n        "]);

  slider_templateObject4 = function () {
    return data;
  };

  return data;
}

function slider_templateObject3() {
  const data = slider_slider_taggedTemplateLiteral(["\n            <div\n                id=\"handle\"\n                style=", "\n                @pointermove=", "\n                @pointerdown=", "\n                @pointerup=", "\n                @pointercancel=", "\n                role=\"presentation\"\n            >\n                <input\n                    type=\"range\"\n                    id=\"input\"\n                    value=\"", "\"\n                    step=\"", "\"\n                    min=\"", "\"\n                    max=\"", "\"\n                    aria-disabled=", "\n                    aria-label=", "\n                    aria-valuemin=", "\n                    aria-valuemax=", "\n                    aria-valuetext=", "\n                    @change=", "\n                    @focus=", "\n                    @blur=", "\n                />\n            </div>\n        "]);

  slider_templateObject3 = function () {
    return data;
  };

  return data;
}

function slider_templateObject2() {
  const data = slider_slider_taggedTemplateLiteral(["\n            <div id=\"labelContainer\">\n                <label id=\"label\" for=\"input\">", "</label>\n                <div\n                    id=\"value\"\n                    role=\"textbox\"\n                    aria-readonly=\"true\"\n                    aria-labelledby=\"label\"\n                >\n                    ", "\n                </div>\n            </div>\n        "]);

  slider_templateObject2 = function () {
    return data;
  };

  return data;
}

function slider_slider_templateObject() {
  const data = slider_slider_taggedTemplateLiteral(["\n            ", "\n            ", "\n        "]);

  slider_slider_templateObject = function () {
    return data;
  };

  return data;
}

function slider_slider_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var slider_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};






class slider_Slider extends focusable_Focusable {
  constructor() {
    super(...arguments);
    this.type = '';
    this._value = 10;
    this.variant = '';
    this.label = '';
    this.ariaLabel = null;
    this.max = 20;
    this.min = 0;
    this.step = 1;
    this.disabled = false;
    this.dragging = false;
    this.handleHighlight = false;
  }

  static get styles() {
    return [slider, spectrum_slider];
  }

  get value() {
    return this._value;
  }

  set value(value) {
    const oldValue = this.value;

    if (value === oldValue) {
      return;
    }

    this._value = this.clampValue(value);
    this.requestUpdate('value', oldValue);
  }

  get focusElement() {
    return this.input ? this.input : this;
  }

  render() {
    return Object(lit_element["c" /* html */])(slider_slider_templateObject(), this.renderLabel(), this.variant === 'color' ? this.renderColorTrack() : this.renderTrack());
  }

  renderLabel() {
    return Object(lit_element["c" /* html */])(slider_templateObject2(), this.label, this.value);
  }

  renderHandle() {
    return Object(lit_element["c" /* html */])(slider_templateObject3(), this.handleStyle, this.onPointerMove, this.onPointerDown, this.onPointerUp, this.onPointerCancel, this.value, this.step, this.min, this.max, this.disabled, this.ariaLabel || this.label, this.min, this.max, this.value, this.onInputChange, this.onInputFocus, this.onInputBlur);
  }

  renderTrack() {
    return Object(lit_element["c" /* html */])(slider_templateObject4(), this.onTrackPointerDown, this.trackLeftStyle, this.renderHandle(), this.trackRightStyle);
  }

  renderColorTrack() {
    return Object(lit_element["c" /* html */])(slider_templateObject5(), this.onTrackPointerDown, this.renderHandle());
  }

  onPointerDown(ev) {
    if (this.disabled) {
      return;
    }

    this.input.focus();
    this.dragging = true;
    this.handle.setPointerCapture(ev.pointerId);
  }

  onPointerUp(ev) {
    // Retain focus on input element after mouse up to enable keyboard interactions
    this.input.focus();
    this.handleHighlight = false;
    this.dragging = false;
    this.handle.releasePointerCapture(ev.pointerId);
    this.dispatchChangeEvent();
  }

  onPointerMove(ev) {
    if (!this.dragging) {
      return;
    }

    this.value = this.calculateHandlePosition(ev);
    this.dispatchInputEvent();
  }

  onPointerCancel(ev) {
    this.dragging = false;
    this.handle.releasePointerCapture(ev.pointerId);
  }
  /**
   * Move the handle under the cursor and begin start a pointer capture when the track
   * is moused down
   */


  onTrackPointerDown(ev) {
    if (ev.target === this.handle || this.disabled) {
      return;
    }

    this.dragging = true;
    this.handle.setPointerCapture(ev.pointerId);
    this.value = this.calculateHandlePosition(ev);
    this.dispatchInputEvent();
  }
  /**
   * Keep the slider value property in sync with the input element's value
   */


  onInputChange() {
    const inputValue = parseFloat(this.input.value);
    this.value = this.clampValue(inputValue);
    this.input.value = this.value.toString();
    this.dispatchInputEvent();
    this.dispatchChangeEvent();
  }

  onInputFocus() {
    this.handleHighlight = true;
  }

  onInputBlur() {
    this.handleHighlight = false;
  }
  /**
   * Returns the value under the cursor
   * @param: PointerEvent on slider
   * @return: Slider value that correlates to the position under the pointer
   */


  calculateHandlePosition(ev) {
    const rect = this.getBoundingClientRect();
    const minOffset = rect.left;
    const offset = ev.clientX;
    const size = rect.width;
    const percent = (offset - minOffset) / size;
    let value = this.min + (this.max - this.min) * percent;
    value = this.clampValue(value);

    if (this.step) {
      value = Math.round(value / this.step) * this.step;
    }

    return value;
  }
  /**
   * @param: value to be clamped
   * @return: the original value if in range, this.max if over, and this.min if under
   */


  clampValue(value) {
    const reducedValue = Math.min(value, this.max);
    return Math.max(reducedValue, this.min);
  }

  dispatchInputEvent() {
    const inputEvent = strictCustomEvent('sp-slider:input', {
      bubbles: true,
      composed: true,
      detail: this.value
    });
    this.dispatchEvent(inputEvent);
  }

  dispatchChangeEvent() {
    this.input.value = this.value.toString();
    const changeEvent = strictCustomEvent('sp-slider:change', {
      bubbles: true,
      composed: true,
      detail: this.value
    });
    this.dispatchEvent(changeEvent);
  }
  /**
   * Ratio representing the slider's position on the track
   */


  get trackProgress() {
    const range = this.max - this.min;
    const progress = this.value - this.min;
    return progress / range;
  }

  get trackLeftStyle() {
    return "width: ".concat(this.trackProgress * 100, "%");
  }

  get trackRightStyle() {
    const width = "width: ".concat((1 - this.trackProgress) * 100, "%; ");
    const offset = "left: calc(".concat(this.trackProgress * 100, "% + 8px)");
    return width + offset;
  }

  get handleStyle() {
    return "left: ".concat(this.trackProgress * 100, "%");
  }

}

slider_decorate([Object(lit_element["d" /* property */])()], slider_Slider.prototype, "type", void 0);

slider_decorate([Object(lit_element["d" /* property */])({
  reflect: true
})], slider_Slider.prototype, "value", null);

slider_decorate([Object(lit_element["d" /* property */])({
  reflect: true
})], slider_Slider.prototype, "variant", void 0);

slider_decorate([Object(lit_element["d" /* property */])()], slider_Slider.prototype, "label", void 0);

slider_decorate([Object(lit_element["d" /* property */])({
  reflect: true,
  attribute: 'aria-label'
})], slider_Slider.prototype, "ariaLabel", void 0);

slider_decorate([Object(lit_element["d" /* property */])({
  type: Number
})], slider_Slider.prototype, "max", void 0);

slider_decorate([Object(lit_element["d" /* property */])({
  type: Number
})], slider_Slider.prototype, "min", void 0);

slider_decorate([Object(lit_element["d" /* property */])({
  type: Number
})], slider_Slider.prototype, "step", void 0);

slider_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true
})], slider_Slider.prototype, "disabled", void 0);

slider_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true
})], slider_Slider.prototype, "dragging", void 0);

slider_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true,
  attribute: 'handle-highlight'
})], slider_Slider.prototype, "handleHighlight", void 0);

slider_decorate([Object(lit_element["e" /* query */])('#handle')], slider_Slider.prototype, "handle", void 0);

slider_decorate([Object(lit_element["e" /* query */])('#input')], slider_Slider.prototype, "input", void 0);
// CONCATENATED MODULE: ./src/slider/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/



if (!customElements.get('sp-slider')) {
  customElements.define('sp-slider', slider_Slider);
}
// CONCATENATED MODULE: ./src/iconset/iconset.ts
var iconset_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/




class iconset_Iconset extends lit_element["a" /* LitElement */] {
  constructor() {
    super(...arguments);
    this.registered = false;
  }

  firstUpdated(changedProperties) {
    // force no display for all iconsets
    this.style.display = 'none';
  }
  /**
   * Name of the iconset, used by the IconsetRegistry to serve this icon set
   * to consuming icons.
   */


  set name(value) {
    // if we're already registered in the iconset registry
    // we'll need to update our registration
    if (this.registered) {
      if (this._name) {
        // remove from the iconset map using the old name
        iconset_registry_IconsetRegistry.getInstance().removeIconset(this._name);
      }

      if (value) {
        // set in the map using the new name
        iconset_registry_IconsetRegistry.getInstance().addIconset(value, this);
      }
    }

    this._name = value;
  }

  get name() {
    return this._name;
  }
  /**
   * Returns a list of all icons in this iconset.
   */


  getIconList() {
    throw new Error('Not implemented!');
  }
  /**
   * On updated we register the iconset if we're not already registered
   */


  connectedCallback() {
    super.connectedCallback();

    if (!this.name || this.registered) {
      return;
    }

    iconset_registry_IconsetRegistry.getInstance().addIconset(this.name, this);
    this.registered = true;
  }
  /**
   * On disconnected we remove the iconset
   */


  disconnectedCallback() {
    super.disconnectedCallback();

    if (!this.name) {
      return;
    }

    iconset_registry_IconsetRegistry.getInstance().removeIconset(this.name);
    this.registered = false;
  }

}
iconset_Iconset.is = 'sp-iconset';

iconset_decorate([Object(lit_element["d" /* property */])()], iconset_Iconset.prototype, "name", null);
// CONCATENATED MODULE: ./src/iconset/iconset-svg.ts
function iconset_svg_templateObject2() {
  const data = iconset_svg_taggedTemplateLiteral(["\n            <slot @slotchange=", ">\n                ", "\n            </slot>\n        "]);

  iconset_svg_templateObject2 = function () {
    return data;
  };

  return data;
}

function iconset_svg_templateObject() {
  const data = iconset_svg_taggedTemplateLiteral([""]);

  iconset_svg_templateObject = function () {
    return data;
  };

  return data;
}

function iconset_svg_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var iconset_svg_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class iconset_svg_IconsetSVG extends iconset_Iconset {
  constructor() {
    super(...arguments);
    this.iconMap = new Map();
  }
  /**
   * First updated handler just ensures we've processed any slotted symbols
   */


  updated(changedProperties) {
    if (!this.slotContainer) {
      return;
    }

    const currentSVGNodes = this.getSVGNodes(this.slotContainer);
    this.updateSVG(currentSVGNodes);
    super.updated(changedProperties);
  }
  /**
   * Applies the requested icon from this iconset instance to the given element.
   *
   * @param el - the element to apply the icon to
   * @param icon - the name of the icon within this set to apply.
   */


  applyIconToElement(el, icon) {
    const iconSymbol = this.iconMap.get(icon);

    if (!iconSymbol) {
      throw new Error("Unable to find icon ".concat(icon));
    } // we cannot share a single SVG globally across shadowroot boundaries
    // so copy the template node so we can inject it where we need it


    const clonedNode = this.prepareSvgClone(iconSymbol); // append the svg to the node either in its shadowroot or directly into its dom

    if (el.shadowRoot) {
      el.shadowRoot.appendChild(clonedNode);
    } else {
      el.appendChild(clonedNode);
    }
  }
  /**
   * Returns a list of all icons in this iconset.
   */


  getIconList() {
    return [...this.iconMap.keys()];
  }

  prepareSvgClone(sourceSvg) {
    const content = sourceSvg.cloneNode(true); // we're going to create a new svg element that will have our symbol geometry inside

    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    const viewBox = content.getAttribute('viewBox') || ''; // inline style isn't ideal but will work in all cases and means our icons don't need to know
    // if they are svg or spritesheet provided

    const cssText = 'pointer-events: none; display: block; width: 100%; height: 100%;';
    svg.style.cssText = cssText; // copy the viewbox and other properties into the svg

    svg.setAttribute('viewBox', viewBox);
    svg.setAttribute('preserveAspectRatio', 'xMidYMid meet');
    svg.setAttribute('focusable', 'false'); // move all the child nodes over to the svg

    while (content.childNodes.length > 0) {
      svg.appendChild(content.childNodes[0]);
    }

    return svg;
  }

  getSVGIconName(icon) {
    return icon;
  }

  getSanitizedIconName(icon) {
    return icon;
  }

  renderDefaultContent() {
    return Object(lit_element["c" /* html */])(iconset_svg_templateObject());
  }

  render() {
    return Object(lit_element["c" /* html */])(iconset_svg_templateObject2(), this.onSlotChange, this.renderDefaultContent());
  }

  updateSVG(nodes) {
    // iterate over the nodes that were passed in, and find all the top level symbols
    const symbols = nodes.reduce((prev, svgNode) => {
      const containedSymbols = svgNode.querySelectorAll('symbol');
      prev.push(...containedSymbols);
      return prev;
    }, []);
    symbols.forEach(symbol => {
      this.iconMap.set(this.getSanitizedIconName(symbol.id), symbol);
    });
  }

  getSVGNodes(slotTarget) {
    const nodes = slotTarget.assignedNodes({
      flatten: true
    }); // find all the svg nodes

    const svgNodes = nodes.filter(node => {
      return node.nodeName === 'svg';
    });
    return svgNodes;
  }

  onSlotChange(evt) {
    const slotTarget = evt.target;
    const svgNodes = this.getSVGNodes(slotTarget);
    this.updateSVG(svgNodes);
  }

}
iconset_svg_IconsetSVG.is = 'sp-iconset-svg';

iconset_svg_decorate([Object(lit_element["e" /* query */])('slot')], iconset_svg_IconsetSVG.prototype, "slotContainer", void 0);
// CONCATENATED MODULE: ./src/icons/icons-large.svg.ts
function icons_large_svg_templateObject() {
  const data = icons_large_svg_taggedTemplateLiteral(["<svg xmlns=\"http://www.w3.org/2000/svg\"><symbol id=\"spectrum-icon-AlertMedium\" viewBox=\"-1 -1 24 24\"><path d=\"M10.563 2.206l-9.249 16.55a.5.5 0 0 0 .436.744h18.5a.5.5 0 0 0 .436-.744l-9.251-16.55a.5.5 0 0 0-.872 0zm1.436 15.044a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25zm0-3.5a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-6a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25z\"/></symbol><symbol id=\"spectrum-icon-AlertSmall\" viewBox=\"-3 -3 24 24\"><path d=\"M8.564 1.289L.2 16.256A.5.5 0 0 0 .636 17h16.728a.5.5 0 0 0 .436-.744L9.436 1.289a.5.5 0 0 0-.872 0zM10 14.75a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25zm0-3a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-6a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25z\"/></symbol><symbol id=\"spectrum-icon-ArrowDownSmall\" viewBox=\"-7 -6 24 24\"><path d=\"M9.99 7.01a1 1 0 0 0-1.707-.707L6 8.586V1.01a1 1 0 0 0-2 0v7.576L1.717 6.303A1 1 0 1 0 .303 7.717l3.99 3.98a1 1 0 0 0 1.414 0l3.99-3.98a.997.997 0 0 0 .293-.707z\"/></symbol><symbol id=\"spectrum-icon-ArrowLeftMedium\" viewBox=\"-3 -5 24 24\"><path d=\"M16.99 6H3.414l4.283-4.283A1 1 0 1 0 6.283.303l-5.98 5.99a1 1 0 0 0 0 1.414l5.98 5.99a1 1 0 1 0 1.414-1.414L3.414 8H16.99a1 1 0 0 0 0-2z\"/></symbol><symbol id=\"spectrum-icon-ArrowUpSmall\" viewBox=\"-7 -6 24 24\"><path d=\"M9.99 4.99a1 1 0 0 1-1.707.707L6 3.414v7.576a1 1 0 0 1-2 0V3.414L1.717 5.697A1 1 0 1 1 .303 4.283l3.99-3.98a1 1 0 0 1 1.414 0l3.99 3.98a.997.997 0 0 1 .293.707z\"/></symbol><symbol id=\"spectrum-icon-Asterisk\" viewBox=\"-7 -7 24 24\"><path d=\"M7.867 7.872c.061.062.103.145 0 .228l-1.283.827c-.104.061-.145.02-.186-.083L4.804 6.07l-2.09 2.297c-.021.042-.083.083-.145 0l-.994-1.035c-.103-.062-.082-.124 0-.186l2.36-1.966-2.691-1.014c-.042 0-.104-.083-.062-.186l.703-1.41a.11.11 0 0 1 .187-.04L4.43 4.06l.145-3.02A.109.109 0 0 1 4.7.917l1.718.227c.104 0 .124.042.104.145l-.808 2.96 2.734-.828c.061-.042.124-.042.165.082l.27 1.532c.02.103 0 .145-.084.145l-2.856.227z\"/></symbol><symbol id=\"spectrum-icon-CheckmarkMedium\" viewBox=\"-4 -4 24 24\"><path d=\"M6 14a1 1 0 0 1-.789-.385l-4-5a1 1 0 1 1 1.577-1.23L6 11.376l7.213-8.99a1 1 0 1 1 1.576 1.23l-8 10a1 1 0 0 1-.789.384z\"/></symbol><symbol id=\"spectrum-icon-CheckmarkSmall\" viewBox=\"-6 -6 24 24\"><path d=\"M4.5 11a.999.999 0 0 1-.788-.385l-3-4a1 1 0 1 1 1.576-1.23L4.5 8.376l5.212-6.99a1 1 0 1 1 1.576 1.23l-6 8A.999.999 0 0 1 4.5 11z\"/></symbol><symbol id=\"spectrum-icon-ChevronDownMedium\" viewBox=\"-6 -8 24 24\"><path d=\"M11.99 1.51a1 1 0 0 0-1.707-.707L6 5.086 1.717.803A1 1 0 1 0 .303 2.217l4.99 4.99a1 1 0 0 0 1.414 0l4.99-4.99a.997.997 0 0 0 .293-.707z\"/></symbol><symbol id=\"spectrum-icon-ChevronDownSmall\" viewBox=\"-7 -8 24 24\"><path d=\"M5 7a.747.747 0 0 0 .53-.22l4.24-4.24a.75.75 0 1 0-1.06-1.06L5 5.19 1.29 1.48A.75.75 0 1 0 .23 2.54l4.24 4.24A.747.747 0 0 0 5 7z\"/></symbol><symbol id=\"spectrum-icon-ChevronLeftLarge\" viewBox=\"-4 -2 24 24\"><path d=\"M12.109 17.853l-8.066-7.849 8.066-7.84a1.243 1.243 0 0 0 .381-.894 1.24 1.24 0 0 0-2.12-.894L1.379 9.108a1.246 1.246 0 0 0 .003 1.79l8.99 8.744a1.247 1.247 0 1 0 1.738-1.789z\"/></symbol><symbol id=\"spectrum-icon-ChevronLeftMedium\" viewBox=\"-8 -6 24 24\"><path d=\"M7.197 10.283L2.914 6l4.283-4.283A1 1 0 1 0 5.783.303l-4.99 4.99a1 1 0 0 0 0 1.414l4.99 4.99a1 1 0 1 0 1.414-1.414z\"/></symbol><symbol id=\"spectrum-icon-ChevronRightLarge\" viewBox=\"-4 -2 24 24\"><path d=\"M15 10.004a1.243 1.243 0 0 0-.38-.894L5.631.364a1.249 1.249 0 1 0-1.741 1.79l8.066 7.85-8.069 7.847a1.249 1.249 0 0 0 1.741 1.79l8.992-8.74a1.246 1.246 0 0 0 .379-.897z\"/></symbol><symbol id=\"spectrum-icon-ChevronRightMedium\" viewBox=\"-8 -6 24 24\"><path d=\"M7.5 6a.997.997 0 0 0-.293-.707L2.217.303A1 1 0 1 0 .803 1.717L5.086 6 .803 10.283a1 1 0 1 0 1.414 1.414l4.99-4.99A.997.997 0 0 0 7.5 6z\"/></symbol><symbol id=\"spectrum-icon-ChevronRightSmall\" viewBox=\"-8 -7 24 24\"><path d=\"M7 5a.747.747 0 0 0-.22-.53L2.54.23a.75.75 0 1 0-1.06 1.06L5.19 5 1.48 8.71a.75.75 0 1 0 1.06 1.06l4.24-4.24A.747.747 0 0 0 7 5z\"/></symbol><symbol id=\"spectrum-icon-ChevronUpSmall\" viewBox=\"-7 -8 24 24\"><path d=\"M5 1a.747.747 0 0 0-.53.22L.23 5.46a.75.75 0 1 0 1.06 1.06L5 2.81l3.71 3.71a.75.75 0 1 0 1.06-1.06L5.53 1.22A.747.747 0 0 0 5 1z\"/></symbol><symbol id=\"spectrum-icon-CornerTriangle\" viewBox=\"-9 -9 24 24\"><path d=\"M5.74.01a.25.25 0 0 0-.177.073l-5.48 5.48a.25.25 0 0 0 .177.427h5.48a.25.25 0 0 0 .25-.25V.26a.25.25 0 0 0-.25-.25z\"/></symbol><symbol id=\"spectrum-icon-CrossLarge\" viewBox=\"-4 -4 24 24\"><path d=\"M15.697 14.283L9.414 8l6.283-6.283A1 1 0 1 0 14.283.303L8 6.586 1.717.303A1 1 0 1 0 .303 1.717L6.586 8 .303 14.283a1 1 0 1 0 1.414 1.414L8 9.414l6.283 6.283a1 1 0 1 0 1.414-1.414z\"/></symbol><symbol id=\"spectrum-icon-CrossMedium\" viewBox=\"-7 -7 24 24\"><path d=\"M9.77 8.71L6.06 5l3.71-3.71A.75.75 0 1 0 8.71.23L5 3.94 1.29.23A.75.75 0 1 0 .23 1.29L3.94 5 .23 8.71a.75.75 0 1 0 1.06 1.06L5 6.06l3.71 3.71a.75.75 0 1 0 1.06-1.06z\"/></symbol><symbol id=\"spectrum-icon-CrossSmall\" viewBox=\"-7 -7 24 24\"><path d=\"M9.317 8.433L5.884 5l3.433-3.433a.625.625 0 1 0-.884-.884L5 4.116 1.567.683a.625.625 0 1 0-.884.884C.83 1.713 2.77 3.657 4.116 5L.683 8.433a.625.625 0 1 0 .884.884L5 5.884l3.433 3.433a.625.625 0 0 0 .884-.884z\"/></symbol><symbol id=\"spectrum-icon-DashSmall\" viewBox=\"-6 -6 24 24\"><path d=\"M10.99 5H1.01a1 1 0 0 0 0 2h9.98a1 1 0 1 0 0-2z\"/></symbol><symbol id=\"spectrum-icon-DoubleGripper\" viewBox=\"-2 -9.5 24 24\"><path d=\"M19.49 4H.51a.5.5 0 1 0 0 1h18.98a.5.5 0 0 0 0-1zM.51 1h18.98a.5.5 0 0 0 0-1H.51a.5.5 0 0 0 0 1z\"/></symbol><symbol id=\"spectrum-icon-HelpMedium\" viewBox=\"-1 -1 24 24\"><path d=\"M11 2a9 9 0 1 0 9 9 9 9 0 0 0-9-9zm-.007 14.681a1.145 1.145 0 0 1-1.227-1.215 1.159 1.159 0 0 1 1.115-1.201q.056-.002.112.001a1.159 1.159 0 0 1 1.226 1.088q.003.056.001.112a1.127 1.127 0 0 1-1.227 1.215zm1.981-6.63c-.684.642-1.344 1.215-1.333 1.736a2.275 2.275 0 0 0 .176.732.25.25 0 0 1-.232.343h-1.26a.3.3 0 0 1-.228-.069 1.886 1.886 0 0 1-.421-1.2c0-.816.508-1.336 1.35-2.17.578-.573.911-.937.911-1.475 0-.625-.421-1.059-1.49-1.059a5.337 5.337 0 0 0-2 .473.249.249 0 0 1-.347-.23v-1.24a.5.5 0 0 1 .3-.459 6.413 6.413 0 0 1 2.434-.5c2.1.006 3.261 1.2 3.261 2.725a3.053 3.053 0 0 1-1.121 2.393z\"/></symbol><symbol id=\"spectrum-icon-HelpSmall\" viewBox=\"-3 -3 24 24\"><path d=\"M9 1a8 8 0 1 0 8 8 8 8 0 0 0-8-8zm.023 13.438a1.345 1.345 0 0 1-.104-2.688q.052-.002.104 0a1.31 1.31 0 0 1 1.397 1.217q.004.059.003.118a1.291 1.291 0 0 1-1.4 1.353zm1.783-6.409l-.1.1c-.395.414-.842.884-.842 1.175a1.386 1.386 0 0 0 .179.674l.073.139-.057.215a.308.308 0 0 1-.284.189H8.436a.434.434 0 0 1-.325-.117 2.056 2.056 0 0 1-.422-1.262A3.058 3.058 0 0 1 8.8 7.071c.1-.11.2-.21.288-.3.314-.325.507-.535.507-.758 0-.154 0-.622-.893-.622a2.958 2.958 0 0 0-1.58.459.3.3 0 0 1-.327-.01l-.118-.085-.028-.225V4.081a.44.44 0 0 1 .2-.41A4.135 4.135 0 0 1 9 3.119a2.552 2.552 0 0 1 2.751 2.636 3.067 3.067 0 0 1-.944 2.274z\"/></symbol><symbol id=\"spectrum-icon-InfoMedium\" viewBox=\"-1 -1 24 24\"><path d=\"M11 2a9 9 0 1 0 9 9 9 9 0 0 0-9-9zm-.15 2.65a1.359 1.359 0 0 1 1.431 1.283q.004.064.001.129a1.332 1.332 0 0 1-1.432 1.432 1.353 1.353 0 0 1-1.432-1.433 1.359 1.359 0 0 1 1.304-1.412q.064-.002.128.001zM13.5 16a.5.5 0 0 1-.5.5H9a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h1v-4H9a.5.5 0 0 1-.5-.5V9a.5.5 0 0 1 .5-.5h2.5a.5.5 0 0 1 .5.5v5.5h1a.5.5 0 0 1 .5.5z\"/></symbol><symbol id=\"spectrum-icon-InfoSmall\" viewBox=\"-3 -3 24 24\"><path d=\"M9 1a8 8 0 1 0 8 8 8 8 0 0 0-8-8zm-.15 2.15a1.359 1.359 0 0 1 1.431 1.283q.004.064.001.129A1.332 1.332 0 0 1 8.85 5.994a1.353 1.353 0 0 1-1.432-1.433 1.359 1.359 0 0 1 1.304-1.412q.064-.002.128.001zM11 13.5a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5H8V9h-.5a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5V12h.5a.5.5 0 0 1 .5.5z\"/></symbol><symbol id=\"spectrum-icon-Magnifier\" viewBox=\"-2 -2 24 24\"><path d=\"M19.77 18.71l-5.464-5.464a7.503 7.503 0 1 0-1.06 1.06l5.463 5.464a.75.75 0 1 0 1.061-1.06zM2.5 8.5a6 6 0 1 1 6 6 6.007 6.007 0 0 1-6-6z\"/></symbol><symbol id=\"spectrum-icon-SkipLeft\" viewBox=\"-7 -6 24 24\"><path d=\"M9.697 10.283L5.414 6l4.283-4.283A1 1 0 1 0 8.283.303l-4.99 4.99a1 1 0 0 0 0 1.414l4.99 4.99a1 1 0 1 0 1.414-1.414zM1 .01a1 1 0 0 0-1 1v9.98a1 1 0 0 0 2 0V1.01a1 1 0 0 0-1-1z\"/></symbol><symbol id=\"spectrum-icon-SkipRight\" viewBox=\"-7 -6 24 24\"><path d=\"M9 .01a1 1 0 0 0-1 1v9.98a1 1 0 1 0 2 0V1.01a1 1 0 0 0-1-1zM7 6a.997.997 0 0 0-.293-.707L1.717.303A1 1 0 1 0 .303 1.717L4.586 6 .303 10.283a1 1 0 1 0 1.414 1.414l4.99-4.99A.997.997 0 0 0 7 6z\"/></symbol><symbol id=\"spectrum-icon-Star\" viewBox=\"-1 -1 24 24\"><path d=\"M11.361 1.68l2.259 5.975a.257.257 0 0 0 .228.166l6.381.3a.386.386 0 0 1 .223.686L15.467 12.8a.257.257 0 0 0-.087.268l1.684 6.162a.386.386 0 0 1-.584.424l-5.34-3.506a.257.257 0 0 0-.282 0l-5.34 3.506a.386.386 0 0 1-.584-.424l1.686-6.158a.257.257 0 0 0-.087-.268L1.548 8.809a.386.386 0 0 1 .223-.686l6.381-.3a.257.257 0 0 0 .228-.166l2.259-5.977a.386.386 0 0 1 .722 0z\"/></symbol><symbol id=\"spectrum-icon-StarOutline\" viewBox=\"-1 -1 24 24\"><path d=\"M11 4.9l1.231 3.255A1.777 1.777 0 0 0 13.809 9.3l3.476.165-2.715 2.18a1.777 1.777 0 0 0-.6 1.855l.918 3.357-2.909-1.91a1.777 1.777 0 0 0-1.951 0l-2.909 1.91.914-3.357a1.778 1.778 0 0 0-.6-1.856L4.715 9.469 8.191 9.3a1.777 1.777 0 0 0 1.578-1.142zm0-3.458a.448.448 0 0 0-.426.294L8.35 7.621a.26.26 0 0 1-.231.168l-6.282.3a.455.455 0 0 0-.263.81l4.907 3.933a.26.26 0 0 1 .088.271l-1.657 6.064a.457.457 0 0 0 .44.577.45.45 0 0 0 .249-.076l5.257-3.452a.26.26 0 0 1 .285 0l5.257 3.451a.45.45 0 0 0 .249.076.457.457 0 0 0 .44-.577L15.43 13.1a.26.26 0 0 1 .088-.271L20.426 8.9a.455.455 0 0 0-.263-.81l-6.282-.3a.26.26 0 0 1-.231-.168l-2.224-5.883A.448.448 0 0 0 11 1.445z\"/></symbol><symbol id=\"spectrum-icon-SuccessMedium\" viewBox=\"-1 -1 24 24\"><path d=\"M11 2a9 9 0 1 0 9 9 9 9 0 0 0-9-9zm5.638 5.609L10.1 15.652a.5.5 0 0 1-.742.038L5.086 11.5a.5.5 0 0 1 0-.707l.707-.707a.5.5 0 0 1 .707 0L9.6 13.1l5.486-6.751a.5.5 0 0 1 .7-.073l.776.631a.5.5 0 0 1 .076.702z\"/></symbol><symbol id=\"spectrum-icon-SuccessSmall\" viewBox=\"-3 -3 24 24\"><path d=\"M9 1a8 8 0 1 0 8 8 8 8 0 0 0-8-8zm5.333 4.54l-6.324 8.13a.6.6 0 0 1-.437.23h-.037a.6.6 0 0 1-.425-.176l-3.893-3.9a.6.6 0 0 1 0-.849l.663-.663a.6.6 0 0 1 .848 0L7.4 10.991l5.256-6.754a.6.6 0 0 1 .843-.1l.728.566a.6.6 0 0 1 .106.837z\"/></symbol><symbol id=\"spectrum-icon-TripleGripper\" viewBox=\"-6 -7.5 24 24\"><path d=\"M11.49 8H.51a.5.5 0 1 0 0 1h10.98a.5.5 0 1 0 0-1zM11.49 4H.51a.5.5 0 1 0 0 1h10.98a.5.5 0 0 0 0-1zM.51 1h10.98a.5.5 0 0 0 0-1H.51a.5.5 0 0 0 0 1z\"/></symbol></svg>"]);

  icons_large_svg_templateObject = function () {
    return data;
  };

  return data;
}

function icons_large_svg_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

/* harmony default export */ var icons_large_svg = (Object(lit_element["f" /* svg */])(icons_large_svg_templateObject()));
// CONCATENATED MODULE: ./src/icons/icons-large.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/


class icons_large_IconsLarge extends iconset_svg_IconsetSVG {
  constructor() {
    super();
    this.name = 'ui'; // default iconset name for these icons
  }

  renderDefaultContent() {
    return icons_large_svg;
  }
  /**
   * Overrides createIconName to make icon strings compatible with spectrum-icon id format
   * @param icon
   * @param size
   */


  getSVGIconName(icon) {
    return "spectrum-icon-".concat(icon);
  }

  getSanitizedIconName(icon) {
    return icon.replace('spectrum-icon-', '');
  }

}
icons_large_IconsLarge.is = 'sp-icons-large';
// CONCATENATED MODULE: ./src/icons/icons-medium.svg.ts
function icons_medium_svg_templateObject() {
  const data = icons_medium_svg_taggedTemplateLiteral(["<svg xmlns=\"http://www.w3.org/2000/svg\"><symbol id=\"spectrum-icon-AlertMedium\" viewBox=\"0 0 18 18\"><path d=\"M8.564 1.289L.2 16.256A.5.5 0 0 0 .636 17h16.728a.5.5 0 0 0 .436-.744L9.436 1.289a.5.5 0 0 0-.872 0zM10 14.75a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-1.5a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25zm0-3a.25.25 0 0 1-.25.25h-1.5a.25.25 0 0 1-.25-.25v-6a.25.25 0 0 1 .25-.25h1.5a.25.25 0 0 1 .25.25z\"/></symbol><symbol id=\"spectrum-icon-AlertSmall\" viewBox=\"-2 -2 18 18\"><path d=\"M6.66 1.003L.157 12.643a.389.389 0 0 0 .339.58h13.01a.389.389 0 0 0 .34-.58L7.338 1.004a.389.389 0 0 0-.678 0zm1.118 10.47a.194.194 0 0 1-.195.194H6.417a.194.194 0 0 1-.195-.195v-1.166a.194.194 0 0 1 .195-.195h1.166a.194.194 0 0 1 .195.195zm0-2.334a.194.194 0 0 1-.195.194H6.417a.194.194 0 0 1-.195-.194V4.472a.194.194 0 0 1 .195-.194h1.166a.194.194 0 0 1 .195.194z\"/></symbol><symbol id=\"spectrum-icon-ArrowDownSmall\" viewBox=\"-5 -4 18 18\"><path d=\"M7.99 6.01a1 1 0 0 0-1.707-.707L5 6.586V1a1 1 0 0 0-2 0v5.586L1.717 5.303A1 1 0 1 0 .303 6.717l2.99 2.98a1 1 0 0 0 1.414 0l2.99-2.98a.997.997 0 0 0 .293-.707z\"/></symbol><symbol id=\"spectrum-icon-ArrowLeftMedium\" viewBox=\"-2 -4 18 18\"><path d=\"M12.99 4H3.414l2.283-2.283A1 1 0 1 0 4.283.303l-3.98 3.99a1 1 0 0 0 0 1.414l3.98 3.99a1 1 0 1 0 1.414-1.414L3.414 6h9.576a1 1 0 1 0 0-2z\"/></symbol><symbol id=\"spectrum-icon-ArrowUpSmall\" viewBox=\"-5 -4 18 18\"><path d=\"M7.99 3.99a1 1 0 0 1-1.707.707L5 3.414V9a1 1 0 0 1-2 0V3.414L1.717 4.697A1 1 0 1 1 .303 3.283l2.99-2.98a1 1 0 0 1 1.414 0l2.99 2.98a.997.997 0 0 1 .293.707z\"/></symbol><symbol id=\"spectrum-icon-Asterisk\" viewBox=\"-5 -5 18 18\"><path d=\"M6.573 6.558c.056.055.092.13 0 .204l-1.148.74c-.093.056-.13.02-.167-.073L3.832 4.947l-1.87 2.055c-.02.037-.075.074-.13 0l-.889-.926c-.092-.055-.074-.111 0-.167l2.111-1.76-2.408-.906c-.037 0-.092-.074-.055-.167l.63-1.259a.097.097 0 0 1 .166-.036l2.111 1.37.13-2.704a.097.097 0 0 1 .111-.11L5.277.54c.092 0 .11.037.092.13l-.722 2.647 2.444-.74c.056-.038.111-.038.148.073l.241 1.37c.019.093 0 .13-.074.13l-2.556.204z\"/></symbol><symbol id=\"spectrum-icon-CheckmarkMedium\" viewBox=\"-3 -3 18 18\"><path d=\"M4.5 10a1.022 1.022 0 0 1-.799-.384l-2.488-3a1 1 0 0 1 1.576-1.233L4.5 7.376l4.712-5.991a1 1 0 1 1 1.576 1.23l-5.51 7A.978.978 0 0 1 4.5 10z\"/></symbol><symbol id=\"spectrum-icon-CheckmarkSmall\" viewBox=\"-4 -4 18 18\"><path d=\"M3.788 9A.999.999 0 0 1 3 8.615l-2.288-3a1 1 0 1 1 1.576-1.23l1.5 1.991 3.924-4.991a1 1 0 1 1 1.576 1.23l-4.712 6A.999.999 0 0 1 3.788 9z\"/></symbol><symbol id=\"spectrum-icon-ChevronDownMedium\" viewBox=\"-4 -6 18 18\"><path d=\"M9.99 1.01A1 1 0 0 0 8.283.303L5 3.586 1.717.303A1 1 0 1 0 .303 1.717l3.99 3.98a1 1 0 0 0 1.414 0l3.99-3.98a.997.997 0 0 0 .293-.707z\"/></symbol><symbol id=\"spectrum-icon-ChevronDownSmall\" viewBox=\"-5 -6 18 18\"><path d=\"M4 5.5a.747.747 0 0 0 .53-.22c.607-.577 1.97-2.038 3.24-3.24A.75.75 0 1 0 6.71.98L4 3.69 1.29.98A.75.75 0 1 0 .23 2.04l3.24 3.24A.747.747 0 0 0 4 5.5z\"/></symbol><symbol id=\"spectrum-icon-ChevronLeftLarge\" viewBox=\"-3 -1 18 18\"><path d=\"M9.605 13.843L3.55 8l6.056-5.84A1.248 1.248 0 1 0 7.876.363L.882 7.1a1.243 1.243 0 0 0 .003 1.797l6.988 6.742a1.248 1.248 0 1 0 1.732-1.796z\"/></symbol><symbol id=\"spectrum-icon-ChevronLeftMedium\" viewBox=\"-6 -4 18 18\"><path d=\"M5.697 8.283L2.414 5l3.283-3.283A1 1 0 1 0 4.283.303l-3.98 3.99a1 1 0 0 0 0 1.414l3.98 3.99a1 1 0 1 0 1.414-1.414z\"/></symbol><symbol id=\"spectrum-icon-ChevronRightLarge\" viewBox=\"-3 -1 18 18\"><path d=\"M11.5 8a1.241 1.241 0 0 0-.386-.897L4.128.36a1.248 1.248 0 1 0-1.733 1.797L8.45 8l-6.058 5.84a1.248 1.248 0 1 0 1.733 1.797L11.117 8.9A1.245 1.245 0 0 0 11.5 8z\"/></symbol><symbol id=\"spectrum-icon-ChevronRightMedium\" viewBox=\"-6 -4 18 18\"><path d=\"M5.99 5a.997.997 0 0 0-.293-.707L1.717.303A1 1 0 1 0 .303 1.717L3.586 5 .303 8.283a1 1 0 1 0 1.414 1.414l3.98-3.99A.997.997 0 0 0 5.99 5z\"/></symbol><symbol id=\"spectrum-icon-ChevronRightSmall\" viewBox=\"-6 -5 18 18\"><path d=\"M5.5 4a.747.747 0 0 0-.22-.53C4.703 2.862 3.242 1.5 2.04.23A.75.75 0 1 0 .98 1.29L3.69 4 .98 6.71a.75.75 0 1 0 1.06 1.06l3.24-3.24A.747.747 0 0 0 5.5 4z\"/></symbol><symbol id=\"spectrum-icon-ChevronUpSmall\" viewBox=\"-5 -6 18 18\"><path d=\"M4 .5a.747.747 0 0 0-.53.22C2.862 1.297 1.5 2.758.23 3.96a.75.75 0 1 0 1.06 1.06L4 2.31l2.71 2.71a.75.75 0 1 0 1.06-1.06L4.53.72A.747.747 0 0 0 4 .5z\"/></symbol><symbol id=\"spectrum-icon-CornerTriangle\" viewBox=\"-6.5 -6.5 18 18\"><path d=\"M4.74.01a.25.25 0 0 0-.177.073l-4.48 4.48a.25.25 0 0 0 .177.427h4.48a.25.25 0 0 0 .25-.25V.26a.25.25 0 0 0-.25-.25z\"/></symbol><symbol id=\"spectrum-icon-CrossLarge\" viewBox=\"-3 -3 18 18\"><path d=\"M11.697 10.283L7.414 6l4.283-4.283A1 1 0 1 0 10.283.303L6 4.586 1.717.303A1 1 0 1 0 .303 1.717L4.586 6 .303 10.283a1 1 0 1 0 1.414 1.414L6 7.414l4.283 4.283a1 1 0 1 0 1.414-1.414z\"/></symbol><symbol id=\"spectrum-icon-CrossMedium\" viewBox=\"-5 -5 18 18\"><path d=\"M7.77 6.71L5.06 4l2.71-2.71A.75.75 0 1 0 6.71.23L4 2.94 1.29.23A.75.75 0 1 0 .23 1.29L2.94 4 .23 6.71a.75.75 0 1 0 1.06 1.06L4 5.06l2.71 2.71a.75.75 0 1 0 1.06-1.06z\"/></symbol><symbol id=\"spectrum-icon-CrossSmall\" viewBox=\"-5 -5 18 18\"><path d=\"M7.317 6.433L4.884 4l2.433-2.433a.625.625 0 1 0-.884-.884L4 3.116 1.567.683a.625.625 0 1 0-.884.884L3.116 4 .683 6.433a.625.625 0 1 0 .884.884L4 4.884l2.433 2.433a.625.625 0 0 0 .884-.884z\"/></symbol><symbol id=\"spectrum-icon-DashSmall\" viewBox=\"-4 -4 18 18\"><path d=\"M8 4H2a1 1 0 0 0 0 2h6a1 1 0 0 0 0-2z\"/></symbol><symbol id=\"spectrum-icon-DoubleGripper\" viewBox=\"-1 -7 18 18\"><path d=\"M15.49 3H.51a.5.5 0 1 0 0 1h14.98a.5.5 0 1 0 0-1zM.51 1h14.98a.5.5 0 0 0 0-1H.51a.5.5 0 0 0 0 1z\"/></symbol><symbol id=\"spectrum-icon-HelpMedium\" viewBox=\"0 0 18 18\"><path d=\"M9 1a8 8 0 1 0 8 8 8 8 0 0 0-8-8zm1.3 12.3a1.222 1.222 0 0 1-.3.9 1.223 1.223 0 0 1-.9.3 1.2 1.2 0 0 1 0-2.4c.8 0 1.3.5 1.2 1.2zm.1-4.5c-.4.4-.8.8-.8 1.2a1.135 1.135 0 0 0 .3.8v.1a.098.098 0 0 1-.096.1H8.4a.229.229 0 0 1-.2-.1 1.666 1.666 0 0 1-.4-1.1 2.772 2.772 0 0 1 1-1.7 2.772 2.772 0 0 0 1-1.7c0-.5-.4-1.1-1.4-1.1a5.018 5.018 0 0 0-2 .4h-.2V4.3c0-.1 0-.2.1-.2a6.183 6.183 0 0 1 2.4-.5c1.9 0 3.1 1.1 3.1 2.7a3.704 3.704 0 0 1-1.4 2.5z\"/></symbol><symbol id=\"spectrum-icon-HelpSmall\" viewBox=\"-2 -2 18 18\"><path d=\"M7 .778A6.222 6.222 0 1 0 13.222 7 6.222 6.222 0 0 0 7 .778zm.018 10.452a1.046 1.046 0 1 1-.08-2.091q.04-.002.08 0a1.019 1.019 0 0 1 1.087.946q.003.046.002.092a1.004 1.004 0 0 1-1.09 1.053zm1.387-4.985l-.078.078c-.307.322-.655.687-.655.913a1.078 1.078 0 0 0 .14.525l.056.108-.044.167a.24.24 0 0 1-.221.147H6.56a.338.338 0 0 1-.252-.091 1.6 1.6 0 0 1-.329-.982 2.378 2.378 0 0 1 .864-1.61c.078-.086.156-.164.224-.234.245-.252.395-.416.395-.59 0-.119 0-.483-.695-.483a2.3 2.3 0 0 0-1.229.357.233.233 0 0 1-.254-.008l-.092-.066-.022-.175V3.174a.342.342 0 0 1 .156-.319A3.216 3.216 0 0 1 7 2.425a1.985 1.985 0 0 1 2.14 2.051 2.385 2.385 0 0 1-.735 1.769z\"/></symbol><symbol id=\"spectrum-icon-InfoMedium\" viewBox=\"0 0 18 18\"><path d=\"M9 1a8 8 0 1 0 8 8 8 8 0 0 0-8-8zm-.15 2.15a1.359 1.359 0 0 1 1.431 1.283q.004.064.001.129A1.332 1.332 0 0 1 8.85 5.994a1.353 1.353 0 0 1-1.432-1.433 1.359 1.359 0 0 1 1.304-1.412q.064-.002.128.001zM11 13.5a.5.5 0 0 1-.5.5h-3a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5H8V9h-.5a.5.5 0 0 1-.5-.5v-1a.5.5 0 0 1 .5-.5h2a.5.5 0 0 1 .5.5V12h.5a.5.5 0 0 1 .5.5z\"/></symbol><symbol id=\"spectrum-icon-InfoSmall\" viewBox=\"-2 -2 18 18\"><path d=\"M7 .778A6.222 6.222 0 1 0 13.222 7 6.222 6.222 0 0 0 7 .778zM6.883 2.45a1.057 1.057 0 0 1 1.113.998q.003.05.001.1a1.036 1.036 0 0 1-1.114 1.114A1.052 1.052 0 0 1 5.77 3.547 1.057 1.057 0 0 1 6.784 2.45q.05-.002.1.001zm1.673 8.05a.389.389 0 0 1-.39.389H5.834a.389.389 0 0 1-.389-.389v-.778a.389.389 0 0 1 .39-.389h.388V7h-.389a.389.389 0 0 1-.389-.389v-.778a.389.389 0 0 1 .39-.389h1.555a.389.389 0 0 1 .389.39v3.5h.389a.389.389 0 0 1 .389.388z\"/></symbol><symbol id=\"spectrum-icon-Magnifier\" viewBox=\"-1 -1 18 18\"><path d=\"M15.77 14.71l-4.534-4.535a6.014 6.014 0 1 0-1.06 1.06l4.533 4.535a.75.75 0 1 0 1.061-1.06zM6.5 11A4.5 4.5 0 1 1 11 6.5 4.505 4.505 0 0 1 6.5 11z\"/></symbol><symbol id=\"spectrum-icon-SkipLeft\" viewBox=\"-4.5 -4 18 18\"><path d=\"M8.697 8.283L5.414 5l3.283-3.283A1 1 0 1 0 7.283.303l-3.99 3.99a1 1 0 0 0 0 1.414l3.99 3.99a1 1 0 1 0 1.414-1.414zM1 .01a1 1 0 0 0-1 1v7.98a1 1 0 0 0 2 0V1.01a1 1 0 0 0-1-1z\"/></symbol><symbol id=\"spectrum-icon-SkipRight\" viewBox=\"-4.5 -4 18 18\"><path d=\"M8 .01a1 1 0 0 0-1 1v7.98a1 1 0 1 0 2 0V1.01a1 1 0 0 0-1-1zM6 5a.997.997 0 0 0-.293-.707L1.717.303A1 1 0 1 0 .303 1.717L3.586 5 .303 8.283a1 1 0 1 0 1.414 1.414l3.99-3.99A.997.997 0 0 0 6 5z\"/></symbol><symbol id=\"spectrum-icon-Star\" viewBox=\"0 0 18 18\"><path d=\"M9.241.3l2.161 5.715 6.106.289a.255.255 0 0 1 .147.454l-4.77 3.823 1.612 5.9a.255.255 0 0 1-.386.28L9.002 13.4l-5.11 3.358a.255.255 0 0 1-.386-.28l1.612-5.9-4.77-3.821A.255.255 0 0 1 .495 6.3l6.107-.285L8.763.3a.255.255 0 0 1 .478 0z\"/></symbol><symbol id=\"spectrum-icon-StarOutline\" viewBox=\"0 0 18 18\"><path d=\"M9.031 2.541l1.777 4.753 5.11.241-3.987 3.2 1.336 4.913-4.266-2.782-4.282 2.808 1.352-4.937-3.987-3.2 5.1-.245zM9.042.412a.369.369 0 0 0-.349.239L6.486 6.326l-6.1.293a.375.375 0 0 0-.217.667l4.762 3.821L3.318 17a.376.376 0 0 0 .362.475.371.371 0 0 0 .2-.063l5.121-3.351 5.095 3.324a.371.371 0 0 0 .2.062.376.376 0 0 0 .363-.475l-1.595-5.866 4.767-3.826a.375.375 0 0 0-.217-.667l-6.1-.287L9.393.655a.369.369 0 0 0-.351-.243z\"/></symbol><symbol id=\"spectrum-icon-SuccessMedium\" viewBox=\"0 0 18 18\"><path d=\"M9 1a8 8 0 1 0 8 8 8 8 0 0 0-8-8zm5.333 4.54l-6.324 8.13a.6.6 0 0 1-.437.23h-.037a.6.6 0 0 1-.425-.176l-3.893-3.9a.6.6 0 0 1 0-.849l.663-.663a.6.6 0 0 1 .848 0L7.4 10.991l5.256-6.754a.6.6 0 0 1 .843-.1l.728.566a.6.6 0 0 1 .106.837z\"/></symbol><symbol id=\"spectrum-icon-SuccessSmall\" viewBox=\"-2 -2 18 18\"><path d=\"M7 .778A6.222 6.222 0 1 0 13.222 7 6.222 6.222 0 0 0 7 .778zm4.148 3.53l-4.919 6.324a.467.467 0 0 1-.34.18h-.028a.467.467 0 0 1-.331-.138L2.502 7.641a.467.467 0 0 1 0-.66l.516-.516a.467.467 0 0 1 .66 0l2.078 2.084 4.088-5.254a.467.467 0 0 1 .655-.078l.566.44a.467.467 0 0 1 .083.652z\"/></symbol><symbol id=\"spectrum-icon-TripleGripper\" viewBox=\"-4 -5.5 18 18\"><path d=\"M9.49 6H.51a.5.5 0 1 0 0 1h8.98a.5.5 0 0 0 0-1zM9.49 3H.51a.5.5 0 1 0 0 1h8.98a.5.5 0 0 0 0-1zM.51 1h8.98a.5.5 0 0 0 0-1H.51a.5.5 0 0 0 0 1z\"/></symbol></svg>"]);

  icons_medium_svg_templateObject = function () {
    return data;
  };

  return data;
}

function icons_medium_svg_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

/* harmony default export */ var icons_medium_svg = (Object(lit_element["f" /* svg */])(icons_medium_svg_templateObject()));
// CONCATENATED MODULE: ./src/icons/icons-medium.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/


class icons_medium_IconsMedium extends iconset_svg_IconsetSVG {
  constructor() {
    super();
    this.name = 'ui'; // default iconset name for these icons
  }

  renderDefaultContent() {
    return icons_medium_svg;
  }
  /**
   * Overrides createIconName to make icon strings compatible with spectrum-icon id format
   * @param icon
   * @param size
   */


  getSVGIconName(icon) {
    return "spectrum-icon-".concat(icon);
  }

  getSanitizedIconName(icon) {
    return icon.replace('spectrum-icon-', '');
  }

}
icons_medium_IconsMedium.is = 'sp-icons-medium';
// CONCATENATED MODULE: ./src/icons/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/


// CONCATENATED MODULE: ./src/iconset/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/



// CONCATENATED MODULE: ./src/sidenav/sidenav.css
function sidenav_templateObject() {
  const data = sidenav_taggedTemplateLiteral(["\n:host{display:block;width:240px;--spectrum-web-component-sidenav-font-weight:var(--spectrum-sidenav-item-font-weight,400)}:host([variant=multilevel]){--spectrum-web-component-sidenav-font-weight:var(--spectrum-sidenav-multilevel-main-item-font-weight,700)}ul{list-style-type:none;margin:0;padding:0}\n"]);

  sidenav_templateObject = function () {
    return data;
  };

  return data;
}

function sidenav_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const sidenav_styles = Object(lit_element["b" /* css */])(sidenav_templateObject());
/* harmony default export */ var sidenav = (sidenav_styles);
// CONCATENATED MODULE: ./src/sidenav/sidenav.ts
function sidenav_sidenav_templateObject() {
  const data = sidenav_sidenav_taggedTemplateLiteral(["\n            <nav @sidenav-select=", ">\n                <ul>\n                    <slot></slot>\n                </ul>\n            </nav>\n        "]);

  sidenav_sidenav_templateObject = function () {
    return data;
  };

  return data;
}

function sidenav_sidenav_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var sidenav_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class sidenav_SideNav extends lit_element["a" /* LitElement */] {
  constructor() {
    super(...arguments);
    this.value = undefined;
  }

  static get styles() {
    return [sidenav];
  }

  handleSelect(ev) {
    this.value = ev.detail.value;
  }

  render() {
    return Object(lit_element["c" /* html */])(sidenav_sidenav_templateObject(), this.handleSelect);
  }

}
sidenav_SideNav.is = 'sp-sidenav';

sidenav_decorate([Object(lit_element["d" /* property */])({
  reflect: true
})], sidenav_SideNav.prototype, "value", void 0);
// CONCATENATED MODULE: ./src/sidenav/sidenav-item.css
function sidenav_item_templateObject() {
  const data = sidenav_item_taggedTemplateLiteral(["\n#list{margin:0;padding:0}#list,:host{list-style-type:none}:host{margin:var(--spectrum-sidenav-item-gap,var(--spectrum-global-dimension-size-50)) 0}#itemLink{position:relative;display:inline-flex;align-items:center;justify-content:left;box-sizing:border-box;width:100%;min-height:var(--spectrum-sidenav-item-height,var(--spectrum-global-dimension-size-400));padding:var(--spectrum-global-dimension-size-65) var(--spectrum-sidenav-item-padding-x,var(--spectrum-global-dimension-size-150));border-radius:var(--spectrum-sidenav-item-border-radius,var(--spectrum-global-dimension-size-50));font-size:var(--spectrum-sidenav-item-text-size,var(--spectrum-global-dimension-font-size-100));font-weight:var(--spectrum-sidenav-item-font-weight,400);font-style:normal;text-decoration:none;word-break:break-word;-webkit-hyphens:auto;hyphens:auto;cursor:pointer;transition:background-color var(--spectrum-global-animation-duration-100,.13s) ease-out,color var(--spectrum-global-animation-duration-100,.13s) ease-out;background-color:var(--spectrum-sidenav-item-background-color,transparent);color:var(--spectrum-sidenav-item-text-color,var(--spectrum-global-color-gray-800))}#itemLink:focus{outline:none;background-color:var(--spectrum-sidenav-item-background-color-key-focus,var(--spectrum-alias-highlight-hover));color:var(--spectrum-sidenav-item-text-color-key-focus,var(--spectrum-global-color-gray-900))}#itemLink:focus:before{content:\"\";position:absolute;top:0;left:0;right:0;bottom:0;border-color:transparent;border-radius:var(--spectrum-sidenav-item-border-radius,var(--spectrum-global-dimension-size-50));border:var(--spectrum-tabs-focus-ring-size,2px) solid var(--spectrum-sidenav-item-border-color-key-focus,var(--spectrum-global-color-blue-400))}#itemLink .spectrum-SideNav-itemIcon{margin-right:var(--spectrum-sidenav-icon-gap,var(--spectrum-global-dimension-size-100))}:host([selected])>#itemLink{color:var(--spectrum-sidenav-item-text-color-selected,var(--spectrum-global-color-gray-900));background-color:var(--spectrum-sidenav-item-background-color-selected,var(--spectrum-alias-highlight-hover))}.is-active>#itemLink{background-color:var(--spectrum-sidenav-item-background-color-down,var(--spectrum-alias-highlight-hover))}:host([disabled]) #itemLink{background-color:var(--spectrum-sidenav-item-background-color-disabled,transparent);color:var(--spectrum-sidenav-item-text-color-disabled,var(--spectrum-global-color-gray-500));cursor:default;pointer-events:none}#itemLink:hover{background-color:var(--spectrum-sidenav-item-background-color-hover,var(--spectrum-alias-highlight-hover));color:var(--spectrum-sidenav-item-text-color-hover,var(--spectrum-global-color-gray-900))}#itemLink:active{background-color:var(--spectrum-sidenav-item-background-color-down,var(--spectrum-alias-highlight-hover))}:host([multiLevel]){--spectrum-web-component-sidenav-font-weight:var(--spectrum-sidenav-item-font-weight,700)}::slotted(sp-sidenav-item){--spectrum-web-component-sidenav-font-weight:var(--spectrum-sidenav-item-font-weight,400)}#itemLink{font-weight:var(--spectrum-web-component-sidenav-font-weight)}#itemLink[data-level=\"1\"]{padding-left:calc(var(--spectrum-sidenav-multilevel-item-indentation-level1,\nvar(--spectrum-global-dimension-size-150)) + var(--spectrum-sidenav-item-padding-x,\nvar(--spectrum-global-dimension-size-150)))}#itemLink[data-level=\"2\"]{padding-left:calc(var(--spectrum-sidenav-multilevel-item-indentation-level2,\nvar(--spectrum-global-dimension-size-300)) + var(--spectrum-sidenav-item-padding-x,\nvar(--spectrum-global-dimension-size-150)))}\n"]);

  sidenav_item_templateObject = function () {
    return data;
  };

  return data;
}

function sidenav_item_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const sidenav_item_styles = Object(lit_element["b" /* css */])(sidenav_item_templateObject());
/* harmony default export */ var sidenav_item = (sidenav_item_styles);
// CONCATENATED MODULE: ./src/sidenav/sidenav-item.ts
function sidenav_item_templateObject2() {
  const data = sidenav_sidenav_item_taggedTemplateLiteral(["\n                      <slot></slot>\n                  "]);

  sidenav_item_templateObject2 = function () {
    return data;
  };

  return data;
}

function sidenav_sidenav_item_templateObject() {
  const data = sidenav_sidenav_item_taggedTemplateLiteral(["\n            <a\n                .href=", "\n                .target=", "\n                data-level=\"", "\"\n                @click=\"", "\"\n                id=\"itemLink\"\n            >\n                ", "\n            </a>\n            ", "\n        "]);

  sidenav_sidenav_item_templateObject = function () {
    return data;
  };

  return data;
}

function sidenav_sidenav_item_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var sidenav_item_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};





class sidenav_item_SideNavItem extends lit_element["a" /* LitElement */] {
  constructor() {
    super(...arguments);
    this.value = undefined;
    this.selected = false;
    this.disabled = false;
    this.expanded = true;
    this.href = undefined;
    this.target = undefined;
    this.label = '';
  }

  static get styles() {
    return [sidenav_item];
  }

  get parentSideNav() {
    return this.closest('sp-sidenav');
  }

  get hasChildren() {
    return !!this.querySelector('sp-sidenav-item');
  }

  get depth() {
    let depth = 0;
    let element = this.parentElement;

    while (element instanceof sidenav_item_SideNavItem) {
      depth++;
      element = element.parentElement;
    }

    return depth;
  }

  firstUpdated() {
    const parentSideNav = this.parentSideNav;

    if (parentSideNav) {
      parentSideNav.addEventListener('sp-sidenav:select', ev => this.handleSideNavSelect(ev));
      this.selected = this.value != null && this.value === parentSideNav.value;
    }
  }

  handleSideNavSelect(ev) {
    this.selected = ev.target === this;
  }

  handleClick() {
    if (this.value && !this.disabled) {
      if (this.hasChildren) {
        this.expanded = !this.expanded;
      } else {
        const selectDetail = {
          value: this.value
        };
        const selectionEvent = strictCustomEvent('sp-sidenav:select', {
          bubbles: true,
          composed: true,
          detail: selectDetail
        });
        this.dispatchEvent(selectionEvent);
      }
    }
  }

  render() {
    return Object(lit_element["c" /* html */])(sidenav_sidenav_item_templateObject(), ifDefined(this.href), ifDefined(this.target), this.depth, this.handleClick, this.label, this.expanded ? Object(lit_element["c" /* html */])(sidenav_item_templateObject2()) : undefined);
  }

}
sidenav_item_SideNavItem.is = 'sp-sidenav-item';

sidenav_item_decorate([Object(lit_element["d" /* property */])()], sidenav_item_SideNavItem.prototype, "value", void 0);

sidenav_item_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true
})], sidenav_item_SideNavItem.prototype, "selected", void 0);

sidenav_item_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true
})], sidenav_item_SideNavItem.prototype, "disabled", void 0);

sidenav_item_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true
})], sidenav_item_SideNavItem.prototype, "expanded", void 0);

sidenav_item_decorate([Object(lit_element["d" /* property */])()], sidenav_item_SideNavItem.prototype, "href", void 0);

sidenav_item_decorate([Object(lit_element["d" /* property */])()], sidenav_item_SideNavItem.prototype, "target", void 0);

sidenav_item_decorate([Object(lit_element["d" /* property */])()], sidenav_item_SideNavItem.prototype, "label", void 0);
// CONCATENATED MODULE: ./src/sidenav/sidenav-heading.css
function sidenav_heading_templateObject() {
  const data = sidenav_heading_taggedTemplateLiteral(["\n#list{list-style-type:none;margin:0;padding:0}#heading{height:var(--spectrum-sidenav-header-height,var(--spectrum-global-dimension-size-400));line-height:var(--spectrum-sidenav-header-height,var(--spectrum-global-dimension-size-400));margin:var(--spectrum-sidenav-header-gap-top,var(--spectrum-global-dimension-size-200)) 0 var(--spectrum-sidenav-header-gap-bottom,var(--spectrum-global-dimension-size-50)) 0;padding:0 var(--spectrum-sidenav-header-padding-x,var(--spectrum-global-dimension-size-150));border-radius:var(--spectrum-sidenav-header-border-radius,var(--spectrum-global-dimension-size-50));font-size:var(--spectrum-sidenav-header-text-size,var(--spectrum-global-dimension-font-size-50));font-weight:var(--spectrum-sidenav-header-font-weight,500);font-style:normal;letter-spacing:var(--spectrum-sidenav-header-letter-spacing,.06em);text-transform:uppercase;color:var(--spectrum-sidenav-header-text-color,var(--spectrum-global-color-gray-700))}:host{display:block}\n"]);

  sidenav_heading_templateObject = function () {
    return data;
  };

  return data;
}

function sidenav_heading_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const sidenav_heading_styles = Object(lit_element["b" /* css */])(sidenav_heading_templateObject());
/* harmony default export */ var sidenav_heading = (sidenav_heading_styles);
// CONCATENATED MODULE: ./src/sidenav/sidenav-heading.ts
function sidenav_sidenav_heading_templateObject() {
  const data = sidenav_sidenav_heading_taggedTemplateLiteral(["\n            <h2 id=\"heading\">", "</h2>\n            <ul id=\"list\" aria-labelledby=\"heading\">\n                <slot></slot>\n            </ul>\n        "]);

  sidenav_sidenav_heading_templateObject = function () {
    return data;
  };

  return data;
}

function sidenav_sidenav_heading_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var sidenav_heading_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};




class sidenav_heading_SideNavHeading extends lit_element["a" /* LitElement */] {
  constructor() {
    super(...arguments);
    this.label = '';
  }

  static get styles() {
    return [sidenav_item, sidenav_heading];
  }

  render() {
    return Object(lit_element["c" /* html */])(sidenav_sidenav_heading_templateObject(), this.label);
  }

}
sidenav_heading_SideNavHeading.is = 'sp-sidenav-heading';

sidenav_heading_decorate([Object(lit_element["d" /* property */])({
  reflect: true
})], sidenav_heading_SideNavHeading.prototype, "label", void 0);
// CONCATENATED MODULE: ./src/sidenav/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/



// CONCATENATED MODULE: ./src/switch/switch.css
function switch_templateObject() {
  const data = switch_taggedTemplateLiteral(["\n:host{display:inline-flex;align-items:flex-start;position:relative;min-height:var(--spectrum-switch-height,var(--spectrum-global-dimension-size-400));max-width:100%;margin-right:calc(var(--spectrum-switch-cursor-hit-x,\nvar(--spectrum-global-dimension-size-100))*2);vertical-align:top}#input{margin:0;box-sizing:border-box;padding:0;position:absolute;width:100%;height:100%;top:0;left:0;opacity:.0001;z-index:1;cursor:pointer}:host([checked]) #input+#switch:after{transform:translateX(calc(var(--spectrum-switch-track-width) - var(--spectrum-switch-handle-size,\nvar(--spectrum-global-dimension-size-175))));border-color:var(--spectrum-switch-handle-border-color-selected,var(--spectrum-global-color-blue-500))}#input[disabled],:host([disabled]) #input{cursor:default}#label{margin:0 var(--spectrum-switch-text-gap,var(--spectrum-global-dimension-size-125));font-size:var(--spectrum-switch-text-size,var(--spectrum-global-dimension-font-size-100));transition:color var(--spectrum-global-animation-duration-200,.16s) ease-in-out;margin-top:var(--spectrum-global-dimension-size-75)}#switch{display:inline-block;position:relative;height:var(--spectrum-switch-track-height,var(--spectrum-global-dimension-size-175));width:var(--spectrum-switch-track-width);margin:calc((var(--spectrum-switch-height,\nvar(--spectrum-global-dimension-size-400)) - var(--spectrum-switch-track-height,\nvar(--spectrum-global-dimension-size-175)))/2) 0;flex-grow:0;flex-shrink:0;vertical-align:middle}#switch:after,#switch:before{display:block;position:absolute;content:\"\";box-sizing:border-box}#switch:before{transition:background var(--spectrum-global-animation-duration-100,.13s) ease-in-out,border var(--spectrum-global-animation-duration-100,.13s) ease-in-out;height:var(--spectrum-switch-track-height,var(--spectrum-global-dimension-size-175));left:0;right:0;border-radius:calc(var(--spectrum-switch-track-height,\nvar(--spectrum-global-dimension-size-175))/2);background-color:var(--spectrum-switch-track-color,var(--spectrum-global-color-gray-300))}#switch:after{transition:background var(--spectrum-global-animation-duration-100,.13s) ease-in-out,border var(--spectrum-global-animation-duration-100,.13s) ease-in-out,transform var(--spectrum-global-animation-duration-100,.13s) ease-in-out,box-shadow var(--spectrum-global-animation-duration-100,.13s) ease-in-out;width:var(--spectrum-switch-handle-size,var(--spectrum-global-dimension-size-175));height:var(--spectrum-switch-handle-size,var(--spectrum-global-dimension-size-175));top:0;left:0;border-radius:var(--spectrum-switch-handle-border-radius,var(--spectrum-global-dimension-size-85));background-color:var(--spectrum-switch-handle-background-color,var(--spectrum-global-color-gray-75));border:var(--spectrum-switch-handle-border-size,2px) solid var(--spectrum-switch-handle-border-color,var(--spectrum-global-color-gray-600))}#input~#label{color:var(--spectrum-switch-text-color,var(--spectrum-global-color-gray-800))}:host([checked]) #input+#switch:before{background-color:var(--spectrum-switch-track-color-selected,var(--spectrum-global-color-blue-500))}:host(:hover) #input+#switch:after{border-color:var(--spectrum-switch-handle-border-color-hover,var(--spectrum-global-color-gray-700));box-shadow:none}:host(:hover) #input~#label{color:var(--spectrum-switch-text-color-hover,var(--spectrum-global-color-gray-900))}:host(:hover[checked]) #input:enabled+#switch:before{background-color:var(--spectrum-switch-track-color-selected-hover,var(--spectrum-global-color-blue-600))}:host(:hover[checked]) #input:enabled+#switch:after{border-color:var(--spectrum-switch-handle-border-color-selected-hover,var(--spectrum-global-color-blue-600))}:host(:active) #input+#switch:after{border-color:var(--spectrum-switch-handle-border-color-down,var(--spectrum-global-color-gray-800))}:host(:active) #input~#label{color:var(--spectrum-switch-text-color-down,var(--spectrum-global-color-gray-900))}:host(:active[checked]) #input:enabled+#switch:before{background-color:var(--spectrum-switch-track-color-selected-down,var(--spectrum-global-color-blue-700))}:host(:active[checked]) #input:enabled+#switch:after{border-color:var(--spectrum-switch-handle-border-color-selected-down,var(--spectrum-global-color-blue-700))}:host([disabled]) #input+#switch:before{background-color:var(--spectrum-switch-track-color-disabled,var(--spectrum-global-color-gray-300))}:host([disabled]) #input+#switch:after{border-color:var(--spectrum-switch-handle-border-color-disabled,var(--spectrum-global-color-gray-400))}:host([disabled]) #input~#label{color:var(--spectrum-switch-text-color-disabled,var(--spectrum-global-color-gray-500))}:host([disabled][checked]) #input+#switch:before{background-color:var(--spectrum-switch-track-color-selected-disabled,var(--spectrum-global-color-gray-400))}:host([disabled][checked]) #input+#switch:after{border-color:var(--spectrum-switch-handle-border-color-selected-disabled,var(--spectrum-global-color-gray-400))}:host([disabled][checked]) #input~#label{color:var(--spectrum-switch-text-color-selected-disabled,var(--spectrum-global-color-gray-500))}:host([quiet][checked]) #input+#switch:before{background-color:var(--spectrum-switch-quiet-track-color-selected,var(--spectrum-global-color-gray-700))}:host([quiet][checked]) #input+#switch:after{border-color:var(--spectrum-switch-quiet-handle-border-color-selected,var(--spectrum-global-color-gray-700))}:host([quiet][checked]) :hover #input:enabled+#switch:before{background-color:var(--spectrum-switch-quiet-track-color-selected-hover,var(--spectrum-global-color-gray-800))}:host([quiet][checked]) :hover #input:enabled+#switch:after{border-color:var(--spectrum-switch-quiet-handle-border-color-selected-hover,var(--spectrum-global-color-gray-800))}:host(:active[quiet][checked]) #input:enabled+#switch:before{background-color:var(--spectrum-switch-quiet-track-color-selected-down,var(--spectrum-global-color-gray-900))}:host(:active[quiet][checked]) #input:enabled+#switch:after{border-color:var(--spectrum-switch-quiet-handle-border-color-selected-down,var(--spectrum-global-color-gray-900))}#input:focus+#switch:after,:host(:hover) #input:focus+#switch:after,:host([quiet]) #input:focus+#switch:after,:host([quiet]) :hover #input:focus+#switch:after{border-color:var(--spectrum-switch-handle-border-color-key-focus,var(--spectrum-global-color-blue-400));box-shadow:0 0 0 1px var(--spectrum-switch-handle-border-color-key-focus,var(--spectrum-global-color-blue-400))}#input:focus~#label,:host(:hover) #input:focus~#label,:host([quiet]) #input:focus~#label,:host([quiet]) :hover #input:focus~#label{color:var(--spectrum-switch-text-color-key-focus,var(--spectrum-global-color-blue-600))}:host(:hover[checked]) #input:focus+#switch:before,:host([checked]) #input:focus+#switch:before,:host([quiet][checked]) #input:focus+#switch:before,:host([quiet][checked]) :hover #input:focus+#switch:before{background-color:var(--spectrum-switch-track-color-selected-key-focus,var(--spectrum-global-color-blue-400))}:host(:hover[checked]) #input:focus+#switch:after,:host([checked]) #input:focus+#switch:after,:host([quiet][checked]) #input:focus+#switch:after,:host([quiet][checked]) :hover #input:focus+#switch:after{border-color:var(--spectrum-switch-handle-border-color-selected-key-focus,var(--spectrum-global-color-blue-400));box-shadow:0 0 0 1px var(--spectrum-switch-handle-border-color-selected-key-focus,var(--spectrum-global-color-blue-400))}:host(:hover[checked]) #input:focus~#label,:host([checked]) #input:focus~#label,:host([quiet][checked]) #input:focus~#label,:host([quiet][checked]) :hover #input:focus~#label{color:var(--spectrum-switch-text-color-selected-key-focus,var(--spectrum-global-color-blue-600))}\n"]);

  switch_templateObject = function () {
    return data;
  };

  return data;
}

function switch_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const switch_styles = Object(lit_element["b" /* css */])(switch_templateObject());
/* harmony default export */ var switch_switch = (switch_styles);
// CONCATENATED MODULE: ./src/switch/switch.ts
function switch_switch_templateObject() {
  const data = switch_switch_taggedTemplateLiteral(["\n            ", "\n            <span id=\"switch\"></span>\n            <label id=\"label\" for=\"input\"><slot></slot></label>\n        "]);

  switch_switch_templateObject = function () {
    return data;
  };

  return data;
}

function switch_switch_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/



class switch_Switch extends checkbox_base_CheckboxBase {
  static get styles() {
    return [switch_switch];
  }

  render() {
    return Object(lit_element["c" /* html */])(switch_switch_templateObject(), super.render());
  }

}
// CONCATENATED MODULE: ./src/switch/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/



if (!customElements.get('sp-switch')) {
  customElements.define('sp-switch', switch_Switch);
}
// CONCATENATED MODULE: ./src/tab/tab.css
function tab_templateObject() {
  const data = tab_taggedTemplateLiteral(["\n:host([selected]){color:var(--spectrum-tabs-text-color-selected)}:host([disabled]){color:var(--spectrum-tabs-text-color-disabled)}:host{display:flex;position:relative;margin:0;padding:0 var(--spectrum-tabs-focus-ring-padding-x);line-height:46px;vertical-align:top;cursor:pointer;font-size:var(--spectrum-tabs-text-size);font-weight:var(--spectrum-tabs-text-font-weight);color:var(--spectrum-tabs-text-color)}:host(:hover){color:var(--spectrum-tabs-text-color-hover)}:host *{pointer-events:none}\n"]);

  tab_templateObject = function () {
    return data;
  };

  return data;
}

function tab_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const tab_styles = Object(lit_element["b" /* css */])(tab_templateObject());
/* harmony default export */ var tab = (tab_styles);
// CONCATENATED MODULE: ./src/tab/tab.ts
function tab_tab_templateObject() {
  const data = tab_tab_taggedTemplateLiteral(["\n            <slot></slot>\n        "]);

  tab_tab_templateObject = function () {
    return data;
  };

  return data;
}

function tab_tab_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var tab_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class tab_Tab extends lit_element["a" /* LitElement */] {
  constructor() {
    super(...arguments);
    this.selected = false;
    this.value = '';
  }

  static get styles() {
    return [tab];
  }

  render() {
    return Object(lit_element["c" /* html */])(tab_tab_templateObject());
  }

}
tab_Tab.is = 'sp-tab';

tab_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true
})], tab_Tab.prototype, "selected", void 0);

tab_decorate([Object(lit_element["d" /* property */])({
  type: String,
  reflect: true
})], tab_Tab.prototype, "value", void 0);

tab_decorate([Object(lit_element["d" /* property */])()], tab_Tab.prototype, "render", null);
// CONCATENATED MODULE: ./src/tab/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

// CONCATENATED MODULE: ./src/tab-list/tab-list.css
function tab_list_templateObject() {
  const data = tab_list_taggedTemplateLiteral(["\n:host{display:flex;z-index:0}:host([direction=column]){height:100%;flex-direction:column;border-left:var(--spectrum-global-color-gray-400) solid}:host([direction=row]){width:100%;flex-direction:row}\n"]);

  tab_list_templateObject = function () {
    return data;
  };

  return data;
}

function tab_list_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const tab_list_styles = Object(lit_element["b" /* css */])(tab_list_templateObject());
/* harmony default export */ var tab_list = (tab_list_styles);
// CONCATENATED MODULE: ./src/tab-list/tab-list.ts
function tab_list_tab_list_templateObject() {
  const data = tab_list_tab_list_taggedTemplateLiteral(["\n            <slot\n                @click=\"", "\"\n                @slotchange=", "\n            ></slot>\n        "]);

  tab_list_tab_list_templateObject = function () {
    return data;
  };

  return data;
}

function tab_list_tab_list_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var tab_list_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};




class tab_list_TabList extends lit_element["a" /* LitElement */] {
  constructor() {
    super(...arguments);
    this.direction = 'column';
    this._selected = '';
  }

  static get styles() {
    return [tab_list];
  }

  get selected() {
    return this._selected;
  }

  set selected(value) {
    const oldValue = this.selected;

    if (value === oldValue) {
      return;
    }

    this.updateCheckedState(value);
    this._selected = value;
    this.requestUpdate('selected', oldValue);
  }

  onClick(ev) {
    const target = ev.target;

    if (target) {
      const value = target.getAttribute('value');

      if (value) {
        const applyDefault = this.dispatchEvent(strictCustomEvent('sp-tab-list:change', {
          bubbles: true,
          composed: true,
          detail: {
            selected: value
          }
        }));

        if (applyDefault) {
          this.selected = value;
        }
      }
    }
  }

  render() {
    return Object(lit_element["c" /* html */])(tab_list_tab_list_templateObject(), this.onClick, this.onSlotChange);
  }

  onSlotChange() {
    this.updateCheckedState(this.selected);
  }

  updateCheckedState(value) {
    const previousChecked = this.querySelectorAll('[selected]');
    previousChecked.forEach(element => {
      element.removeAttribute('selected');
    });

    if (value.length) {
      const currentChecked = this.querySelector("[value=\"".concat(value, "\"]"));

      if (currentChecked) {
        currentChecked.setAttribute('selected', '');
      }
    }
  }

}
tab_list_TabList.is = 'sp-tab-list';

tab_list_decorate([Object(lit_element["d" /* property */])({
  reflect: true
})], tab_list_TabList.prototype, "direction", void 0);

tab_list_decorate([Object(lit_element["d" /* property */])({
  reflect: true
})], tab_list_TabList.prototype, "selected", null);

tab_list_decorate([Object(lit_element["d" /* property */])()], tab_list_TabList.prototype, "render", null);
// CONCATENATED MODULE: ./src/tab-list/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

// CONCATENATED MODULE: ./src/themes/theme-dark.css
function theme_dark_templateObject() {
  const data = theme_dark_taggedTemplateLiteral(["\n:host,:root{--spectrum-global-color-celery-400:#44b556;--spectrum-global-color-celery-500:#4bc35f;--spectrum-global-color-celery-600:#51d267;--spectrum-global-color-celery-700:#58e06f;--spectrum-global-color-chartreuse-400:#85d044;--spectrum-global-color-chartreuse-500:#8ede49;--spectrum-global-color-chartreuse-600:#9bec54;--spectrum-global-color-chartreuse-700:#a3f858;--spectrum-global-color-yellow-400:#dfbf00;--spectrum-global-color-yellow-500:#edcc00;--spectrum-global-color-yellow-600:#fad900;--spectrum-global-color-yellow-700:#ffe22e;--spectrum-global-color-magenta-400:#d83790;--spectrum-global-color-magenta-500:#e2499d;--spectrum-global-color-magenta-600:#ec5aaa;--spectrum-global-color-magenta-700:#f56bb7;--spectrum-global-color-fuchsia-400:#c038cc;--spectrum-global-color-fuchsia-500:#cf3edc;--spectrum-global-color-fuchsia-600:#d951e5;--spectrum-global-color-fuchsia-700:#e366ef;--spectrum-global-color-purple-400:#9256d9;--spectrum-global-color-purple-500:#9d64e1;--spectrum-global-color-purple-600:#a873e9;--spectrum-global-color-purple-700:#b483f0;--spectrum-global-color-indigo-400:#6767ec;--spectrum-global-color-indigo-500:#7575f1;--spectrum-global-color-indigo-600:#8282f6;--spectrum-global-color-indigo-700:#9090fa;--spectrum-global-color-seafoam-400:#1b959a;--spectrum-global-color-seafoam-500:#20a3a8;--spectrum-global-color-seafoam-600:#23b2b8;--spectrum-global-color-seafoam-700:#26c0c7;--spectrum-global-color-red-400:#e34850;--spectrum-global-color-red-500:#ec5b62;--spectrum-global-color-red-600:#f76d74;--spectrum-global-color-red-700:#ff7b82;--spectrum-global-color-orange-400:#e68619;--spectrum-global-color-orange-500:#f29423;--spectrum-global-color-orange-600:#f9a43f;--spectrum-global-color-orange-700:#ffb55b;--spectrum-global-color-green-400:#2d9d78;--spectrum-global-color-green-500:#33ab84;--spectrum-global-color-green-600:#39b990;--spectrum-global-color-green-700:#3fc89c;--spectrum-global-color-blue-400:#2680eb;--spectrum-global-color-blue-500:#378ef0;--spectrum-global-color-blue-600:#4b9cf5;--spectrum-global-color-blue-700:#5aa9fa;--spectrum-global-color-gray-50:#252525;--spectrum-global-color-gray-75:#2f2f2f;--spectrum-global-color-gray-100:#323232;--spectrum-global-color-gray-200:#3e3e3e;--spectrum-global-color-gray-300:#4a4a4a;--spectrum-global-color-gray-400:#5a5a5a;--spectrum-global-color-gray-500:#6e6e6e;--spectrum-global-color-gray-600:#909090;--spectrum-global-color-gray-700:#b9b9b9;--spectrum-global-color-gray-800:#e3e3e3;--spectrum-global-color-gray-900:#fff;--spectrum-alias-background-color-default:#323232;--spectrum-alias-background-color-transparent:transparent;--spectrum-alias-background-color-label-gray:#707070;--spectrum-alias-background-color-modal-overlay:rgba(0,0,0,0.5);--spectrum-alias-dropshadow-color:rgba(0,0,0,0.5);--spectrum-alias-background-color-hover-overlay:hsla(0,0%,100%,0.06);--spectrum-alias-highlight-hover:hsla(0,0%,100%,0.07);--spectrum-alias-highlight-active:hsla(0,0%,100%,0.1);--spectrum-alias-highlight-selected:rgba(55,142,240,0.15);--spectrum-alias-highlight-selected-hover:rgba(55,142,240,0.25);--spectrum-alias-text-highlight-color:rgba(55,142,240,0.25);--spectrum-alias-background-color-quickactions:rgba(50,50,50,0.9);--spectrum-alias-background-color-quickactions-overlay:rgba(0,0,0,0.2);--spectrum-alias-placeholder-text-color:#909090;--spectrum-alias-placeholder-text-color-hover:#fff;--spectrum-alias-placeholder-text-color-down:#fff;--spectrum-alias-placeholder-text-color-selected:#e3e3e3;--spectrum-alias-label-text-color:#b9b9b9;--spectrum-alias-text-color:#e3e3e3;--spectrum-alias-text-color-hover:#fff;--spectrum-alias-text-color-down:#fff;--spectrum-alias-text-color-key-focus:#4b9cf5;--spectrum-alias-text-color-disabled:#6e6e6e;--spectrum-alias-text-color-invalid:#ec5b62;--spectrum-alias-text-color-selected:#4b9cf5;--spectrum-alias-text-color-selected-neutral:#fff;--spectrum-alias-title-text-color:#fff;--spectrum-alias-heading-text-color:#fff;--spectrum-alias-border-color:#4a4a4a;--spectrum-alias-border-color-hover:#5a5a5a;--spectrum-alias-border-color-focus:#2680eb;--spectrum-alias-border-color-down:#378ef0;--spectrum-alias-border-color-extralight:#323232;--spectrum-alias-border-color-light:#3e3e3e;--spectrum-alias-border-color-mid:#4a4a4a;--spectrum-alias-border-color-dark:#5a5a5a;--spectrum-alias-border-color-transparent:transparent;--spectrum-alias-border-color-translucent-dark:rgba(0,0,0,0.05);--spectrum-alias-border-color-translucent-darker:rgba(0,0,0,0.1);--spectrum-alias-focus-color:#2680eb;--spectrum-alias-track-color-default:#4a4a4a;--spectrum-alias-track-color-disabled:#4a4a4a;--spectrum-alias-track-color-over-background:hsla(0,0%,100%,0.2);--spectrum-alias-icon-color:#b9b9b9;--spectrum-alias-icon-color-over-background:#fff;--spectrum-alias-icon-color-hover:#fff;--spectrum-alias-icon-color-down:#fff;--spectrum-alias-icon-color-focus:#fff;--spectrum-alias-icon-color-disabled:#5a5a5a;--spectrum-alias-icon-color-selected-neutral:#fff;--spectrum-alias-icon-color-selected:#378ef0;--spectrum-alias-icon-color-selected-hover:#4b9cf5;--spectrum-alias-icon-color-selected-down:#5aa9fa;--spectrum-alias-icon-color-selected-focus:#4b9cf5;--spectrum-alias-icon-color-error:#e34850;--spectrum-alias-radial-reaction-color-default:hsla(0,0%,89%,0.6);--spectrum-alias-pasteboard-background-color:#252525;--spectrum-alias-appframe-border-color:#252525;--spectrum-alias-appframe-separator-color:#252525;--spectrum-alias-toolbar-background-color:#323232;--spectrum-semantic-negative-color-background:#c9252d;--spectrum-semantic-negative-color-default:#ec5b62;--spectrum-semantic-negative-color-dark:#f76d74;--spectrum-semantic-negative-color-border:#e34850;--spectrum-semantic-negative-color-icon:#f76d74;--spectrum-semantic-negative-color-status:#e34850;--spectrum-semantic-negative-color-text-large:#ec5b62;--spectrum-semantic-negative-color-text-small:#f76d74;--spectrum-semantic-negative-color-state-down:#ff7b82;--spectrum-semantic-negative-color-state-focus:#e34850;--spectrum-semantic-notice-color-background:#cb6f10;--spectrum-semantic-notice-color-default:#f29423;--spectrum-semantic-notice-color-dark:#f9a43f;--spectrum-semantic-notice-color-border:#e68619;--spectrum-semantic-notice-color-icon:#f9a43f;--spectrum-semantic-notice-color-status:#e68619;--spectrum-semantic-notice-color-text-large:#f29423;--spectrum-semantic-notice-color-text-small:#f9a43f;--spectrum-semantic-notice-color-state-down:#ffb55b;--spectrum-semantic-notice-color-state-focus:#e68619;--spectrum-semantic-positive-color-background:#12805c;--spectrum-semantic-positive-color-default:#33ab84;--spectrum-semantic-positive-color-dark:#39b990;--spectrum-semantic-positive-color-border:#2d9d78;--spectrum-semantic-positive-color-icon:#39b990;--spectrum-semantic-positive-color-status:#2d9d78;--spectrum-semantic-positive-color-text-large:#33ab84;--spectrum-semantic-positive-color-text-small:#39b990;--spectrum-semantic-positive-color-state-down:#3fc89c;--spectrum-semantic-positive-color-state-focus:#2d9d78;--spectrum-semantic-informative-color-background:#0d66d0;--spectrum-semantic-informative-color-default:#378ef0;--spectrum-semantic-informative-color-dark:#4b9cf5;--spectrum-semantic-informative-color-border:#2680eb;--spectrum-semantic-informative-color-icon:#4b9cf5;--spectrum-semantic-informative-color-status:#2680eb;--spectrum-semantic-informative-color-text-large:#378ef0;--spectrum-semantic-informative-color-text-small:#4b9cf5;--spectrum-semantic-informative-color-state-down:#5aa9fa;--spectrum-semantic-informative-color-state-focus:#2680eb;--spectrum-semantic-cta-color-background-default:#1473e6;--spectrum-semantic-cta-color-background-hover:#0d66d0;--spectrum-semantic-cta-color-background-down:#0d66d0;--spectrum-semantic-background-color-key-focus:#1473e6;--spectrum-semantic-neutral-color-background:#747474;--spectrum-banner-text-color:#fff;--spectrum-banner-error-background-color:#ec5b62;--spectrum-banner-info-background-color:#378ef0;--spectrum-banner-warning-background-color:#f29423;--spectrum-button-cta-icon-color:#fff;--spectrum-button-cta-background-color:#1473e6;--spectrum-button-cta-border-color:#1473e6;--spectrum-button-cta-text-color:#fff;--spectrum-button-cta-icon-color-hover:#fff;--spectrum-button-cta-background-color-hover:#0d66d0;--spectrum-button-cta-border-color-hover:#0d66d0;--spectrum-button-cta-text-color-hover:#fff;--spectrum-button-cta-icon-color-down:#fff;--spectrum-button-cta-background-color-down:#0d66d0;--spectrum-button-cta-border-color-down:#0d66d0;--spectrum-button-cta-text-color-down:#fff;--spectrum-button-cta-icon-color-key-focus:#fff;--spectrum-button-cta-background-color-key-focus:#1473e6;--spectrum-button-cta-border-color-key-focus:#1473e6;--spectrum-button-cta-text-color-key-focus:#fff;--spectrum-button-cta-icon-color-disabled:#5a5a5a;--spectrum-button-cta-background-color-disabled:#3e3e3e;--spectrum-button-cta-border-color-disabled:#3e3e3e;--spectrum-button-cta-text-color-disabled:#6e6e6e;--spectrum-button-over-background-icon-color:#fff;--spectrum-button-over-background-background-color:transparent;--spectrum-button-over-background-border-color:#fff;--spectrum-button-over-background-text-color:#fff;--spectrum-button-over-background-icon-color-hover:#252525;--spectrum-button-over-background-background-color-hover:#fff;--spectrum-button-over-background-border-color-hover:#fff;--spectrum-button-over-background-icon-color-down:#252525;--spectrum-button-over-background-background-color-down:#fff;--spectrum-button-over-background-border-color-down:#fff;--spectrum-button-over-background-icon-color-key-focus:#252525;--spectrum-button-over-background-background-color-key-focus:#fff;--spectrum-button-over-background-border-color-key-focus:#fff;--spectrum-button-over-background-icon-color-disabled:hsla(0,0%,100%,0.35);--spectrum-button-over-background-background-color-disabled:hsla(0,0%,100%,0.1);--spectrum-button-over-background-border-color-disabled:transparent;--spectrum-button-over-background-text-color-disabled:hsla(0,0%,100%,0.35);--spectrum-button-primary-icon-color:#e3e3e3;--spectrum-button-primary-background-color:transparent;--spectrum-button-primary-border-color:#e3e3e3;--spectrum-button-primary-text-color:#e3e3e3;--spectrum-button-primary-icon-color-hover:#252525;--spectrum-button-primary-background-color-hover:#e3e3e3;--spectrum-button-primary-border-color-hover:#e3e3e3;--spectrum-button-primary-text-color-hover:#252525;--spectrum-button-primary-icon-color-down:#252525;--spectrum-button-primary-background-color-down:#fff;--spectrum-button-primary-border-color-down:#fff;--spectrum-button-primary-text-color-down:#252525;--spectrum-button-primary-icon-color-key-focus:#252525;--spectrum-button-primary-background-color-key-focus:#1473e6;--spectrum-button-primary-border-color-key-focus:#1473e6;--spectrum-button-primary-text-color-key-focus:#fff;--spectrum-button-primary-icon-color-disabled:#5a5a5a;--spectrum-button-primary-background-color-disabled:#3e3e3e;--spectrum-button-primary-border-color-disabled:#3e3e3e;--spectrum-button-primary-text-color-disabled:#6e6e6e;--spectrum-button-quiet-over-background-icon-color:#fff;--spectrum-button-quiet-over-background-background-color:transparent;--spectrum-button-quiet-over-background-border-color:transparent;--spectrum-button-quiet-over-background-text-color:#fff;--spectrum-button-quiet-over-background-icon-color-hover:#fff;--spectrum-button-quiet-over-background-background-color-hover:hsla(0,0%,100%,0.1);--spectrum-button-quiet-over-background-border-color-hover:transparent;--spectrum-button-quiet-over-background-text-color-hover:#fff;--spectrum-button-quiet-over-background-icon-color-down:#fff;--spectrum-button-quiet-over-background-background-color-down:hsla(0,0%,100%,0.15);--spectrum-button-quiet-over-background-border-color-down:transparent;--spectrum-button-quiet-over-background-text-color-down:#fff;--spectrum-button-quiet-over-background-icon-color-key-focus:#252525;--spectrum-button-quiet-over-background-background-color-key-focus:#fff;--spectrum-button-quiet-over-background-border-color-key-focus:#fff;--spectrum-button-quiet-over-background-icon-color-disabled:hsla(0,0%,100%,0.15);--spectrum-button-quiet-over-background-background-color-disabled:transparent;--spectrum-button-quiet-over-background-border-color-disabled:transparent;--spectrum-button-quiet-over-background-text-color-disabled:hsla(0,0%,100%,0.15);--spectrum-button-quiet-primary-icon-color:#e3e3e3;--spectrum-button-quiet-primary-background-color:transparent;--spectrum-button-quiet-primary-border-color:transparent;--spectrum-button-quiet-primary-text-color:#e3e3e3;--spectrum-button-quiet-primary-icon-color-hover:#252525;--spectrum-button-quiet-primary-background-color-hover:#3e3e3e;--spectrum-button-quiet-primary-border-color-hover:#3e3e3e;--spectrum-button-quiet-primary-text-color-hover:#fff;--spectrum-button-quiet-primary-icon-color-down:#252525;--spectrum-button-quiet-primary-background-color-down:#4a4a4a;--spectrum-button-quiet-primary-border-color-down:#4a4a4a;--spectrum-button-quiet-primary-text-color-down:#fff;--spectrum-button-quiet-primary-icon-color-key-focus:#252525;--spectrum-button-quiet-primary-background-color-key-focus:#1473e6;--spectrum-button-quiet-primary-border-color-key-focus:#1473e6;--spectrum-button-quiet-primary-text-color-key-focus:#fff;--spectrum-button-quiet-primary-icon-color-disabled:#5a5a5a;--spectrum-button-quiet-primary-background-color-disabled:transparent;--spectrum-button-quiet-primary-border-color-disabled:transparent;--spectrum-button-quiet-primary-text-color-disabled:#6e6e6e;--spectrum-button-quiet-secondary-icon-color:#b9b9b9;--spectrum-button-quiet-secondary-background-color:transparent;--spectrum-button-quiet-secondary-border-color:transparent;--spectrum-button-quiet-secondary-text-color:#b9b9b9;--spectrum-button-quiet-secondary-icon-color-hover:#252525;--spectrum-button-quiet-secondary-background-color-hover:#3e3e3e;--spectrum-button-quiet-secondary-border-color-hover:#3e3e3e;--spectrum-button-quiet-secondary-text-color-hover:#e3e3e3;--spectrum-button-quiet-secondary-icon-color-down:#252525;--spectrum-button-quiet-secondary-background-color-down:#4a4a4a;--spectrum-button-quiet-secondary-border-color-down:#4a4a4a;--spectrum-button-quiet-secondary-text-color-down:#e3e3e3;--spectrum-button-quiet-secondary-icon-color-key-focus:#252525;--spectrum-button-quiet-secondary-background-color-key-focus:#1473e6;--spectrum-button-quiet-secondary-border-color-key-focus:#1473e6;--spectrum-button-quiet-secondary-text-color-key-focus:#fff;--spectrum-button-quiet-secondary-icon-color-disabled:#5a5a5a;--spectrum-button-quiet-secondary-background-color-disabled:transparent;--spectrum-button-quiet-secondary-border-color-disabled:transparent;--spectrum-button-quiet-secondary-text-color-disabled:#6e6e6e;--spectrum-button-quiet-warning-icon-color:#ec5b62;--spectrum-button-quiet-warning-background-color:transparent;--spectrum-button-quiet-warning-border-color:transparent;--spectrum-button-quiet-warning-text-color:#ec5b62;--spectrum-button-quiet-warning-icon-color-hover:#f76d74;--spectrum-button-quiet-warning-background-color-hover:#3e3e3e;--spectrum-button-quiet-warning-border-color-hover:#3e3e3e;--spectrum-button-quiet-warning-text-color-hover:#f76d74;--spectrum-button-quiet-warning-icon-color-down:#f76d74;--spectrum-button-quiet-warning-background-color-down:#4a4a4a;--spectrum-button-quiet-warning-border-color-down:#4a4a4a;--spectrum-button-quiet-warning-text-color-down:#f76d74;--spectrum-button-quiet-warning-icon-color-key-focus:#fff;--spectrum-button-quiet-warning-background-color-key-focus:#1473e6;--spectrum-button-quiet-warning-border-color-key-focus:#1473e6;--spectrum-button-quiet-warning-text-color-key-focus:#fff;--spectrum-button-quiet-warning-icon-color-disabled:#5a5a5a;--spectrum-button-quiet-warning-background-color-disabled:transparent;--spectrum-button-quiet-warning-border-color-disabled:transparent;--spectrum-button-quiet-warning-text-color-disabled:#6e6e6e;--spectrum-button-secondary-icon-color:#b9b9b9;--spectrum-button-secondary-background-color:transparent;--spectrum-button-secondary-border-color:#b9b9b9;--spectrum-button-secondary-text-color:#b9b9b9;--spectrum-button-secondary-icon-color-hover:#252525;--spectrum-button-secondary-background-color-hover:#b9b9b9;--spectrum-button-secondary-border-color-hover:#b9b9b9;--spectrum-button-secondary-text-color-hover:#252525;--spectrum-button-secondary-icon-color-down:#252525;--spectrum-button-secondary-background-color-down:#e3e3e3;--spectrum-button-secondary-border-color-down:#e3e3e3;--spectrum-button-secondary-text-color-down:#252525;--spectrum-button-secondary-icon-color-key-focus:#252525;--spectrum-button-secondary-background-color-key-focus:#1473e6;--spectrum-button-secondary-border-color-key-focus:#1473e6;--spectrum-button-secondary-text-color-key-focus:#fff;--spectrum-button-secondary-icon-color-disabled:#5a5a5a;--spectrum-button-secondary-background-color-disabled:#3e3e3e;--spectrum-button-secondary-border-color-disabled:#3e3e3e;--spectrum-button-secondary-text-color-disabled:#6e6e6e;--spectrum-button-warning-icon-color:#f76d74;--spectrum-button-warning-background-color:transparent;--spectrum-button-warning-border-color:#f76d74;--spectrum-button-warning-text-color:#f76d74;--spectrum-button-warning-icon-color-hover:#252525;--spectrum-button-warning-background-color-hover:#f76d74;--spectrum-button-warning-border-color-hover:#f76d74;--spectrum-button-warning-text-color-hover:#252525;--spectrum-button-warning-icon-color-down:#252525;--spectrum-button-warning-background-color-down:#ff7b82;--spectrum-button-warning-border-color-down:#ff7b82;--spectrum-button-warning-text-color-down:#252525;--spectrum-button-warning-icon-color-key-focus:#fff;--spectrum-button-warning-background-color-key-focus:#1473e6;--spectrum-button-warning-border-color-key-focus:#1473e6;--spectrum-button-warning-text-color-key-focus:#fff;--spectrum-button-warning-icon-color-disabled:#5a5a5a;--spectrum-button-warning-background-color-disabled:#3e3e3e;--spectrum-button-warning-border-color-disabled:#3e3e3e;--spectrum-button-warning-text-color-disabled:#6e6e6e;--spectrum-card-border-color:#3e3e3e;--spectrum-card-border-color-key-focus:#2680eb;--spectrum-card-border-color-hover:#5a5a5a;--spectrum-card-coverphoto-background-color:#3e3e3e;--spectrum-card-coverphoto-border-color:#3e3e3e;--spectrum-card-description-text-color:#b9b9b9;--spectrum-card-background-color:#252525;--spectrum-card-quiet-preview-background-color:#3e3e3e;--spectrum-card-quiet-preview-background-color-hover:#4a4a4a;--spectrum-card-quiet-border-color-selected:#378ef0;--spectrum-card-quiet-title-text-color:#e3e3e3;--spectrum-card-quiet-subtitle-text-color:#b9b9b9;--spectrum-dropzone-border-color:#4a4a4a;--spectrum-dropzone-background-color:#323232;--spectrum-dropzone-icon-color:#6e6e6e;--spectrum-dropzone-border-color-selected-hover:#2680eb;--spectrum-dropzone-background-color-selected-hover:rgba(55,142,240,0.15);--spectrum-dropzone-icon-color-selected-hover:#378ef0;--spectrum-fieldlabel-asterisk-color:#909090;--spectrum-fieldlabel-text-color:#b9b9b9;--spectrum-fieldlabel-asterisk-color-disabled:#6e6e6e;--spectrum-fieldlabel-text-color-disabled:#6e6e6e;--spectrum-fieldlabel-side-asterisk-color:#909090;--spectrum-fieldlabel-side-text-color:#b9b9b9;--spectrum-fieldlabel-side-asterisk-color-disabled:#6e6e6e;--spectrum-fieldlabel-side-text-color-disabled:#6e6e6e;--spectrum-label-colored-gray-background-color:#747474;--spectrum-label-colored-green-background-color:#268e6c;--spectrum-label-colored-blue-background-color:#1473e6;--spectrum-label-colored-red-background-color:#d7373f;--spectrum-label-colored-seafoam-background-color:#1b959a;--spectrum-label-colored-fuchsia-background-color:#c038cc;--spectrum-label-colored-orange-background-color:#da7b11;--spectrum-label-colored-yellow-background-color:#dfbf00;--spectrum-label-colored-text-color:#fff;--spectrum-label-colored-background-color-disabled:#3e3e3e;--spectrum-label-text-color:#b9b9b9;--spectrum-label-text-color-disabled:#6e6e6e;--spectrum-label-over-background-text-color:#fff;--spectrum-label-over-background-text-color-disabled:#fff;--spectrum-label-large-text-color:#b9b9b9;--spectrum-label-large-text-color-disabled:#6e6e6e;--spectrum-label-large-over-background-text-color:#fff;--spectrum-label-large-over-background-text-color-disabled:#fff;--spectrum-link-text-color:#4b9cf5;--spectrum-link-underline-color:transparent;--spectrum-link-text-color-hover:#4b9cf5;--spectrum-link-underline-color-hover:#4b9cf5;--spectrum-link-text-color-down:#5aa9fa;--spectrum-link-underline-color-down:#5aa9fa;--spectrum-link-text-color-key-focus:#4b9cf5;--spectrum-link-underline-color-key-focus:#4b9cf5;--spectrum-link-text-color-disabled:#6e6e6e;--spectrum-link-underline-color-disabled:transparent;--spectrum-link-over-background-text-color:#fff;--spectrum-link-over-background-underline-color:#fff;--spectrum-link-over-background-text-color-hover:#fff;--spectrum-link-over-background-underline-color-hover:#fff;--spectrum-link-over-background-text-color-down:#fff;--spectrum-link-over-background-underline-color-down:#fff;--spectrum-link-over-background-text-color-key-focus:#fff;--spectrum-link-over-background-underline-color-key-focus:#fff;--spectrum-link-over-background-text-color-disabled:hsla(0,0%,100%,0.5);--spectrum-link-over-background-underline-color-disabled:transparent;--spectrum-link-quiet-text-color:#e3e3e3;--spectrum-link-quiet-underline-color:#e3e3e3;--spectrum-link-quiet-text-color-hover:#fff;--spectrum-link-quiet-underline-color-hover:#fff;--spectrum-link-quiet-text-color-down:#fff;--spectrum-link-quiet-underline-color-down:#fff;--spectrum-link-quiet-text-color-key-focus:#fff;--spectrum-link-quiet-underline-color-key-focus:#fff;--spectrum-link-quiet-text-color-mouse-focus:#fff;--spectrum-link-quiet-text-color-disabled:#6e6e6e;--spectrum-link-quiet-underline-color-disabled:transparent;--spectrum-popover-background-color:#252525;--spectrum-popover-border-color:#5a5a5a;--spectrum-popover-shadow-color:rgba(0,0,0,0.5);--spectrum-radio-text-color:#e3e3e3;--spectrum-radio-circle-border-color:#909090;--spectrum-radio-circle-background-color:#2f2f2f;--spectrum-radio-circle-dot-color:#2f2f2f;--spectrum-radio-text-color-hover:#fff;--spectrum-radio-circle-border-color-hover:#b9b9b9;--spectrum-radio-text-color-down:#fff;--spectrum-radio-circle-border-color-down:#e3e3e3;--spectrum-radio-text-color-key-focus:#4b9cf5;--spectrum-radio-circle-border-color-key-focus:#2680eb;--spectrum-radio-text-color-disabled:#6e6e6e;--spectrum-radio-circle-border-color-disabled:#5a5a5a;--spectrum-radio-text-color-selected:#e3e3e3;--spectrum-radio-circle-border-color-selected:#378ef0;--spectrum-radio-text-color-selected-hover:#fff;--spectrum-radio-circle-border-color-selected-hover:#4b9cf5;--spectrum-radio-text-color-selected-down:#fff;--spectrum-radio-circle-border-color-selected-down:#5aa9fa;--spectrum-radio-text-color-selected-key-focus:#4b9cf5;--spectrum-radio-circle-border-color-selected-key-focus:#2680eb;--spectrum-radio-text-color-selected-disabled:#6e6e6e;--spectrum-radio-circle-border-color-selected-disabled:#5a5a5a;--spectrum-radio-text-color-error:#f76d74;--spectrum-radio-circle-border-color-error:#ec5b62;--spectrum-radio-text-color-error-hover:#ff7b82;--spectrum-radio-circle-border-color-error-hover:#f76d74;--spectrum-radio-text-color-error-down:#ff7b82;--spectrum-radio-circle-border-color-error-down:#ff7b82;--spectrum-radio-text-color-error-key-focus:#4b9cf5;--spectrum-radio-circle-border-color-error-key-focus:#2680eb;--spectrum-radio-text-color-error-disabled:#6e6e6e;--spectrum-radio-circle-border-color-error-disabled:#5a5a5a;--spectrum-radio-text-color-error-selected:#f76d74;--spectrum-radio-circle-border-color-error-selected:#ec5b62;--spectrum-radio-text-color-error-selected-hover:#ff7b82;--spectrum-radio-circle-border-color-error-selected-hover:#f76d74;--spectrum-radio-text-color-error-selected-down:#ff7b82;--spectrum-radio-circle-border-color-error-selected-down:#ff7b82;--spectrum-radio-text-color-error-selected-key-focus:#4b9cf5;--spectrum-radio-circle-border-color-error-selected-key-focus:#2680eb;--spectrum-radio-text-color-error-selected-disabled:#6e6e6e;--spectrum-radio-circle-border-color-error-selected-disabled:#5a5a5a;--spectrum-radio-quiet-text-color:#e3e3e3;--spectrum-radio-quiet-circle-border-color:#909090;--spectrum-radio-quiet-circle-background-color:#2f2f2f;--spectrum-radio-quiet-circle-dot-color:#2f2f2f;--spectrum-radio-quiet-text-color-hover:#fff;--spectrum-radio-quiet-circle-border-color-hover:#b9b9b9;--spectrum-radio-quiet-text-color-down:#fff;--spectrum-radio-quiet-circle-border-color-down:#e3e3e3;--spectrum-radio-quiet-text-color-key-focus:#4b9cf5;--spectrum-radio-quiet-circle-border-color-key-focus:#2680eb;--spectrum-radio-quiet-text-color-disabled:#6e6e6e;--spectrum-radio-quiet-circle-border-color-disabled:#5a5a5a;--spectrum-radio-quiet-text-color-selected:#e3e3e3;--spectrum-radio-quiet-circle-border-color-selected:#b9b9b9;--spectrum-radio-quiet-text-color-selected-hover:#fff;--spectrum-radio-quiet-circle-border-color-selected-hover:#e3e3e3;--spectrum-radio-quiet-text-color-selected-down:#fff;--spectrum-radio-quiet-circle-border-color-selected-down:#fff;--spectrum-radio-quiet-text-color-selected-key-focus:#4b9cf5;--spectrum-radio-quiet-circle-border-color-selected-key-focus:#2680eb;--spectrum-radio-quiet-text-color-selected-disabled:#6e6e6e;--spectrum-radio-quiet-circle-border-color-selected-disabled:#5a5a5a;--spectrum-radio-quiet-text-color-error:#f76d74;--spectrum-radio-quiet-circle-border-color-error:#ec5b62;--spectrum-radio-quiet-text-color-error-hover:#ff7b82;--spectrum-radio-quiet-circle-border-color-error-hover:#f76d74;--spectrum-radio-quiet-text-color-error-down:#ff7b82;--spectrum-radio-quiet-circle-border-color-error-down:#ff7b82;--spectrum-radio-quiet-text-color-error-key-focus:#4b9cf5;--spectrum-radio-quiet-circle-border-color-error-key-focus:#2680eb;--spectrum-radio-quiet-text-color-error-disabled:#6e6e6e;--spectrum-radio-quiet-circle-border-color-error-disabled:#5a5a5a;--spectrum-radio-quiet-text-color-error-selected:#f76d74;--spectrum-radio-quiet-circle-border-color-error-selected:#ec5b62;--spectrum-radio-quiet-text-color-error-selected-hover:#ff7b82;--spectrum-radio-quiet-circle-border-color-error-selected-hover:#f76d74;--spectrum-radio-quiet-text-color-error-selected-down:#ff7b82;--spectrum-radio-quiet-circle-border-color-error-selected-down:#ff7b82;--spectrum-radio-quiet-text-color-error-selected-key-focus:#4b9cf5;--spectrum-radio-quiet-circle-border-color-error-selected-key-focus:#2680eb;--spectrum-radio-quiet-text-color-error-selected-disabled:#6e6e6e;--spectrum-radio-quiet-circle-border-color-error-selected-disabled:#5a5a5a;--spectrum-slider-color-handle-outset-border-color:rgba(0,0,0,0.05);--spectrum-slider-color-handle-inset-border-color:rgba(0,0,0,0.05);--spectrum-slider-color-handle-border-color:#252525;--spectrum-slider-color-handle-color:transparent;--spectrum-slider-color-track-background-color-gradient-start:#2680eb;--spectrum-slider-color-track-background-color-gradient-end:#5aa9fa;--spectrum-slider-color-track-border-color:rgba(0,0,0,0.05);--spectrum-slider-color-handle-outset-border-color-key-focus:rgba(0,0,0,0.05);--spectrum-slider-color-track-color-disabled:#3e3e3e;--spectrum-slider-color-handle-border-color-disabled:#5a5a5a;--spectrum-slider-color-handle-color-disabled:transparent;--spectrum-slider-handle-border-color:#b9b9b9;--spectrum-slider-handle-background-color:transparent;--spectrum-slider-track-color:#4a4a4a;--spectrum-slider-handle-border-color-hover:#e3e3e3;--spectrum-slider-handle-background-color-hover:transparent;--spectrum-slider-track-color-hover:#4a4a4a;--spectrum-slider-handle-border-color-down:#e3e3e3;--spectrum-slider-handle-background-color-down:transparent;--spectrum-slider-track-color-down:#4a4a4a;--spectrum-slider-radial-reaction-color-down:hsla(0,0%,89%,0.6);--spectrum-slider-handle-border-color-key-focus:#2680eb;--spectrum-slider-handle-background-color-key-focus:#2680eb;--spectrum-slider-track-color-key-focus:#4a4a4a;--spectrum-slider-handle-border-color-disabled:#5a5a5a;--spectrum-slider-handle-background-color-disabled:transparent;--spectrum-slider-track-color-disabled:#4a4a4a;--spectrum-slider-editable-handle-border-color:#b9b9b9;--spectrum-slider-editable-handle-background-color:transparent;--spectrum-slider-editable-track-color:#4a4a4a;--spectrum-slider-editable-handle-border-color-hover:#e3e3e3;--spectrum-slider-editable-handle-background-color-hover:transparent;--spectrum-slider-editable-track-color-hover:#4a4a4a;--spectrum-slider-editable-handle-border-color-down:#e3e3e3;--spectrum-slider-editable-handle-background-color-down:transparent;--spectrum-slider-editable-track-color-down:#4a4a4a;--spectrum-slider-editable-radial-reaction-color-down:hsla(0,0%,89%,0.6);--spectrum-slider-editable-handle-border-color-key-focus:#2680eb;--spectrum-slider-editable-handle-background-color-key-focus:#2680eb;--spectrum-slider-editable-track-color-key-focus:#4a4a4a;--spectrum-slider-editable-handle-border-color-disabled:#5a5a5a;--spectrum-slider-editable-handle-background-color-disabled:transparent;--spectrum-slider-editable-track-color-disabled:#4a4a4a;--spectrum-slider-fill-handle-border-color:#b9b9b9;--spectrum-slider-fill-handle-background-color:transparent;--spectrum-slider-fill-track-color:#b9b9b9;--spectrum-slider-fill-handle-border-color-hover:#e3e3e3;--spectrum-slider-fill-handle-background-color-hover:transparent;--spectrum-slider-fill-track-color-hover:#4a4a4a;--spectrum-slider-fill-handle-border-color-down:#e3e3e3;--spectrum-slider-fill-handle-background-color-down:transparent;--spectrum-slider-fill-track-color-down:#4a4a4a;--spectrum-slider-fill-radial-reaction-color-down:hsla(0,0%,89%,0.6);--spectrum-slider-fill-handle-border-color-key-focus:#2680eb;--spectrum-slider-fill-handle-background-color-key-focus:#2680eb;--spectrum-slider-fill-track-color-key-focus:#4a4a4a;--spectrum-slider-fill-handle-border-color-disabled:#5a5a5a;--spectrum-slider-fill-handle-background-color-disabled:transparent;--spectrum-slider-fill-track-color-disabled:#4a4a4a;--spectrum-slider-player-track-buffer-color:#6e6e6e;--spectrum-slider-player-track-buffer-color-disabled:#4a4a4a;--spectrum-slider-ramp-track-color-disabled:#3e3e3e;--spectrum-slider-tick-mark-color:#4a4a4a;--spectrum-switch-text-color:#e3e3e3;--spectrum-switch-handle-border-color:#909090;--spectrum-switch-handle-background-color:#2f2f2f;--spectrum-switch-track-color:#4a4a4a;--spectrum-switch-text-color-hover:#fff;--spectrum-switch-handle-border-color-hover:#b9b9b9;--spectrum-switch-handle-background-color-hover:#2f2f2f;--spectrum-switch-track-color-hover:#4a4a4a;--spectrum-switch-text-color-down:#fff;--spectrum-switch-handle-border-color-down:#e3e3e3;--spectrum-switch-handle-background-color-down:#2f2f2f;--spectrum-switch-track-color-down:#4a4a4a;--spectrum-switch-text-color-key-focus:#4b9cf5;--spectrum-switch-handle-border-color-key-focus:#2680eb;--spectrum-switch-handle-background-color-key-focus:#2f2f2f;--spectrum-switch-track-color-key-focus:#4a4a4a;--spectrum-switch-text-color-disabled:#6e6e6e;--spectrum-switch-handle-border-color-disabled:#5a5a5a;--spectrum-switch-handle-background-color-disabled:#2f2f2f;--spectrum-switch-track-color-disabled:#4a4a4a;--spectrum-switch-text-color-selected:#e3e3e3;--spectrum-switch-handle-border-color-selected:#378ef0;--spectrum-switch-handle-background-color-selected:#2f2f2f;--spectrum-switch-track-color-selected:#378ef0;--spectrum-switch-text-color-selected-hover:#fff;--spectrum-switch-handle-border-color-selected-hover:#4b9cf5;--spectrum-switch-handle-background-color-selected-hover:#2f2f2f;--spectrum-switch-track-color-selected-hover:#4b9cf5;--spectrum-switch-text-color-selected-down:#fff;--spectrum-switch-handle-border-color-selected-down:#5aa9fa;--spectrum-switch-handle-background-color-selected-down:#2f2f2f;--spectrum-switch-track-color-selected-down:#5aa9fa;--spectrum-switch-text-color-selected-key-focus:#4b9cf5;--spectrum-switch-track-color-selected-key-focus:#2680eb;--spectrum-switch-handle-background-color-selected-key-focus:#2f2f2f;--spectrum-switch-handle-border-color-selected-key-focus:#2680eb;--spectrum-switch-text-color-selected-disabled:#6e6e6e;--spectrum-switch-track-color-selected-disabled:#5a5a5a;--spectrum-switch-handle-border-color-selected-disabled:#5a5a5a;--spectrum-switch-handle-background-color-selected-disabled:#2f2f2f;--spectrum-switch-text-color-error:#f76d74;--spectrum-switch-track-color-error:#ec5b62;--spectrum-switch-handle-border-color-error:#ec5b62;--spectrum-switch-handle-background-color-error:#2f2f2f;--spectrum-switch-text-color-error-hover:#ff7b82;--spectrum-switch-track-color-error-hover:#f76d74;--spectrum-switch-handle-border-color-error-hover:#f76d74;--spectrum-switch-handle-background-color-error-hover:#2f2f2f;--spectrum-switch-text-color-error-down:#ff7b82;--spectrum-switch-track-color-error-down:#ff7b82;--spectrum-switch-handle-border-color-error-down:#ff7b82;--spectrum-switch-handle-background-color-error-down:#2f2f2f;--spectrum-switch-text-color-error-key-focus:#4b9cf5;--spectrum-switch-handle-border-color-error-key-focus:#2680eb;--spectrum-switch-handle-background-color-error-key-focus:#2f2f2f;--spectrum-switch-track-color-error-key-focus:#4a4a4a;--spectrum-switch-text-color-error-disabled:#6e6e6e;--spectrum-switch-handle-border-color-error-disabled:#5a5a5a;--spectrum-switch-handle-background-color-error-disabled:#2f2f2f;--spectrum-switch-track-color-error-disabled:#4a4a4a;--spectrum-switch-text-color-error-selected:#f76d74;--spectrum-switch-track-color-error-selected:#ec5b62;--spectrum-switch-handle-border-color-error-selected:#ec5b62;--spectrum-switch-handle-background-color-error-selected:#2f2f2f;--spectrum-switch-text-color-error-selected-hover:#ff7b82;--spectrum-switch-track-color-error-selected-hover:#f76d74;--spectrum-switch-handle-border-color-error-selected-hover:#f76d74;--spectrum-switch-handle-background-color-error-selected-hover:#2f2f2f;--spectrum-switch-text-color-error-selected-down:#ff7b82;--spectrum-switch-track-color-error-selected-down:#ff7b82;--spectrum-switch-handle-border-color-error-selected-down:#ff7b82;--spectrum-switch-handle-background-color-error-selected-down:#2f2f2f;--spectrum-switch-text-color-error-selected-key-focus:#4b9cf5;--spectrum-switch-handle-border-color-error-selected-key-focus:#2680eb;--spectrum-switch-handle-background-color-error-selected-key-focus:#2f2f2f;--spectrum-switch-track-color-error-selected-key-focus:#4a4a4a;--spectrum-switch-text-color-error-selected-disabled:#6e6e6e;--spectrum-switch-track-color-error-selected-disabled:#5a5a5a;--spectrum-switch-handle-border-color-error-selected-disabled:#5a5a5a;--spectrum-switch-handle-background-color-error-selected-disabled:#2f2f2f;--spectrum-switch-track-color-disabled-selected:#5a5a5a;--spectrum-switch-quiet-text-color:#e3e3e3;--spectrum-switch-quiet-handle-border-color:#909090;--spectrum-switch-quiet-handle-background-color:#2f2f2f;--spectrum-switch-quiet-track-color:#4a4a4a;--spectrum-switch-quiet-text-color-hover:#fff;--spectrum-switch-quiet-handle-border-color-hover:#b9b9b9;--spectrum-switch-quiet-handle-background-color-hover:#2f2f2f;--spectrum-switch-quiet-track-color-hover:#4a4a4a;--spectrum-switch-quiet-text-color-down:#fff;--spectrum-switch-quiet-handle-border-color-down:#e3e3e3;--spectrum-switch-quiet-handle-background-color-down:#2f2f2f;--spectrum-switch-quiet-track-color-down:#4a4a4a;--spectrum-switch-quiet-text-color-key-focus:#4b9cf5;--spectrum-switch-quiet-handle-border-color-key-focus:#2680eb;--spectrum-switch-quiet-handle-background-color-key-focus:#2f2f2f;--spectrum-switch-quiet-track-color-key-focus:#4a4a4a;--spectrum-switch-quiet-text-color-disabled:#6e6e6e;--spectrum-switch-quiet-handle-border-color-disabled:#5a5a5a;--spectrum-switch-quiet-handle-background-color-disabled:#2f2f2f;--spectrum-switch-quiet-track-color-disabled:#4a4a4a;--spectrum-switch-quiet-text-color-selected:#e3e3e3;--spectrum-switch-quiet-handle-border-color-selected:#b9b9b9;--spectrum-switch-quiet-handle-background-color-selected:#2f2f2f;--spectrum-switch-quiet-track-color-selected:#b9b9b9;--spectrum-switch-quiet-text-color-selected-hover:#fff;--spectrum-switch-quiet-handle-border-color-selected-hover:#e3e3e3;--spectrum-switch-quiet-handle-background-color-selected-hover:#2f2f2f;--spectrum-switch-quiet-track-color-selected-hover:#e3e3e3;--spectrum-switch-quiet-text-color-selected-down:#fff;--spectrum-switch-quiet-handle-border-color-selected-down:#fff;--spectrum-switch-quiet-handle-background-color-selected-down:#2f2f2f;--spectrum-switch-quiet-track-color-selected-down:#fff;--spectrum-switch-quiet-text-color-selected-key-focus:#4b9cf5;--spectrum-switch-quiet-track-color-selected-key-focus:#2680eb;--spectrum-switch-quiet-handle-background-color-selected-key-focus:#2f2f2f;--spectrum-switch-quiet-handle-border-color-selected-key-focus:#2680eb;--spectrum-switch-quiet-text-color-selected-disabled:#6e6e6e;--spectrum-switch-quiet-track-color-selected-disabled:#5a5a5a;--spectrum-switch-quiet-handle-border-color-selected-disabled:#5a5a5a;--spectrum-switch-quiet-handle-background-color-selected-disabled:#2f2f2f;--spectrum-switch-quiet-text-color-error:#f76d74;--spectrum-switch-quiet-track-color-error:#ec5b62;--spectrum-switch-quiet-handle-border-color-error:#ec5b62;--spectrum-switch-quiet-handle-background-color-error:#2f2f2f;--spectrum-switch-quiet-text-color-error-hover:#ff7b82;--spectrum-switch-quiet-track-color-error-hover:#f76d74;--spectrum-switch-quiet-handle-border-color-error-hover:#f76d74;--spectrum-switch-quiet-handle-background-color-error-hover:#2f2f2f;--spectrum-switch-quiet-text-color-error-down:#ff7b82;--spectrum-switch-quiet-track-color-error-down:#ff7b82;--spectrum-switch-quiet-handle-border-color-error-down:#ff7b82;--spectrum-switch-quiet-handle-background-color-error-down:#2f2f2f;--spectrum-switch-quiet-text-color-error-key-focus:#4b9cf5;--spectrum-switch-quiet-handle-border-color-error-key-focus:#2680eb;--spectrum-switch-quiet-handle-background-color-error-key-focus:#2f2f2f;--spectrum-switch-quiet-track-color-error-key-focus:#4a4a4a;--spectrum-switch-quiet-text-color-error-disabled:#6e6e6e;--spectrum-switch-quiet-handle-border-color-error-disabled:#5a5a5a;--spectrum-switch-quiet-handle-background-color-error-disabled:#2f2f2f;--spectrum-switch-quiet-track-color-error-disabled:#4a4a4a;--spectrum-switch-quiet-text-color-error-selected:#f76d74;--spectrum-switch-quiet-track-color-error-selected:#ec5b62;--spectrum-switch-quiet-handle-border-color-error-selected:#ec5b62;--spectrum-switch-quiet-handle-background-color-error-selected:#2f2f2f;--spectrum-switch-quiet-text-color-error-selected-hover:#ff7b82;--spectrum-switch-quiet-track-color-error-selected-hover:#f76d74;--spectrum-switch-quiet-handle-border-color-error-selected-hover:#f76d74;--spectrum-switch-quiet-handle-background-color-error-selected-hover:#2f2f2f;--spectrum-switch-quiet-text-color-error-selected-down:#ff7b82;--spectrum-switch-quiet-track-color-error-selected-down:#ff7b82;--spectrum-switch-quiet-handle-border-color-error-selected-down:#ff7b82;--spectrum-switch-quiet-handle-background-color-error-selected-down:#2f2f2f;--spectrum-switch-quiet-text-color-error-selected-key-focus:#4b9cf5;--spectrum-switch-quiet-handle-border-color-error-selected-key-focus:#2680eb;--spectrum-switch-quiet-handle-background-color-error-selected-key-focus:#2f2f2f;--spectrum-switch-quiet-track-color-error-selected-key-focus:#4a4a4a;--spectrum-switch-quiet-text-color-error-selected-disabled:#6e6e6e;--spectrum-switch-quiet-track-color-error-selected-disabled:#5a5a5a;--spectrum-switch-quiet-handle-border-color-error-selected-disabled:#5a5a5a;--spectrum-switch-quiet-handle-background-color-error-selected-disabled:#2f2f2f;--spectrum-switch-quiet-track-color-disabled-selected:#5a5a5a;--spectrum-tabs-compact-text-color:#b9b9b9;--spectrum-tabs-compact-icon-color:#b9b9b9;--spectrum-tabs-compact-selection-indicator-color:#fff;--spectrum-tabs-compact-focus-ring-color:#2680eb;--spectrum-tabs-compact-rule-color:transparent;--spectrum-tabs-compact-text-color-hover:#fff;--spectrum-tabs-compact-icon-color-hover:#fff;--spectrum-tabs-compact-text-color-down:#fff;--spectrum-tabs-compact-icon-color-down:#fff;--spectrum-tabs-compact-text-color-key-focus:#fff;--spectrum-tabs-compact-icon-color-key-focus:#fff;--spectrum-tabs-compact-text-color-mouse-focus:#fff;--spectrum-tabs-compact-text-color-disabled:#6e6e6e;--spectrum-tabs-compact-icon-color-disabled:#5a5a5a;--spectrum-tabs-compact-text-color-selected:#fff;--spectrum-tabs-compact-icon-color-selected:#fff;--spectrum-tabs-compact-text-color-selected-hover:#fff;--spectrum-tabs-compact-icon-color-selected-hover:#fff;--spectrum-tabs-compact-text-color-selected-down:#fff;--spectrum-tabs-compact-icon-color-selected-down:#fff;--spectrum-tabs-compact-text-color-selected-key-focus:#fff;--spectrum-tabs-compact-icon-color-selected-key-focus:#fff;--spectrum-tabs-compact-text-color-selected-disabled:#6e6e6e;--spectrum-tabs-compact-icon-color-selected-disabled:#5a5a5a;--spectrum-tabs-compact-vertical-text-color:#b9b9b9;--spectrum-tabs-compact-vertical-icon-color:#b9b9b9;--spectrum-tabs-compact-vertical-selection-indicator-color:#fff;--spectrum-tabs-compact-vertical-focus-ring-color:#2680eb;--spectrum-tabs-compact-vertical-rule-color:transparent;--spectrum-tabs-compact-vertical-text-color-hover:#fff;--spectrum-tabs-compact-vertical-icon-color-hover:#fff;--spectrum-tabs-compact-vertical-text-color-down:#fff;--spectrum-tabs-compact-vertical-icon-color-down:#fff;--spectrum-tabs-compact-vertical-text-color-key-focus:#fff;--spectrum-tabs-compact-vertical-icon-color-key-focus:#fff;--spectrum-tabs-compact-vertical-text-color-mouse-focus:#fff;--spectrum-tabs-compact-vertical-text-color-disabled:#6e6e6e;--spectrum-tabs-compact-vertical-icon-color-disabled:#5a5a5a;--spectrum-tabs-compact-vertical-text-color-selected:#fff;--spectrum-tabs-compact-vertical-icon-color-selected:#fff;--spectrum-tabs-compact-vertical-text-color-selected-hover:#fff;--spectrum-tabs-compact-vertical-icon-color-selected-hover:#fff;--spectrum-tabs-compact-vertical-text-color-selected-down:#fff;--spectrum-tabs-compact-vertical-icon-color-selected-down:#fff;--spectrum-tabs-compact-vertical-text-color-selected-key-focus:#fff;--spectrum-tabs-compact-vertical-icon-color-selected-key-focus:#fff;--spectrum-tabs-compact-vertical-text-color-selected-disabled:#6e6e6e;--spectrum-tabs-compact-vertical-icon-color-selected-disabled:#5a5a5a;--spectrum-tabs-text-color:#b9b9b9;--spectrum-tabs-icon-color:#b9b9b9;--spectrum-tabs-selection-indicator-color:#fff;--spectrum-tabs-focus-ring-color:#2680eb;--spectrum-tabs-rule-color:#3e3e3e;--spectrum-tabs-text-color-hover:#fff;--spectrum-tabs-icon-color-hover:#fff;--spectrum-tabs-text-color-down:#fff;--spectrum-tabs-icon-color-down:#fff;--spectrum-tabs-text-color-key-focus:#fff;--spectrum-tabs-icon-color-key-focus:#fff;--spectrum-tabs-text-color-mouse-focus:#fff;--spectrum-tabs-text-color-disabled:#6e6e6e;--spectrum-tabs-icon-color-disabled:#5a5a5a;--spectrum-tabs-text-color-selected:#fff;--spectrum-tabs-icon-color-selected:#fff;--spectrum-tabs-text-color-selected-hover:#fff;--spectrum-tabs-icon-color-selected-hover:#fff;--spectrum-tabs-text-color-selected-down:#fff;--spectrum-tabs-icon-color-selected-down:#fff;--spectrum-tabs-text-color-selected-key-focus:#fff;--spectrum-tabs-icon-color-selected-key-focus:#fff;--spectrum-tabs-text-color-selected-disabled:#6e6e6e;--spectrum-tabs-icon-color-selected-disabled:#5a5a5a;--spectrum-tabs-quiet-text-color:#b9b9b9;--spectrum-tabs-quiet-icon-color:#b9b9b9;--spectrum-tabs-quiet-selection-indicator-color:#fff;--spectrum-tabs-quiet-focus-ring-color:#2680eb;--spectrum-tabs-quiet-rule-color:transparent;--spectrum-tabs-quiet-text-color-hover:#fff;--spectrum-tabs-quiet-icon-color-hover:#fff;--spectrum-tabs-quiet-text-color-down:#fff;--spectrum-tabs-quiet-icon-color-down:#fff;--spectrum-tabs-quiet-text-color-key-focus:#fff;--spectrum-tabs-quiet-icon-color-key-focus:#fff;--spectrum-tabs-quiet-text-color-mouse-focus:#fff;--spectrum-tabs-quiet-text-color-disabled:#6e6e6e;--spectrum-tabs-quiet-icon-color-disabled:#5a5a5a;--spectrum-tabs-quiet-text-color-selected:#fff;--spectrum-tabs-quiet-icon-color-selected:#fff;--spectrum-tabs-quiet-text-color-selected-hover:#fff;--spectrum-tabs-quiet-icon-color-selected-hover:#fff;--spectrum-tabs-quiet-text-color-selected-down:#fff;--spectrum-tabs-quiet-icon-color-selected-down:#fff;--spectrum-tabs-quiet-text-color-selected-key-focus:#fff;--spectrum-tabs-quiet-icon-color-selected-key-focus:#fff;--spectrum-tabs-quiet-text-color-selected-disabled:#6e6e6e;--spectrum-tabs-quiet-icon-color-selected-disabled:#5a5a5a;--spectrum-tabs-quiet-compact-text-color:#b9b9b9;--spectrum-tabs-quiet-compact-icon-color:#b9b9b9;--spectrum-tabs-quiet-compact-selection-indicator-color:#fff;--spectrum-tabs-quiet-compact-focus-ring-color:#2680eb;--spectrum-tabs-quiet-compact-rule-color:transparent;--spectrum-tabs-quiet-compact-text-color-hover:#fff;--spectrum-tabs-quiet-compact-icon-color-hover:#fff;--spectrum-tabs-quiet-compact-text-color-down:#fff;--spectrum-tabs-quiet-compact-icon-color-down:#fff;--spectrum-tabs-quiet-compact-text-color-key-focus:#fff;--spectrum-tabs-quiet-compact-icon-color-key-focus:#fff;--spectrum-tabs-quiet-compact-text-color-mouse-focus:#fff;--spectrum-tabs-quiet-compact-text-color-disabled:#6e6e6e;--spectrum-tabs-quiet-compact-icon-color-disabled:#5a5a5a;--spectrum-tabs-quiet-compact-text-color-selected:#fff;--spectrum-tabs-quiet-compact-icon-color-selected:#fff;--spectrum-tabs-quiet-compact-text-color-selected-hover:#fff;--spectrum-tabs-quiet-compact-icon-color-selected-hover:#fff;--spectrum-tabs-quiet-compact-text-color-selected-down:#fff;--spectrum-tabs-quiet-compact-icon-color-selected-down:#fff;--spectrum-tabs-quiet-compact-text-color-selected-key-focus:#fff;--spectrum-tabs-quiet-compact-icon-color-selected-key-focus:#fff;--spectrum-tabs-quiet-compact-text-color-selected-disabled:#6e6e6e;--spectrum-tabs-quiet-compact-icon-color-selected-disabled:#5a5a5a;--spectrum-tabs-quiet-vertical-text-color:#b9b9b9;--spectrum-tabs-quiet-vertical-icon-color:#b9b9b9;--spectrum-tabs-quiet-vertical-selection-indicator-color:#fff;--spectrum-tabs-quiet-vertical-focus-ring-color:#2680eb;--spectrum-tabs-quiet-vertical-rule-color:transparent;--spectrum-tabs-quiet-vertical-text-color-hover:#fff;--spectrum-tabs-quiet-vertical-icon-color-hover:#fff;--spectrum-tabs-quiet-vertical-text-color-down:#fff;--spectrum-tabs-quiet-vertical-icon-color-down:#fff;--spectrum-tabs-quiet-vertical-text-color-key-focus:#fff;--spectrum-tabs-quiet-vertical-icon-color-key-focus:#fff;--spectrum-tabs-quiet-vertical-text-color-mouse-focus:#fff;--spectrum-tabs-quiet-vertical-text-color-disabled:#6e6e6e;--spectrum-tabs-quiet-vertical-icon-color-disabled:#5a5a5a;--spectrum-tabs-quiet-vertical-text-color-selected:#fff;--spectrum-tabs-quiet-vertical-icon-color-selected:#fff;--spectrum-tabs-quiet-vertical-text-color-selected-hover:#fff;--spectrum-tabs-quiet-vertical-icon-color-selected-hover:#fff;--spectrum-tabs-quiet-vertical-text-color-selected-down:#fff;--spectrum-tabs-quiet-vertical-icon-color-selected-down:#fff;--spectrum-tabs-quiet-vertical-text-color-selected-key-focus:#fff;--spectrum-tabs-quiet-vertical-icon-color-selected-key-focus:#fff;--spectrum-tabs-quiet-vertical-text-color-selected-disabled:#6e6e6e;--spectrum-tabs-quiet-vertical-icon-color-selected-disabled:#5a5a5a;--spectrum-tabs-vertical-text-color:#b9b9b9;--spectrum-tabs-vertical-icon-color:#b9b9b9;--spectrum-tabs-vertical-selection-indicator-color:#fff;--spectrum-tabs-vertical-focus-ring-color:#2680eb;--spectrum-tabs-vertical-rule-color:#3e3e3e;--spectrum-tabs-vertical-text-color-hover:#fff;--spectrum-tabs-vertical-icon-color-hover:#fff;--spectrum-tabs-vertical-text-color-down:#fff;--spectrum-tabs-vertical-icon-color-down:#fff;--spectrum-tabs-vertical-text-color-key-focus:#fff;--spectrum-tabs-vertical-icon-color-key-focus:#fff;--spectrum-tabs-vertical-text-color-mouse-focus:#fff;--spectrum-tabs-vertical-text-color-disabled:#6e6e6e;--spectrum-tabs-vertical-icon-color-disabled:#5a5a5a;--spectrum-tabs-vertical-text-color-selected:#fff;--spectrum-tabs-vertical-icon-color-selected:#fff;--spectrum-tabs-vertical-text-color-selected-hover:#fff;--spectrum-tabs-vertical-icon-color-selected-hover:#fff;--spectrum-tabs-vertical-text-color-selected-down:#fff;--spectrum-tabs-vertical-icon-color-selected-down:#fff;--spectrum-tabs-vertical-text-color-selected-key-focus:#fff;--spectrum-tabs-vertical-icon-color-selected-key-focus:#fff;--spectrum-tabs-vertical-text-color-selected-disabled:#6e6e6e;--spectrum-tabs-vertical-icon-color-selected-disabled:#5a5a5a}:host{display:block}\n"]);

  theme_dark_templateObject = function () {
    return data;
  };

  return data;
}

function theme_dark_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const theme_dark_styles = Object(lit_element["b" /* css */])(theme_dark_templateObject());
/* harmony default export */ var theme_dark = (theme_dark_styles);
// CONCATENATED MODULE: ./src/themes/theme-dark.ts
function themes_theme_dark_templateObject() {
  const data = themes_theme_dark_taggedTemplateLiteral(["\n            <slot></slot>\n        "]);

  themes_theme_dark_templateObject = function () {
    return data;
  };

  return data;
}

function themes_theme_dark_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/


class theme_dark_ThemeDark extends lit_element["a" /* LitElement */] {
  static get styles() {
    return [theme_dark];
  }

  render() {
    return Object(lit_element["c" /* html */])(themes_theme_dark_templateObject());
  }

}
// CONCATENATED MODULE: ./src/themes/scale-medium.css
function scale_medium_templateObject() {
  const data = scale_medium_taggedTemplateLiteral(["\n:host,:root{--spectrum-global-dimension-scale-factor:1;--spectrum-global-dimension-size-0:0px;--spectrum-global-dimension-size-10:1px;--spectrum-global-dimension-size-25:2px;--spectrum-global-dimension-size-40:3px;--spectrum-global-dimension-size-50:4px;--spectrum-global-dimension-size-65:5px;--spectrum-global-dimension-size-75:6px;--spectrum-global-dimension-size-85:7px;--spectrum-global-dimension-size-100:8px;--spectrum-global-dimension-size-115:9px;--spectrum-global-dimension-size-125:10px;--spectrum-global-dimension-size-130:11px;--spectrum-global-dimension-size-150:12px;--spectrum-global-dimension-size-160:13px;--spectrum-global-dimension-size-175:14px;--spectrum-global-dimension-size-200:16px;--spectrum-global-dimension-size-225:18px;--spectrum-global-dimension-size-250:20px;--spectrum-global-dimension-size-300:24px;--spectrum-global-dimension-size-350:28px;--spectrum-global-dimension-size-400:32px;--spectrum-global-dimension-size-450:36px;--spectrum-global-dimension-size-500:40px;--spectrum-global-dimension-size-550:44px;--spectrum-global-dimension-size-600:48px;--spectrum-global-dimension-size-700:56px;--spectrum-global-dimension-size-800:64px;--spectrum-global-dimension-size-900:72px;--spectrum-global-dimension-size-1000:80px;--spectrum-global-dimension-size-1200:96px;--spectrum-global-dimension-size-1600:128px;--spectrum-global-dimension-size-1700:136px;--spectrum-global-dimension-size-2400:192px;--spectrum-global-dimension-size-3000:240px;--spectrum-global-dimension-size-3400:272px;--spectrum-global-dimension-size-3600:288px;--spectrum-global-dimension-size-4600:368px;--spectrum-global-dimension-size-5000:400px;--spectrum-global-dimension-size-6000:480px;--spectrum-global-dimension-font-size-25:10px;--spectrum-global-dimension-font-size-50:11px;--spectrum-global-dimension-font-size-75:12px;--spectrum-global-dimension-font-size-100:14px;--spectrum-global-dimension-font-size-150:15px;--spectrum-global-dimension-font-size-200:16px;--spectrum-global-dimension-font-size-300:18px;--spectrum-global-dimension-font-size-400:20px;--spectrum-global-dimension-font-size-500:22px;--spectrum-global-dimension-font-size-600:25px;--spectrum-global-dimension-font-size-700:28px;--spectrum-global-dimension-font-size-800:32px;--spectrum-global-dimension-font-size-900:36px;--spectrum-global-dimension-font-size-1000:40px;--spectrum-global-dimension-font-size-1100:45px;--spectrum-alias-dropshadow-blur:4px;--spectrum-alias-dropshadow-offset-y:1px;--spectrum-alias-font-size-default:14px;--spectrum-alias-line-height-small:16px;--spectrum-alias-line-height-medium:20px;--spectrum-alias-line-height-large:24px;--spectrum-alias-line-height-xlarge:32px;--spectrum-alias-line-height-xxlarge:48px;--spectrum-alias-layout-label-gap-size:8px;--spectrum-alias-pill-button-text-size:15px;--spectrum-alias-pill-button-text-baseline:11px;--spectrum-alias-border-radius-xsmall:1px;--spectrum-alias-border-radius-small:2px;--spectrum-alias-border-radius-regular:4px;--spectrum-alias-border-radius-medium:8px;--spectrum-alias-border-radius-large:16px;--spectrum-alias-single-line-height:32px;--spectrum-alias-single-line-width:192px;--spectrum-alias-workflow-icon-size:18px;--spectrum-alias-heading-display1-text-size:45px;--spectrum-alias-heading-han-display1-text-size:40px;--spectrum-alias-heading-han-display1-margin-top:36px;--spectrum-alias-heading-display1-margin-top:40px;--spectrum-alias-heading-display2-text-size:40px;--spectrum-alias-heading-display2-margin-top:36px;--spectrum-alias-heading-han-display2-text-size:36px;--spectrum-alias-heading-han-display2-margin-top:32px;--spectrum-alias-heading1-text-size:36px;--spectrum-alias-heading1-margin-top:32px;--spectrum-alias-heading1-han-text-size:32px;--spectrum-alias-heading1-han-margin-top:28px;--spectrum-alias-heading2-text-size:28px;--spectrum-alias-heading2-margin-top:25px;--spectrum-alias-heading2-han-text-size:25px;--spectrum-alias-heading2-han-margin-top:22px;--spectrum-alias-heading3-text-size:22px;--spectrum-alias-heading3-margin-top:20px;--spectrum-alias-heading3-han-text-size:20px;--spectrum-alias-heading3-han-margin-top:18px;--spectrum-alias-heading4-text-size:18px;--spectrum-alias-heading4-margin-top:16px;--spectrum-alias-heading5-text-size:16px;--spectrum-alias-heading5-margin-top:14px;--spectrum-alias-heading6-text-size:14px;--spectrum-alias-heading6-margin-top:12px;--spectrum-banner-border-radius:8px;--spectrum-banner-padding-y:4px;--spectrum-banner-padding-x:8px;--spectrum-banner-text-size:12px;--spectrum-banner-text-line-height:1.3;--spectrum-button-cta-height:32px;--spectrum-button-cta-padding-x:16px;--spectrum-button-cta-text-padding-x:16px;--spectrum-button-cta-icon-padding-left:14px;--spectrum-button-cta-icon-padding-right:8px;--spectrum-button-cta-border-radius:16px;--spectrum-button-cta-border-size:2px;--spectrum-button-cta-text-font-weight:700;--spectrum-button-cta-text-gap:8px;--spectrum-button-cta-text-size:15px;--spectrum-button-cta-text-baseline:11px;--spectrum-button-cta-min-width:72px;--spectrum-button-cta-touch-hit-x:8px;--spectrum-button-cta-touch-hit-y:8px;--spectrum-button-cta-border-size-increase-key-focus:1px;--spectrum-button-over-background-height:32px;--spectrum-button-over-background-padding-x:16px;--spectrum-button-over-background-text-padding-x:16px;--spectrum-button-over-background-icon-padding-left:14px;--spectrum-button-over-background-icon-padding-right:8px;--spectrum-button-over-background-border-radius:16px;--spectrum-button-over-background-border-size:2px;--spectrum-button-over-background-text-font-weight:700;--spectrum-button-over-background-text-gap:8px;--spectrum-button-over-background-text-size:15px;--spectrum-button-over-background-text-baseline:11px;--spectrum-button-over-background-min-width:72px;--spectrum-button-over-background-touch-hit-x:8px;--spectrum-button-over-background-touch-hit-y:8px;--spectrum-button-over-background-border-size-increase-key-focus:1px;--spectrum-button-primary-height:32px;--spectrum-button-primary-padding-x:16px;--spectrum-button-primary-text-padding-x:16px;--spectrum-button-primary-icon-padding-left:14px;--spectrum-button-primary-icon-padding-right:8px;--spectrum-button-primary-border-radius:16px;--spectrum-button-primary-border-size:2px;--spectrum-button-primary-text-font-weight:700;--spectrum-button-primary-text-gap:8px;--spectrum-button-primary-text-size:15px;--spectrum-button-primary-text-baseline:11px;--spectrum-button-primary-min-width:72px;--spectrum-button-primary-touch-hit-x:8px;--spectrum-button-primary-touch-hit-y:8px;--spectrum-button-primary-border-size-increase-key-focus:1px;--spectrum-button-quiet-over-background-height:32px;--spectrum-button-quiet-over-background-padding-x:16px;--spectrum-button-quiet-over-background-text-padding-x:16px;--spectrum-button-quiet-over-background-icon-padding-left:14px;--spectrum-button-quiet-over-background-icon-padding-right:8px;--spectrum-button-quiet-over-background-border-radius:16px;--spectrum-button-quiet-over-background-border-size:0;--spectrum-button-quiet-over-background-text-font-weight:700;--spectrum-button-quiet-over-background-text-gap:8px;--spectrum-button-quiet-over-background-text-size:15px;--spectrum-button-quiet-over-background-text-baseline:11px;--spectrum-button-quiet-over-background-min-width:72px;--spectrum-button-quiet-over-background-touch-hit-x:16px;--spectrum-button-quiet-over-background-touch-hit-y:8px;--spectrum-button-quiet-over-background-cursor-hit-x:16px;--spectrum-button-quiet-over-background-border-size-increase-key-focus:1px;--spectrum-button-quiet-primary-height:32px;--spectrum-button-quiet-primary-padding-x:16px;--spectrum-button-quiet-primary-text-padding-x:16px;--spectrum-button-quiet-primary-icon-padding-left:14px;--spectrum-button-quiet-primary-icon-padding-right:8px;--spectrum-button-quiet-primary-border-radius:16px;--spectrum-button-quiet-primary-border-size:0;--spectrum-button-quiet-primary-text-font-weight:700;--spectrum-button-quiet-primary-text-gap:8px;--spectrum-button-quiet-primary-text-size:15px;--spectrum-button-quiet-primary-text-baseline:11px;--spectrum-button-quiet-primary-min-width:72px;--spectrum-button-quiet-primary-touch-hit-x:16px;--spectrum-button-quiet-primary-touch-hit-y:8px;--spectrum-button-quiet-primary-cursor-hit-x:16px;--spectrum-button-quiet-primary-border-size-increase-key-focus:1px;--spectrum-button-quiet-secondary-height:32px;--spectrum-button-quiet-secondary-padding-x:16px;--spectrum-button-quiet-secondary-text-padding-x:16px;--spectrum-button-quiet-secondary-icon-padding-left:14px;--spectrum-button-quiet-secondary-icon-padding-right:8px;--spectrum-button-quiet-secondary-border-radius:16px;--spectrum-button-quiet-secondary-border-size:0;--spectrum-button-quiet-secondary-text-font-weight:700;--spectrum-button-quiet-secondary-text-gap:8px;--spectrum-button-quiet-secondary-text-size:15px;--spectrum-button-quiet-secondary-text-baseline:11px;--spectrum-button-quiet-secondary-min-width:72px;--spectrum-button-quiet-secondary-touch-hit-x:16px;--spectrum-button-quiet-secondary-touch-hit-y:8px;--spectrum-button-quiet-secondary-cursor-hit-x:16px;--spectrum-button-quiet-secondary-border-size-increase-key-focus:1px;--spectrum-button-quiet-warning-height:32px;--spectrum-button-quiet-warning-padding-x:16px;--spectrum-button-quiet-warning-text-padding-x:16px;--spectrum-button-quiet-warning-icon-padding-left:14px;--spectrum-button-quiet-warning-icon-padding-right:8px;--spectrum-button-quiet-warning-border-radius:16px;--spectrum-button-quiet-warning-border-size:0;--spectrum-button-quiet-warning-text-font-weight:700;--spectrum-button-quiet-warning-text-gap:8px;--spectrum-button-quiet-warning-text-size:15px;--spectrum-button-quiet-warning-text-baseline:11px;--spectrum-button-quiet-warning-min-width:72px;--spectrum-button-quiet-warning-touch-hit-x:16px;--spectrum-button-quiet-warning-touch-hit-y:8px;--spectrum-button-quiet-warning-cursor-hit-x:16px;--spectrum-button-quiet-warning-border-size-increase-key-focus:1px;--spectrum-button-secondary-height:32px;--spectrum-button-secondary-padding-x:16px;--spectrum-button-secondary-text-padding-x:16px;--spectrum-button-secondary-icon-padding-left:14px;--spectrum-button-secondary-icon-padding-right:8px;--spectrum-button-secondary-border-radius:16px;--spectrum-button-secondary-border-size:2px;--spectrum-button-secondary-text-font-weight:700;--spectrum-button-secondary-text-gap:8px;--spectrum-button-secondary-text-size:15px;--spectrum-button-secondary-text-baseline:11px;--spectrum-button-secondary-min-width:72px;--spectrum-button-secondary-touch-hit-x:8px;--spectrum-button-secondary-touch-hit-y:8px;--spectrum-button-secondary-border-size-increase-key-focus:1px;--spectrum-button-warning-height:32px;--spectrum-button-warning-padding-x:16px;--spectrum-button-warning-text-padding-x:16px;--spectrum-button-warning-icon-padding-left:14px;--spectrum-button-warning-icon-padding-right:8px;--spectrum-button-warning-border-radius:16px;--spectrum-button-warning-border-size:2px;--spectrum-button-warning-text-font-weight:700;--spectrum-button-warning-text-gap:8px;--spectrum-button-warning-text-size:15px;--spectrum-button-warning-text-baseline:11px;--spectrum-button-warning-min-width:72px;--spectrum-button-warning-touch-hit-x:8px;--spectrum-button-warning-touch-hit-y:8px;--spectrum-button-warning-border-size-increase-key-focus:1px;--spectrum-card-min-width:240px;--spectrum-card-border-radius:4px;--spectrum-card-coverphoto-height:136px;--spectrum-card-coverphoto-border-bottom-size:1px;--spectrum-card-body-padding-top:20px;--spectrum-card-body-padding-right:24px;--spectrum-card-body-padding-left:24px;--spectrum-card-body-padding-bottom:20px;--spectrum-card-checkbox-margin:16px;--spectrum-card-body-header-height:18px;--spectrum-card-body-content-height:14px;--spectrum-card-body-content-margin-top:6px;--spectrum-card-title-padding-right:8px;--spectrum-card-title-text-size:14px;--spectrum-card-subtitle-text-size:11px;--spectrum-card-subtitle-padding-top:4px;--spectrum-card-subtitle-padding-right:8px;--spectrum-card-subtitle-letter-spacing:0.06em;--spectrum-card-actions-margin:10px;--spectrum-card-footer-padding-top:14px;--spectrum-card-footer-border-top-size:1px;--spectrum-card-border-size:1px;--spectrum-card-border-size-key-focus:2px;--spectrum-card-quiet-border-radius:4px;--spectrum-card-quiet-border-size:1px;--spectrum-card-quiet-min-size:136px;--spectrum-card-quiet-checkbox-margin:16px;--spectrum-card-quiet-preview-padding:20px;--spectrum-card-quiet-body-margin-top:14px;--spectrum-card-quiet-body-header-height:18px;--spectrum-card-quiet-body-header-margin-top:14px;--spectrum-card-quiet-small-border-radius:4px;--spectrum-card-quiet-small-border-size:1px;--spectrum-card-quiet-small-body-header-height:12px;--spectrum-card-quiet-small-body-margin-top:8px;--spectrum-card-quiet-small-preview-padding:12px;--spectrum-card-quiet-small-checkbox-margin:10px;--spectrum-card-quiet-small-min-size:72px;--spectrum-card-quiet-small-title-text-size:14px;--spectrum-card-quiet-small-body-header-margin-top:14px;--spectrum-dropzone-padding:72px;--spectrum-dropzone-border-width:2px;--spectrum-dropzone-border-radius:4px;--spectrum-dropzone-content-text-size:14px;--spectrum-dropzone-icon-margin-y:14px;--spectrum-fieldlabel-text-font-family:adobe-clean,\"Source Sans Pro\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Trebuchet MS\",\"Lucida Grande\",sans-serif;--spectrum-fieldlabel-text-font-style:normal;--spectrum-fieldlabel-text-font-weight:400;--spectrum-fieldlabel-text-line-height:1.3;--spectrum-fieldlabel-text-letter-spacing:0;--spectrum-fieldlabel-text-transform:none;--spectrum-fieldlabel-text-size:12px;--spectrum-fieldlabel-asterisk-size:8px;--spectrum-fieldlabel-asterisk-gap:2px;--spectrum-fieldlabel-asterisk-margin-y:4px;--spectrum-fieldlabel-padding-top:4px;--spectrum-fieldlabel-padding-bottom:5px;--spectrum-fieldlabel-side-text-font-family:adobe-clean,\"Source Sans Pro\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Trebuchet MS\",\"Lucida Grande\",sans-serif;--spectrum-fieldlabel-side-text-font-style:normal;--spectrum-fieldlabel-side-text-font-weight:400;--spectrum-fieldlabel-side-text-line-height:1.3;--spectrum-fieldlabel-side-text-letter-spacing:0;--spectrum-fieldlabel-side-text-transform:none;--spectrum-fieldlabel-side-text-size:12px;--spectrum-fieldlabel-side-asterisk-size:8px;--spectrum-fieldlabel-side-asterisk-gap:2px;--spectrum-fieldlabel-side-asterisk-margin-y:0px;--spectrum-fieldlabel-side-padding-top:8px;--spectrum-fieldlabel-side-padding-x:8px;--spectrum-label-text-font-family:adobe-clean,\"Source Sans Pro\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Trebuchet MS\",\"Lucida Grande\",sans-serif;--spectrum-label-text-font-style:normal;--spectrum-label-text-font-weight:400;--spectrum-label-text-line-height:1.3;--spectrum-label-text-letter-spacing:0;--spectrum-label-text-transform:none;--spectrum-label-text-size:12px;--spectrum-label-over-background-text-font-style:normal;--spectrum-label-over-background-text-font-weight:400;--spectrum-label-over-background-text-size:12px;--spectrum-label-over-background-text-line-height:1.5;--spectrum-label-large-text-font-family:adobe-clean,\"Source Sans Pro\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Trebuchet MS\",\"Lucida Grande\",sans-serif;--spectrum-label-large-text-font-style:normal;--spectrum-label-large-text-font-weight:400;--spectrum-label-large-text-line-height:1.5;--spectrum-label-large-text-letter-spacing:0;--spectrum-label-large-text-transform:none;--spectrum-label-large-text-size:16px;--spectrum-label-large-margin-bottom:12px;--spectrum-label-large-over-background-text-font-style:normal;--spectrum-label-large-over-background-text-font-weight:400;--spectrum-label-large-over-background-text-size:16px;--spectrum-label-large-over-background-margin-bottom:12px;--spectrum-label-large-over-background-text-line-height:24px;--spectrum-link-text-font-family:adobe-clean,\"Source Sans Pro\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Trebuchet MS\",\"Lucida Grande\",sans-serif;--spectrum-link-text-font-style:normal;--spectrum-link-text-font-weight:400;--spectrum-link-text-line-height:1.5;--spectrum-link-text-letter-spacing:0;--spectrum-link-text-transform:none;--spectrum-link-text-size:14px;--spectrum-link-underline-gap:1px;--spectrum-link-underline-size:1px;--spectrum-link-over-background-text-size:14px;--spectrum-link-over-background-underline-gap:1px;--spectrum-link-over-background-underline-size:1px;--spectrum-link-quiet-text-font-family:adobe-clean,\"Source Sans Pro\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Trebuchet MS\",\"Lucida Grande\",sans-serif;--spectrum-link-quiet-text-font-style:normal;--spectrum-link-quiet-text-font-weight:400;--spectrum-link-quiet-text-line-height:1.5;--spectrum-link-quiet-text-letter-spacing:0;--spectrum-link-quiet-text-transform:none;--spectrum-link-quiet-text-size:14px;--spectrum-link-quiet-underline-gap:1px;--spectrum-link-quiet-underline-size:1px;--spectrum-popover-border-size:1px;--spectrum-popover-border-radius:4px;--spectrum-popover-shadow-blur:4px;--spectrum-popover-shadow-offset-y:1px;--spectrum-popover-padding-x:0px;--spectrum-popover-padding-y:4px;--spectrum-popover-tip-width:20px;--spectrum-popover-tip-height:10px;--spectrum-popover-shadow-y-offset:1px;--spectrum-popover-source-gap:6px;--spectrum-popover-min-width:32px;--spectrum-popover-min-height:32px;--spectrum-radio-text-font-family:adobe-clean,\"Source Sans Pro\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Trebuchet MS\",\"Lucida Grande\",sans-serif;--spectrum-radio-text-font-style:normal;--spectrum-radio-text-font-weight:400;--spectrum-radio-text-line-height:1.5;--spectrum-radio-text-letter-spacing:0;--spectrum-radio-text-transform:none;--spectrum-radio-text-size:14px;--spectrum-radio-text-gap:10px;--spectrum-radio-circle-dot-size:4px;--spectrum-radio-circle-border-size:2px;--spectrum-radio-circle-diameter:14px;--spectrum-radio-height:32px;--spectrum-radio-margin-bottom:0px;--spectrum-radio-text-baseline:12px;--spectrum-radio-cursor-hit-x:8px;--spectrum-radio-touch-hit-x:8px;--spectrum-radio-touch-hit-y:8px;--spectrum-radio-circle-border-size-hover:2px;--spectrum-radio-text-gap-hover:10px;--spectrum-radio-circle-border-size-down:2px;--spectrum-radio-text-gap-down:10px;--spectrum-radio-circle-border-size-key-focus:3px;--spectrum-radio-text-gap-key-focus:9px;--spectrum-radio-circle-border-size-disabled:2px;--spectrum-radio-text-gap-disabled:10px;--spectrum-radio-circle-border-size-selected:2px;--spectrum-radio-text-gap-selected:10px;--spectrum-radio-circle-border-size-selected-hover:2px;--spectrum-radio-text-gap-selected-hover:10px;--spectrum-radio-circle-border-size-selected-down:2px;--spectrum-radio-text-gap-selected-down:10px;--spectrum-radio-circle-border-size-selected-key-focus:3px;--spectrum-radio-text-gap-selected-key-focus:9px;--spectrum-radio-circle-border-size-selected-disabled:2px;--spectrum-radio-text-gap-selected-disabled:10px;--spectrum-radio-circle-border-size-error:2px;--spectrum-radio-text-gap-error:10px;--spectrum-radio-circle-border-size-error-hover:2px;--spectrum-radio-text-gap-error-hover:10px;--spectrum-radio-circle-border-size-error-down:2px;--spectrum-radio-text-gap-error-down:10px;--spectrum-radio-circle-border-size-error-key-focus:3px;--spectrum-radio-text-gap-error-key-focus:9px;--spectrum-radio-circle-border-size-error-disabled:2px;--spectrum-radio-text-gap-error-disabled:10px;--spectrum-radio-circle-border-size-error-selected:2px;--spectrum-radio-text-gap-error-selected:10px;--spectrum-radio-circle-border-size-error-selected-hover:2px;--spectrum-radio-text-gap-error-selected-hover:10px;--spectrum-radio-circle-border-size-error-selected-down:2px;--spectrum-radio-text-gap-error-selected-down:10px;--spectrum-radio-circle-border-size-error-selected-key-focus:3px;--spectrum-radio-text-gap-error-selected-key-focus:9px;--spectrum-radio-circle-border-size-error-selected-disabled:2px;--spectrum-radio-text-gap-error-selected-disabled:10px;--spectrum-radio-quiet-text-font-family:adobe-clean,\"Source Sans Pro\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Trebuchet MS\",\"Lucida Grande\",sans-serif;--spectrum-radio-quiet-text-font-style:normal;--spectrum-radio-quiet-text-font-weight:400;--spectrum-radio-quiet-text-line-height:1.5;--spectrum-radio-quiet-text-letter-spacing:0;--spectrum-radio-quiet-text-transform:none;--spectrum-radio-quiet-text-size:14px;--spectrum-radio-quiet-text-gap:10px;--spectrum-radio-quiet-circle-dot-size:4px;--spectrum-radio-quiet-circle-border-size:2px;--spectrum-radio-quiet-circle-diameter:14px;--spectrum-radio-quiet-height:32px;--spectrum-radio-quiet-margin-bottom:0px;--spectrum-radio-quiet-text-baseline:12px;--spectrum-radio-quiet-cursor-hit-x:8px;--spectrum-radio-quiet-touch-hit-x:8px;--spectrum-radio-quiet-touch-hit-y:8px;--spectrum-radio-quiet-circle-border-size-hover:2px;--spectrum-radio-quiet-text-gap-hover:10px;--spectrum-radio-quiet-circle-border-size-down:2px;--spectrum-radio-quiet-text-gap-down:10px;--spectrum-radio-quiet-circle-border-size-key-focus:3px;--spectrum-radio-quiet-text-gap-key-focus:9px;--spectrum-radio-quiet-circle-border-size-disabled:2px;--spectrum-radio-quiet-text-gap-disabled:10px;--spectrum-radio-quiet-circle-border-size-selected:2px;--spectrum-radio-quiet-text-gap-selected:10px;--spectrum-radio-quiet-circle-border-size-selected-hover:2px;--spectrum-radio-quiet-text-gap-selected-hover:10px;--spectrum-radio-quiet-circle-border-size-selected-down:2px;--spectrum-radio-quiet-text-gap-selected-down:10px;--spectrum-radio-quiet-circle-border-size-selected-key-focus:3px;--spectrum-radio-quiet-text-gap-selected-key-focus:9px;--spectrum-radio-quiet-circle-border-size-selected-disabled:2px;--spectrum-radio-quiet-text-gap-selected-disabled:10px;--spectrum-radio-quiet-circle-border-size-error:2px;--spectrum-radio-quiet-text-gap-error:10px;--spectrum-radio-quiet-circle-border-size-error-hover:2px;--spectrum-radio-quiet-text-gap-error-hover:10px;--spectrum-radio-quiet-circle-border-size-error-down:2px;--spectrum-radio-quiet-text-gap-error-down:10px;--spectrum-radio-quiet-circle-border-size-error-key-focus:3px;--spectrum-radio-quiet-text-gap-error-key-focus:9px;--spectrum-radio-quiet-circle-border-size-error-disabled:2px;--spectrum-radio-quiet-text-gap-error-disabled:10px;--spectrum-radio-quiet-circle-border-size-error-selected:2px;--spectrum-radio-quiet-text-gap-error-selected:10px;--spectrum-radio-quiet-circle-border-size-error-selected-hover:2px;--spectrum-radio-quiet-text-gap-error-selected-hover:10px;--spectrum-radio-quiet-circle-border-size-error-selected-down:2px;--spectrum-radio-quiet-text-gap-error-selected-down:10px;--spectrum-radio-quiet-circle-border-size-error-selected-key-focus:3px;--spectrum-radio-quiet-text-gap-error-selected-key-focus:9px;--spectrum-radio-quiet-circle-border-size-error-selected-disabled:2px;--spectrum-radio-quiet-text-gap-error-selected-disabled:10px;--spectrum-slider-color-handle-outset-border-size:1px;--spectrum-slider-color-handle-inset-border-size:1px;--spectrum-slider-color-track-height:24px;--spectrum-slider-color-track-border-size:1px;--spectrum-slider-track-border-radius:1px;--spectrum-slider-track-height:2px;--spectrum-slider-handle-border-size:2px;--spectrum-slider-handle-gap:4px;--spectrum-slider-label-text-alignment:left;--spectrum-slider-label-min-width:48px;--spectrum-slider-animation-duration:130ms;--spectrum-slider-animation-ease:(0.45,0,0.4,1);--spectrum-slider-handle-width:16px;--spectrum-slider-handle-height:16px;--spectrum-slider-handle-border-radius:8px;--spectrum-slider-height:32px;--spectrum-slider-min-width:128px;--spectrum-slider-label-gap-y:0px;--spectrum-slider-label-gap-x:16px;--spectrum-slider-text-baseline:12px;--spectrum-slider-track-cursor-hit-x:8px;--spectrum-slider-track-cursor-hit-y:16px;--spectrum-slider-hot-text-cursor-hit-y:8px;--spectrum-slider-track-touch-hit-x:8px;--spectrum-slider-track-touch-hit-y:8px;--spectrum-slider-handle-touch-hit-x:16px;--spectrum-slider-handle-touch-hit-y:16px;--spectrum-slider-radial-reaction-size:44px;--spectrum-slider-handle-border-size-down:6px;--spectrum-slider-handle-border-size-key-focus:8px;--spectrum-slider-editable-track-border-radius:1px;--spectrum-slider-editable-track-height:2px;--spectrum-slider-editable-handle-border-size:2px;--spectrum-slider-editable-handle-gap:4px;--spectrum-slider-editable-label-text-alignment:left;--spectrum-slider-editable-label-min-width:48px;--spectrum-slider-editable-animation-duration:130ms;--spectrum-slider-editable-animation-ease:(0.45,0,0.4,1);--spectrum-slider-editable-handle-width:16px;--spectrum-slider-editable-handle-height:16px;--spectrum-slider-editable-handle-border-radius:8px;--spectrum-slider-editable-height:32px;--spectrum-slider-editable-min-width:128px;--spectrum-slider-editable-label-gap-y:0px;--spectrum-slider-editable-label-gap-x:16px;--spectrum-slider-editable-text-baseline:12px;--spectrum-slider-editable-track-cursor-hit-x:8px;--spectrum-slider-editable-track-cursor-hit-y:16px;--spectrum-slider-editable-hot-text-cursor-hit-y:8px;--spectrum-slider-editable-track-touch-hit-x:8px;--spectrum-slider-editable-track-touch-hit-y:8px;--spectrum-slider-editable-handle-touch-hit-x:16px;--spectrum-slider-editable-handle-touch-hit-y:16px;--spectrum-slider-editable-radial-reaction-size:44px;--spectrum-slider-editable-textfield-min-width:48px;--spectrum-slider-editable-handle-border-size-down:6px;--spectrum-slider-editable-handle-border-size-key-focus:8px;--spectrum-slider-fill-track-border-radius:1px;--spectrum-slider-fill-track-height:2px;--spectrum-slider-fill-handle-border-size:2px;--spectrum-slider-fill-handle-gap:4px;--spectrum-slider-fill-label-text-alignment:left;--spectrum-slider-fill-label-min-width:48px;--spectrum-slider-fill-animation-duration:130ms;--spectrum-slider-fill-animation-ease:(0.45,0,0.4,1);--spectrum-slider-fill-handle-width:16px;--spectrum-slider-fill-handle-height:16px;--spectrum-slider-fill-handle-border-radius:8px;--spectrum-slider-fill-height:32px;--spectrum-slider-fill-min-width:128px;--spectrum-slider-fill-label-gap-y:0px;--spectrum-slider-fill-label-gap-x:16px;--spectrum-slider-fill-text-baseline:12px;--spectrum-slider-fill-track-cursor-hit-x:8px;--spectrum-slider-fill-track-cursor-hit-y:16px;--spectrum-slider-fill-hot-text-cursor-hit-y:8px;--spectrum-slider-fill-track-touch-hit-x:8px;--spectrum-slider-fill-track-touch-hit-y:8px;--spectrum-slider-fill-handle-touch-hit-x:16px;--spectrum-slider-fill-handle-touch-hit-y:16px;--spectrum-slider-fill-radial-reaction-size:44px;--spectrum-slider-fill-handle-border-size-down:6px;--spectrum-slider-fill-handle-border-size-key-focus:8px;--spectrum-slider-ramp-track-height:16px;--spectrum-slider-tick-mark-margin-x:1px;--spectrum-slider-tick-mark-height:10px;--spectrum-slider-tick-mark-width:2px;--spectrum-slider-tick-mark-border-radius:1px;--spectrum-switch-text-font-family:adobe-clean,\"Source Sans Pro\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Trebuchet MS\",\"Lucida Grande\",sans-serif;--spectrum-switch-text-font-style:normal;--spectrum-switch-text-font-weight:400;--spectrum-switch-text-line-height:1.5;--spectrum-switch-text-letter-spacing:0;--spectrum-switch-text-transform:none;--spectrum-switch-text-size:14px;--spectrum-switch-handle-border-size:2px;--spectrum-switch-track-width:26px;--spectrum-switch-handle-size:14px;--spectrum-switch-text-gap:10px;--spectrum-switch-track-height:14px;--spectrum-switch-handle-border-radius:7px;--spectrum-switch-height:32px;--spectrum-switch-text-baseline:12px;--spectrum-switch-cursor-hit-x:8px;--spectrum-switch-touch-hit-x:8px;--spectrum-switch-touch-hit-y:8px;--spectrum-switch-handle-border-size-hover:2px;--spectrum-switch-text-gap-hover:10px;--spectrum-switch-handle-border-size-down:2px;--spectrum-switch-text-gap-down:10px;--spectrum-switch-handle-border-size-key-focus:3px;--spectrum-switch-text-gap-key-focus:9px;--spectrum-switch-handle-border-size-disabled:2px;--spectrum-switch-text-gap-disabled:10px;--spectrum-switch-handle-border-size-selected:2px;--spectrum-switch-text-gap-selected:10px;--spectrum-switch-handle-border-size-selected-hover:2px;--spectrum-switch-text-gap-selected-hover:10px;--spectrum-switch-handle-border-size-selected-down:2px;--spectrum-switch-text-gap-selected-down:10px;--spectrum-switch-handle-border-size-selected-key-focus:3px;--spectrum-switch-text-gap-selected-key-focus:9px;--spectrum-switch-handle-border-size-selected-disabled:2px;--spectrum-switch-text-gap-selected-disabled:10px;--spectrum-switch-handle-border-size-error:2px;--spectrum-switch-text-gap-error:10px;--spectrum-switch-handle-border-size-error-hover:2px;--spectrum-switch-text-gap-error-hover:10px;--spectrum-switch-handle-border-size-error-down:2px;--spectrum-switch-text-gap-error-down:10px;--spectrum-switch-handle-border-size-error-key-focus:3px;--spectrum-switch-text-gap-error-key-focus:9px;--spectrum-switch-handle-border-size-error-disabled:2px;--spectrum-switch-text-gap-error-disabled:10px;--spectrum-switch-handle-border-size-error-selected:2px;--spectrum-switch-text-gap-error-selected:10px;--spectrum-switch-handle-border-size-error-selected-hover:2px;--spectrum-switch-text-gap-error-selected-hover:10px;--spectrum-switch-handle-border-size-error-selected-down:2px;--spectrum-switch-text-gap-error-selected-down:10px;--spectrum-switch-handle-border-size-error-selected-key-focus:3px;--spectrum-switch-text-gap-error-selected-key-focus:9px;--spectrum-switch-handle-border-size-error-selected-disabled:2px;--spectrum-switch-text-gap-error-selected-disabled:10px;--spectrum-switch-quiet-text-font-family:adobe-clean,\"Source Sans Pro\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Trebuchet MS\",\"Lucida Grande\",sans-serif;--spectrum-switch-quiet-text-font-style:normal;--spectrum-switch-quiet-text-font-weight:400;--spectrum-switch-quiet-text-line-height:1.5;--spectrum-switch-quiet-text-letter-spacing:0;--spectrum-switch-quiet-text-transform:none;--spectrum-switch-quiet-text-size:14px;--spectrum-switch-quiet-handle-border-size:2px;--spectrum-switch-quiet-track-width:26px;--spectrum-switch-quiet-handle-size:14px;--spectrum-switch-quiet-text-gap:10px;--spectrum-switch-quiet-track-height:14px;--spectrum-switch-quiet-handle-border-radius:7px;--spectrum-switch-quiet-height:32px;--spectrum-switch-quiet-text-baseline:12px;--spectrum-switch-quiet-cursor-hit-x:8px;--spectrum-switch-quiet-touch-hit-x:8px;--spectrum-switch-quiet-touch-hit-y:8px;--spectrum-switch-quiet-handle-border-size-hover:2px;--spectrum-switch-quiet-text-gap-hover:10px;--spectrum-switch-quiet-handle-border-size-down:2px;--spectrum-switch-quiet-text-gap-down:10px;--spectrum-switch-quiet-handle-border-size-key-focus:3px;--spectrum-switch-quiet-text-gap-key-focus:9px;--spectrum-switch-quiet-handle-border-size-disabled:2px;--spectrum-switch-quiet-text-gap-disabled:10px;--spectrum-switch-quiet-handle-border-size-selected:2px;--spectrum-switch-quiet-text-gap-selected:10px;--spectrum-switch-quiet-handle-border-size-selected-hover:2px;--spectrum-switch-quiet-text-gap-selected-hover:10px;--spectrum-switch-quiet-handle-border-size-selected-down:2px;--spectrum-switch-quiet-text-gap-selected-down:10px;--spectrum-switch-quiet-handle-border-size-selected-key-focus:3px;--spectrum-switch-quiet-text-gap-selected-key-focus:9px;--spectrum-switch-quiet-handle-border-size-selected-disabled:2px;--spectrum-switch-quiet-text-gap-selected-disabled:10px;--spectrum-switch-quiet-handle-border-size-error:2px;--spectrum-switch-quiet-text-gap-error:10px;--spectrum-switch-quiet-handle-border-size-error-hover:2px;--spectrum-switch-quiet-text-gap-error-hover:10px;--spectrum-switch-quiet-handle-border-size-error-down:2px;--spectrum-switch-quiet-text-gap-error-down:10px;--spectrum-switch-quiet-handle-border-size-error-key-focus:3px;--spectrum-switch-quiet-text-gap-error-key-focus:9px;--spectrum-switch-quiet-handle-border-size-error-disabled:2px;--spectrum-switch-quiet-text-gap-error-disabled:10px;--spectrum-switch-quiet-handle-border-size-error-selected:2px;--spectrum-switch-quiet-text-gap-error-selected:10px;--spectrum-switch-quiet-handle-border-size-error-selected-hover:2px;--spectrum-switch-quiet-text-gap-error-selected-hover:10px;--spectrum-switch-quiet-handle-border-size-error-selected-down:2px;--spectrum-switch-quiet-text-gap-error-selected-down:10px;--spectrum-switch-quiet-handle-border-size-error-selected-key-focus:3px;--spectrum-switch-quiet-text-gap-error-selected-key-focus:9px;--spectrum-switch-quiet-handle-border-size-error-selected-disabled:2px;--spectrum-switch-quiet-text-gap-error-selected-disabled:10px;--spectrum-tabs-compact-text-font-family:adobe-clean,\"Source Sans Pro\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Trebuchet MS\",\"Lucida Grande\",sans-serif;--spectrum-tabs-compact-text-font-style:normal;--spectrum-tabs-compact-text-font-weight:400;--spectrum-tabs-compact-text-line-height:1.5;--spectrum-tabs-compact-text-letter-spacing:0;--spectrum-tabs-compact-text-transform:none;--spectrum-tabs-compact-text-size:14px;--spectrum-tabs-compact-icon-size:18px;--spectrum-tabs-compact-baseline:12px;--spectrum-tabs-compact-height:32px;--spectrum-tabs-compact-item-height:32px;--spectrum-tabs-compact-icon-gap:8px;--spectrum-tabs-compact-rule-border-radius:1px;--spectrum-tabs-compact-focus-ring-height:32px;--spectrum-tabs-compact-focus-ring-size:2px;--spectrum-tabs-compact-focus-ring-padding-x:8px;--spectrum-tabs-compact-focus-ring-border-radius:5px;--spectrum-tabs-compact-padding-x:0px;--spectrum-tabs-compact-item-gap:24px;--spectrum-tabs-compact-rule-height:2px;--spectrum-tabs-compact-margin-left:-8px;--spectrum-tabs-compact-margin-right:-8px;--spectrum-tabs-compact-focus-area-gap:8px;--spectrum-tabs-compact-selection-indicator-animation-duration:130ms;--spectrum-tabs-compact-selection-indicator-animation-ease:(0.45,0,0.4,1);--spectrum-tabs-compact-vertical-text-font-family:adobe-clean,\"Source Sans Pro\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Trebuchet MS\",\"Lucida Grande\",sans-serif;--spectrum-tabs-compact-vertical-text-font-style:normal;--spectrum-tabs-compact-vertical-text-font-weight:400;--spectrum-tabs-compact-vertical-text-line-height:1.5;--spectrum-tabs-compact-vertical-text-letter-spacing:0;--spectrum-tabs-compact-vertical-text-transform:none;--spectrum-tabs-compact-vertical-text-size:14px;--spectrum-tabs-compact-vertical-icon-size:18px;--spectrum-tabs-compact-vertical-baseline:12px;--spectrum-tabs-compact-vertical-height:48px;--spectrum-tabs-compact-vertical-item-height:32px;--spectrum-tabs-compact-vertical-icon-gap:8px;--spectrum-tabs-compact-vertical-rule-border-radius:1px;--spectrum-tabs-compact-vertical-focus-ring-height:32px;--spectrum-tabs-compact-vertical-focus-ring-size:2px;--spectrum-tabs-compact-vertical-focus-ring-padding-x:8px;--spectrum-tabs-compact-vertical-focus-ring-border-radius:5px;--spectrum-tabs-compact-vertical-padding-x:8px;--spectrum-tabs-compact-vertical-item-gap:4px;--spectrum-tabs-compact-vertical-item-margin-left:12px;--spectrum-tabs-compact-vertical-rule-width:2px;--spectrum-tabs-compact-vertical-margin-left:0px;--spectrum-tabs-compact-vertical-margin-right:0px;--spectrum-tabs-compact-vertical-focus-area-gap:16px;--spectrum-tabs-compact-vertical-selection-indicator-animation-duration:130ms;--spectrum-tabs-compact-vertical-selection-indicator-animation-ease:(0.45,0,0.4,1);--spectrum-tabs-text-font-family:adobe-clean,\"Source Sans Pro\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Trebuchet MS\",\"Lucida Grande\",sans-serif;--spectrum-tabs-text-font-style:normal;--spectrum-tabs-text-font-weight:400;--spectrum-tabs-text-line-height:1.5;--spectrum-tabs-text-letter-spacing:0;--spectrum-tabs-text-transform:none;--spectrum-tabs-text-size:14px;--spectrum-tabs-icon-size:18px;--spectrum-tabs-baseline:18px;--spectrum-tabs-height:48px;--spectrum-tabs-item-height:48px;--spectrum-tabs-icon-gap:8px;--spectrum-tabs-rule-border-radius:1px;--spectrum-tabs-focus-ring-height:32px;--spectrum-tabs-focus-ring-size:2px;--spectrum-tabs-focus-ring-padding-x:8px;--spectrum-tabs-focus-ring-border-radius:5px;--spectrum-tabs-padding-x:0px;--spectrum-tabs-item-gap:24px;--spectrum-tabs-rule-height:2px;--spectrum-tabs-margin-left:-8px;--spectrum-tabs-margin-right:-8px;--spectrum-tabs-focus-area-gap:8px;--spectrum-tabs-selection-indicator-animation-duration:130ms;--spectrum-tabs-selection-indicator-animation-ease:(0.45,0,0.4,1);--spectrum-tabs-quiet-text-font-family:adobe-clean,\"Source Sans Pro\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Trebuchet MS\",\"Lucida Grande\",sans-serif;--spectrum-tabs-quiet-text-font-style:normal;--spectrum-tabs-quiet-text-font-weight:400;--spectrum-tabs-quiet-text-line-height:1.5;--spectrum-tabs-quiet-text-letter-spacing:0;--spectrum-tabs-quiet-text-transform:none;--spectrum-tabs-quiet-text-size:14px;--spectrum-tabs-quiet-icon-size:18px;--spectrum-tabs-quiet-baseline:18px;--spectrum-tabs-quiet-height:48px;--spectrum-tabs-quiet-item-height:48px;--spectrum-tabs-quiet-icon-gap:8px;--spectrum-tabs-quiet-rule-border-radius:1px;--spectrum-tabs-quiet-focus-ring-height:32px;--spectrum-tabs-quiet-focus-ring-size:2px;--spectrum-tabs-quiet-focus-ring-padding-x:8px;--spectrum-tabs-quiet-focus-ring-border-radius:5px;--spectrum-tabs-quiet-padding-x:0px;--spectrum-tabs-quiet-item-gap:24px;--spectrum-tabs-quiet-rule-height:2px;--spectrum-tabs-quiet-margin-left:-8px;--spectrum-tabs-quiet-margin-right:-8px;--spectrum-tabs-quiet-focus-area-gap:8px;--spectrum-tabs-quiet-selection-indicator-animation-duration:130ms;--spectrum-tabs-quiet-selection-indicator-animation-ease:(0.45,0,0.4,1);--spectrum-tabs-quiet-compact-text-font-family:adobe-clean,\"Source Sans Pro\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Trebuchet MS\",\"Lucida Grande\",sans-serif;--spectrum-tabs-quiet-compact-text-font-style:normal;--spectrum-tabs-quiet-compact-text-font-weight:400;--spectrum-tabs-quiet-compact-text-line-height:1.5;--spectrum-tabs-quiet-compact-text-letter-spacing:0;--spectrum-tabs-quiet-compact-text-transform:none;--spectrum-tabs-quiet-compact-text-size:14px;--spectrum-tabs-quiet-compact-icon-size:18px;--spectrum-tabs-quiet-compact-baseline:12px;--spectrum-tabs-quiet-compact-height:32px;--spectrum-tabs-quiet-compact-item-height:48px;--spectrum-tabs-quiet-compact-icon-gap:8px;--spectrum-tabs-quiet-compact-rule-border-radius:1px;--spectrum-tabs-quiet-compact-focus-ring-height:32px;--spectrum-tabs-quiet-compact-focus-ring-size:2px;--spectrum-tabs-quiet-compact-focus-ring-padding-x:8px;--spectrum-tabs-quiet-compact-focus-ring-border-radius:5px;--spectrum-tabs-quiet-compact-padding-x:0px;--spectrum-tabs-quiet-compact-item-gap:24px;--spectrum-tabs-quiet-compact-rule-height:2px;--spectrum-tabs-quiet-compact-margin-left:-8px;--spectrum-tabs-quiet-compact-margin-right:-8px;--spectrum-tabs-quiet-compact-focus-area-gap:8px;--spectrum-tabs-quiet-compact-selection-indicator-animation-duration:130ms;--spectrum-tabs-quiet-compact-selection-indicator-animation-ease:(0.45,0,0.4,1);--spectrum-tabs-quiet-vertical-text-font-family:adobe-clean,\"Source Sans Pro\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Trebuchet MS\",\"Lucida Grande\",sans-serif;--spectrum-tabs-quiet-vertical-text-font-style:normal;--spectrum-tabs-quiet-vertical-text-font-weight:400;--spectrum-tabs-quiet-vertical-text-line-height:1.5;--spectrum-tabs-quiet-vertical-text-letter-spacing:0;--spectrum-tabs-quiet-vertical-text-transform:none;--spectrum-tabs-quiet-vertical-text-size:14px;--spectrum-tabs-quiet-vertical-icon-size:18px;--spectrum-tabs-quiet-vertical-baseline:18px;--spectrum-tabs-quiet-vertical-height:48px;--spectrum-tabs-quiet-vertical-item-height:44px;--spectrum-tabs-quiet-vertical-icon-gap:8px;--spectrum-tabs-quiet-vertical-rule-border-radius:1px;--spectrum-tabs-quiet-vertical-focus-ring-height:32px;--spectrum-tabs-quiet-vertical-focus-ring-size:2px;--spectrum-tabs-quiet-vertical-focus-ring-padding-x:8px;--spectrum-tabs-quiet-vertical-focus-ring-border-radius:5px;--spectrum-tabs-quiet-vertical-padding-x:0px;--spectrum-tabs-quiet-vertical-item-gap:4px;--spectrum-tabs-quiet-vertical-item-margin-left:12px;--spectrum-tabs-quiet-vertical-rule-width:2px;--spectrum-tabs-quiet-vertical-margin-left:0px;--spectrum-tabs-quiet-vertical-margin-right:0px;--spectrum-tabs-quiet-vertical-focus-area-gap:16px;--spectrum-tabs-quiet-vertical-selection-indicator-animation-duration:130ms;--spectrum-tabs-quiet-vertical-selection-indicator-animation-ease:(0.45,0,0.4,1);--spectrum-tabs-vertical-text-font-family:adobe-clean,\"Source Sans Pro\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Trebuchet MS\",\"Lucida Grande\",sans-serif;--spectrum-tabs-vertical-text-font-style:normal;--spectrum-tabs-vertical-text-font-weight:400;--spectrum-tabs-vertical-text-line-height:1.5;--spectrum-tabs-vertical-text-letter-spacing:0;--spectrum-tabs-vertical-text-transform:none;--spectrum-tabs-vertical-text-size:14px;--spectrum-tabs-vertical-icon-size:18px;--spectrum-tabs-vertical-baseline:18px;--spectrum-tabs-vertical-height:48px;--spectrum-tabs-vertical-item-height:44px;--spectrum-tabs-vertical-icon-gap:8px;--spectrum-tabs-vertical-rule-border-radius:1px;--spectrum-tabs-vertical-focus-ring-height:32px;--spectrum-tabs-vertical-focus-ring-size:2px;--spectrum-tabs-vertical-focus-ring-padding-x:8px;--spectrum-tabs-vertical-focus-ring-border-radius:5px;--spectrum-tabs-vertical-padding-x:0px;--spectrum-tabs-vertical-item-gap:4px;--spectrum-tabs-vertical-item-margin-left:12px;--spectrum-tabs-vertical-rule-width:2px;--spectrum-tabs-vertical-margin-left:0px;--spectrum-tabs-vertical-margin-right:0px;--spectrum-tabs-vertical-focus-area-gap:16px;--spectrum-tabs-vertical-selection-indicator-animation-duration:130ms;--spectrum-tabs-vertical-selection-indicator-animation-ease:(0.45,0,0.4,1)}:host{display:block}\n"]);

  scale_medium_templateObject = function () {
    return data;
  };

  return data;
}

function scale_medium_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const scale_medium_styles = Object(lit_element["b" /* css */])(scale_medium_templateObject());
/* harmony default export */ var scale_medium = (scale_medium_styles);
// CONCATENATED MODULE: ./src/themes/scale-medium.ts
function themes_scale_medium_templateObject() {
  const data = themes_scale_medium_taggedTemplateLiteral(["\n            <slot></slot>\n        "]);

  themes_scale_medium_templateObject = function () {
    return data;
  };

  return data;
}

function themes_scale_medium_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/


class scale_medium_ScaleMedium extends lit_element["a" /* LitElement */] {
  static get styles() {
    return [scale_medium];
  }

  render() {
    return Object(lit_element["c" /* html */])(themes_scale_medium_templateObject());
  }

}
// CONCATENATED MODULE: ./src/themes/theme-light.css
function theme_light_templateObject() {
  const data = theme_light_taggedTemplateLiteral(["\n:host,:root{--spectrum-global-color-celery-400:#44b556;--spectrum-global-color-celery-500:#3da74e;--spectrum-global-color-celery-600:#379947;--spectrum-global-color-celery-700:#318b40;--spectrum-global-color-chartreuse-400:#85d044;--spectrum-global-color-chartreuse-500:#7cc33f;--spectrum-global-color-chartreuse-600:#73b53a;--spectrum-global-color-chartreuse-700:#6aa834;--spectrum-global-color-yellow-400:#dfbf00;--spectrum-global-color-yellow-500:#d2b200;--spectrum-global-color-yellow-600:#c4a600;--spectrum-global-color-yellow-700:#b79900;--spectrum-global-color-magenta-400:#d83790;--spectrum-global-color-magenta-500:#ce2783;--spectrum-global-color-magenta-600:#bc1c74;--spectrum-global-color-magenta-700:#ae0e66;--spectrum-global-color-fuchsia-400:#c038cc;--spectrum-global-color-fuchsia-500:#b130bd;--spectrum-global-color-fuchsia-600:#a228ad;--spectrum-global-color-fuchsia-700:#93219e;--spectrum-global-color-purple-400:#9256d9;--spectrum-global-color-purple-500:#864ccc;--spectrum-global-color-purple-600:#7a42bf;--spectrum-global-color-purple-700:#6f38b1;--spectrum-global-color-indigo-400:#6767ec;--spectrum-global-color-indigo-500:#5c5ce0;--spectrum-global-color-indigo-600:#5151d3;--spectrum-global-color-indigo-700:#4646c6;--spectrum-global-color-seafoam-400:#1b959a;--spectrum-global-color-seafoam-500:#16878c;--spectrum-global-color-seafoam-600:#0f797d;--spectrum-global-color-seafoam-700:#096c6f;--spectrum-global-color-red-400:#e34850;--spectrum-global-color-red-500:#d7373f;--spectrum-global-color-red-600:#c9252d;--spectrum-global-color-red-700:#bb121a;--spectrum-global-color-orange-400:#e68619;--spectrum-global-color-orange-500:#da7b11;--spectrum-global-color-orange-600:#cb6f10;--spectrum-global-color-orange-700:#bd640d;--spectrum-global-color-green-400:#2d9d78;--spectrum-global-color-green-500:#268e6c;--spectrum-global-color-green-600:#12805c;--spectrum-global-color-green-700:#107154;--spectrum-global-color-blue-400:#2680eb;--spectrum-global-color-blue-500:#1473e6;--spectrum-global-color-blue-600:#0d66d0;--spectrum-global-color-blue-700:#095aba;--spectrum-global-color-gray-50:#fff;--spectrum-global-color-gray-75:#fafafa;--spectrum-global-color-gray-100:#f5f5f5;--spectrum-global-color-gray-200:#eaeaea;--spectrum-global-color-gray-300:#e1e1e1;--spectrum-global-color-gray-400:#cacaca;--spectrum-global-color-gray-500:#b3b3b3;--spectrum-global-color-gray-600:#8e8e8e;--spectrum-global-color-gray-700:#6e6e6e;--spectrum-global-color-gray-800:#4b4b4b;--spectrum-global-color-gray-900:#2c2c2c;--spectrum-alias-background-color-default:#f5f5f5;--spectrum-alias-background-color-transparent:transparent;--spectrum-alias-background-color-label-gray:#707070;--spectrum-alias-background-color-modal-overlay:rgba(0,0,0,0.4);--spectrum-alias-dropshadow-color:rgba(0,0,0,0.15);--spectrum-alias-background-color-hover-overlay:rgba(44,44,44,0.04);--spectrum-alias-highlight-hover:rgba(44,44,44,0.06);--spectrum-alias-highlight-active:rgba(44,44,44,0.1);--spectrum-alias-highlight-selected:rgba(20,115,230,0.1);--spectrum-alias-highlight-selected-hover:rgba(20,115,230,0.2);--spectrum-alias-text-highlight-color:rgba(20,115,230,0.2);--spectrum-alias-background-color-quickactions:hsla(0,0%,96.1%,0.9);--spectrum-alias-background-color-quickactions-overlay:rgba(0,0,0,0.2);--spectrum-alias-placeholder-text-color:#8e8e8e;--spectrum-alias-placeholder-text-color-hover:#2c2c2c;--spectrum-alias-placeholder-text-color-down:#2c2c2c;--spectrum-alias-placeholder-text-color-selected:#4b4b4b;--spectrum-alias-label-text-color:#6e6e6e;--spectrum-alias-text-color:#4b4b4b;--spectrum-alias-text-color-hover:#2c2c2c;--spectrum-alias-text-color-down:#2c2c2c;--spectrum-alias-text-color-key-focus:#0d66d0;--spectrum-alias-text-color-disabled:#b3b3b3;--spectrum-alias-text-color-invalid:#d7373f;--spectrum-alias-text-color-selected:#0d66d0;--spectrum-alias-text-color-selected-neutral:#2c2c2c;--spectrum-alias-title-text-color:#2c2c2c;--spectrum-alias-heading-text-color:#2c2c2c;--spectrum-alias-border-color:#e1e1e1;--spectrum-alias-border-color-hover:#cacaca;--spectrum-alias-border-color-focus:#2680eb;--spectrum-alias-border-color-down:#1473e6;--spectrum-alias-border-color-extralight:#f5f5f5;--spectrum-alias-border-color-light:#eaeaea;--spectrum-alias-border-color-mid:#e1e1e1;--spectrum-alias-border-color-dark:#cacaca;--spectrum-alias-border-color-transparent:transparent;--spectrum-alias-border-color-translucent-dark:rgba(0,0,0,0.05);--spectrum-alias-border-color-translucent-darker:rgba(0,0,0,0.1);--spectrum-alias-focus-color:#2680eb;--spectrum-alias-track-color-default:#e1e1e1;--spectrum-alias-track-color-disabled:#e1e1e1;--spectrum-alias-track-color-over-background:hsla(0,0%,100%,0.2);--spectrum-alias-icon-color:#6e6e6e;--spectrum-alias-icon-color-over-background:#fff;--spectrum-alias-icon-color-hover:#2c2c2c;--spectrum-alias-icon-color-down:#2c2c2c;--spectrum-alias-icon-color-focus:#2c2c2c;--spectrum-alias-icon-color-disabled:#cacaca;--spectrum-alias-icon-color-selected-neutral:#2c2c2c;--spectrum-alias-icon-color-selected:#1473e6;--spectrum-alias-icon-color-selected-hover:#0d66d0;--spectrum-alias-icon-color-selected-down:#095aba;--spectrum-alias-icon-color-selected-focus:#0d66d0;--spectrum-alias-icon-color-error:#e34850;--spectrum-alias-radial-reaction-color-default:rgba(75,75,75,0.6);--spectrum-alias-pasteboard-background-color:#e1e1e1;--spectrum-alias-appframe-border-color:#e1e1e1;--spectrum-alias-appframe-separator-color:#e1e1e1;--spectrum-alias-toolbar-background-color:#f5f5f5;--spectrum-semantic-negative-color-background:#c9252d;--spectrum-semantic-negative-color-default:#d7373f;--spectrum-semantic-negative-color-dark:#c9252d;--spectrum-semantic-negative-color-border:#e34850;--spectrum-semantic-negative-color-icon:#c9252d;--spectrum-semantic-negative-color-status:#e34850;--spectrum-semantic-negative-color-text-large:#d7373f;--spectrum-semantic-negative-color-text-small:#c9252d;--spectrum-semantic-negative-color-state-down:#bb121a;--spectrum-semantic-negative-color-state-focus:#e34850;--spectrum-semantic-notice-color-background:#cb6f10;--spectrum-semantic-notice-color-default:#da7b11;--spectrum-semantic-notice-color-dark:#cb6f10;--spectrum-semantic-notice-color-border:#e68619;--spectrum-semantic-notice-color-icon:#cb6f10;--spectrum-semantic-notice-color-status:#e68619;--spectrum-semantic-notice-color-text-large:#da7b11;--spectrum-semantic-notice-color-text-small:#cb6f10;--spectrum-semantic-notice-color-state-down:#bd640d;--spectrum-semantic-notice-color-state-focus:#e68619;--spectrum-semantic-positive-color-background:#12805c;--spectrum-semantic-positive-color-default:#268e6c;--spectrum-semantic-positive-color-dark:#12805c;--spectrum-semantic-positive-color-border:#2d9d78;--spectrum-semantic-positive-color-icon:#12805c;--spectrum-semantic-positive-color-status:#2d9d78;--spectrum-semantic-positive-color-text-large:#268e6c;--spectrum-semantic-positive-color-text-small:#12805c;--spectrum-semantic-positive-color-state-down:#107154;--spectrum-semantic-positive-color-state-focus:#2d9d78;--spectrum-semantic-informative-color-background:#0d66d0;--spectrum-semantic-informative-color-default:#1473e6;--spectrum-semantic-informative-color-dark:#0d66d0;--spectrum-semantic-informative-color-border:#2680eb;--spectrum-semantic-informative-color-icon:#0d66d0;--spectrum-semantic-informative-color-status:#2680eb;--spectrum-semantic-informative-color-text-large:#1473e6;--spectrum-semantic-informative-color-text-small:#0d66d0;--spectrum-semantic-informative-color-state-down:#095aba;--spectrum-semantic-informative-color-state-focus:#2680eb;--spectrum-semantic-cta-color-background-default:#1473e6;--spectrum-semantic-cta-color-background-hover:#0d66d0;--spectrum-semantic-cta-color-background-down:#0d66d0;--spectrum-semantic-background-color-key-focus:#1473e6;--spectrum-semantic-neutral-color-background:#747474;--spectrum-banner-text-color:#fff;--spectrum-banner-error-background-color:#d7373f;--spectrum-banner-info-background-color:#1473e6;--spectrum-banner-warning-background-color:#da7b11;--spectrum-button-cta-icon-color:#fff;--spectrum-button-cta-background-color:#1473e6;--spectrum-button-cta-border-color:#1473e6;--spectrum-button-cta-text-color:#fff;--spectrum-button-cta-icon-color-hover:#fff;--spectrum-button-cta-background-color-hover:#0d66d0;--spectrum-button-cta-border-color-hover:#0d66d0;--spectrum-button-cta-text-color-hover:#fff;--spectrum-button-cta-icon-color-down:#fff;--spectrum-button-cta-background-color-down:#0d66d0;--spectrum-button-cta-border-color-down:#0d66d0;--spectrum-button-cta-text-color-down:#fff;--spectrum-button-cta-icon-color-key-focus:#fff;--spectrum-button-cta-background-color-key-focus:#1473e6;--spectrum-button-cta-border-color-key-focus:#1473e6;--spectrum-button-cta-text-color-key-focus:#fff;--spectrum-button-cta-icon-color-disabled:#cacaca;--spectrum-button-cta-background-color-disabled:#eaeaea;--spectrum-button-cta-border-color-disabled:#eaeaea;--spectrum-button-cta-text-color-disabled:#b3b3b3;--spectrum-button-over-background-icon-color:#fff;--spectrum-button-over-background-background-color:transparent;--spectrum-button-over-background-border-color:#fff;--spectrum-button-over-background-text-color:#fff;--spectrum-button-over-background-icon-color-hover:#fff;--spectrum-button-over-background-background-color-hover:#fff;--spectrum-button-over-background-border-color-hover:#fff;--spectrum-button-over-background-icon-color-down:#fff;--spectrum-button-over-background-background-color-down:#fff;--spectrum-button-over-background-border-color-down:#fff;--spectrum-button-over-background-icon-color-key-focus:#fff;--spectrum-button-over-background-background-color-key-focus:#fff;--spectrum-button-over-background-border-color-key-focus:#fff;--spectrum-button-over-background-icon-color-disabled:hsla(0,0%,100%,0.35);--spectrum-button-over-background-background-color-disabled:hsla(0,0%,100%,0.1);--spectrum-button-over-background-border-color-disabled:transparent;--spectrum-button-over-background-text-color-disabled:hsla(0,0%,100%,0.35);--spectrum-button-primary-icon-color:#4b4b4b;--spectrum-button-primary-background-color:transparent;--spectrum-button-primary-border-color:#4b4b4b;--spectrum-button-primary-text-color:#4b4b4b;--spectrum-button-primary-icon-color-hover:#fff;--spectrum-button-primary-background-color-hover:#4b4b4b;--spectrum-button-primary-border-color-hover:#4b4b4b;--spectrum-button-primary-text-color-hover:#fff;--spectrum-button-primary-icon-color-down:#fff;--spectrum-button-primary-background-color-down:#2c2c2c;--spectrum-button-primary-border-color-down:#2c2c2c;--spectrum-button-primary-text-color-down:#fff;--spectrum-button-primary-icon-color-key-focus:#fff;--spectrum-button-primary-background-color-key-focus:#1473e6;--spectrum-button-primary-border-color-key-focus:#1473e6;--spectrum-button-primary-text-color-key-focus:#fff;--spectrum-button-primary-icon-color-disabled:#cacaca;--spectrum-button-primary-background-color-disabled:#eaeaea;--spectrum-button-primary-border-color-disabled:#eaeaea;--spectrum-button-primary-text-color-disabled:#b3b3b3;--spectrum-button-quiet-over-background-icon-color:#fff;--spectrum-button-quiet-over-background-background-color:transparent;--spectrum-button-quiet-over-background-border-color:transparent;--spectrum-button-quiet-over-background-text-color:#fff;--spectrum-button-quiet-over-background-icon-color-hover:#fff;--spectrum-button-quiet-over-background-background-color-hover:hsla(0,0%,100%,0.1);--spectrum-button-quiet-over-background-border-color-hover:transparent;--spectrum-button-quiet-over-background-text-color-hover:#fff;--spectrum-button-quiet-over-background-icon-color-down:#fff;--spectrum-button-quiet-over-background-background-color-down:hsla(0,0%,100%,0.15);--spectrum-button-quiet-over-background-border-color-down:transparent;--spectrum-button-quiet-over-background-text-color-down:#fff;--spectrum-button-quiet-over-background-icon-color-key-focus:#fff;--spectrum-button-quiet-over-background-background-color-key-focus:#fff;--spectrum-button-quiet-over-background-border-color-key-focus:#fff;--spectrum-button-quiet-over-background-icon-color-disabled:hsla(0,0%,100%,0.15);--spectrum-button-quiet-over-background-background-color-disabled:transparent;--spectrum-button-quiet-over-background-border-color-disabled:transparent;--spectrum-button-quiet-over-background-text-color-disabled:hsla(0,0%,100%,0.15);--spectrum-button-quiet-primary-icon-color:#4b4b4b;--spectrum-button-quiet-primary-background-color:transparent;--spectrum-button-quiet-primary-border-color:transparent;--spectrum-button-quiet-primary-text-color:#4b4b4b;--spectrum-button-quiet-primary-icon-color-hover:#fff;--spectrum-button-quiet-primary-background-color-hover:#eaeaea;--spectrum-button-quiet-primary-border-color-hover:#eaeaea;--spectrum-button-quiet-primary-text-color-hover:#2c2c2c;--spectrum-button-quiet-primary-icon-color-down:#fff;--spectrum-button-quiet-primary-background-color-down:#e1e1e1;--spectrum-button-quiet-primary-border-color-down:#e1e1e1;--spectrum-button-quiet-primary-text-color-down:#2c2c2c;--spectrum-button-quiet-primary-icon-color-key-focus:#fff;--spectrum-button-quiet-primary-background-color-key-focus:#1473e6;--spectrum-button-quiet-primary-border-color-key-focus:#1473e6;--spectrum-button-quiet-primary-text-color-key-focus:#fff;--spectrum-button-quiet-primary-icon-color-disabled:#cacaca;--spectrum-button-quiet-primary-background-color-disabled:transparent;--spectrum-button-quiet-primary-border-color-disabled:transparent;--spectrum-button-quiet-primary-text-color-disabled:#b3b3b3;--spectrum-button-quiet-secondary-icon-color:#6e6e6e;--spectrum-button-quiet-secondary-background-color:transparent;--spectrum-button-quiet-secondary-border-color:transparent;--spectrum-button-quiet-secondary-text-color:#6e6e6e;--spectrum-button-quiet-secondary-icon-color-hover:#fff;--spectrum-button-quiet-secondary-background-color-hover:#eaeaea;--spectrum-button-quiet-secondary-border-color-hover:#eaeaea;--spectrum-button-quiet-secondary-text-color-hover:#4b4b4b;--spectrum-button-quiet-secondary-icon-color-down:#fff;--spectrum-button-quiet-secondary-background-color-down:#e1e1e1;--spectrum-button-quiet-secondary-border-color-down:#e1e1e1;--spectrum-button-quiet-secondary-text-color-down:#4b4b4b;--spectrum-button-quiet-secondary-icon-color-key-focus:#fff;--spectrum-button-quiet-secondary-background-color-key-focus:#1473e6;--spectrum-button-quiet-secondary-border-color-key-focus:#1473e6;--spectrum-button-quiet-secondary-text-color-key-focus:#fff;--spectrum-button-quiet-secondary-icon-color-disabled:#cacaca;--spectrum-button-quiet-secondary-background-color-disabled:transparent;--spectrum-button-quiet-secondary-border-color-disabled:transparent;--spectrum-button-quiet-secondary-text-color-disabled:#b3b3b3;--spectrum-button-quiet-warning-icon-color:#d7373f;--spectrum-button-quiet-warning-background-color:transparent;--spectrum-button-quiet-warning-border-color:transparent;--spectrum-button-quiet-warning-text-color:#d7373f;--spectrum-button-quiet-warning-icon-color-hover:#c9252d;--spectrum-button-quiet-warning-background-color-hover:#eaeaea;--spectrum-button-quiet-warning-border-color-hover:#eaeaea;--spectrum-button-quiet-warning-text-color-hover:#c9252d;--spectrum-button-quiet-warning-icon-color-down:#c9252d;--spectrum-button-quiet-warning-background-color-down:#e1e1e1;--spectrum-button-quiet-warning-border-color-down:#e1e1e1;--spectrum-button-quiet-warning-text-color-down:#c9252d;--spectrum-button-quiet-warning-icon-color-key-focus:#fff;--spectrum-button-quiet-warning-background-color-key-focus:#1473e6;--spectrum-button-quiet-warning-border-color-key-focus:#1473e6;--spectrum-button-quiet-warning-text-color-key-focus:#fff;--spectrum-button-quiet-warning-icon-color-disabled:#cacaca;--spectrum-button-quiet-warning-background-color-disabled:transparent;--spectrum-button-quiet-warning-border-color-disabled:transparent;--spectrum-button-quiet-warning-text-color-disabled:#b3b3b3;--spectrum-button-secondary-icon-color:#6e6e6e;--spectrum-button-secondary-background-color:transparent;--spectrum-button-secondary-border-color:#6e6e6e;--spectrum-button-secondary-text-color:#6e6e6e;--spectrum-button-secondary-icon-color-hover:#fff;--spectrum-button-secondary-background-color-hover:#6e6e6e;--spectrum-button-secondary-border-color-hover:#6e6e6e;--spectrum-button-secondary-text-color-hover:#fff;--spectrum-button-secondary-icon-color-down:#fff;--spectrum-button-secondary-background-color-down:#4b4b4b;--spectrum-button-secondary-border-color-down:#4b4b4b;--spectrum-button-secondary-text-color-down:#fff;--spectrum-button-secondary-icon-color-key-focus:#fff;--spectrum-button-secondary-background-color-key-focus:#1473e6;--spectrum-button-secondary-border-color-key-focus:#1473e6;--spectrum-button-secondary-text-color-key-focus:#fff;--spectrum-button-secondary-icon-color-disabled:#cacaca;--spectrum-button-secondary-background-color-disabled:#eaeaea;--spectrum-button-secondary-border-color-disabled:#eaeaea;--spectrum-button-secondary-text-color-disabled:#b3b3b3;--spectrum-button-warning-icon-color:#c9252d;--spectrum-button-warning-background-color:transparent;--spectrum-button-warning-border-color:#c9252d;--spectrum-button-warning-text-color:#c9252d;--spectrum-button-warning-icon-color-hover:#fff;--spectrum-button-warning-background-color-hover:#c9252d;--spectrum-button-warning-border-color-hover:#c9252d;--spectrum-button-warning-text-color-hover:#fff;--spectrum-button-warning-icon-color-down:#fff;--spectrum-button-warning-background-color-down:#bb121a;--spectrum-button-warning-border-color-down:#bb121a;--spectrum-button-warning-text-color-down:#fff;--spectrum-button-warning-icon-color-key-focus:#fff;--spectrum-button-warning-background-color-key-focus:#1473e6;--spectrum-button-warning-border-color-key-focus:#1473e6;--spectrum-button-warning-text-color-key-focus:#fff;--spectrum-button-warning-icon-color-disabled:#cacaca;--spectrum-button-warning-background-color-disabled:#eaeaea;--spectrum-button-warning-border-color-disabled:#eaeaea;--spectrum-button-warning-text-color-disabled:#b3b3b3;--spectrum-card-border-color:#eaeaea;--spectrum-card-border-color-key-focus:#2680eb;--spectrum-card-border-color-hover:#cacaca;--spectrum-card-coverphoto-background-color:#eaeaea;--spectrum-card-coverphoto-border-color:#eaeaea;--spectrum-card-description-text-color:#6e6e6e;--spectrum-card-background-color:#fff;--spectrum-card-quiet-preview-background-color:#eaeaea;--spectrum-card-quiet-preview-background-color-hover:#e1e1e1;--spectrum-card-quiet-border-color-selected:#1473e6;--spectrum-card-quiet-title-text-color:#4b4b4b;--spectrum-card-quiet-subtitle-text-color:#6e6e6e;--spectrum-dropzone-border-color:#e1e1e1;--spectrum-dropzone-background-color:#f5f5f5;--spectrum-dropzone-icon-color:#b3b3b3;--spectrum-dropzone-border-color-selected-hover:#2680eb;--spectrum-dropzone-background-color-selected-hover:rgba(20,115,230,0.1);--spectrum-dropzone-icon-color-selected-hover:#1473e6;--spectrum-fieldlabel-asterisk-color:#8e8e8e;--spectrum-fieldlabel-text-color:#6e6e6e;--spectrum-fieldlabel-asterisk-color-disabled:#b3b3b3;--spectrum-fieldlabel-text-color-disabled:#b3b3b3;--spectrum-fieldlabel-side-asterisk-color:#8e8e8e;--spectrum-fieldlabel-side-text-color:#6e6e6e;--spectrum-fieldlabel-side-asterisk-color-disabled:#b3b3b3;--spectrum-fieldlabel-side-text-color-disabled:#b3b3b3;--spectrum-label-colored-gray-background-color:#747474;--spectrum-label-colored-green-background-color:#268e6c;--spectrum-label-colored-blue-background-color:#1473e6;--spectrum-label-colored-red-background-color:#d7373f;--spectrum-label-colored-seafoam-background-color:#1b959a;--spectrum-label-colored-fuchsia-background-color:#c038cc;--spectrum-label-colored-orange-background-color:#da7b11;--spectrum-label-colored-yellow-background-color:#dfbf00;--spectrum-label-colored-text-color:#fff;--spectrum-label-colored-background-color-disabled:#eaeaea;--spectrum-label-text-color:#6e6e6e;--spectrum-label-text-color-disabled:#b3b3b3;--spectrum-label-over-background-text-color:#fff;--spectrum-label-over-background-text-color-disabled:#fff;--spectrum-label-large-text-color:#6e6e6e;--spectrum-label-large-text-color-disabled:#b3b3b3;--spectrum-label-large-over-background-text-color:#fff;--spectrum-label-large-over-background-text-color-disabled:#fff;--spectrum-link-text-color:#0d66d0;--spectrum-link-underline-color:transparent;--spectrum-link-text-color-hover:#0d66d0;--spectrum-link-underline-color-hover:#0d66d0;--spectrum-link-text-color-down:#095aba;--spectrum-link-underline-color-down:#095aba;--spectrum-link-text-color-key-focus:#0d66d0;--spectrum-link-underline-color-key-focus:#0d66d0;--spectrum-link-text-color-disabled:#b3b3b3;--spectrum-link-underline-color-disabled:transparent;--spectrum-link-over-background-text-color:#fff;--spectrum-link-over-background-underline-color:#fff;--spectrum-link-over-background-text-color-hover:#fff;--spectrum-link-over-background-underline-color-hover:#fff;--spectrum-link-over-background-text-color-down:#fff;--spectrum-link-over-background-underline-color-down:#fff;--spectrum-link-over-background-text-color-key-focus:#fff;--spectrum-link-over-background-underline-color-key-focus:#fff;--spectrum-link-over-background-text-color-disabled:hsla(0,0%,100%,0.5);--spectrum-link-over-background-underline-color-disabled:transparent;--spectrum-link-quiet-text-color:#4b4b4b;--spectrum-link-quiet-underline-color:#4b4b4b;--spectrum-link-quiet-text-color-hover:#2c2c2c;--spectrum-link-quiet-underline-color-hover:#2c2c2c;--spectrum-link-quiet-text-color-down:#2c2c2c;--spectrum-link-quiet-underline-color-down:#2c2c2c;--spectrum-link-quiet-text-color-key-focus:#2c2c2c;--spectrum-link-quiet-underline-color-key-focus:#2c2c2c;--spectrum-link-quiet-text-color-mouse-focus:#2c2c2c;--spectrum-link-quiet-text-color-disabled:#b3b3b3;--spectrum-link-quiet-underline-color-disabled:transparent;--spectrum-popover-background-color:#fff;--spectrum-popover-border-color:#cacaca;--spectrum-popover-shadow-color:rgba(0,0,0,0.15);--spectrum-radio-text-color:#4b4b4b;--spectrum-radio-circle-border-color:#8e8e8e;--spectrum-radio-circle-background-color:#fafafa;--spectrum-radio-circle-dot-color:#fafafa;--spectrum-radio-text-color-hover:#2c2c2c;--spectrum-radio-circle-border-color-hover:#6e6e6e;--spectrum-radio-text-color-down:#2c2c2c;--spectrum-radio-circle-border-color-down:#4b4b4b;--spectrum-radio-text-color-key-focus:#0d66d0;--spectrum-radio-circle-border-color-key-focus:#2680eb;--spectrum-radio-text-color-disabled:#b3b3b3;--spectrum-radio-circle-border-color-disabled:#cacaca;--spectrum-radio-text-color-selected:#4b4b4b;--spectrum-radio-circle-border-color-selected:#1473e6;--spectrum-radio-text-color-selected-hover:#2c2c2c;--spectrum-radio-circle-border-color-selected-hover:#0d66d0;--spectrum-radio-text-color-selected-down:#2c2c2c;--spectrum-radio-circle-border-color-selected-down:#095aba;--spectrum-radio-text-color-selected-key-focus:#0d66d0;--spectrum-radio-circle-border-color-selected-key-focus:#2680eb;--spectrum-radio-text-color-selected-disabled:#b3b3b3;--spectrum-radio-circle-border-color-selected-disabled:#cacaca;--spectrum-radio-text-color-error:#c9252d;--spectrum-radio-circle-border-color-error:#d7373f;--spectrum-radio-text-color-error-hover:#bb121a;--spectrum-radio-circle-border-color-error-hover:#c9252d;--spectrum-radio-text-color-error-down:#bb121a;--spectrum-radio-circle-border-color-error-down:#bb121a;--spectrum-radio-text-color-error-key-focus:#0d66d0;--spectrum-radio-circle-border-color-error-key-focus:#2680eb;--spectrum-radio-text-color-error-disabled:#b3b3b3;--spectrum-radio-circle-border-color-error-disabled:#cacaca;--spectrum-radio-text-color-error-selected:#c9252d;--spectrum-radio-circle-border-color-error-selected:#d7373f;--spectrum-radio-text-color-error-selected-hover:#bb121a;--spectrum-radio-circle-border-color-error-selected-hover:#c9252d;--spectrum-radio-text-color-error-selected-down:#bb121a;--spectrum-radio-circle-border-color-error-selected-down:#bb121a;--spectrum-radio-text-color-error-selected-key-focus:#0d66d0;--spectrum-radio-circle-border-color-error-selected-key-focus:#2680eb;--spectrum-radio-text-color-error-selected-disabled:#b3b3b3;--spectrum-radio-circle-border-color-error-selected-disabled:#cacaca;--spectrum-radio-quiet-text-color:#4b4b4b;--spectrum-radio-quiet-circle-border-color:#8e8e8e;--spectrum-radio-quiet-circle-background-color:#fafafa;--spectrum-radio-quiet-circle-dot-color:#fafafa;--spectrum-radio-quiet-text-color-hover:#2c2c2c;--spectrum-radio-quiet-circle-border-color-hover:#6e6e6e;--spectrum-radio-quiet-text-color-down:#2c2c2c;--spectrum-radio-quiet-circle-border-color-down:#4b4b4b;--spectrum-radio-quiet-text-color-key-focus:#0d66d0;--spectrum-radio-quiet-circle-border-color-key-focus:#2680eb;--spectrum-radio-quiet-text-color-disabled:#b3b3b3;--spectrum-radio-quiet-circle-border-color-disabled:#cacaca;--spectrum-radio-quiet-text-color-selected:#4b4b4b;--spectrum-radio-quiet-circle-border-color-selected:#6e6e6e;--spectrum-radio-quiet-text-color-selected-hover:#2c2c2c;--spectrum-radio-quiet-circle-border-color-selected-hover:#4b4b4b;--spectrum-radio-quiet-text-color-selected-down:#2c2c2c;--spectrum-radio-quiet-circle-border-color-selected-down:#2c2c2c;--spectrum-radio-quiet-text-color-selected-key-focus:#0d66d0;--spectrum-radio-quiet-circle-border-color-selected-key-focus:#2680eb;--spectrum-radio-quiet-text-color-selected-disabled:#b3b3b3;--spectrum-radio-quiet-circle-border-color-selected-disabled:#cacaca;--spectrum-radio-quiet-text-color-error:#c9252d;--spectrum-radio-quiet-circle-border-color-error:#d7373f;--spectrum-radio-quiet-text-color-error-hover:#bb121a;--spectrum-radio-quiet-circle-border-color-error-hover:#c9252d;--spectrum-radio-quiet-text-color-error-down:#bb121a;--spectrum-radio-quiet-circle-border-color-error-down:#bb121a;--spectrum-radio-quiet-text-color-error-key-focus:#0d66d0;--spectrum-radio-quiet-circle-border-color-error-key-focus:#2680eb;--spectrum-radio-quiet-text-color-error-disabled:#b3b3b3;--spectrum-radio-quiet-circle-border-color-error-disabled:#cacaca;--spectrum-radio-quiet-text-color-error-selected:#c9252d;--spectrum-radio-quiet-circle-border-color-error-selected:#d7373f;--spectrum-radio-quiet-text-color-error-selected-hover:#bb121a;--spectrum-radio-quiet-circle-border-color-error-selected-hover:#c9252d;--spectrum-radio-quiet-text-color-error-selected-down:#bb121a;--spectrum-radio-quiet-circle-border-color-error-selected-down:#bb121a;--spectrum-radio-quiet-text-color-error-selected-key-focus:#0d66d0;--spectrum-radio-quiet-circle-border-color-error-selected-key-focus:#2680eb;--spectrum-radio-quiet-text-color-error-selected-disabled:#b3b3b3;--spectrum-radio-quiet-circle-border-color-error-selected-disabled:#cacaca;--spectrum-slider-color-handle-outset-border-color:rgba(0,0,0,0.05);--spectrum-slider-color-handle-inset-border-color:rgba(0,0,0,0.05);--spectrum-slider-color-handle-border-color:#fff;--spectrum-slider-color-handle-color:transparent;--spectrum-slider-color-track-background-color-gradient-start:#2680eb;--spectrum-slider-color-track-background-color-gradient-end:#095aba;--spectrum-slider-color-track-border-color:rgba(0,0,0,0.05);--spectrum-slider-color-handle-outset-border-color-key-focus:rgba(0,0,0,0.05);--spectrum-slider-color-track-color-disabled:#eaeaea;--spectrum-slider-color-handle-border-color-disabled:#cacaca;--spectrum-slider-color-handle-color-disabled:transparent;--spectrum-slider-handle-border-color:#6e6e6e;--spectrum-slider-handle-background-color:transparent;--spectrum-slider-track-color:#e1e1e1;--spectrum-slider-handle-border-color-hover:#4b4b4b;--spectrum-slider-handle-background-color-hover:transparent;--spectrum-slider-track-color-hover:#e1e1e1;--spectrum-slider-handle-border-color-down:#4b4b4b;--spectrum-slider-handle-background-color-down:transparent;--spectrum-slider-track-color-down:#e1e1e1;--spectrum-slider-radial-reaction-color-down:rgba(75,75,75,0.6);--spectrum-slider-handle-border-color-key-focus:#2680eb;--spectrum-slider-handle-background-color-key-focus:#2680eb;--spectrum-slider-track-color-key-focus:#e1e1e1;--spectrum-slider-handle-border-color-disabled:#cacaca;--spectrum-slider-handle-background-color-disabled:transparent;--spectrum-slider-track-color-disabled:#e1e1e1;--spectrum-slider-editable-handle-border-color:#6e6e6e;--spectrum-slider-editable-handle-background-color:transparent;--spectrum-slider-editable-track-color:#e1e1e1;--spectrum-slider-editable-handle-border-color-hover:#4b4b4b;--spectrum-slider-editable-handle-background-color-hover:transparent;--spectrum-slider-editable-track-color-hover:#e1e1e1;--spectrum-slider-editable-handle-border-color-down:#4b4b4b;--spectrum-slider-editable-handle-background-color-down:transparent;--spectrum-slider-editable-track-color-down:#e1e1e1;--spectrum-slider-editable-radial-reaction-color-down:rgba(75,75,75,0.6);--spectrum-slider-editable-handle-border-color-key-focus:#2680eb;--spectrum-slider-editable-handle-background-color-key-focus:#2680eb;--spectrum-slider-editable-track-color-key-focus:#e1e1e1;--spectrum-slider-editable-handle-border-color-disabled:#cacaca;--spectrum-slider-editable-handle-background-color-disabled:transparent;--spectrum-slider-editable-track-color-disabled:#e1e1e1;--spectrum-slider-fill-handle-border-color:#6e6e6e;--spectrum-slider-fill-handle-background-color:transparent;--spectrum-slider-fill-track-color:#6e6e6e;--spectrum-slider-fill-handle-border-color-hover:#4b4b4b;--spectrum-slider-fill-handle-background-color-hover:transparent;--spectrum-slider-fill-track-color-hover:#e1e1e1;--spectrum-slider-fill-handle-border-color-down:#4b4b4b;--spectrum-slider-fill-handle-background-color-down:transparent;--spectrum-slider-fill-track-color-down:#e1e1e1;--spectrum-slider-fill-radial-reaction-color-down:rgba(75,75,75,0.6);--spectrum-slider-fill-handle-border-color-key-focus:#2680eb;--spectrum-slider-fill-handle-background-color-key-focus:#2680eb;--spectrum-slider-fill-track-color-key-focus:#e1e1e1;--spectrum-slider-fill-handle-border-color-disabled:#cacaca;--spectrum-slider-fill-handle-background-color-disabled:transparent;--spectrum-slider-fill-track-color-disabled:#e1e1e1;--spectrum-slider-player-track-buffer-color:#b3b3b3;--spectrum-slider-player-track-buffer-color-disabled:#e1e1e1;--spectrum-slider-ramp-track-color-disabled:#eaeaea;--spectrum-slider-tick-mark-color:#e1e1e1;--spectrum-switch-text-color:#4b4b4b;--spectrum-switch-handle-border-color:#8e8e8e;--spectrum-switch-handle-background-color:#fafafa;--spectrum-switch-track-color:#e1e1e1;--spectrum-switch-text-color-hover:#2c2c2c;--spectrum-switch-handle-border-color-hover:#6e6e6e;--spectrum-switch-handle-background-color-hover:#fafafa;--spectrum-switch-track-color-hover:#e1e1e1;--spectrum-switch-text-color-down:#2c2c2c;--spectrum-switch-handle-border-color-down:#4b4b4b;--spectrum-switch-handle-background-color-down:#fafafa;--spectrum-switch-track-color-down:#e1e1e1;--spectrum-switch-text-color-key-focus:#0d66d0;--spectrum-switch-handle-border-color-key-focus:#2680eb;--spectrum-switch-handle-background-color-key-focus:#fafafa;--spectrum-switch-track-color-key-focus:#e1e1e1;--spectrum-switch-text-color-disabled:#b3b3b3;--spectrum-switch-handle-border-color-disabled:#cacaca;--spectrum-switch-handle-background-color-disabled:#fafafa;--spectrum-switch-track-color-disabled:#e1e1e1;--spectrum-switch-text-color-selected:#4b4b4b;--spectrum-switch-handle-border-color-selected:#1473e6;--spectrum-switch-handle-background-color-selected:#fafafa;--spectrum-switch-track-color-selected:#1473e6;--spectrum-switch-text-color-selected-hover:#2c2c2c;--spectrum-switch-handle-border-color-selected-hover:#0d66d0;--spectrum-switch-handle-background-color-selected-hover:#fafafa;--spectrum-switch-track-color-selected-hover:#0d66d0;--spectrum-switch-text-color-selected-down:#2c2c2c;--spectrum-switch-handle-border-color-selected-down:#095aba;--spectrum-switch-handle-background-color-selected-down:#fafafa;--spectrum-switch-track-color-selected-down:#095aba;--spectrum-switch-text-color-selected-key-focus:#0d66d0;--spectrum-switch-track-color-selected-key-focus:#2680eb;--spectrum-switch-handle-background-color-selected-key-focus:#fafafa;--spectrum-switch-handle-border-color-selected-key-focus:#2680eb;--spectrum-switch-text-color-selected-disabled:#b3b3b3;--spectrum-switch-track-color-selected-disabled:#cacaca;--spectrum-switch-handle-border-color-selected-disabled:#cacaca;--spectrum-switch-handle-background-color-selected-disabled:#fafafa;--spectrum-switch-text-color-error:#c9252d;--spectrum-switch-track-color-error:#d7373f;--spectrum-switch-handle-border-color-error:#d7373f;--spectrum-switch-handle-background-color-error:#fafafa;--spectrum-switch-text-color-error-hover:#bb121a;--spectrum-switch-track-color-error-hover:#c9252d;--spectrum-switch-handle-border-color-error-hover:#c9252d;--spectrum-switch-handle-background-color-error-hover:#fafafa;--spectrum-switch-text-color-error-down:#bb121a;--spectrum-switch-track-color-error-down:#bb121a;--spectrum-switch-handle-border-color-error-down:#bb121a;--spectrum-switch-handle-background-color-error-down:#fafafa;--spectrum-switch-text-color-error-key-focus:#0d66d0;--spectrum-switch-handle-border-color-error-key-focus:#2680eb;--spectrum-switch-handle-background-color-error-key-focus:#fafafa;--spectrum-switch-track-color-error-key-focus:#e1e1e1;--spectrum-switch-text-color-error-disabled:#b3b3b3;--spectrum-switch-handle-border-color-error-disabled:#cacaca;--spectrum-switch-handle-background-color-error-disabled:#fafafa;--spectrum-switch-track-color-error-disabled:#e1e1e1;--spectrum-switch-text-color-error-selected:#c9252d;--spectrum-switch-track-color-error-selected:#d7373f;--spectrum-switch-handle-border-color-error-selected:#d7373f;--spectrum-switch-handle-background-color-error-selected:#fafafa;--spectrum-switch-text-color-error-selected-hover:#bb121a;--spectrum-switch-track-color-error-selected-hover:#c9252d;--spectrum-switch-handle-border-color-error-selected-hover:#c9252d;--spectrum-switch-handle-background-color-error-selected-hover:#fafafa;--spectrum-switch-text-color-error-selected-down:#bb121a;--spectrum-switch-track-color-error-selected-down:#bb121a;--spectrum-switch-handle-border-color-error-selected-down:#bb121a;--spectrum-switch-handle-background-color-error-selected-down:#fafafa;--spectrum-switch-text-color-error-selected-key-focus:#0d66d0;--spectrum-switch-handle-border-color-error-selected-key-focus:#2680eb;--spectrum-switch-handle-background-color-error-selected-key-focus:#fafafa;--spectrum-switch-track-color-error-selected-key-focus:#e1e1e1;--spectrum-switch-text-color-error-selected-disabled:#b3b3b3;--spectrum-switch-track-color-error-selected-disabled:#cacaca;--spectrum-switch-handle-border-color-error-selected-disabled:#cacaca;--spectrum-switch-handle-background-color-error-selected-disabled:#fafafa;--spectrum-switch-track-color-disabled-selected:#cacaca;--spectrum-switch-quiet-text-color:#4b4b4b;--spectrum-switch-quiet-handle-border-color:#8e8e8e;--spectrum-switch-quiet-handle-background-color:#fafafa;--spectrum-switch-quiet-track-color:#e1e1e1;--spectrum-switch-quiet-text-color-hover:#2c2c2c;--spectrum-switch-quiet-handle-border-color-hover:#6e6e6e;--spectrum-switch-quiet-handle-background-color-hover:#fafafa;--spectrum-switch-quiet-track-color-hover:#e1e1e1;--spectrum-switch-quiet-text-color-down:#2c2c2c;--spectrum-switch-quiet-handle-border-color-down:#4b4b4b;--spectrum-switch-quiet-handle-background-color-down:#fafafa;--spectrum-switch-quiet-track-color-down:#e1e1e1;--spectrum-switch-quiet-text-color-key-focus:#0d66d0;--spectrum-switch-quiet-handle-border-color-key-focus:#2680eb;--spectrum-switch-quiet-handle-background-color-key-focus:#fafafa;--spectrum-switch-quiet-track-color-key-focus:#e1e1e1;--spectrum-switch-quiet-text-color-disabled:#b3b3b3;--spectrum-switch-quiet-handle-border-color-disabled:#cacaca;--spectrum-switch-quiet-handle-background-color-disabled:#fafafa;--spectrum-switch-quiet-track-color-disabled:#e1e1e1;--spectrum-switch-quiet-text-color-selected:#4b4b4b;--spectrum-switch-quiet-handle-border-color-selected:#6e6e6e;--spectrum-switch-quiet-handle-background-color-selected:#fafafa;--spectrum-switch-quiet-track-color-selected:#6e6e6e;--spectrum-switch-quiet-text-color-selected-hover:#2c2c2c;--spectrum-switch-quiet-handle-border-color-selected-hover:#4b4b4b;--spectrum-switch-quiet-handle-background-color-selected-hover:#fafafa;--spectrum-switch-quiet-track-color-selected-hover:#4b4b4b;--spectrum-switch-quiet-text-color-selected-down:#2c2c2c;--spectrum-switch-quiet-handle-border-color-selected-down:#2c2c2c;--spectrum-switch-quiet-handle-background-color-selected-down:#fafafa;--spectrum-switch-quiet-track-color-selected-down:#2c2c2c;--spectrum-switch-quiet-text-color-selected-key-focus:#0d66d0;--spectrum-switch-quiet-track-color-selected-key-focus:#2680eb;--spectrum-switch-quiet-handle-background-color-selected-key-focus:#fafafa;--spectrum-switch-quiet-handle-border-color-selected-key-focus:#2680eb;--spectrum-switch-quiet-text-color-selected-disabled:#b3b3b3;--spectrum-switch-quiet-track-color-selected-disabled:#cacaca;--spectrum-switch-quiet-handle-border-color-selected-disabled:#cacaca;--spectrum-switch-quiet-handle-background-color-selected-disabled:#fafafa;--spectrum-switch-quiet-text-color-error:#c9252d;--spectrum-switch-quiet-track-color-error:#d7373f;--spectrum-switch-quiet-handle-border-color-error:#d7373f;--spectrum-switch-quiet-handle-background-color-error:#fafafa;--spectrum-switch-quiet-text-color-error-hover:#bb121a;--spectrum-switch-quiet-track-color-error-hover:#c9252d;--spectrum-switch-quiet-handle-border-color-error-hover:#c9252d;--spectrum-switch-quiet-handle-background-color-error-hover:#fafafa;--spectrum-switch-quiet-text-color-error-down:#bb121a;--spectrum-switch-quiet-track-color-error-down:#bb121a;--spectrum-switch-quiet-handle-border-color-error-down:#bb121a;--spectrum-switch-quiet-handle-background-color-error-down:#fafafa;--spectrum-switch-quiet-text-color-error-key-focus:#0d66d0;--spectrum-switch-quiet-handle-border-color-error-key-focus:#2680eb;--spectrum-switch-quiet-handle-background-color-error-key-focus:#fafafa;--spectrum-switch-quiet-track-color-error-key-focus:#e1e1e1;--spectrum-switch-quiet-text-color-error-disabled:#b3b3b3;--spectrum-switch-quiet-handle-border-color-error-disabled:#cacaca;--spectrum-switch-quiet-handle-background-color-error-disabled:#fafafa;--spectrum-switch-quiet-track-color-error-disabled:#e1e1e1;--spectrum-switch-quiet-text-color-error-selected:#c9252d;--spectrum-switch-quiet-track-color-error-selected:#d7373f;--spectrum-switch-quiet-handle-border-color-error-selected:#d7373f;--spectrum-switch-quiet-handle-background-color-error-selected:#fafafa;--spectrum-switch-quiet-text-color-error-selected-hover:#bb121a;--spectrum-switch-quiet-track-color-error-selected-hover:#c9252d;--spectrum-switch-quiet-handle-border-color-error-selected-hover:#c9252d;--spectrum-switch-quiet-handle-background-color-error-selected-hover:#fafafa;--spectrum-switch-quiet-text-color-error-selected-down:#bb121a;--spectrum-switch-quiet-track-color-error-selected-down:#bb121a;--spectrum-switch-quiet-handle-border-color-error-selected-down:#bb121a;--spectrum-switch-quiet-handle-background-color-error-selected-down:#fafafa;--spectrum-switch-quiet-text-color-error-selected-key-focus:#0d66d0;--spectrum-switch-quiet-handle-border-color-error-selected-key-focus:#2680eb;--spectrum-switch-quiet-handle-background-color-error-selected-key-focus:#fafafa;--spectrum-switch-quiet-track-color-error-selected-key-focus:#e1e1e1;--spectrum-switch-quiet-text-color-error-selected-disabled:#b3b3b3;--spectrum-switch-quiet-track-color-error-selected-disabled:#cacaca;--spectrum-switch-quiet-handle-border-color-error-selected-disabled:#cacaca;--spectrum-switch-quiet-handle-background-color-error-selected-disabled:#fafafa;--spectrum-switch-quiet-track-color-disabled-selected:#cacaca;--spectrum-tabs-compact-text-color:#6e6e6e;--spectrum-tabs-compact-icon-color:#6e6e6e;--spectrum-tabs-compact-selection-indicator-color:#2c2c2c;--spectrum-tabs-compact-focus-ring-color:#2680eb;--spectrum-tabs-compact-rule-color:transparent;--spectrum-tabs-compact-text-color-hover:#2c2c2c;--spectrum-tabs-compact-icon-color-hover:#2c2c2c;--spectrum-tabs-compact-text-color-down:#2c2c2c;--spectrum-tabs-compact-icon-color-down:#2c2c2c;--spectrum-tabs-compact-text-color-key-focus:#2c2c2c;--spectrum-tabs-compact-icon-color-key-focus:#2c2c2c;--spectrum-tabs-compact-text-color-mouse-focus:#2c2c2c;--spectrum-tabs-compact-text-color-disabled:#b3b3b3;--spectrum-tabs-compact-icon-color-disabled:#cacaca;--spectrum-tabs-compact-text-color-selected:#2c2c2c;--spectrum-tabs-compact-icon-color-selected:#2c2c2c;--spectrum-tabs-compact-text-color-selected-hover:#2c2c2c;--spectrum-tabs-compact-icon-color-selected-hover:#2c2c2c;--spectrum-tabs-compact-text-color-selected-down:#2c2c2c;--spectrum-tabs-compact-icon-color-selected-down:#2c2c2c;--spectrum-tabs-compact-text-color-selected-key-focus:#2c2c2c;--spectrum-tabs-compact-icon-color-selected-key-focus:#2c2c2c;--spectrum-tabs-compact-text-color-selected-disabled:#b3b3b3;--spectrum-tabs-compact-icon-color-selected-disabled:#cacaca;--spectrum-tabs-compact-vertical-text-color:#6e6e6e;--spectrum-tabs-compact-vertical-icon-color:#6e6e6e;--spectrum-tabs-compact-vertical-selection-indicator-color:#2c2c2c;--spectrum-tabs-compact-vertical-focus-ring-color:#2680eb;--spectrum-tabs-compact-vertical-rule-color:transparent;--spectrum-tabs-compact-vertical-text-color-hover:#2c2c2c;--spectrum-tabs-compact-vertical-icon-color-hover:#2c2c2c;--spectrum-tabs-compact-vertical-text-color-down:#2c2c2c;--spectrum-tabs-compact-vertical-icon-color-down:#2c2c2c;--spectrum-tabs-compact-vertical-text-color-key-focus:#2c2c2c;--spectrum-tabs-compact-vertical-icon-color-key-focus:#2c2c2c;--spectrum-tabs-compact-vertical-text-color-mouse-focus:#2c2c2c;--spectrum-tabs-compact-vertical-text-color-disabled:#b3b3b3;--spectrum-tabs-compact-vertical-icon-color-disabled:#cacaca;--spectrum-tabs-compact-vertical-text-color-selected:#2c2c2c;--spectrum-tabs-compact-vertical-icon-color-selected:#2c2c2c;--spectrum-tabs-compact-vertical-text-color-selected-hover:#2c2c2c;--spectrum-tabs-compact-vertical-icon-color-selected-hover:#2c2c2c;--spectrum-tabs-compact-vertical-text-color-selected-down:#2c2c2c;--spectrum-tabs-compact-vertical-icon-color-selected-down:#2c2c2c;--spectrum-tabs-compact-vertical-text-color-selected-key-focus:#2c2c2c;--spectrum-tabs-compact-vertical-icon-color-selected-key-focus:#2c2c2c;--spectrum-tabs-compact-vertical-text-color-selected-disabled:#b3b3b3;--spectrum-tabs-compact-vertical-icon-color-selected-disabled:#cacaca;--spectrum-tabs-text-color:#6e6e6e;--spectrum-tabs-icon-color:#6e6e6e;--spectrum-tabs-selection-indicator-color:#2c2c2c;--spectrum-tabs-focus-ring-color:#2680eb;--spectrum-tabs-rule-color:#eaeaea;--spectrum-tabs-text-color-hover:#2c2c2c;--spectrum-tabs-icon-color-hover:#2c2c2c;--spectrum-tabs-text-color-down:#2c2c2c;--spectrum-tabs-icon-color-down:#2c2c2c;--spectrum-tabs-text-color-key-focus:#2c2c2c;--spectrum-tabs-icon-color-key-focus:#2c2c2c;--spectrum-tabs-text-color-mouse-focus:#2c2c2c;--spectrum-tabs-text-color-disabled:#b3b3b3;--spectrum-tabs-icon-color-disabled:#cacaca;--spectrum-tabs-text-color-selected:#2c2c2c;--spectrum-tabs-icon-color-selected:#2c2c2c;--spectrum-tabs-text-color-selected-hover:#2c2c2c;--spectrum-tabs-icon-color-selected-hover:#2c2c2c;--spectrum-tabs-text-color-selected-down:#2c2c2c;--spectrum-tabs-icon-color-selected-down:#2c2c2c;--spectrum-tabs-text-color-selected-key-focus:#2c2c2c;--spectrum-tabs-icon-color-selected-key-focus:#2c2c2c;--spectrum-tabs-text-color-selected-disabled:#b3b3b3;--spectrum-tabs-icon-color-selected-disabled:#cacaca;--spectrum-tabs-quiet-text-color:#6e6e6e;--spectrum-tabs-quiet-icon-color:#6e6e6e;--spectrum-tabs-quiet-selection-indicator-color:#2c2c2c;--spectrum-tabs-quiet-focus-ring-color:#2680eb;--spectrum-tabs-quiet-rule-color:transparent;--spectrum-tabs-quiet-text-color-hover:#2c2c2c;--spectrum-tabs-quiet-icon-color-hover:#2c2c2c;--spectrum-tabs-quiet-text-color-down:#2c2c2c;--spectrum-tabs-quiet-icon-color-down:#2c2c2c;--spectrum-tabs-quiet-text-color-key-focus:#2c2c2c;--spectrum-tabs-quiet-icon-color-key-focus:#2c2c2c;--spectrum-tabs-quiet-text-color-mouse-focus:#2c2c2c;--spectrum-tabs-quiet-text-color-disabled:#b3b3b3;--spectrum-tabs-quiet-icon-color-disabled:#cacaca;--spectrum-tabs-quiet-text-color-selected:#2c2c2c;--spectrum-tabs-quiet-icon-color-selected:#2c2c2c;--spectrum-tabs-quiet-text-color-selected-hover:#2c2c2c;--spectrum-tabs-quiet-icon-color-selected-hover:#2c2c2c;--spectrum-tabs-quiet-text-color-selected-down:#2c2c2c;--spectrum-tabs-quiet-icon-color-selected-down:#2c2c2c;--spectrum-tabs-quiet-text-color-selected-key-focus:#2c2c2c;--spectrum-tabs-quiet-icon-color-selected-key-focus:#2c2c2c;--spectrum-tabs-quiet-text-color-selected-disabled:#b3b3b3;--spectrum-tabs-quiet-icon-color-selected-disabled:#cacaca;--spectrum-tabs-quiet-compact-text-color:#6e6e6e;--spectrum-tabs-quiet-compact-icon-color:#6e6e6e;--spectrum-tabs-quiet-compact-selection-indicator-color:#2c2c2c;--spectrum-tabs-quiet-compact-focus-ring-color:#2680eb;--spectrum-tabs-quiet-compact-rule-color:transparent;--spectrum-tabs-quiet-compact-text-color-hover:#2c2c2c;--spectrum-tabs-quiet-compact-icon-color-hover:#2c2c2c;--spectrum-tabs-quiet-compact-text-color-down:#2c2c2c;--spectrum-tabs-quiet-compact-icon-color-down:#2c2c2c;--spectrum-tabs-quiet-compact-text-color-key-focus:#2c2c2c;--spectrum-tabs-quiet-compact-icon-color-key-focus:#2c2c2c;--spectrum-tabs-quiet-compact-text-color-mouse-focus:#2c2c2c;--spectrum-tabs-quiet-compact-text-color-disabled:#b3b3b3;--spectrum-tabs-quiet-compact-icon-color-disabled:#cacaca;--spectrum-tabs-quiet-compact-text-color-selected:#2c2c2c;--spectrum-tabs-quiet-compact-icon-color-selected:#2c2c2c;--spectrum-tabs-quiet-compact-text-color-selected-hover:#2c2c2c;--spectrum-tabs-quiet-compact-icon-color-selected-hover:#2c2c2c;--spectrum-tabs-quiet-compact-text-color-selected-down:#2c2c2c;--spectrum-tabs-quiet-compact-icon-color-selected-down:#2c2c2c;--spectrum-tabs-quiet-compact-text-color-selected-key-focus:#2c2c2c;--spectrum-tabs-quiet-compact-icon-color-selected-key-focus:#2c2c2c;--spectrum-tabs-quiet-compact-text-color-selected-disabled:#b3b3b3;--spectrum-tabs-quiet-compact-icon-color-selected-disabled:#cacaca;--spectrum-tabs-quiet-vertical-text-color:#6e6e6e;--spectrum-tabs-quiet-vertical-icon-color:#6e6e6e;--spectrum-tabs-quiet-vertical-selection-indicator-color:#2c2c2c;--spectrum-tabs-quiet-vertical-focus-ring-color:#2680eb;--spectrum-tabs-quiet-vertical-rule-color:transparent;--spectrum-tabs-quiet-vertical-text-color-hover:#2c2c2c;--spectrum-tabs-quiet-vertical-icon-color-hover:#2c2c2c;--spectrum-tabs-quiet-vertical-text-color-down:#2c2c2c;--spectrum-tabs-quiet-vertical-icon-color-down:#2c2c2c;--spectrum-tabs-quiet-vertical-text-color-key-focus:#2c2c2c;--spectrum-tabs-quiet-vertical-icon-color-key-focus:#2c2c2c;--spectrum-tabs-quiet-vertical-text-color-mouse-focus:#2c2c2c;--spectrum-tabs-quiet-vertical-text-color-disabled:#b3b3b3;--spectrum-tabs-quiet-vertical-icon-color-disabled:#cacaca;--spectrum-tabs-quiet-vertical-text-color-selected:#2c2c2c;--spectrum-tabs-quiet-vertical-icon-color-selected:#2c2c2c;--spectrum-tabs-quiet-vertical-text-color-selected-hover:#2c2c2c;--spectrum-tabs-quiet-vertical-icon-color-selected-hover:#2c2c2c;--spectrum-tabs-quiet-vertical-text-color-selected-down:#2c2c2c;--spectrum-tabs-quiet-vertical-icon-color-selected-down:#2c2c2c;--spectrum-tabs-quiet-vertical-text-color-selected-key-focus:#2c2c2c;--spectrum-tabs-quiet-vertical-icon-color-selected-key-focus:#2c2c2c;--spectrum-tabs-quiet-vertical-text-color-selected-disabled:#b3b3b3;--spectrum-tabs-quiet-vertical-icon-color-selected-disabled:#cacaca;--spectrum-tabs-vertical-text-color:#6e6e6e;--spectrum-tabs-vertical-icon-color:#6e6e6e;--spectrum-tabs-vertical-selection-indicator-color:#2c2c2c;--spectrum-tabs-vertical-focus-ring-color:#2680eb;--spectrum-tabs-vertical-rule-color:#eaeaea;--spectrum-tabs-vertical-text-color-hover:#2c2c2c;--spectrum-tabs-vertical-icon-color-hover:#2c2c2c;--spectrum-tabs-vertical-text-color-down:#2c2c2c;--spectrum-tabs-vertical-icon-color-down:#2c2c2c;--spectrum-tabs-vertical-text-color-key-focus:#2c2c2c;--spectrum-tabs-vertical-icon-color-key-focus:#2c2c2c;--spectrum-tabs-vertical-text-color-mouse-focus:#2c2c2c;--spectrum-tabs-vertical-text-color-disabled:#b3b3b3;--spectrum-tabs-vertical-icon-color-disabled:#cacaca;--spectrum-tabs-vertical-text-color-selected:#2c2c2c;--spectrum-tabs-vertical-icon-color-selected:#2c2c2c;--spectrum-tabs-vertical-text-color-selected-hover:#2c2c2c;--spectrum-tabs-vertical-icon-color-selected-hover:#2c2c2c;--spectrum-tabs-vertical-text-color-selected-down:#2c2c2c;--spectrum-tabs-vertical-icon-color-selected-down:#2c2c2c;--spectrum-tabs-vertical-text-color-selected-key-focus:#2c2c2c;--spectrum-tabs-vertical-icon-color-selected-key-focus:#2c2c2c;--spectrum-tabs-vertical-text-color-selected-disabled:#b3b3b3;--spectrum-tabs-vertical-icon-color-selected-disabled:#cacaca}:host{display:block}\n"]);

  theme_light_templateObject = function () {
    return data;
  };

  return data;
}

function theme_light_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const theme_light_styles = Object(lit_element["b" /* css */])(theme_light_templateObject());
/* harmony default export */ var theme_light = (theme_light_styles);
// CONCATENATED MODULE: ./src/themes/theme-light.ts
function themes_theme_light_templateObject() {
  const data = themes_theme_light_taggedTemplateLiteral(["\n            <slot></slot>\n        "]);

  themes_theme_light_templateObject = function () {
    return data;
  };

  return data;
}

function themes_theme_light_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/


class theme_light_ThemeLight extends lit_element["a" /* LitElement */] {
  static get styles() {
    return [theme_light];
  }

  render() {
    return Object(lit_element["c" /* html */])(themes_theme_light_templateObject());
  }

}
// CONCATENATED MODULE: ./src/themes/theme.css
function theme_templateObject() {
  const data = theme_taggedTemplateLiteral(["\n:host,:root{--spectrum-global-color-static-black:#000;--spectrum-global-color-static-white:#fff;--spectrum-global-color-static-blue:#1473e6;--spectrum-global-color-static-gray-50:#fff;--spectrum-global-color-static-gray-75:#fff;--spectrum-global-color-static-gray-100:#fff;--spectrum-global-color-static-gray-200:#f4f4f4;--spectrum-global-color-static-gray-300:#eaeaea;--spectrum-global-color-static-gray-400:#d3d3d3;--spectrum-global-color-static-gray-500:#bcbcbc;--spectrum-global-color-static-gray-600:#959595;--spectrum-global-color-static-gray-700:#747474;--spectrum-global-color-static-gray-800:#505050;--spectrum-global-color-static-gray-900:#323232;--spectrum-global-color-static-blue-400:#378ef0;--spectrum-global-color-static-blue-500:#2680eb;--spectrum-global-color-static-blue-600:#1473e6;--spectrum-global-color-static-blue-700:#0d66d0;--spectrum-global-color-static-red-400:#ec5b62;--spectrum-global-color-static-red-500:#e34850;--spectrum-global-color-static-red-600:#d7373f;--spectrum-global-color-static-red-700:#c9252d;--spectrum-global-color-static-orange-400:#f29423;--spectrum-global-color-static-orange-500:#e68619;--spectrum-global-color-static-orange-600:#da7b11;--spectrum-global-color-static-orange-700:#cb6f10;--spectrum-global-color-static-green-400:#33ab84;--spectrum-global-color-static-green-500:#2d9d78;--spectrum-global-color-static-green-600:#268e6c;--spectrum-global-color-static-green-700:#12805c;--spectrum-global-color-opacity-100:1;--spectrum-global-color-opacity-90:0.9;--spectrum-global-color-opacity-80:0.8;--spectrum-global-color-opacity-60:0.6;--spectrum-global-color-opacity-50:0.5;--spectrum-global-color-opacity-40:0.4;--spectrum-global-color-opacity-30:0.3;--spectrum-global-color-opacity-25:0.25;--spectrum-global-color-opacity-20:0.2;--spectrum-global-color-opacity-15:0.15;--spectrum-global-color-opacity-10:0.1;--spectrum-global-color-opacity-8:0.08;--spectrum-global-color-opacity-7:0.07;--spectrum-global-color-opacity-6:0.06;--spectrum-global-color-opacity-5:0.05;--spectrum-global-color-opacity-4:0.04;--spectrum-global-font-family-base:adobe-clean,\"Source Sans Pro\",-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,Ubuntu,\"Trebuchet MS\",\"Lucida Grande\",sans-serif;--spectrum-global-font-family-serif:adobe-clean-serif,\"Source Serif Pro\",Georgia,serif;--spectrum-global-font-family-code:\"Source Code Pro\",Monaco,monospace;--spectrum-global-font-weight-thin:100;--spectrum-global-font-weight-ultra-light:200;--spectrum-global-font-weight-light:300;--spectrum-global-font-weight-regular:400;--spectrum-global-font-weight-medium:500;--spectrum-global-font-weight-semi-bold:600;--spectrum-global-font-weight-bold:700;--spectrum-global-font-weight-extra-bold:800;--spectrum-global-font-weight-black:900;--spectrum-global-font-style-regular:normal;--spectrum-global-font-style-italic:italic;--spectrum-global-font-letter-spacing-none:0;--spectrum-global-font-letter-spacing-small:0.0125em;--spectrum-global-font-letter-spacing-han:0.05em;--spectrum-global-font-letter-spacing-medium:0.06em;--spectrum-global-font-line-height-large:1.7;--spectrum-global-font-line-height-medium:1.5;--spectrum-global-font-line-height-small:1.3;--spectrum-global-font-multiplier-25:0.25em;--spectrum-global-font-multiplier-75:0.75em;--spectrum-global-dimension-static-size-0:0px;--spectrum-global-dimension-static-size-10:1px;--spectrum-global-dimension-static-size-25:2px;--spectrum-global-dimension-static-size-50:4px;--spectrum-global-dimension-static-size-40:3px;--spectrum-global-dimension-static-size-65:5px;--spectrum-global-dimension-static-size-100:8px;--spectrum-global-dimension-static-size-115:9px;--spectrum-global-dimension-static-size-125:10px;--spectrum-global-dimension-static-size-150:12px;--spectrum-global-dimension-static-size-175:14px;--spectrum-global-dimension-static-size-200:16px;--spectrum-global-dimension-static-size-225:18px;--spectrum-global-dimension-static-size-250:20px;--spectrum-global-dimension-static-size-300:24px;--spectrum-global-dimension-static-size-400:32px;--spectrum-global-dimension-static-size-450:36px;--spectrum-global-dimension-static-size-500:40px;--spectrum-global-dimension-static-size-550:44px;--spectrum-global-dimension-static-size-600:48px;--spectrum-global-dimension-static-size-700:56px;--spectrum-global-dimension-static-size-800:64px;--spectrum-global-dimension-static-size-900:72px;--spectrum-global-dimension-static-size-1000:80px;--spectrum-global-dimension-static-size-1200:96px;--spectrum-global-dimension-static-size-1700:136px;--spectrum-global-dimension-static-size-2400:192px;--spectrum-global-dimension-static-size-2600:208px;--spectrum-global-dimension-static-size-3400:272px;--spectrum-global-dimension-static-size-3600:288px;--spectrum-global-dimension-static-size-4600:368px;--spectrum-global-dimension-static-size-5000:400px;--spectrum-global-dimension-static-size-6000:480px;--spectrum-global-dimension-static-font-size-50:11px;--spectrum-global-dimension-static-font-size-75:12px;--spectrum-global-dimension-static-font-size-100:14px;--spectrum-global-dimension-static-font-size-150:15px;--spectrum-global-dimension-static-font-size-200:16px;--spectrum-global-dimension-static-font-size-300:18px;--spectrum-global-dimension-static-font-size-400:20px;--spectrum-global-dimension-static-font-size-500:22px;--spectrum-global-dimension-static-font-size-600:25px;--spectrum-global-dimension-static-font-size-700:28px;--spectrum-global-dimension-static-font-size-800:32px;--spectrum-global-dimension-static-font-size-900:36px;--spectrum-global-dimension-static-font-size-1000:40px;--spectrum-global-dimension-static-percent-50:50%;--spectrum-global-dimension-static-percent-100:100%;--spectrum-global-dimension-static-breakpoint-xsmall:304px;--spectrum-global-dimension-static-breakpoint-small:768px;--spectrum-global-dimension-static-breakpoint-medium:1280px;--spectrum-global-dimension-static-breakpoint-large:1768px;--spectrum-global-dimension-static-breakpoint-xlarge:2160px;--spectrum-global-dimension-static-grid-columns:12;--spectrum-global-dimension-static-grid-fluid-width:100%;--spectrum-global-dimension-static-grid-fixed-max-width:1280px;--spectrum-global-animation-duration-0:0ms;--spectrum-global-animation-duration-100:130ms;--spectrum-global-animation-duration-200:160ms;--spectrum-global-animation-duration-300:190ms;--spectrum-global-animation-duration-400:220ms;--spectrum-global-animation-duration-500:250ms;--spectrum-global-animation-duration-600:300ms;--spectrum-global-animation-duration-700:350ms;--spectrum-global-animation-duration-800:400ms;--spectrum-global-animation-duration-900:450ms;--spectrum-global-animation-duration-1000:500ms;--spectrum-global-animation-duration-2000:1000ms;--spectrum-global-animation-duration-4000:2000ms;--spectrum-global-animation-ease-in-out:(0.45,0,0.4,1);--spectrum-global-animation-ease-in:(0.5,0,1,1);--spectrum-global-animation-ease-out:(0,0,0.4,1);--spectrum-global-animation-linear:(0,0,1,1);font-family:var(--spectrum-global-font-family-base);font-size:var(--spectrum-alias-font-size-default);--spectrum-font-fallbacks-sans:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,sans-serif;--spectrum-font-fallbacks-serif:serif;--spectrum-font-fallbacks-mono:monospace;--spectrum-font-family-ar:myriad-arabic,var(--spectrum-font-fallbacks-sans);--spectrum-font-family-article:adobe-clean-serif,\"Source Serif\",var(--spectrum-font-fallbacks-serif);--spectrum-font-family-article-ar:adobe-arabic,var(--spectrum-font-fallbacks-serif);--spectrum-font-family-article-he:adobe-hebrew,var(--spectrum-font-fallbacks-serif);--spectrum-font-family-article-ja:source-han-serif-japanese,var(--spectrum-font-fallbacks-serif);--spectrum-font-family-article-ko:source-han-serif-korean,var(--spectrum-font-fallbacks-serif);--spectrum-font-family-article-zh-hans:source-han-serif-sc,var(--spectrum-font-fallbacks-serif);--spectrum-font-family-article-zh-hant:source-han-serif-tc,var(--spectrum-font-fallbacks-serif);--spectrum-font-family-base:adobe-clean,\"Source Sans Pro\",var(--spectrum-font-fallbacks-sans);--spectrum-font-family-code:source-code-pro,\"Source Code Pro\",var(--spectrum-font-fallbacks-mono);--spectrum-font-family-han:adobe-clean-han-japanese,var(--spectrum-font-fallbacks-sans);--spectrum-font-family-he:var(--spectrum-font-fallbacks-sans);--spectrum-font-family-zh:var(--spectrum-font-family-han);--spectrum-font-family-zhhans:var(--spectrum-font-family-han);--spectrum-font-family-ko:var(--spectrum-font-family-han);--spectrum-font-family-ja:var(--spectrum-font-family-han);--spectrum-font-family-condensed:adobe-clean-condensed,var(--spectrum-font-family-base);--spectrum-text-size:var(--spectrum-alias-font-size-default);--spectrum-text-body-line-height:var(--spectrum-alias-line-height-medium);--spectrum-text-size-text-label:var(--spectrum-label-text-size);--spectrum-line-height-text-label:var(--spectrum-label-text-line-height)}:host{position:relative;display:block}#scale,#theme{width:100%;height:100%}\n"]);

  theme_templateObject = function () {
    return data;
  };

  return data;
}

function theme_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const theme_styles = Object(lit_element["b" /* css */])(theme_templateObject());
/* harmony default export */ var theme = (theme_styles);
// CONCATENATED MODULE: ./src/themes/theme.ts
function theme_templateObject4() {
  const data = themes_theme_taggedTemplateLiteral(["\n                    <slot></slot>\n                "]);

  theme_templateObject4 = function () {
    return data;
  };

  return data;
}

function theme_templateObject3() {
  const data = themes_theme_taggedTemplateLiteral(["\n                <sp-scale-medium id=\"scale\">", "</sp-scale-medium>\n            "]);

  theme_templateObject3 = function () {
    return data;
  };

  return data;
}

function theme_templateObject2() {
  const data = themes_theme_taggedTemplateLiteral(["\n                <sp-theme-dark id=\"theme\">", "</sp-theme-dark>\n            "]);

  theme_templateObject2 = function () {
    return data;
  };

  return data;
}

function themes_theme_templateObject() {
  const data = themes_theme_taggedTemplateLiteral(["\n                <sp-theme-light id=\"theme\">", "</sp-theme-light>\n            "]);

  themes_theme_templateObject = function () {
    return data;
  };

  return data;
}

function themes_theme_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var theme_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};



class theme_Theme extends lit_element["a" /* LitElement */] {
  constructor() {
    super(...arguments);
    /**
     * The color theme to apply to Spectrum controls
     */

    this.color = 'light';
    /**
     * The scale to apply to Spectrum controls. Currently only medium is supported
     */

    this.scale = 'medium';
  }

  static get styles() {
    return [theme];
  }

  renderTheme(children) {
    let result;

    if (this.color === 'light') {
      result = Object(lit_element["c" /* html */])(themes_theme_templateObject(), children);
    } else if (this.color === 'dark') {
      result = Object(lit_element["c" /* html */])(theme_templateObject2(), children);
    } else {
      console.warn("Unknown color ".concat(this.color, " for sp-theme"));
      return children;
    }

    if (!customElements.get("sp-theme-".concat(this.color))) {
      console.warn("Theme component sp-theme-".concat(this.color, " has not been registered"));
    }

    return result;
  }

  renderScale(children) {
    let result;

    if (this.scale === 'medium') {
      result = Object(lit_element["c" /* html */])(theme_templateObject3(), children);
    } else {
      console.warn("Unknown scale ".concat(this.scale, " for sp-theme"));
      return children;
    }

    if (!customElements.get("sp-theme-".concat(this.color))) {
      console.warn("Theme component sp-scale-".concat(this.scale, " has not been registered"));
    }

    return result;
  }

  render() {
    return this.renderTheme(this.renderScale(Object(lit_element["c" /* html */])(theme_templateObject4())));
  }

}

theme_decorate([Object(lit_element["d" /* property */])({
  reflect: true
})], theme_Theme.prototype, "color", void 0);

theme_decorate([Object(lit_element["d" /* property */])({
  reflect: true
})], theme_Theme.prototype, "scale", void 0);
// CONCATENATED MODULE: ./src/themes/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/







if (!customElements.get('sp-theme-dark')) {
  customElements.define('sp-theme-dark', theme_dark_ThemeDark);
}

if (!customElements.get('sp-theme-light')) {
  customElements.define('sp-theme-light', theme_light_ThemeLight);
}

if (!customElements.get('sp-scale-medium')) {
  customElements.define('sp-scale-medium', scale_medium_ScaleMedium);
}

if (!customElements.get('sp-theme')) {
  customElements.define('sp-theme', theme_Theme);
}
// CONCATENATED MODULE: ./src/overlay-root/overlay-root.css
function overlay_root_templateObject() {
  const data = overlay_root_taggedTemplateLiteral(["\n:host{display:flex;flex-direction:column;width:100%;height:100%}#overlay{z-index:2;position:absolute;display:none;opacity:0;background:red}#overlay[active]{display:block}#overlay[visible]{opacity:1;transform:translate(0)!important;visibility:visible;pointer-events:all;transition:transform var(--spectrum-global-animation-duration-100) ease-in-out,opacity var(--spectrum-global-animation-duration-100) ease-in-out,visibility 0ms linear var(--spectrum-global-animation-duration-100)}:host([placement=top]) #overlay{transform:translateY(6px)}:host([placement=right]) #overlay{transform:translate(-6px)}:host([placement=bottom]) #overlay{transform:translateY(-6px)}:host([placement=left]) #overlay{transform:translate(6px)}\n"]);

  overlay_root_templateObject = function () {
    return data;
  };

  return data;
}

function overlay_root_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const overlay_root_styles = Object(lit_element["b" /* css */])(overlay_root_templateObject());
/* harmony default export */ var overlay_root = (overlay_root_styles);
// CONCATENATED MODULE: ./src/overlay-root/calculate-position.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
const AXIS = {
  bottom: 'top',
  left: 'left',
  right: 'left',
  top: 'top'
};
const FLIPPED_DIRECTION = {
  bottom: 'top',
  left: 'right',
  right: 'left',
  top: 'bottom'
};
const CROSS_AXIS = {
  left: 'top',
  top: 'left'
};
const AXIS_SIZE = {
  left: 'width',
  top: 'height'
};
const PARSED_PLACEMENT_CACHE = {};

function getContainerDimensions(containerDOMNode) {
  let width;
  let height;
  let top = 0;
  let left = 0;
  const scroll = {
    top: 0,
    left: 0
  };

  if (containerDOMNode.tagName === 'BODY') {
    width = window.innerWidth;
    height = window.innerHeight;

    if (containerDOMNode.ownerDocument) {
      scroll.top = containerDOMNode.ownerDocument.documentElement.scrollTop;
      scroll.left = containerDOMNode.ownerDocument.documentElement.scrollLeft;
    } else {
      scroll.top = containerDOMNode.scrollTop;
      scroll.left = containerDOMNode.scrollLeft;
    }
  } else {
    ({
      width,
      height,
      top,
      left
    } = containerDOMNode.getBoundingClientRect());
    scroll.top = containerDOMNode.scrollTop;
    scroll.left = containerDOMNode.scrollLeft;
  }

  return {
    width,
    height,
    scroll,
    top,
    left
  };
}

function getDelta(axis, offset, size, containerDimensions, padding) {
  const containerScroll = containerDimensions.scroll[axis];
  const containerHeight = containerDimensions[AXIS_SIZE[axis]];
  const startEdgeOffset = offset - padding - containerScroll;
  const endEdgeOffset = offset + padding - containerScroll + size;

  if (startEdgeOffset < 0) {
    return -startEdgeOffset;
  } else if (endEdgeOffset > containerHeight) {
    return Math.max(containerHeight - endEdgeOffset, -startEdgeOffset);
  } else {
    return 0;
  }
}

function shouldFlip(axis, offset, size, padding, placement, flipContainerDimensions, containerOffsetWithBoundary) {
  const containerScroll = flipContainerDimensions.scroll[axis];
  const containerHeight = flipContainerDimensions[AXIS_SIZE[axis]];
  const startEdgeOffset = containerOffsetWithBoundary[axis] + offset - padding - containerScroll;
  const endEdgeOffset = containerOffsetWithBoundary[axis] + offset + padding - containerScroll + size;

  if (startEdgeOffset < 0 && (placement === 'top' || placement === 'left')) {
    return true;
  } else if (endEdgeOffset > containerHeight && (placement === 'bottom' || placement === 'right')) {
    return true;
  } else {
    return false;
  }
}

function getMargins(node) {
  const style = window.getComputedStyle(node);
  return {
    bottom: parseInt(style.marginBottom, 10) || 0,
    left: parseInt(style.marginLeft, 10) || 0,
    right: parseInt(style.marginRight, 10) || 0,
    top: parseInt(style.marginTop, 10) || 0
  };
}

function parsePlacement(input) {
  if (PARSED_PLACEMENT_CACHE[input]) {
    return PARSED_PLACEMENT_CACHE[input];
  }

  const [placement] = input.split(' ');
  let [, crossPlacement] = input.split(' ');
  const axis = AXIS[placement] || 'right';
  const crossAxis = CROSS_AXIS[axis];

  if (!AXIS[crossPlacement]) {
    crossPlacement = 'center';
  }

  const size = AXIS_SIZE[axis];
  const crossSize = AXIS_SIZE[crossAxis];
  PARSED_PLACEMENT_CACHE[input] = {
    axis,
    crossAxis,
    crossPlacement,
    crossSize,
    placement,
    size
  };
  return PARSED_PLACEMENT_CACHE[input];
}

function computePosition(childOffset, containerDimensions, overlaySize, placementInfo, offset, crossOffset) {
  const {
    axis,
    crossAxis,
    crossPlacement,
    crossSize,
    size,
    placement
  } = placementInfo;
  const position = {
    top: 0,
    left: 0,
    bottom: 0,
    right: 0
  };
  position[crossAxis] = childOffset[crossAxis] + crossOffset;

  if (crossPlacement === 'center') {
    position[crossAxis] += (childOffset[crossSize] - overlaySize[crossSize]) / 2;
  } else if (crossPlacement !== crossAxis) {
    position[crossAxis] += childOffset[crossSize] - overlaySize[crossSize];
  } // Ensure overlay sticks to target(ignore for overlays smaller than target)


  if (childOffset[crossSize] < overlaySize[crossSize]) {
    const positionForPositiveSideOverflow = Math.min(position[crossAxis], childOffset[crossAxis]);
    position[crossAxis] = Math.max(positionForPositiveSideOverflow, childOffset[crossAxis] - overlaySize[crossSize] + childOffset[crossSize]);
  }

  position[axis] = placement === axis ? childOffset[axis] - overlaySize[size] - offset : childOffset[axis] + childOffset[size] + offset;
  return position;
}

function calculatePositionInternal(placementInput, containerDimensions, childOffset, overlaySize, margins, padding, flip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset) {
  let placementInfo = parsePlacement(placementInput);
  const {
    axis,
    size,
    crossAxis,
    crossSize,
    placement,
    crossPlacement
  } = placementInfo;
  let position = computePosition(childOffset, containerDimensions, overlaySize, placementInfo, offset, crossOffset);
  let normalizedOffset = offset; // First check if placement should be flipped

  if (flip && shouldFlip(axis, position[axis], overlaySize[size], padding, placement, boundaryDimensions, containerOffsetWithBoundary)) {
    const flippedPlacementInfo = parsePlacement("".concat(FLIPPED_DIRECTION[placement], " ").concat(crossPlacement));
    const flippedAxis = flippedPlacementInfo.axis;
    const flippedSize = flippedPlacementInfo.size;
    const flippedPosition = computePosition(childOffset, containerDimensions, overlaySize, flippedPlacementInfo, -1 * offset, crossOffset); // Check if flipped placement has enough space otherwise flip is not possible

    if (!shouldFlip(flippedAxis, flippedPosition[flippedAxis], overlaySize[flippedSize], padding, FLIPPED_DIRECTION[placement], boundaryDimensions, containerOffsetWithBoundary)) {
      placementInfo = flippedPlacementInfo;
      position = flippedPosition;
      normalizedOffset = -1 * offset;
    }
  }

  let delta = getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);
  position[crossAxis] += delta;
  const maxHeight = Math.max(0, boundaryDimensions.height + boundaryDimensions.top + boundaryDimensions.scroll.top - containerOffsetWithBoundary.top - position.top - margins.top - margins.bottom - padding);
  overlaySize.height = Math.min(overlaySize.height, maxHeight);
  position = computePosition(childOffset, containerDimensions, overlaySize, placementInfo, normalizedOffset, crossOffset);
  delta = delta = getDelta(crossAxis, position[crossAxis], overlaySize[crossSize], boundaryDimensions, padding);
  position[crossAxis] += delta;
  const arrowPosition = {
    top: 0,
    bottom: 0,
    left: 0,
    right: 0
  };
  arrowPosition[crossAxis] = childOffset[crossSize] > overlaySize[crossSize] ? null : childOffset[crossAxis] - position[crossAxis] + childOffset[crossSize] / 2;
  return {
    arrowOffsetLeft: arrowPosition.left || 0,
    arrowOffsetTop: arrowPosition.top || 0,
    maxHeight,
    placement: placementInfo.placement,
    positionLeft: position.left || 0,
    positionTop: position.top || 0
  };
}

function getShadowPosition(target, container) {
  const targetPosition = target.getBoundingClientRect();
  const containerPosition = container.getBoundingClientRect();
  return {
    bottom: targetPosition.bottom - containerPosition.bottom,
    height: targetPosition.height,
    left: targetPosition.left - containerPosition.left,
    right: targetPosition.right - containerPosition.right,
    top: targetPosition.top - containerPosition.top,
    width: targetPosition.width,
    x: targetPosition.x,
    y: targetPosition.y
  };
}

function calculatePosition(placementInput, overlayNode, target, container, padding, flip, boundariesElement, offset, crossOffset) {
  const isBodyContainer = container.tagName === 'BODY';
  const childOffset = isBodyContainer ? target.getBoundingClientRect() : getShadowPosition(target, container);

  if (!isBodyContainer) {
    childOffset.top += parseInt(target.style.marginTop, 10) || 0;
    childOffset.left += parseInt(target.style.marginLeft, 10) || 0;
  }

  const overlaySize = overlayNode.getBoundingClientRect();
  const margins = getMargins(overlayNode);
  overlaySize.width += margins.left + margins.right;
  overlaySize.height += margins.top + margins.bottom;
  const containerDimensions = getContainerDimensions(container);
  const boundaryContainer = container;
  const boundaryDimensions = getContainerDimensions(boundaryContainer);
  const containerOffsetWithBoundary = boundaryContainer.tagName === 'BODY' ? container.getBoundingClientRect() : getShadowPosition(container, boundaryContainer);
  return calculatePositionInternal(placementInput, containerDimensions, childOffset, overlaySize, margins, padding, flip, boundaryDimensions, containerOffsetWithBoundary, offset, crossOffset);
}
// CONCATENATED MODULE: ./src/overlay-root/overlay-root.ts
function overlay_root_overlay_root_templateObject() {
  const data = overlay_root_overlay_root_taggedTemplateLiteral(["\n            <slot\n                @sp-overlay:open=", "\n                @sp-overlay:close=", "\n                @click=", "\n            ></slot>\n            <div\n                id=\"overlay\"\n                ?active=", "\n                ?visible=", "\n                style=", "\n            >\n                <slot name=\"overlay\"></slot>\n            </div>\n        "]);

  overlay_root_overlay_root_templateObject = function () {
    return data;
  };

  return data;
}

function overlay_root_overlay_root_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var overlay_root_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}; //TODO: Closing overlay should also have transition






const defaultOptions = {
  containerPadding: 10,
  crossOffset: 0,
  flip: true,
  offset: 0,
  placement: 'left'
};
class overlay_root_OverlayRoot extends lit_element["a" /* LitElement */] {
  constructor() {
    super(...arguments);
    this.visible = false;
    this.placement = 'bottom';
    this.offset = 6;
    this.interaction = 'hover';
    this.active = false;
  }

  static get styles() {
    return [overlay_root];
  }

  onMaskClick(ev) {
    const secondClick = this.detectSecondClick(ev);

    if (!this.active) {
      return;
    }

    if (this.interaction === 'click' && secondClick) {
      //Prevent second clicks from reopening the overlay
      ev.stopPropagation();
    }

    this.removeOverlay();
    const clickOutEvent = strictCustomEvent('sp-overlay:click-out', {
      bubbles: true,
      composed: true,
      detail: ev
    });
    this.dispatchEvent(clickOutEvent);
    this.active = false;
    this.visible = false;
  }

  onOverlayOpen(ev) {
    if (this.active) {
      return;
    }

    this.active = true;
    this.removeOverlay();
    this.extractEventDetail(ev);

    if (this.overlayContent) {
      this.overlayContent.setAttribute('slot', 'overlay');
      this.appendChild(this.overlayContent);
    }

    this.timeout = window.setTimeout(() => {
      this.visible = true;
      this.updateOverlayPosition();
    }, ev.detail.delay);
  }

  onOverlayClose(ev) {
    if (this.timeout) {
      clearTimeout(this.timeout);
    }

    if (ev.detail.content === this.overlayContent) {
      this.removeOverlay();
      this.active = false;
      this.visible = false;
    }
  }

  render() {
    const maskClickListener = {
      handleEvent: ev => {
        this.onMaskClick(ev);
      },
      capture: true
    };
    return Object(lit_element["c" /* html */])(overlay_root_overlay_root_templateObject(), this.onOverlayOpen, this.onOverlayClose, maskClickListener, this.active, this.visible, this.overlayStyles);
  }

  detectSecondClick(ev) {
    //TODO: event.composedPath is not supported in internet explorer or edge.
    // Consider using another implementation for the future
    const path = Array.from(ev.composedPath());

    if (path && path.length) {
      //Check if current active trigger is in the event path
      for (const eventTarget of path) {
        const element = eventTarget;

        if (element === this.trigger) {
          return true;
        }
      }
    }

    return false;
  }

  removeOverlay() {
    if (this.overlayContent && this.overlayContent.parentNode) {
      this.overlayContent.parentNode.removeChild(this.overlayContent);
    }
  }

  extractEventDetail(ev) {
    this.overlayContent = ev.detail.content;
    this.trigger = ev.detail.trigger;
    this.placement = ev.detail.placement;
    this.offset = ev.detail.offset;
    this.interaction = ev.detail.interaction;
  }

  updateOverlayPosition() {
    if (!this.trigger || !this.overlayContent) {
      return;
    }

    const options = {
      containerPadding: 0,
      crossOffset: 0,
      flip: false,
      offset: this.offset,
      placement: this.placement
    };
    const positionOptions = Object.assign({}, defaultOptions, options);
    this.position = calculatePosition(positionOptions.placement, this.overlayContent, this.trigger, this, positionOptions.containerPadding, positionOptions.flip, this, positionOptions.offset, positionOptions.crossOffset);
  }

  get overlayStyles() {
    if (this.position) {
      return "top: ".concat(this.position.positionTop, "px; left: ").concat(this.position.positionLeft, "px");
    }

    return '';
  }

}
overlay_root_OverlayRoot.is = 'overlay-root';

overlay_root_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true
})], overlay_root_OverlayRoot.prototype, "visible", void 0);

overlay_root_decorate([Object(lit_element["d" /* property */])({
  reflect: true
})], overlay_root_OverlayRoot.prototype, "placement", void 0);

overlay_root_decorate([Object(lit_element["d" /* property */])({
  type: Number,
  reflect: true
})], overlay_root_OverlayRoot.prototype, "offset", void 0);

overlay_root_decorate([Object(lit_element["d" /* property */])()], overlay_root_OverlayRoot.prototype, "interaction", void 0);

overlay_root_decorate([Object(lit_element["d" /* property */])({
  type: Boolean,
  reflect: true
})], overlay_root_OverlayRoot.prototype, "active", void 0);

overlay_root_decorate([Object(lit_element["d" /* property */])()], overlay_root_OverlayRoot.prototype, "position", void 0);

overlay_root_decorate([Object(lit_element["d" /* property */])()], overlay_root_OverlayRoot.prototype, "trigger", void 0);

overlay_root_decorate([Object(lit_element["d" /* property */])()], overlay_root_OverlayRoot.prototype, "overlayContent", void 0);
// CONCATENATED MODULE: ./src/overlay-root/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

// CONCATENATED MODULE: ./src/overlay-trigger/overlay-trigger.css
function overlay_trigger_templateObject() {
  const data = overlay_trigger_taggedTemplateLiteral(["\n#click-content,#hover-content{display:none}\n"]);

  overlay_trigger_templateObject = function () {
    return data;
  };

  return data;
}

function overlay_trigger_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const overlay_trigger_styles = Object(lit_element["b" /* css */])(overlay_trigger_templateObject());
/* harmony default export */ var overlay_trigger = (overlay_trigger_styles);
// CONCATENATED MODULE: ./src/overlay-trigger/overlay-trigger.ts
function overlay_trigger_overlay_trigger_templateObject() {
  const data = overlay_trigger_overlay_trigger_taggedTemplateLiteral(["\n            <div\n                id=\"trigger\"\n                @click=", "\n                @mouseenter=", "\n                @mouseleave=", "\n            >\n                <slot name=\"trigger\"></slot>\n            </div>\n            <slot\n                @slotchange=", "\n                name=\"click-content\"\n                id=\"click-content\"\n            ></slot>\n            <slot\n                @slotchange=", "\n                name=\"hover-content\"\n                id=\"hover-content\"\n            ></slot>\n        "]);

  overlay_trigger_overlay_trigger_templateObject = function () {
    return data;
  };

  return data;
}

function overlay_trigger_overlay_trigger_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/
var overlay_trigger_decorate = undefined && undefined.__decorate || function (decorators, target, key, desc) {
  var c = arguments.length,
      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
      d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
};




class overlay_trigger_OverlayTrigger extends lit_element["a" /* LitElement */] {
  constructor() {
    super(...arguments);
    this.placement = 'bottom';
    this.offset = 6;
  }

  static get styles() {
    return [overlay_trigger];
  }

  onOverlayOpen(ev, interaction) {
    const isClick = interaction === 'click';
    const overlayElement = isClick ? this.clickContent : this.hoverContent;
    const delayAttribute = overlayElement ? overlayElement.getAttribute('delay') : null;
    const delay = delayAttribute ? parseFloat(delayAttribute) : 0;

    if (!overlayElement) {
      return;
    }

    const overlayOpenDetail = {
      content: overlayElement,
      delay: delay,
      offset: this.offset,
      placement: this.placement,
      trigger: this,
      interaction: interaction
    };
    const overlayOpenEvent = strictCustomEvent('sp-overlay:open', {
      bubbles: true,
      composed: true,
      detail: overlayOpenDetail
    });
    this.dispatchEvent(overlayOpenEvent);
  }

  onOverlayClose(ev, interaction) {
    const isClick = interaction === 'click';
    const overlayElement = isClick ? this.clickContent : this.hoverContent;

    if (!overlayElement) {
      return;
    }

    const overlayCloseDetail = {
      content: overlayElement
    };
    const overlayCloseEvent = strictCustomEvent('sp-overlay:close', {
      bubbles: true,
      composed: true,
      detail: overlayCloseDetail
    });
    this.dispatchEvent(overlayCloseEvent);
  }

  onTriggerClick(ev) {
    if (this.clickContent) {
      this.onOverlayOpen(ev, 'click');
    }
  }

  onTriggerMouseOver(ev) {
    if (this.hoverContent) {
      this.onOverlayOpen(ev, 'hover');
    }
  }

  onTriggerMouseLeave(ev) {
    if (this.hoverContent) {
      this.onOverlayClose(ev, 'hover');
    }
  }

  render() {
    return Object(lit_element["c" /* html */])(overlay_trigger_overlay_trigger_templateObject(), this.onTriggerClick, this.onTriggerMouseOver, this.onTriggerMouseLeave, this.onClickSlotChange, this.onHoverSlotChange);
  }

  onClickSlotChange(ev) {
    if (ev.target) {
      const slot = ev.target;
      const content = this.extractSlotContent(slot);

      if (content) {
        this.clickContent = content;
      }
    }
  }

  onHoverSlotChange(ev) {
    if (ev.target) {
      const slot = ev.target;
      const content = this.extractSlotContent(slot);

      if (content) {
        this.hoverContent = content;
      }
    }
  }

  extractSlotContent(slot) {
    const nodes = slot.assignedNodes();

    if (nodes.length) {
      return nodes[0];
    }

    return null;
  }

}
overlay_trigger_OverlayTrigger.is = 'overlay-trigger';

overlay_trigger_decorate([Object(lit_element["d" /* property */])({
  reflect: true
})], overlay_trigger_OverlayTrigger.prototype, "placement", void 0);

overlay_trigger_decorate([Object(lit_element["d" /* property */])({
  type: Number,
  reflect: true
})], overlay_trigger_OverlayTrigger.prototype, "offset", void 0);
// CONCATENATED MODULE: ./src/overlay-trigger/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

// CONCATENATED MODULE: ./src/popover/popover.css
function popover_templateObject() {
  const data = popover_taggedTemplateLiteral(["\n:host{box-shadow:0 1px 4px var(--spectrum-popover-shadow-color)}#tip:after,:host{background-color:var(--spectrum-popover-background-color);border-color:var(--spectrum-popover-border-color)}#tip:after{box-shadow:-1px -1px 4px var(--spectrum-popover-shadow-color)}:host{--spectrum-popover-target-offset:13px;--spectrum-popover-dialog-padding:30px 29px;--spectrum-popover-dialog-min-width:270px;--spectrum-popover-min-width:var(--spectrum-global-dimension-size-400);--spectrum-popover-min-height:var(--spectrum-global-dimension-size-400);transition:transform var(--spectrum-global-animation-duration-100) ease-in-out,opacity var(--spectrum-global-animation-duration-100) ease-in-out,visibility 0ms linear var(--spectrum-global-animation-duration-100);display:inline-flex;flex-direction:column;box-sizing:border-box;min-width:var(--spectrum-popover-min-width);min-height:var(--spectrum-popover-min-height);border-style:solid;border-width:var(--spectrum-popover-border-size);border-radius:var(--spectrum-popover-border-radius);outline:none}#tip,:host{position:absolute}#tip{display:none;overflow:hidden;width:calc(var(--spectrum-popover-tip-width) + 1px);height:calc(var(--spectrum-popover-tip-width)/2 + var(--spectrum-popover-border-size))}#tip:after{content:\"\";width:var(--spectrum-popover-tip-width);height:var(--spectrum-popover-tip-width);border-width:var(--spectrum-popover-border-size);border-style:solid;position:absolute;transform:rotate(45deg);top:-18px;left:-1px}:host([bottom]) #tip,:host([left]) #tip,:host([right]) #tip,:host([top]) #tip{display:block}:host([left],[tip]){margin-right:var(--spectrum-popover-target-offset)}:host([left]) #tip{right:-16px;transform:rotate(-90deg)}:host([right],[tip]){margin-left:var(--spectrum-popover-target-offset)}:host([right]) #tip{left:-16px;transform:rotate(90deg)}:host([left]) #tip,:host([right]) #tip{top:50%;margin-top:-6px}:host([bottom],[tip]){margin-top:var(--spectrum-popover-target-offset)}:host([bottom]) #tip{top:-11px;transform:rotate(180deg)}:host([top],[tip]){margin-bottom:var(--spectrum-popover-target-offset)}:host([top]) #tip{bottom:-11px}:host([bottom]) #tip,:host([top]) #tip{left:50%;margin-left:-12px}\n"]);

  popover_templateObject = function () {
    return data;
  };

  return data;
}

function popover_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }


const popover_styles = Object(lit_element["b" /* css */])(popover_templateObject());
/* harmony default export */ var popover = (popover_styles);
// CONCATENATED MODULE: ./src/popover/popover.ts
function popover_popover_templateObject() {
  const data = popover_popover_taggedTemplateLiteral(["\n            <slot></slot>\n            <div id=\"tip\"></div>\n        "]);

  popover_popover_templateObject = function () {
    return data;
  };

  return data;
}

function popover_popover_taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/


class popover_Popover extends lit_element["a" /* LitElement */] {
  static get styles() {
    return [popover];
  }

  render() {
    return Object(lit_element["c" /* html */])(popover_popover_templateObject());
  }

}
popover_Popover.is = 'sp-popover';
// CONCATENATED MODULE: ./src/popover/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

// CONCATENATED MODULE: ./src/define.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

/**
 * A helper function for registering custom elements and first checking conditionally if they are already registered.
 *
 * @param classCtor A HTMLElement constructor that has a static 'is' property defining the desired tag name.
 */
function defineCustomElement(classCtor) {
  if (!customElements.get(classCtor.is)) {
    customElements.define(classCtor.is, classCtor);
  }
}
/**
 * Registers all given class constructors with the custom elements registry, avoiding duplicate registration errors.
 *
 * @param classCtors - Any number of arguments each defining a custom element with an 'is' static property.
 */

function defineCustomElements(...classCtors) {
  for (const ctor of classCtors) {
    defineCustomElement(ctor);
  }
}
// CONCATENATED MODULE: ./src/index.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/






















 // NOTE: we do not export demo-page because it has dependencies on other modules we don't want to force on users
// CONCATENATED MODULE: ./documentation/src/utils/spectrum.ts
var __rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];
  return t;
};




const {
  defineCustomElement: spectrum_defineCustomElement,
  defineCustomElements: spectrum_defineCustomElements
} = src_namespaceObject,
      Elements = __rest(src_namespaceObject, ["defineCustomElement", "defineCustomElements"]);

const spectrum_customElements = Object.values(Elements).filter(element => {
  return !!element.is;
});
spectrum_defineCustomElements(...spectrum_customElements, ...Object.values(icons_medium_namespaceObject));

/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/@open-wc/polyfills-loader/polyfills-loader.js
/**
 * Web component polyfills loader, based on: https://github.com/webcomponents/webcomponentsjs/blob/master/webcomponents-loader.js
 *
 * Adapted to not load language polyfills and use dynamic imports
 */
function needsTemplatePolyfill() {
  // no real <template> because no `content` property (IE and older browsers)
  const template = document.createElement('template');

  if (!('content' in template)) {
    return true;
  } // broken doc fragment (older Edge)


  if (!(template.content.cloneNode() instanceof DocumentFragment)) {
    return true;
  } // broken <template> cloning (Edge up to at least version 17)


  const template2 = document.createElement('template');
  template2.content.appendChild(document.createElement('div'));
  template.content.appendChild(template2);
  const clone = template.cloneNode(true);
  return (// @ts-ignore
    clone.content.childNodes.length === 0 || // @ts-ignore
    clone.content.firstChild.content.childNodes.length === 0
  );
}
/**
 * Loads web component polyfills if needed
 *
 * @returns {Promise} resolves when polyfills are loaded
 */


function loadPolyfills() {
  const polyfills = [];
  const needsTemplate = needsTemplatePolyfill();
  const needsShadowDom = !('attachShadow' in Element.prototype) || !('getRootNode' in Element.prototype) || // @ts-ignore
  window.ShadyDOM && window.ShadyDOM.force; // @ts-ignore

  const needsCustomElements = !window.customElements || window.customElements.forcePolyfill; // URL is required by webcomponents polyfill
  // We can use URLSearchParams as a watermark for URL support

  if (!('URLSearchParams' in window)) {
    // @ts-ignore
    polyfills.push(__webpack_require__.e(/* import() */ 3).then(__webpack_require__.bind(null, 30)));
  }

  if (needsTemplate) {
    // template is a watermark for requiring all polyfills (IE11 and Edge)
    polyfills.push(Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(2)]).then(__webpack_require__.bind(null, 31)));
  } else if (needsShadowDom || needsCustomElements) {
    // only chrome 53 supports shadow dom but not custom elements. this is an older browser, there is no need
    // for complicating the setup here. there is no harm in loading the polyfills there
    polyfills.push(Promise.all(/* import() */[__webpack_require__.e(0), __webpack_require__.e(4)]).then(__webpack_require__.bind(null, 32)));
  }

  return Promise.all(polyfills);
}
// CONCATENATED MODULE: ./node_modules/element-closest/index.mjs
function polyfill(window) {
  const ElementPrototype = window.Element.prototype;

  if (typeof ElementPrototype.matches !== 'function') {
    ElementPrototype.matches = ElementPrototype.msMatchesSelector || ElementPrototype.mozMatchesSelector || ElementPrototype.webkitMatchesSelector || function matches(selector) {
      let element = this;
      const elements = (element.document || element.ownerDocument).querySelectorAll(selector);
      let index = 0;

      while (elements[index] && elements[index] !== element) {
        ++index;
      }

      return Boolean(elements[index]);
    };
  }

  if (typeof ElementPrototype.closest !== 'function') {
    ElementPrototype.closest = function closest(selector) {
      let element = this;

      while (element && element.nodeType === 1) {
        if (element.matches(selector)) {
          return element;
        }

        element = element.parentNode;
      }

      return null;
    };
  }
}

/* harmony default export */ var element_closest = (polyfill);
//# sourceMappingURL=index.mjs.map

// CONCATENATED MODULE: ./documentation/src/main.ts
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/


loadPolyfills().then(() => {
  element_closest(window);

  __webpack_require__(18);

  __webpack_require__(12);

  __webpack_require__(20);

  __webpack_require__(13);
});

/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);

// CONCATENATED MODULE: ./node_modules/@vaadin/router/dist/vaadin-router.js
function toArray(objectOrArray) {
  objectOrArray = objectOrArray || [];
  return Array.isArray(objectOrArray) ? objectOrArray : [objectOrArray];
}

function log(msg) {
  return "[Vaadin.Router] ".concat(msg);
}

function logValue(value) {
  if (typeof value !== 'object') {
    return String(value);
  }

  const stringType = Object.prototype.toString.call(value).match(/ (.*)\]$/)[1];

  if (stringType === 'Object' || stringType === 'Array') {
    return "".concat(stringType, " ").concat(JSON.stringify(value));
  } else {
    return stringType;
  }
}

const MODULE = 'module';
const NOMODULE = 'nomodule';
const bundleKeys = [MODULE, NOMODULE];

function ensureBundle(src) {
  if (!src.match(/.+\.[m]?js$/)) {
    throw new Error(log("Unsupported type for bundle \"".concat(src, "\": .js or .mjs expected.")));
  }
}

function ensureRoute(route) {
  if (!route || !isString(route.path)) {
    throw new Error(log("Expected route config to be an object with a \"path\" string property, or an array of such objects"));
  }

  const bundle = route.bundle;
  const stringKeys = ['component', 'redirect', 'bundle'];

  if (!isFunction(route.action) && !Array.isArray(route.children) && !isFunction(route.children) && !isObject(bundle) && !stringKeys.some(key => isString(route[key]))) {
    throw new Error(log("Expected route config \"".concat(route.path, "\" to include either \"").concat(stringKeys.join('", "'), "\" ") + "or \"action\" function but none found."));
  }

  if (bundle) {
    if (isString(bundle)) {
      ensureBundle(bundle);
    } else if (!bundleKeys.some(key => key in bundle)) {
      throw new Error(log('Expected route bundle to include either "' + NOMODULE + '" or "' + MODULE + '" keys, or both'));
    } else {
      bundleKeys.forEach(key => key in bundle && ensureBundle(bundle[key]));
    }
  }

  if (route.redirect) {
    ['bundle', 'component'].forEach(overriddenProp => {
      if (overriddenProp in route) {
        console.warn(log("Route config \"".concat(route.path, "\" has both \"redirect\" and \"").concat(overriddenProp, "\" properties, ") + "and \"redirect\" will always override the latter. Did you mean to only use \"".concat(overriddenProp, "\"?")));
      }
    });
  }
}

function ensureRoutes(routes) {
  toArray(routes).forEach(route => ensureRoute(route));
}

function loadScript(src, key) {
  let script = document.head.querySelector('script[src="' + src + '"][async]');

  if (!script) {
    script = document.createElement('script');
    script.setAttribute('src', src);

    if (key === MODULE) {
      script.setAttribute('type', MODULE);
    } else if (key === NOMODULE) {
      script.setAttribute(NOMODULE, '');
    }

    script.async = true;
  }

  return new Promise((resolve, reject) => {
    script.onreadystatechange = script.onload = e => {
      script.__dynamicImportLoaded = true;
      resolve(e);
    };

    script.onerror = e => {
      if (script.parentNode) {
        script.parentNode.removeChild(script);
      }

      reject(e);
    };

    if (script.parentNode === null) {
      document.head.appendChild(script);
    } else if (script.__dynamicImportLoaded) {
      resolve();
    }
  });
}

function loadBundle(bundle) {
  if (isString(bundle)) {
    return loadScript(bundle);
  } else {
    return Promise.race(bundleKeys.filter(key => key in bundle).map(key => loadScript(bundle[key], key)));
  }
}

function fireRouterEvent(type, detail) {
  return !window.dispatchEvent(new CustomEvent("vaadin-router-".concat(type), {
    cancelable: type === 'go',
    detail
  }));
}

function isObject(o) {
  // guard against null passing the typeof check
  return typeof o === 'object' && !!o;
}

function isFunction(f) {
  return typeof f === 'function';
}

function isString(s) {
  return typeof s === 'string';
}

function getNotFoundError(context) {
  const error = new Error(log("Page not found (".concat(context.pathname, ")")));
  error.context = context;
  error.code = 404;
  return error;
}

const notFoundResult = new class NotFoundResult {}();
/* istanbul ignore next: coverage is calculated in Chrome, this code is for IE */

function getAnchorOrigin(anchor) {
  // IE11: on HTTP and HTTPS the default port is not included into
  // window.location.origin, so won't include it here either.
  const port = anchor.port;
  const protocol = anchor.protocol;
  const defaultHttp = protocol === 'http:' && port === '80';
  const defaultHttps = protocol === 'https:' && port === '443';
  const host = defaultHttp || defaultHttps ? anchor.hostname // does not include the port number (e.g. www.example.org)
  : anchor.host; // does include the port number (e.g. www.example.org:80)

  return "".concat(protocol, "//").concat(host);
} // The list of checks is not complete:
//  - SVG support is missing
//  - the 'rel' attribute is not considered


function vaadinRouterGlobalClickHandler(event) {
  // ignore the click if the default action is prevented
  if (event.defaultPrevented) {
    return;
  } // ignore the click if not with the primary mouse button


  if (event.button !== 0) {
    return;
  } // ignore the click if a modifier key is pressed


  if (event.shiftKey || event.ctrlKey || event.altKey || event.metaKey) {
    return;
  } // find the <a> element that the click is at (or within)


  let anchor = event.target;
  const path = event.composedPath ? event.composedPath() : event.path || []; // FIXME(web-padawan): `Symbol.iterator` used by webcomponentsjs is broken for arrays
  // example to check: `for...of` loop here throws the "Not yet implemented" error

  for (let i = 0; i < path.length; i++) {
    const target = path[i];

    if (target.nodeName && target.nodeName.toLowerCase() === 'a') {
      anchor = target;
      break;
    }
  }

  while (anchor && anchor.nodeName.toLowerCase() !== 'a') {
    anchor = anchor.parentNode;
  } // ignore the click if not at an <a> element


  if (!anchor || anchor.nodeName.toLowerCase() !== 'a') {
    return;
  } // ignore the click if the <a> element has a non-default target


  if (anchor.target && anchor.target.toLowerCase() !== '_self') {
    return;
  } // ignore the click if the <a> element has the 'download' attribute


  if (anchor.hasAttribute('download')) {
    return;
  } // ignore the click if the target URL is a fragment on the current page


  if (anchor.pathname === window.location.pathname && anchor.hash !== '') {
    return;
  } // ignore the click if the target is external to the app
  // In IE11 HTMLAnchorElement does not have the `origin` property


  const origin = anchor.origin || getAnchorOrigin(anchor);

  if (origin !== window.location.origin) {
    return;
  } // if none of the above, convert the click into a navigation event


  if (fireRouterEvent('go', {
    pathname: anchor.pathname
  })) {
    event.preventDefault();
  }
}
/**
 * A navigation trigger for Vaadin Router that translated clicks on `<a>` links
 * into Vaadin Router navigation events.
 *
 * Only regular clicks on in-app links are translated (primary mouse button, no
 * modifier keys, the target href is within the app's URL space).
 *
 * @memberOf Vaadin.Router.Triggers
 * @type {NavigationTrigger}
 */


const CLICK = {
  activate() {
    window.document.addEventListener('click', vaadinRouterGlobalClickHandler);
  },

  inactivate() {
    window.document.removeEventListener('click', vaadinRouterGlobalClickHandler);
  }

}; // PopStateEvent constructor shim

const isIE = /Trident/.test(navigator.userAgent);
/* istanbul ignore next: coverage is calculated in Chrome, this code is for IE */

if (isIE && !isFunction(window.PopStateEvent)) {
  window.PopStateEvent = function (inType, params) {
    params = params || {};
    var e = document.createEvent('Event');
    e.initEvent(inType, Boolean(params.bubbles), Boolean(params.cancelable));
    e.state = params.state || null;
    return e;
  };

  window.PopStateEvent.prototype = window.Event.prototype;
}

function vaadinRouterGlobalPopstateHandler(event) {
  if (event.state === 'vaadin-router-ignore') {
    return;
  }

  fireRouterEvent('go', {
    pathname: window.location.pathname
  });
}
/**
 * A navigation trigger for Vaadin Router that translates popstate events into
 * Vaadin Router navigation events.
 *
 * @memberOf Vaadin.Router.Triggers
 * @type {NavigationTrigger}
 */


const POPSTATE = {
  activate() {
    window.addEventListener('popstate', vaadinRouterGlobalPopstateHandler);
  },

  inactivate() {
    window.removeEventListener('popstate', vaadinRouterGlobalPopstateHandler);
  }

};
/**
 * Expose `pathToRegexp`.
 */

var pathToRegexp_1 = pathToRegexp;
var parse_1 = parse;
var compile_1 = compile;
var tokensToFunction_1 = tokensToFunction;
var tokensToRegExp_1 = tokensToRegExp;
/**
 * Default configs.
 */

var DEFAULT_DELIMITER = '/';
var DEFAULT_DELIMITERS = './';
/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */

var PATH_REGEXP = new RegExp([// Match escaped characters that would otherwise appear in future matches.
// This allows the user to escape special characters that won't transform.
'(\\\\.)', // Match Express-style parameters and un-named parameters with a prefix
// and optional suffixes. Matches appear as:
//
// "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?"]
// "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined]
'(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?'].join('|'), 'g');
/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */

function parse(str, options) {
  var tokens = [];
  var key = 0;
  var index = 0;
  var path = '';
  var defaultDelimiter = options && options.delimiter || DEFAULT_DELIMITER;
  var delimiters = options && options.delimiters || DEFAULT_DELIMITERS;
  var pathEscaped = false;
  var res;

  while ((res = PATH_REGEXP.exec(str)) !== null) {
    var m = res[0];
    var escaped = res[1];
    var offset = res.index;
    path += str.slice(index, offset);
    index = offset + m.length; // Ignore already escaped sequences.

    if (escaped) {
      path += escaped[1];
      pathEscaped = true;
      continue;
    }

    var prev = '';
    var next = str[index];
    var name = res[2];
    var capture = res[3];
    var group = res[4];
    var modifier = res[5];

    if (!pathEscaped && path.length) {
      var k = path.length - 1;

      if (delimiters.indexOf(path[k]) > -1) {
        prev = path[k];
        path = path.slice(0, k);
      }
    } // Push the current path onto the tokens.


    if (path) {
      tokens.push(path);
      path = '';
      pathEscaped = false;
    }

    var partial = prev !== '' && next !== undefined && next !== prev;
    var repeat = modifier === '+' || modifier === '*';
    var optional = modifier === '?' || modifier === '*';
    var delimiter = prev || defaultDelimiter;
    var pattern = capture || group;
    tokens.push({
      name: name || key++,
      prefix: prev,
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      pattern: pattern ? escapeGroup(pattern) : '[^' + escapeString(delimiter) + ']+?'
    });
  } // Push any remaining characters.


  if (path || index < str.length) {
    tokens.push(path + str.substr(index));
  }

  return tokens;
}
/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */


function compile(str, options) {
  return tokensToFunction(parse(str, options));
}
/**
 * Expose a method for transforming tokens into the path function.
 */


function tokensToFunction(tokens) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length); // Compile all the patterns before compilation.

  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$');
    }
  }

  return function (data, options) {
    var path = '';
    var encode = options && options.encode || encodeURIComponent;

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i];

      if (typeof token === 'string') {
        path += token;
        continue;
      }

      var value = data ? data[token.name] : undefined;
      var segment;

      if (Array.isArray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but got array');
        }

        if (value.length === 0) {
          if (token.optional) continue;
          throw new TypeError('Expected "' + token.name + '" to not be empty');
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j], token);

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '"');
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment;
        }

        continue;
      }

      if (typeof value === 'string' || typeof value === 'number' || typeof value === 'boolean') {
        segment = encode(String(value), token);

        if (!matches[i].test(segment)) {
          throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but got "' + segment + '"');
        }

        path += token.prefix + segment;
        continue;
      }

      if (token.optional) {
        // Prepend partial segment prefixes.
        if (token.partial) path += token.prefix;
        continue;
      }

      throw new TypeError('Expected "' + token.name + '" to be ' + (token.repeat ? 'an array' : 'a string'));
    }

    return path;
  };
}
/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */


function escapeString(str) {
  return str.replace(/([.+*?=^!:${}()[\]|/\\])/g, '\\$1');
}
/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */


function escapeGroup(group) {
  return group.replace(/([=!:$/()])/g, '\\$1');
}
/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */


function flags(options) {
  return options && options.sensitive ? '' : 'i';
}
/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {Array=}  keys
 * @return {!RegExp}
 */


function regexpToRegexp(path, keys) {
  if (!keys) return path; // Use a negative lookahead to match only capturing groups.

  var groups = path.source.match(/\((?!\?)/g);

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        pattern: null
      });
    }
  }

  return path;
}
/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array=}  keys
 * @param  {Object=} options
 * @return {!RegExp}
 */


function arrayToRegexp(path, keys, options) {
  var parts = [];

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source);
  }

  return new RegExp('(?:' + parts.join('|') + ')', flags(options));
}
/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {Array=}  keys
 * @param  {Object=} options
 * @return {!RegExp}
 */


function stringToRegexp(path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options);
}
/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}  tokens
 * @param  {Array=}  keys
 * @param  {Object=} options
 * @return {!RegExp}
 */


function tokensToRegExp(tokens, keys, options) {
  options = options || {};
  var strict = options.strict;
  var end = options.end !== false;
  var delimiter = escapeString(options.delimiter || DEFAULT_DELIMITER);
  var delimiters = options.delimiters || DEFAULT_DELIMITERS;
  var endsWith = [].concat(options.endsWith || []).map(escapeString).concat('$').join('|');
  var route = '';
  var isEndDelimited = tokens.length === 0; // Iterate over the tokens and create our regexp string.

  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i];

    if (typeof token === 'string') {
      route += escapeString(token);
      isEndDelimited = i === tokens.length - 1 && delimiters.indexOf(token[token.length - 1]) > -1;
    } else {
      var prefix = escapeString(token.prefix);
      var capture = token.repeat ? '(?:' + token.pattern + ')(?:' + prefix + '(?:' + token.pattern + '))*' : token.pattern;
      if (keys) keys.push(token);

      if (token.optional) {
        if (token.partial) {
          route += prefix + '(' + capture + ')?';
        } else {
          route += '(?:' + prefix + '(' + capture + '))?';
        }
      } else {
        route += prefix + '(' + capture + ')';
      }
    }
  }

  if (end) {
    if (!strict) route += '(?:' + delimiter + ')?';
    route += endsWith === '$' ? '$' : '(?=' + endsWith + ')';
  } else {
    if (!strict) route += '(?:' + delimiter + '(?=' + endsWith + '))?';
    if (!isEndDelimited) route += '(?=' + delimiter + '|' + endsWith + ')';
  }

  return new RegExp('^' + route, flags(options));
}
/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {Array=}                keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */


function pathToRegexp(path, keys, options) {
  if (path instanceof RegExp) {
    return regexpToRegexp(path, keys);
  }

  if (Array.isArray(path)) {
    return arrayToRegexp(
    /** @type {!Array} */
    path, keys, options);
  }

  return stringToRegexp(
  /** @type {string} */
  path, keys, options);
}

pathToRegexp_1.parse = parse_1;
pathToRegexp_1.compile = compile_1;
pathToRegexp_1.tokensToFunction = tokensToFunction_1;
pathToRegexp_1.tokensToRegExp = tokensToRegExp_1;
/**
 * Universal Router (https://www.kriasoft.com/universal-router/)
 *
 * Copyright (c) 2015-present Kriasoft.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */

const {
  hasOwnProperty: vaadin_router_hasOwnProperty
} = Object.prototype;
const cache = new Map(); // see https://github.com/pillarjs/path-to-regexp/issues/148

cache.set('|false', {
  keys: [],
  pattern: /(?:)/
});

function decodeParam(val) {
  try {
    return decodeURIComponent(val);
  } catch (err) {
    return val;
  }
}

function matchPath(routepath, path, exact, parentKeys, parentParams) {
  exact = !!exact;
  const cacheKey = "".concat(routepath, "|").concat(exact);
  let regexp = cache.get(cacheKey);

  if (!regexp) {
    const keys = [];
    regexp = {
      keys,
      pattern: pathToRegexp_1(routepath, keys, {
        end: exact,
        strict: routepath === ''
      })
    };
    cache.set(cacheKey, regexp);
  }

  const m = regexp.pattern.exec(path);

  if (!m) {
    return null;
  }

  const params = Object.assign({}, parentParams);

  for (let i = 1; i < m.length; i++) {
    const key = regexp.keys[i - 1];
    const prop = key.name;
    const value = m[i];

    if (value !== undefined || !vaadin_router_hasOwnProperty.call(params, prop)) {
      if (key.repeat) {
        params[prop] = value ? value.split(key.delimiter).map(decodeParam) : [];
      } else {
        params[prop] = value ? decodeParam(value) : value;
      }
    }
  }

  return {
    path: m[0],
    keys: (parentKeys || []).concat(regexp.keys),
    params
  };
}
/**
 * Universal Router (https://www.kriasoft.com/universal-router/)
 *
 * Copyright (c) 2015-present Kriasoft.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */

/**
 * Traverses the routes tree and matches its nodes to the given pathname from
 * the root down to the leaves. Each match consumes a part of the pathname and
 * the matching process continues for as long as there is a matching child
 * route for the remaining part of the pathname.
 *
 * The returned value is a lazily evaluated iterator.
 *
 * The leading "/" in a route path matters only for the root of the routes
 * tree (or if all parent routes are ""). In all other cases a leading "/" in
 * a child route path has no significance.
 *
 * The trailing "/" in a _route path_ matters only for the leaves of the
 * routes tree. A leaf route with a trailing "/" matches only a pathname that
 * also has a trailing "/".
 *
 * The trailing "/" in a route path does not affect matching of child routes
 * in any way.
 *
 * The trailing "/" in a _pathname_ generally does not matter (except for
 * the case of leaf nodes described above).
 *
 * The "" and "/" routes have special treatment:
 *  1. as a single route
 *     the "" and "/" routes match only the "" and "/" pathnames respectively
 *  2. as a parent in the routes tree
 *     the "" route matches any pathname without consuming any part of it
 *     the "/" route matches any absolute pathname consuming its leading "/"
 *  3. as a leaf in the routes tree
 *     the "" and "/" routes match only if the entire pathname is consumed by
 *         the parent routes chain. In this case "" and "/" are equivalent.
 *  4. several directly nested "" or "/" routes
 *     - directly nested "" or "/" routes are 'squashed' (i.e. nesting two
 *       "/" routes does not require a double "/" in the pathname to match)
 *     - if there are only "" in the parent routes chain, no part of the
 *       pathname is consumed, and the leading "/" in the child routes' paths
 *       remains significant
 *
 * Side effect:
 *   - the routes tree { path: '' } matches only the '' pathname
 *   - the routes tree { path: '', children: [ { path: '' } ] } matches any
 *     pathname (for the tree root)
 *
 * Prefix matching can be enabled also by `children: true`.
 */


function matchRoute(route, pathname, ignoreLeadingSlash, parentKeys, parentParams) {
  let match;
  let childMatches;
  let childIndex = 0;
  let routepath = route.path || '';

  if (routepath.charAt(0) === '/') {
    if (ignoreLeadingSlash) {
      routepath = routepath.substr(1);
    }

    ignoreLeadingSlash = true;
  }

  return {
    next(routeToSkip) {
      if (route === routeToSkip) {
        return {
          done: true
        };
      }

      const children = route.__children = route.__children || route.children;

      if (!match) {
        match = matchPath(routepath, pathname, !children, parentKeys, parentParams);

        if (match) {
          return {
            done: false,
            value: {
              route,
              keys: match.keys,
              params: match.params,
              path: match.path
            }
          };
        }
      }

      if (match && children) {
        while (childIndex < children.length) {
          if (!childMatches) {
            const childRoute = children[childIndex];
            childRoute.parent = route;
            let matchedLength = match.path.length;

            if (matchedLength > 0 && pathname.charAt(matchedLength) === '/') {
              matchedLength += 1;
            }

            childMatches = matchRoute(childRoute, pathname.substr(matchedLength), ignoreLeadingSlash, match.keys, match.params);
          }

          const childMatch = childMatches.next(routeToSkip);

          if (!childMatch.done) {
            return {
              done: false,
              value: childMatch.value
            };
          }

          childMatches = null;
          childIndex++;
        }
      }

      return {
        done: true
      };
    }

  };
}
/**
 * Universal Router (https://www.kriasoft.com/universal-router/)
 *
 * Copyright (c) 2015-present Kriasoft.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */


function resolveRoute(context) {
  if (isFunction(context.route.action)) {
    return context.route.action(context);
  }

  return undefined;
}
/**
 * Universal Router (https://www.kriasoft.com/universal-router/)
 *
 * Copyright (c) 2015-present Kriasoft.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */


function isChildRoute(parentRoute, childRoute) {
  let route = childRoute;

  while (route) {
    route = route.parent;

    if (route === parentRoute) {
      return true;
    }
  }

  return false;
}

function generateErrorMessage(currentContext) {
  let errorMessage = "Path '".concat(currentContext.pathname, "' is not properly resolved due to an error.");
  const routePath = (currentContext.route || {}).path;

  if (routePath) {
    errorMessage += " Resolution had failed on route: '".concat(routePath, "'");
  }

  return errorMessage;
}

function addRouteToChain(context, match) {
  const {
    route,
    path
  } = match;

  function shouldDiscardOldChain(oldChain, route) {
    return !route.parent || !oldChain || !oldChain.length || oldChain[oldChain.length - 1].route !== route.parent;
  }

  if (route && !route.__synthetic) {
    const item = {
      path,
      route
    };

    if (shouldDiscardOldChain(context.chain, route)) {
      context.chain = [item];
    } else {
      context.chain.push(item);
    }
  }
}
/**
 * @memberof Vaadin
 */


class Resolver {
  constructor(routes, options = {}) {
    if (Object(routes) !== routes) {
      throw new TypeError('Invalid routes');
    }

    this.baseUrl = options.baseUrl || '';
    this.errorHandler = options.errorHandler;
    this.resolveRoute = options.resolveRoute || resolveRoute;
    this.context = Object.assign({
      resolver: this
    }, options.context);
    this.root = Array.isArray(routes) ? {
      path: '',
      __children: routes,
      parent: null,
      __synthetic: true
    } : routes;
    this.root.parent = null;
  }
  /**
   * Returns the current list of routes (as a shallow copy). Adding / removing
   * routes to / from the returned array does not affect the routing config,
   * but modifying the route objects does.
   *
   * @return {!Array<!Route>}
   */


  getRoutes() {
    return [...this.root.__children];
  }
  /**
   * Sets the routing config (replacing the existing one).
   *
   * @param {!Array<!Route>|!Route} routes a single route or an array of those
   *    (the array is shallow copied)
   */


  setRoutes(routes) {
    ensureRoutes(routes);
    const newRoutes = [...toArray(routes)];
    this.root.__children = newRoutes;
  }
  /**
   * Appends one or several routes to the routing config and returns the
   * effective routing config after the operation.
   *
   * @param {!Array<!Route>|!Route} routes a single route or an array of those
   *    (the array is shallow copied)
   * @return {!Array<!Route>}
   * @protected
   */


  addRoutes(routes) {
    ensureRoutes(routes);

    this.root.__children.push(...toArray(routes));

    return this.getRoutes();
  }
  /**
   * Removes all existing routes from the routing config.
   */


  removeRoutes() {
    this.setRoutes([]);
  }
  /**
   * Asynchronously resolves the given pathname, i.e. finds all routes matching
   * the pathname and tries resolving them one after another in the order they
   * are listed in the routes config until the first non-null result.
   *
   * Returns a promise that is fulfilled with the return value of an object that consists of the first
   * route handler result that returns something other than `null` or `undefined` and context used to get this result.
   *
   * If no route handlers return a non-null result, or if no route matches the
   * given pathname the returned promise is rejected with a 'page not found'
   * `Error`.
   *
   * @param {!string|!{pathname: !string}} pathnameOrContext the pathname to
   *    resolve or a context object with a `pathname` property and other
   *    properties to pass to the route resolver functions.
   * @return {!Promise<any>}
   */


  resolve(pathnameOrContext) {
    const context = Object.assign({}, this.context, isString(pathnameOrContext) ? {
      pathname: pathnameOrContext
    } : pathnameOrContext);
    const match = matchRoute(this.root, this.__normalizePathname(context.pathname), this.baseUrl);
    const resolve = this.resolveRoute;
    let matches = null;
    let nextMatches = null;
    let currentContext = context;

    function next(resume, parent = matches.value.route, prevResult) {
      const routeToSkip = prevResult === null && matches.value.route;
      matches = nextMatches || match.next(routeToSkip);
      nextMatches = null;

      if (!resume) {
        if (matches.done || !isChildRoute(parent, matches.value.route)) {
          nextMatches = matches;
          return Promise.resolve(notFoundResult);
        }
      }

      if (matches.done) {
        return Promise.reject(getNotFoundError(context));
      }

      addRouteToChain(context, matches.value);
      currentContext = Object.assign({}, context, matches.value);
      return Promise.resolve(resolve(currentContext)).then(resolution => {
        if (resolution !== null && resolution !== undefined && resolution !== notFoundResult) {
          currentContext.result = resolution.result || resolution;
          return currentContext;
        }

        return next(resume, parent, resolution);
      });
    }

    context.next = next;
    return Promise.resolve().then(() => next(true, this.root)).catch(error => {
      const errorMessage = generateErrorMessage(currentContext);

      if (!error) {
        error = new Error(errorMessage);
      } else {
        console.warn(errorMessage);
      }

      error.context = error.context || currentContext; // DOMException has its own code which is read-only

      if (!(error instanceof DOMException)) {
        error.code = error.code || 500;
      }

      if (this.errorHandler) {
        currentContext.result = this.errorHandler(error);
        return currentContext;
      }

      throw error;
    });
  }
  /**
   * URL constructor polyfill hook. Creates and returns an URL instance.
   */


  static __createUrl(url, base) {
    return new URL(url, base);
  }
  /**
   * If the baseUrl property is set, transforms the baseUrl and returns the full
   * actual `base` string for using in the `new URL(path, base);` and for
   * prepernding the paths with. The returned base ends with a trailing slash.
   *
   * Otherwise, returns empty string.
   */


  get __effectiveBaseUrl() {
    return this.baseUrl ? this.constructor.__createUrl(this.baseUrl, document.baseURI || document.URL).href.replace(/[^\/]*$/, '') : '';
  }
  /**
   * If the baseUrl is set, matches the pathname with the router’s baseUrl,
   * and returns the local pathname with the baseUrl stripped out.
   *
   * If the pathname does not match the baseUrl, returns undefined.
   *
   * If the `baseUrl` is not set, returns the unmodified pathname argument.
   */


  __normalizePathname(pathname) {
    if (!this.baseUrl) {
      // No base URL, no need to transform the pathname.
      return pathname;
    }

    const base = this.__effectiveBaseUrl;

    const normalizedUrl = this.constructor.__createUrl(pathname, base).href;

    if (normalizedUrl.slice(0, base.length) === base) {
      return normalizedUrl.slice(base.length);
    }
  }

}

Resolver.pathToRegexp = pathToRegexp_1;
/**
 * Universal Router (https://www.kriasoft.com/universal-router/)
 *
 * Copyright (c) 2015-present Kriasoft.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE.txt file in the root directory of this source tree.
 */

const {
  pathToRegexp: pathToRegexp$1
} = Resolver;
const cache$1 = new Map();

function cacheRoutes(routesByName, route, routes) {
  const name = route.name || route.component;

  if (name) {
    if (routesByName.has(name)) {
      routesByName.get(name).push(route);
    } else {
      routesByName.set(name, [route]);
    }
  }

  if (Array.isArray(routes)) {
    for (let i = 0; i < routes.length; i++) {
      const childRoute = routes[i];
      childRoute.parent = route;
      cacheRoutes(routesByName, childRoute, childRoute.__children || childRoute.children);
    }
  }
}

function getRouteByName(routesByName, routeName) {
  const routes = routesByName.get(routeName);

  if (routes && routes.length > 1) {
    throw new Error("Duplicate route with name \"".concat(routeName, "\".") + " Try seting unique 'name' route properties.");
  }

  return routes && routes[0];
}

function getRoutePath(route) {
  let path = route.path;
  path = Array.isArray(path) ? path[0] : path;
  return path !== undefined ? path : '';
}

function generateUrls(router, options = {}) {
  if (!(router instanceof Resolver)) {
    throw new TypeError('An instance of Resolver is expected');
  }

  const routesByName = new Map();
  return (routeName, params) => {
    let route = getRouteByName(routesByName, routeName);

    if (!route) {
      routesByName.clear(); // clear cache

      cacheRoutes(routesByName, router.root, router.root.__children);
      route = getRouteByName(routesByName, routeName);

      if (!route) {
        throw new Error("Route \"".concat(routeName, "\" not found"));
      }
    }

    let regexp = cache$1.get(route.fullPath);

    if (!regexp) {
      let fullPath = getRoutePath(route);
      let rt = route.parent;

      while (rt) {
        const path = getRoutePath(rt);

        if (path) {
          fullPath = path.replace(/\/$/, '') + '/' + fullPath.replace(/^\//, '');
        }

        rt = rt.parent;
      }

      const tokens = pathToRegexp$1.parse(fullPath);
      const toPath = pathToRegexp$1.tokensToFunction(tokens);
      const keys = Object.create(null);

      for (let i = 0; i < tokens.length; i++) {
        if (!isString(tokens[i])) {
          keys[tokens[i].name] = true;
        }
      }

      regexp = {
        toPath,
        keys
      };
      cache$1.set(fullPath, regexp);
      route.fullPath = fullPath;
    }

    let url = regexp.toPath(params, options) || '/';

    if (options.stringifyQueryParams && params) {
      const queryParams = {};
      const keys = Object.keys(params);

      for (let i = 0; i < keys.length; i++) {
        const key = keys[i];

        if (!regexp.keys[key]) {
          queryParams[key] = params[key];
        }
      }

      const query = options.stringifyQueryParams(queryParams);

      if (query) {
        url += query.charAt(0) === '?' ? query : "?".concat(query);
      }
    }

    return url;
  };
}
/**
 * @typedef NavigationTrigger
 * @type {object}
 * @property {function()} activate
 * @property {function()} inactivate
 */

/** @type {Array<NavigationTrigger>} */


let triggers = [];

function setNavigationTriggers(newTriggers) {
  triggers.forEach(trigger => trigger.inactivate());
  newTriggers.forEach(trigger => trigger.activate());
  triggers = newTriggers;
}

const willAnimate = elem => {
  const name = getComputedStyle(elem).getPropertyValue('animation-name');
  return name && name !== 'none';
};

const waitForAnimation = (elem, cb) => {
  const listener = () => {
    elem.removeEventListener('animationend', listener);
    cb();
  };

  elem.addEventListener('animationend', listener);
};

function animate(elem, className) {
  elem.classList.add(className);
  return new Promise(resolve => {
    if (willAnimate(elem)) {
      const rect = elem.getBoundingClientRect();
      const size = "height: ".concat(rect.bottom - rect.top, "px; width: ").concat(rect.right - rect.left, "px");
      elem.setAttribute('style', "position: absolute; ".concat(size));
      waitForAnimation(elem, () => {
        elem.classList.remove(className);
        elem.removeAttribute('style');
        resolve();
      });
    } else {
      elem.classList.remove(className);
      resolve();
    }
  });
}

const MAX_REDIRECT_COUNT = 256;

function isResultNotEmpty(result) {
  return result !== null && result !== undefined;
}

function copyContextWithoutNext(context) {
  const copy = Object.assign({}, context);
  delete copy.next;
  return copy;
}

function createLocation({
  pathname = '',
  chain = [],
  params = {},
  redirectFrom,
  resolver
}, route) {
  const routes = chain.map(item => item.route);
  return {
    baseUrl: resolver && resolver.baseUrl || '',
    pathname,
    routes,
    route: route || routes.length && routes[routes.length - 1] || null,
    params,
    redirectFrom,
    getUrl: (userParams = {}) => getPathnameForRouter(Router.pathToRegexp.compile(getMatchedPath(routes))(Object.assign({}, params, userParams)), resolver)
  };
}

function createRedirect(context, pathname) {
  const params = Object.assign({}, context.params);
  return {
    redirect: {
      pathname,
      from: context.pathname,
      params
    }
  };
}

function renderComponent(context, component) {
  const element = document.createElement(component);
  element.location = createLocation(context);
  const index = context.chain.map(item => item.route).indexOf(context.route);
  context.chain[index].element = element;
  return element;
}

function runCallbackIfPossible(callback, args, thisArg) {
  if (isFunction(callback)) {
    return callback.apply(thisArg, args);
  }
}

function amend(amendmentFunction, args, element) {
  return amendmentResult => {
    if (amendmentResult && (amendmentResult.cancel || amendmentResult.redirect)) {
      return amendmentResult;
    }

    if (element) {
      return runCallbackIfPossible(element[amendmentFunction], args, element);
    }
  };
}

function processNewChildren(newChildren, route) {
  if (!Array.isArray(newChildren) && !isObject(newChildren)) {
    throw new Error(log("Incorrect \"children\" value for the route ".concat(route.path, ": expected array or object, but got ").concat(newChildren)));
  }

  route.__children = [];
  const childRoutes = toArray(newChildren);

  for (let i = 0; i < childRoutes.length; i++) {
    ensureRoute(childRoutes[i]);

    route.__children.push(childRoutes[i]);
  }
}

function removeDomNodes(nodes) {
  if (nodes && nodes.length) {
    const parent = nodes[0].parentNode;

    for (let i = 0; i < nodes.length; i++) {
      parent.removeChild(nodes[i]);
    }
  }
}

function getPathnameForRouter(pathname, router) {
  const base = router.__effectiveBaseUrl;
  return base ? router.constructor.__createUrl(pathname.replace(/^\//, ''), base).pathname : pathname;
}

function getMatchedPath(chain) {
  return chain.map(item => item.path).reduce((a, b) => {
    if (b.length) {
      return a.replace(/\/$/, '') + '/' + b.replace(/^\//, '');
    }

    return a;
  }, '');
}
/**
 * A simple client-side router for single-page applications. It uses
 * express-style middleware and has a first-class support for Web Components and
 * lazy-loading. Works great in Polymer and non-Polymer apps.
 *
 * Use `new Router(outlet, options)` to create a new Router instance.
 *
 * * The `outlet` parameter is a reference to the DOM node to render
 *   the content into.
 *
 * * The `options` parameter is an optional object with options. The following
 *   keys are supported:
 *   * `baseUrl` — the initial value for [
 *     the `baseUrl` property
 *   ](#/classes/Vaadin.Router#property-baseUrl)
 *
 * The Router instance is automatically subscribed to navigation events
 * on `window`.
 *
 * See [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html) for the detailed usage demo and code snippets.
 *
 * See also detailed API docs for the following methods, for the advanced usage:
 *
 * * [setOutlet](#/classes/Vaadin.Router#method-setOutlet) – should be used to configure the outlet.
 * * [setTriggers](#/classes/Vaadin.Router#method-setTriggers) – should be used to configure the navigation events.
 * * [setRoutes](#/classes/Vaadin.Router#method-setRoutes) – should be used to configure the routes.
 *
 * Only `setRoutes` has to be called manually, others are automatically invoked when creating a new instance.
 *
 * @memberof Vaadin
 * @extends Vaadin.Resolver
 * @demo demo/index.html
 * @summary JavaScript class that renders different DOM content depending on
 *    a given path. It can re-render when triggered or automatically on
 *    'popstate' and / or 'click' events.
 */


class Router extends Resolver {
  /**
   * Creates a new Router instance with a given outlet, and
   * automatically subscribes it to navigation events on the `window`.
   * Using a constructor argument or a setter for outlet is equivalent:
   *
   * ```
   * const router = new Vaadin.Router();
   * router.setOutlet(outlet);
   * ```
   * @param {?Node} outlet
   * @param {?RouterOptions} options
   */
  constructor(outlet, options) {
    const baseElement = document.head.querySelector('base');
    super([], Object.assign({
      // Default options
      baseUrl: baseElement && baseElement.getAttribute('href')
    }, options));

    this.resolveRoute = context => this.__resolveRoute(context);

    const triggers = Router.NavigationTrigger;
    Router.setTriggers.apply(Router, Object.keys(triggers).map(key => triggers[key]));
    /**
     * The base URL for all routes in the router instance. By default,
     * takes the `<base href>` attribute value if the base element exists
     * in the `<head>`.
     *
     * @public
     * @type {string}
     */

    this.baseUrl;
    /**
     * A promise that is settled after the current render cycle completes. If
     * there is no render cycle in progress the promise is immediately settled
     * with the last render cycle result.
     *
     * @public
     * @type {!Promise<!Vaadin.Router.Location>}
     */

    this.ready;
    this.ready = Promise.resolve(outlet);
    /**
     * Contains read-only information about the current router location:
     * pathname, active routes, parameters. See the
     * [Location type declaration](#/classes/Vaadin.Router.Location)
     * for more details.
     *
     * @public
     * @type {!Vaadin.Router.Location}
     */

    this.location;
    this.location = createLocation({
      resolver: this
    });
    this.__lastStartedRenderId = 0;
    this.__navigationEventHandler = this.__onNavigationEvent.bind(this);
    this.setOutlet(outlet);
    this.subscribe();
  }

  __resolveRoute(context) {
    const route = context.route;
    let callbacks = Promise.resolve();

    if (isFunction(route.children)) {
      callbacks = callbacks.then(() => route.children(copyContextWithoutNext(context))).then(children => {
        // The route.children() callback might have re-written the
        // route.children property instead of returning a value
        if (!isResultNotEmpty(children) && !isFunction(route.children)) {
          children = route.children;
        }

        processNewChildren(children, route);
      });
    }

    const commands = {
      redirect: path => createRedirect(context, path),
      component: component => renderComponent(context, component)
    };
    return callbacks.then(() => runCallbackIfPossible(route.action, [context, commands], route)).then(result => {
      if (isResultNotEmpty(result)) {
        // Actions like `() => import('my-view.js')` are not expected to
        // end the resolution, despite the result is not empty. Checking
        // the result with a whitelist of values that end the resulution.
        if (result instanceof HTMLElement || result.redirect || result === notFoundResult) {
          return result;
        }
      }

      if (isString(route.redirect)) {
        return commands.redirect(route.redirect);
      }

      if (route.bundle) {
        return loadBundle(route.bundle).then(() => {}, () => {
          throw new Error(log("Bundle not found: ".concat(route.bundle, ". Check if the file name is correct")));
        });
      }
    }).then(result => {
      if (isResultNotEmpty(result)) {
        return result;
      }

      if (isString(route.component)) {
        return commands.component(route.component);
      }
    });
  }
  /**
   * Sets the router outlet (the DOM node where the content for the current
   * route is inserted). Any content pre-existing in the router outlet is
   * removed at the end of each render pass.
   *
   * NOTE: this method is automatically invoked first time when creating a new Router instance.
   *
   * @param {?Node} outlet the DOM node where the content for the current route
   *     is inserted.
   */


  setOutlet(outlet) {
    if (outlet) {
      this.__ensureOutlet(outlet);
    }

    this.__outlet = outlet;
  }
  /**
   * Returns the current router outlet. The initial value is `undefined`.
   *
   * @return {?Node} the current router outlet (or `undefined`)
   */


  getOutlet() {
    return this.__outlet;
  }
  /**
   * Sets the routing config (replacing the existing one) and triggers a
   * navigation event so that the router outlet is refreshed according to the
   * current `window.location` and the new routing config.
   *
   * Each route object may have the following properties, listed here in the processing order:
   * * `path` – the route path (relative to the parent route if any) in the
   * [express.js syntax](https://expressjs.com/en/guide/routing.html#route-paths").
   *
   * * `children` – an array of nested routes or a function that provides this
   * array at the render time. The function can be synchronous or asynchronous:
   * in the latter case the render is delayed until the returned promise is
   * resolved. The `children` function is executed every time when this route is
   * being rendered. This allows for dynamic route structures (e.g. backend-defined),
   * but it might have a performance impact as well. In order to avoid calling
   * the function on subsequent renders, you can override the `children` property
   * of the route object and save the calculated array there
   * (via `context.route.children = [ route1, route2, ...];`).
   * Parent routes are fully resolved before resolving the children. Children
   * 'path' values are relative to the parent ones.
   *
   * * `action` – the action that is executed before the route is resolved.
   * The value for this property should be a function, accepting `context`
   * and `commands` parameters described below. If present, this function is
   * always invoked first, disregarding of the other properties' presence.
   * The action can return a result directly or within a `Promise`, which
   * resolves to the result. If the action result is an `HTMLElement` instance,
   * a `commands.component(name)` result, a `commands.redirect(path)` result,
   * or a `context.next()` result, the current route resolution is finished,
   * and other route config properties are ignored.
   * See also **Route Actions** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).
   *
   * * `redirect` – other route's path to redirect to. Passes all route parameters to the redirect target.
   * The target route should also be defined.
   * See also **Redirects** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).
   *
   * * `bundle` – string containing the path to `.js` or `.mjs` bundle to load before resolving the route,
   * or the object with "module" and "nomodule" keys referring to different bundles.
   * Each bundle is only loaded once. If "module" and "nomodule" are set, only one bundle is loaded,
   * depending on whether the browser supports ES modules or not.
   * The property is ignored when either an `action` returns the result or `redirect` property is present.
   * Any error, e.g. 404 while loading bundle will cause route resolution to throw.
   * See also **Code Splitting** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).
   *
   * * `component` – the tag name of the Web Component to resolve the route to.
   * The property is ignored when either an `action` returns the result or `redirect` property is present.
   * If route contains the `component` property (or an action that return a component)
   * and its child route also contains the `component` property, child route's component
   * will be rendered as a light dom child of a parent component.
   *
   * * `name` – the string name of the route to use in the
   * [`router.urlForName(name, params)`](#/classes/Vaadin.Router#method-urlForName)
   * navigation helper method.
   *
   * For any route function (`action`, `children`) defined, the corresponding `route` object is available inside the callback
   * through the `this` reference. If you need to access it, make sure you define the callback as a non-arrow function
   * because arrow functions do not have their own `this` reference.
   *
   * `context` object that is passed to `action` function holds the following properties:
   * * `context.pathname` – string with the pathname being resolved
   *
   * * `context.params` – object with route parameters
   *
   * * `context.route` – object that holds the route that is currently being rendered.
   *
   * * `context.next()` – function for asynchronously getting the next route
   * contents from the resolution chain (if any)
   *
   * `commands` object that is passed to `action` function has
   * the following methods:
   *
   * * `commands.redirect(path)` – function that creates a redirect data
   * for the path specified.
   *
   * * `commands.component(component)` – function that creates a new HTMLElement
   * with current context
   *
   * @param {!Array<!Object>|!Object} routes a single route or an array of those
   */


  setRoutes(routes) {
    this.__urlForName = undefined;
    super.setRoutes(routes);

    this.__onNavigationEvent();
  }
  /**
   * Asynchronously resolves the given pathname and renders the resolved route
   * component into the router outlet. If no router outlet is set at the time of
   * calling this method, or at the time when the route resolution is completed,
   * a `TypeError` is thrown.
   *
   * Returns a promise that is fulfilled with the router outlet DOM Node after
   * the route component is created and inserted into the router outlet, or
   * rejected if no route matches the given path.
   *
   * If another render pass is started before the previous one is completed, the
   * result of the previous render pass is ignored.
   *
   * @param {!string|!{pathname: !string}} pathnameOrContext the pathname to
   *    render or a context object with a `pathname` property and other
   *    properties to pass to the resolver.
   * @return {!Promise<!Node>}
   */


  render(pathnameOrContext, shouldUpdateHistory) {
    const renderId = ++this.__lastStartedRenderId;
    const pathname = pathnameOrContext.pathname || pathnameOrContext; // Find the first route that resolves to a non-empty result

    this.ready = this.resolve(pathnameOrContext) // Process the result of this.resolve() and handle all special commands:
    // (redirect / prevent / component). If the result is a 'component',
    // then go deeper and build the entire chain of nested components matching
    // the pathname. Also call all 'on before' callbacks along the way.
    .then(context => this.__fullyResolveChain(context)).then(context => {
      if (renderId === this.__lastStartedRenderId) {
        const previousContext = this.__previousContext; // Check if the render was prevented and make an early return in that case

        if (context === previousContext) {
          return this.location;
        }

        this.location = createLocation(context);
        fireRouterEvent('location-changed', {
          router: this,
          location: this.location
        });

        if (shouldUpdateHistory) {
          this.__updateBrowserHistory(context.pathname, context.redirectFrom);
        }

        this.__addAppearingContent(context, previousContext);

        const animationDone = this.__animateIfNeeded(context);

        this.__runOnAfterEnterCallbacks(context);

        this.__runOnAfterLeaveCallbacks(context, previousContext);

        return animationDone.then(() => {
          if (renderId === this.__lastStartedRenderId) {
            // If there is another render pass started after this one,
            // the 'disappearing content' would be removed when the other
            // render pass calls `this.__addAppearingContent()`
            this.__removeDisappearingContent();

            this.__previousContext = context;
            return this.location;
          }
        });
      }
    }).catch(error => {
      if (renderId === this.__lastStartedRenderId) {
        if (shouldUpdateHistory) {
          this.__updateBrowserHistory(pathname);
        }

        removeDomNodes(this.__outlet && this.__outlet.children);
        this.location = createLocation({
          pathname,
          resolver: this
        });
        fireRouterEvent('error', {
          router: this,
          error,
          pathname
        });
        throw error;
      }
    });
    return this.ready;
  }

  __fullyResolveChain(originalContext, currentContext = originalContext) {
    return this.__amendWithResolutionResult(currentContext).then(amendedContext => {
      const initialContext = amendedContext !== currentContext ? amendedContext : originalContext;
      return amendedContext.next().then(nextContext => {
        if (nextContext === null || nextContext === notFoundResult) {
          const matchedPath = getPathnameForRouter(getMatchedPath(amendedContext.chain), amendedContext.resolver);

          if (matchedPath !== amendedContext.pathname) {
            throw getNotFoundError(initialContext);
          }
        }

        return nextContext && nextContext !== notFoundResult ? this.__fullyResolveChain(initialContext, nextContext) : this.__amendWithOnBeforeCallbacks(initialContext);
      });
    });
  }

  __amendWithResolutionResult(context) {
    const result = context.result;

    if (result instanceof HTMLElement) {
      return Promise.resolve(context);
    } else if (result.redirect) {
      return this.__redirect(result.redirect, context.__redirectCount).then(context => this.__amendWithResolutionResult(context));
    } else if (result instanceof Error) {
      return Promise.reject(result);
    } else {
      return Promise.reject(new Error(log("Invalid route resolution result for path \"".concat(context.pathname, "\". ") + "Expected redirect object or HTML element, but got: \"".concat(logValue(result), "\". ") + "Double check the action return value for the route.")));
    }
  }

  __amendWithOnBeforeCallbacks(contextWithFullChain) {
    return this.__runOnBeforeCallbacks(contextWithFullChain).then(amendedContext => {
      if (amendedContext === this.__previousContext || amendedContext === contextWithFullChain) {
        return amendedContext;
      }

      return this.__fullyResolveChain(amendedContext);
    });
  }

  __runOnBeforeCallbacks(newContext) {
    const previousContext = this.__previousContext || {};
    const previousChain = previousContext.chain || [];
    const newChain = newContext.chain;
    let callbacks = Promise.resolve();

    const prevent = () => ({
      cancel: true
    });

    const redirect = pathname => createRedirect(newContext, pathname);

    newContext.__divergedChainIndex = 0;

    if (previousChain.length) {
      for (let i = 0; i < Math.min(previousChain.length, newChain.length); i = ++newContext.__divergedChainIndex) {
        if (previousChain[i].route !== newChain[i].route || previousChain[i].path !== newChain[i].path || (previousChain[i].element && previousChain[i].element.localName) !== (newChain[i].element && newChain[i].element.localName)) {
          break;
        }
      }

      for (let i = previousChain.length - 1; i >= newContext.__divergedChainIndex; i--) {
        const location = createLocation(newContext);
        callbacks = callbacks.then(amend('onBeforeLeave', [location, {
          prevent
        }, this], previousChain[i].element)).then(result => {
          if (!(result || {}).redirect) {
            return result;
          }
        });
      }
    }

    for (let i = newContext.__divergedChainIndex; i < newChain.length; i++) {
      const location = createLocation(newContext, newChain[i].route);
      callbacks = callbacks.then(amend('onBeforeEnter', [location, {
        prevent,
        redirect
      }, this], newChain[i].element));
    }

    return callbacks.then(amendmentResult => {
      if (amendmentResult) {
        if (amendmentResult.cancel) {
          return this.__previousContext;
        }

        if (amendmentResult.redirect) {
          return this.__redirect(amendmentResult.redirect, newContext.__redirectCount);
        }
      }

      return newContext;
    });
  }

  __redirect(redirectData, counter) {
    if (counter > MAX_REDIRECT_COUNT) {
      throw new Error(log("Too many redirects when rendering ".concat(redirectData.from)));
    }

    return this.resolve({
      pathname: this.urlForPath(redirectData.pathname, redirectData.params),
      redirectFrom: redirectData.from,
      __redirectCount: (counter || 0) + 1
    });
  }

  __ensureOutlet(outlet = this.__outlet) {
    if (!(outlet instanceof Node)) {
      throw new TypeError(log("Expected router outlet to be a valid DOM Node (but got ".concat(outlet, ")")));
    }
  }

  __updateBrowserHistory(pathname, replace) {
    if (window.location.pathname !== pathname) {
      const changeState = replace ? 'replaceState' : 'pushState';
      window.history[changeState](null, document.title, pathname);
      window.dispatchEvent(new PopStateEvent('popstate', {
        state: 'vaadin-router-ignore'
      }));
    }
  }

  __addAppearingContent(context, previousContext) {
    this.__ensureOutlet(); // If the previous 'entering' animation has not completed yet,
    // stop it and remove that content from the DOM before adding new one.


    this.__removeAppearingContent(); // Find the deepest common parent between the last and the new component
    // chains. Update references for the unchanged elements in the new chain


    let deepestCommonParent = this.__outlet;

    for (let i = 0; i < context.__divergedChainIndex; i++) {
      const unchangedElement = previousContext && previousContext.chain[i].element;

      if (unchangedElement) {
        if (unchangedElement.parentNode === deepestCommonParent) {
          context.chain[i].element = unchangedElement;
          deepestCommonParent = unchangedElement;
        } else {
          break;
        }
      }
    } // Keep two lists of DOM elements:
    //  - those that should be removed once the transition animation is over
    //  - and those that should remain


    this.__disappearingContent = Array.from(deepestCommonParent.children);
    this.__appearingContent = []; // Add new elements (starting after the deepest common parent) to the DOM.
    // That way only the components that are actually different between the two
    // locations are added to the DOM (and those that are common remain in the
    // DOM without first removing and then adding them again).

    let parentElement = deepestCommonParent;

    for (let i = context.__divergedChainIndex; i < context.chain.length; i++) {
      const elementToAdd = context.chain[i].element;

      if (elementToAdd) {
        parentElement.appendChild(elementToAdd);

        if (parentElement === deepestCommonParent) {
          this.__appearingContent.push(elementToAdd);
        }

        parentElement = elementToAdd;
      }
    }
  }

  __removeDisappearingContent() {
    if (this.__disappearingContent) {
      removeDomNodes(this.__disappearingContent);
    }

    this.__disappearingContent = null;
    this.__appearingContent = null;
  }

  __removeAppearingContent() {
    if (this.__disappearingContent && this.__appearingContent) {
      removeDomNodes(this.__appearingContent);
      this.__disappearingContent = null;
      this.__appearingContent = null;
    }
  }

  __runOnAfterLeaveCallbacks(currentContext, targetContext) {
    if (!targetContext) {
      return;
    } // REVERSE iteration: from Z to A


    for (let i = targetContext.chain.length - 1; i >= currentContext.__divergedChainIndex; i--) {
      const currentComponent = targetContext.chain[i].element;

      if (!currentComponent) {
        continue;
      }

      try {
        const location = createLocation(currentContext);
        runCallbackIfPossible(currentComponent.onAfterLeave, [location, {}, targetContext.resolver], currentComponent);
      } finally {
        removeDomNodes(currentComponent.children);
      }
    }
  }

  __runOnAfterEnterCallbacks(currentContext) {
    // forward iteration: from A to Z
    for (let i = currentContext.__divergedChainIndex; i < currentContext.chain.length; i++) {
      const currentComponent = currentContext.chain[i].element || {};
      const location = createLocation(currentContext, currentContext.chain[i].route);
      runCallbackIfPossible(currentComponent.onAfterEnter, [location, {}, currentContext.resolver], currentComponent);
    }
  }

  __animateIfNeeded(context) {
    const from = (this.__disappearingContent || [])[0];
    const to = (this.__appearingContent || [])[0];
    const promises = [];
    const chain = context.chain;
    let config;

    for (let i = chain.length; i > 0; i--) {
      if (chain[i - 1].route.animate) {
        config = chain[i - 1].route.animate;
        break;
      }
    }

    if (from && to && config) {
      const leave = isObject(config) && config.leave || 'leaving';
      const enter = isObject(config) && config.enter || 'entering';
      promises.push(animate(from, leave));
      promises.push(animate(to, enter));
    }

    return Promise.all(promises).then(() => context);
  }
  /**
   * Subscribes this instance to navigation events on the `window`.
   *
   * NOTE: beware of resource leaks. For as long as a router instance is
   * subscribed to navigation events, it won't be garbage collected.
   */


  subscribe() {
    window.addEventListener('vaadin-router-go', this.__navigationEventHandler);
  }
  /**
   * Removes the subscription to navigation events created in the `subscribe()`
   * method.
   */


  unsubscribe() {
    window.removeEventListener('vaadin-router-go', this.__navigationEventHandler);
  }

  __onNavigationEvent(event) {
    const pathname = event ? event.detail.pathname : window.location.pathname;

    if (isString(this.__normalizePathname(pathname))) {
      if (event && event.preventDefault) {
        event.preventDefault();
      }

      this.render(pathname, true);
    }
  }
  /**
   * Configures what triggers Vaadin.Router navigation events:
   *  - `POPSTATE`: popstate events on the current `window`
   *  - `CLICK`: click events on `<a>` links leading to the current page
   *
   * This method is invoked with the pre-configured values when creating a new Router instance.
   * By default, both `POPSTATE` and `CLICK` are enabled. This setup is expected to cover most of the use cases.
   *
   * See the `router-config.js` for the default navigation triggers config. Based on it, you can
   * create the own one and only import the triggers you need, instead of pulling in all the code,
   * e.g. if you want to handle `click` differently.
   *
   * See also **Navigation Triggers** section in [Live Examples](#/classes/Vaadin.Router/demos/demo/index.html).
   *
   * @param {...NavigationTrigger} triggers
   */


  static setTriggers(...triggers) {
    setNavigationTriggers(triggers);
  }
  /**
   * Generates a URL for the route with the given name, optionally performing
   * substitution of parameters.
   *
   * The route is searched in all the Vaadin.Router instances subscribed to
   * navigation events.
   *
   * **Note:** For child route names, only array children are considered.
   * It is not possible to generate URLs using a name for routes set with
   * a children function.
   *
   * @function urlForName
   * @param {!string} name the route name or the route’s `component` name.
   * @param {?Object} params Optional object with route path parameters.
   * Named parameters are passed by name (`params[name] = value`), unnamed
   * parameters are passed by index (`params[index] = value`).
   *
   * @return {string}
   */


  urlForName(name, params) {
    if (!this.__urlForName) {
      this.__urlForName = generateUrls(this);
    }

    return getPathnameForRouter(this.__urlForName(name, params), this);
  }
  /**
   * Generates a URL for the given route path, optionally performing
   * substitution of parameters.
   *
   * @param {!string} path string route path declared in [express.js syntax](https://expressjs.com/en/guide/routing.html#route-paths").
   * @param {?Object} params Optional object with route path parameters.
   * Named parameters are passed by name (`params[name] = value`), unnamed
   * parameters are passed by index (`params[index] = value`).
   *
   * @return {string}
   */


  urlForPath(path, params) {
    return getPathnameForRouter(Router.pathToRegexp.compile(path)(params), this);
  }
  /**
   * Triggers navigation to a new path. Returns a boolean without waiting until
   * the navigation is complete. Returns `true` if at least one `Vaadin.Router`
   * has handled the navigation (was subscribed and had `baseUrl` matching
   * the `pathname` argument), otherwise returns `false`.
   *
   * @param {!string} pathname a new in-app path
   * @return {boolean}
   */


  static go(pathname) {
    return fireRouterEvent('go', {
      pathname
    });
  }

}

const DEV_MODE_CODE_REGEXP = /\/\*\*\s+vaadin-dev-mode:start([\s\S]*)vaadin-dev-mode:end\s+\*\*\//i;

function isMinified() {
  function test() {
    /** vaadin-dev-mode:start
    return false;
    vaadin-dev-mode:end **/
    return true;
  }

  return uncommentAndRun(test);
}

function isDevelopmentMode() {
  try {
    return isForcedDevelopmentMode() || isLocalhost() && !isMinified() && !isFlowProductionMode();
  } catch (e) {
    // Some error in this code, assume production so no further actions will be taken
    return false;
  }
}

function isForcedDevelopmentMode() {
  return localStorage.getItem("vaadin.developmentmode.force");
}

function isLocalhost() {
  return ["localhost", "127.0.0.1"].indexOf(window.location.hostname) >= 0;
}

function isFlowProductionMode() {
  if (window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients) {
    const productionModeApps = Object.keys(window.Vaadin.Flow.clients).map(key => window.Vaadin.Flow.clients[key]).filter(client => client.productionMode);

    if (productionModeApps.length > 0) {
      return true;
    }
  }

  return false;
}

function uncommentAndRun(callback, args) {
  if (typeof callback !== 'function') {
    return;
  }

  const match = DEV_MODE_CODE_REGEXP.exec(callback.toString());

  if (match) {
    try {
      // requires CSP: script-src 'unsafe-eval'
      callback = new Function(match[1]);
    } catch (e) {
      // eat the exception
      console.log('vaadin-development-mode-detector: uncommentAndRun() failed', e);
    }
  }

  return callback(args);
} // A guard against polymer-modulizer removing the window.Vaadin
// initialization above.


window['Vaadin'] = window['Vaadin'] || {};
/**
 * Inspects the source code of the given `callback` function for
 * specially-marked _commented_ code. If such commented code is found in the
 * callback source, uncomments and runs that code instead of the callback
 * itself. Otherwise runs the callback as is.
 *
 * The optional arguments are passed into the callback / uncommented code,
 * the result is returned.
 *
 * See the `isMinified()` function source code in this file for an example.
 *
 */

const runIfDevelopmentMode = function (callback, args) {
  if (window.Vaadin.developmentMode) {
    return uncommentAndRun(callback, args);
  }
};

if (window.Vaadin.developmentMode === undefined) {
  window.Vaadin.developmentMode = isDevelopmentMode();
}
/* This file is autogenerated from src/vaadin-usage-statistics.tpl.html */


function maybeGatherAndSendStats() {
  /** vaadin-dev-mode:start
  (function () {
  'use strict';
  var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) {
  return typeof obj;
  } : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  };
  var classCallCheck = function (instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
  };
  var createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];
      descriptor.enumerable = descriptor.enumerable || false;
      descriptor.configurable = true;
      if ("value" in descriptor) descriptor.writable = true;
      Object.defineProperty(target, descriptor.key, descriptor);
    }
  }
   return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);
    if (staticProps) defineProperties(Constructor, staticProps);
    return Constructor;
  };
  }();
  var getPolymerVersion = function getPolymerVersion() {
  return window.Polymer && window.Polymer.version;
  };
  var StatisticsGatherer = function () {
  function StatisticsGatherer(logger) {
    classCallCheck(this, StatisticsGatherer);
     this.now = new Date().getTime();
    this.logger = logger;
  }
   createClass(StatisticsGatherer, [{
    key: 'frameworkVersionDetectors',
    value: function frameworkVersionDetectors() {
      return {
        'Flow': function Flow() {
          if (window.Vaadin && window.Vaadin.Flow && window.Vaadin.Flow.clients) {
            var flowVersions = Object.keys(window.Vaadin.Flow.clients).map(function (key) {
              return window.Vaadin.Flow.clients[key];
            }).filter(function (client) {
              return client.getVersionInfo;
            }).map(function (client) {
              return client.getVersionInfo().flow;
            });
            if (flowVersions.length > 0) {
              return flowVersions[0];
            }
          }
        },
        'Vaadin Framework': function VaadinFramework() {
          if (window.vaadin && window.vaadin.clients) {
            var frameworkVersions = Object.values(window.vaadin.clients).filter(function (client) {
              return client.getVersionInfo;
            }).map(function (client) {
              return client.getVersionInfo().vaadinVersion;
            });
            if (frameworkVersions.length > 0) {
              return frameworkVersions[0];
            }
          }
        },
        'AngularJs': function AngularJs() {
          if (window.angular && window.angular.version && window.angular.version) {
            return window.angular.version.full;
          }
        },
        'Angular': function Angular() {
          if (window.ng) {
            var tags = document.querySelectorAll("[ng-version]");
            if (tags.length > 0) {
              return tags[0].getAttribute("ng-version");
            }
            return "Unknown";
          }
        },
        'Backbone.js': function BackboneJs() {
          if (window.Backbone) {
            return window.Backbone.VERSION;
          }
        },
        'React': function React() {
          var reactSelector = '[data-reactroot], [data-reactid]';
          if (!!document.querySelector(reactSelector)) {
            // React does not publish the version by default
            return "unknown";
          }
        },
        'Ember': function Ember() {
          if (window.Em && window.Em.VERSION) {
            return window.Em.VERSION;
          } else if (window.Ember && window.Ember.VERSION) {
            return window.Ember.VERSION;
          }
        },
        'jQuery': function (_jQuery) {
          function jQuery() {
            return _jQuery.apply(this, arguments);
          }
           jQuery.toString = function () {
            return _jQuery.toString();
          };
           return jQuery;
        }(function () {
          if (typeof jQuery === 'function' && jQuery.prototype.jquery !== undefined) {
            return jQuery.prototype.jquery;
          }
        }),
        'Polymer': function Polymer() {
          var version = getPolymerVersion();
          if (version) {
            return version;
          }
        },
        'Vue.js': function VueJs() {
          if (window.Vue) {
            return window.Vue.version;
          }
        }
      };
    }
  }, {
    key: 'getUsedVaadinElements',
    value: function getUsedVaadinElements(elements) {
      var version = getPolymerVersion();
      var elementClasses = void 0;
      if (version && version.indexOf('2') === 0) {
        // Polymer 2: components classes are stored in window.Vaadin
        elementClasses = Object.keys(window.Vaadin).map(function (c) {
          return window.Vaadin[c];
        }).filter(function (c) {
          return c.is;
        });
      } else {
        // Polymer 3: components classes are stored in window.Vaadin.registrations
        elementClasses = window.Vaadin.registrations || [];
      }
      elementClasses.forEach(function (klass) {
        var version = klass.version ? klass.version : "0.0.0";
        elements[klass.is] = { version: version };
      });
    }
  }, {
    key: 'getUsedVaadinThemes',
    value: function getUsedVaadinThemes(themes) {
      ['Lumo', 'Material'].forEach(function (themeName) {
        var theme;
        var version = getPolymerVersion();
        if (version && version.indexOf('2') === 0) {
          // Polymer 2: themes are stored in window.Vaadin
          theme = window.Vaadin[themeName];
        } else {
          // Polymer 3: themes are stored in custom element registry
          theme = customElements.get('vaadin-' + themeName.toLowerCase() + '-styles');
        }
        if (theme && theme.version) {
          themes[themeName] = { version: theme.version };
        }
      });
    }
  }, {
    key: 'getFrameworks',
    value: function getFrameworks(frameworks) {
      var detectors = this.frameworkVersionDetectors();
      Object.keys(detectors).forEach(function (framework) {
        var detector = detectors[framework];
        try {
          var version = detector();
          if (version) {
            frameworks[framework] = { "version": version };
          }
        } catch (e) {}
      });
    }
  }, {
    key: 'gather',
    value: function gather(storage) {
      var storedStats = storage.read();
      var gatheredStats = {};
      var types = ["elements", "frameworks", "themes"];
       types.forEach(function (type) {
        gatheredStats[type] = {};
        if (!storedStats[type]) {
          storedStats[type] = {};
        }
      });
       var previousStats = JSON.stringify(storedStats);
       this.getUsedVaadinElements(gatheredStats.elements);
      this.getFrameworks(gatheredStats.frameworks);
      this.getUsedVaadinThemes(gatheredStats.themes);
       var now = this.now;
      types.forEach(function (type) {
        var keys = Object.keys(gatheredStats[type]);
        keys.forEach(function (key) {
          if (!storedStats[type][key] || _typeof(storedStats[type][key]) != _typeof({})) {
            storedStats[type][key] = { "firstUsed": now };
          }
          // Discards any previously logged version numebr
          storedStats[type][key].version = gatheredStats[type][key].version;
          storedStats[type][key].lastUsed = now;
        });
      });
       var newStats = JSON.stringify(storedStats);
      storage.write(newStats);
      if (newStats != previousStats && Object.keys(storedStats).length > 0) {
        this.logger.debug("New stats: " + newStats);
      }
    }
  }]);
  return StatisticsGatherer;
  }();
  var StatisticsStorage = function () {
  function StatisticsStorage(key) {
    classCallCheck(this, StatisticsStorage);
     this.key = key;
  }
   createClass(StatisticsStorage, [{
    key: 'read',
    value: function read() {
      var localStorageStatsString = localStorage.getItem(this.key);
      try {
        return JSON.parse(localStorageStatsString ? localStorageStatsString : '{}');
      } catch (e) {
        return {};
      }
    }
  }, {
    key: 'write',
    value: function write(data) {
      localStorage.setItem(this.key, data);
    }
  }, {
    key: 'clear',
    value: function clear() {
      localStorage.removeItem(this.key);
    }
  }, {
    key: 'isEmpty',
    value: function isEmpty() {
      var storedStats = this.read();
      var empty = true;
      Object.keys(storedStats).forEach(function (key) {
        if (Object.keys(storedStats[key]).length > 0) {
          empty = false;
        }
      });
       return empty;
    }
  }]);
  return StatisticsStorage;
  }();
  var StatisticsSender = function () {
  function StatisticsSender(url, logger) {
    classCallCheck(this, StatisticsSender);
     this.url = url;
    this.logger = logger;
  }
   createClass(StatisticsSender, [{
    key: 'send',
    value: function send(data, errorHandler) {
      var logger = this.logger;
       if (navigator.onLine === false) {
        logger.debug("Offline, can't send");
        errorHandler();
        return;
      }
      logger.debug("Sending data to " + this.url);
       var req = new XMLHttpRequest();
      req.withCredentials = true;
      req.addEventListener("load", function () {
        // Stats sent, nothing more to do
        logger.debug("Response: " + req.responseText);
      });
      req.addEventListener("error", function () {
        logger.debug("Send failed");
        errorHandler();
      });
      req.addEventListener("abort", function () {
        logger.debug("Send aborted");
        errorHandler();
      });
      req.open("POST", this.url);
      req.setRequestHeader("Content-Type", "application/json");
      req.send(data);
    }
  }]);
  return StatisticsSender;
  }();
  var StatisticsLogger = function () {
  function StatisticsLogger(id) {
    classCallCheck(this, StatisticsLogger);
     this.id = id;
  }
   createClass(StatisticsLogger, [{
    key: '_isDebug',
    value: function _isDebug() {
      return localStorage.getItem("vaadin." + this.id + ".debug");
    }
  }, {
    key: 'debug',
    value: function debug(msg) {
      if (this._isDebug()) {
        console.info(this.id + ": " + msg);
      }
    }
  }]);
  return StatisticsLogger;
  }();
  var UsageStatistics = function () {
  function UsageStatistics() {
    classCallCheck(this, UsageStatistics);
     this.now = new Date();
    this.timeNow = this.now.getTime();
    this.gatherDelay = 10; // Delay between loading this file and gathering stats
    this.initialDelay = 24 * 60 * 60;
     this.logger = new StatisticsLogger("statistics");
    this.storage = new StatisticsStorage("vaadin.statistics.basket");
    this.gatherer = new StatisticsGatherer(this.logger);
    this.sender = new StatisticsSender("https://tools.vaadin.com/usage-stats/submit", this.logger);
  }
   createClass(UsageStatistics, [{
    key: 'maybeGatherAndSend',
    value: function maybeGatherAndSend() {
      var _this = this;
       if (localStorage.getItem(UsageStatistics.optOutKey)) {
        return;
      }
      this.gatherer.gather(this.storage);
      setTimeout(function () {
        _this.maybeSend();
      }, this.gatherDelay * 1000);
    }
  }, {
    key: 'lottery',
    value: function lottery() {
      return Math.random() <= 0.05;
    }
  }, {
    key: 'currentMonth',
    value: function currentMonth() {
      return this.now.getYear() * 12 + this.now.getMonth();
    }
  }, {
    key: 'maybeSend',
    value: function maybeSend() {
      var firstUse = Number(localStorage.getItem(UsageStatistics.firstUseKey));
      var monthProcessed = Number(localStorage.getItem(UsageStatistics.monthProcessedKey));
       if (!firstUse) {
        // Use a grace period to avoid interfering with tests, incognito mode etc
        firstUse = this.timeNow;
        localStorage.setItem(UsageStatistics.firstUseKey, firstUse);
      }
       if (this.timeNow < firstUse + this.initialDelay * 1000) {
        this.logger.debug("No statistics will be sent until the initial delay of " + this.initialDelay + "s has passed");
        return;
      }
      if (this.currentMonth() <= monthProcessed) {
        this.logger.debug("This month has already been processed");
        return;
      }
      localStorage.setItem(UsageStatistics.monthProcessedKey, this.currentMonth());
      // Use random sampling
      if (this.lottery()) {
        this.logger.debug("Congratulations, we have a winner!");
      } else {
        this.logger.debug("Sorry, no stats from you this time");
        return;
      }
       this.send();
    }
  }, {
    key: 'send',
    value: function send() {
      // Ensure we have the latest data
      this.gatherer.gather(this.storage);
       // Read, send and clean up
      var data = this.storage.read();
      data["firstUse"] = Number(localStorage.getItem(UsageStatistics.firstUseKey));
      data["usageStatisticsVersion"] = UsageStatistics.version;
      var info = 'This request contains usage statistics gathered from the application running in development mode. \n\nStatistics gathering is automatically disabled and excluded from production builds.\n\nFor details and to opt-out, see https://github.com/vaadin/vaadin-usage-statistics.\n\n\n\n';
      var self = this;
      this.sender.send(info + JSON.stringify(data), function () {
        // Revert the 'month processed' flag
        localStorage.setItem(UsageStatistics.monthProcessedKey, self.currentMonth() - 1);
      });
    }
  }], [{
    key: 'version',
    get: function get$1() {
      return '2.0.1';
    }
  }, {
    key: 'firstUseKey',
    get: function get$1() {
      return 'vaadin.statistics.firstuse';
    }
  }, {
    key: 'monthProcessedKey',
    get: function get$1() {
      return 'vaadin.statistics.monthProcessed';
    }
  }, {
    key: 'optOutKey',
    get: function get$1() {
      return 'vaadin.statistics.optout';
    }
  }]);
  return UsageStatistics;
  }();
  try {
  window.Vaadin = window.Vaadin || {};
  window.Vaadin.usageStatistics = window.Vaadin.usageStatistics || new UsageStatistics();
  window.Vaadin.usageStatistics.maybeGatherAndSend();
  } catch (e) {
  // Intentionally ignored as this is not a problem in the app being developed
  }
  }());
   vaadin-dev-mode:end **/
}

const usageStatistics = function () {
  if (typeof runIfDevelopmentMode === 'function') {
    return runIfDevelopmentMode(maybeGatherAndSendStats);
  }
};

window.Vaadin = window.Vaadin || {};
window.Vaadin.registrations = window.Vaadin.registrations || [];
window.Vaadin.registrations.push({
  is: '@vaadin/router',
  version: '1.2.0'
});
usageStatistics();
Router.NavigationTrigger = {
  POPSTATE,
  CLICK
};

// CONCATENATED MODULE: ./documentation/src/router.ts
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "AppRouter", function() { return AppRouter; });
/*
Copyright 2018 Adobe. All rights reserved.
This file is licensed to you under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License. You may obtain a copy
of the License at http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software distributed under
the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR REPRESENTATIONS
OF ANY KIND, either express or implied. See the License for the specific language
governing permissions and limitations under the License.
*/

const githubUrl = 'http://opensource.adobe.com/spectrum-web-components/';
const baseUrl = document.location.hostname === 'opensource.adobe.com' ? githubUrl : undefined;

class router_DocumentationRouter extends Router {
  constructor(outlet, options) {
    super(outlet, options);
  }

  go(pathname) {
    return Router.go(pathname);
  }

  changeParams(params) {
    if (!this.location || !this.location.route) return false;
    const newUrl = this.urlForPath(this.location.route.path, params);
    return this.go(newUrl);
  }

}

const AppRouter = new router_DocumentationRouter(document.body, {
  baseUrl: baseUrl
});
AppRouter.setRoutes([{
  path: '/',
  component: 'docs-home'
}, {
  path: '/components/:component/:tab?',
  component: 'docs-component'
}, {
  path: '/guides/:guide',
  component: 'docs-guide'
}]);

/***/ })
/******/ ]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9saWIvbW9kaWZ5LXRlbXBsYXRlLnRzIiwid2VicGFjazovLy8uLi9zcmMvbGliL3NoYWR5LXJlbmRlci50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL2xpYi91cGRhdGluZy1lbGVtZW50LnRzIiwid2VicGFjazovLy8uLi9zcmMvbGliL2RlY29yYXRvcnMudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9saWIvY3NzLXRhZy50cyIsIndlYnBhY2s6Ly8vc3JjL2xpdC1lbGVtZW50LnRzIiwid2VicGFjazovLy8uLi9zcmMvbGliL3RlbXBsYXRlLnRzIiwid2VicGFjazovLy8uLi9zcmMvbGliL3BhcnRzLnRzIiwid2VicGFjazovLy8uLi9zcmMvbGliL3BhcnQudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9saWIvZGVmYXVsdC10ZW1wbGF0ZS1wcm9jZXNzb3IudHMiLCJ3ZWJwYWNrOi8vL3NyYy9saXQtaHRtbC50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL2xpYi9kb20udHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9saWIvdGVtcGxhdGUtcmVzdWx0LnRzIiwid2VicGFjazovLy8uLi9zcmMvbGliL3RlbXBsYXRlLWZhY3RvcnkudHMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9saWIvZGlyZWN0aXZlLnRzIiwid2VicGFjazovLy8uLi9zcmMvbGliL3JlbmRlci50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL2xpYi90ZW1wbGF0ZS1pbnN0YW5jZS50cyIsIndlYnBhY2s6Ly8vLi9kb2N1bWVudGF0aW9uL3NyYy9jb21wb25lbnRzL2luZGV4LnRzIiwid2VicGFjazovLy8uL2RvY3VtZW50YXRpb24vc3JjL21haW4uY3NzP2VjN2EiLCJ3ZWJwYWNrOi8vLy4vZG9jdW1lbnRhdGlvbi9zcmMvbWFpbi5jc3MiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9saWIvdXJscy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYmFubmVyL2Jhbm5lci5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jhbm5lci9iYW5uZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2Jhbm5lci9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2hhcmVkL2ZvY3VzYWJsZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYnV0dG9uL2J1dHRvbi1iYXNlLnRzIiwid2VicGFjazovLy8uL3NyYy9idXR0b24vYnV0dG9uLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvYnV0dG9uL2J1dHRvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYnV0dG9uL2FjdGlvbi1idXR0b24uY3NzIiwid2VicGFjazovLy8uL3NyYy9idXR0b24vYWN0aW9uLWJ1dHRvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvYnV0dG9uL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jYXJkL2NhcmQtYmFzZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhcmQvY2FyZC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhcmQvY2FyZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvY2FyZC9jYXJkLXF1aWV0LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvY2FyZC9jYXJkLXF1aWV0LnRzIiwid2VicGFjazovLy8uL3NyYy9jYXJkL2NhcmQtZ2FsbGVyeS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NhcmQvY2FyZC1nYWxsZXJ5LnRzIiwid2VicGFjazovLy8uL3NyYy9jYXJkL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9jaGVja2JveC9jaGVja2JveC1iYXNlLnRzIiwid2VicGFjazovLy8uL3NyYy9jaGVja2JveC9jaGVja2JveC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2V2ZW50cy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaWNvbnNldC9pY29uc2V0LXJlZ2lzdHJ5LnRzIiwid2VicGFjazovLy8uL3NyYy9pY29uL2ljb24uY3NzIiwid2VicGFjazovLy8uL3NyYy9pY29uL2ljb24udHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ljb24vaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NoZWNrYm94L2NoZWNrYm94LnRzIiwid2VicGFjazovLy8uL3NyYy9jaGVja2JveC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZHJvcHpvbmUvZHJvcHpvbmUuY3NzIiwid2VicGFjazovLy8uL3NyYy9kcm9wem9uZS9kcm9wem9uZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvZHJvcHpvbmUvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2lsbHVzdHJhdGVkLW1lc3NhZ2UvaWxsdXN0cmF0ZWQtbWVzc2FnZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL2lsbHVzdHJhdGVkLW1lc3NhZ2UvaWxsdXN0cmF0ZWQtbWVzc2FnZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaWxsdXN0cmF0ZWQtbWVzc2FnZS9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL2RpcmVjdGl2ZXMvaWYtZGVmaW5lZC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvbGluay9saW5rLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvbGluay9saW5rLnRzIiwid2VicGFjazovLy8uL3NyYy9saW5rL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9yYWRpby9yYWRpby5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3JhZGlvL3JhZGlvLnRzIiwid2VicGFjazovLy8uL3NyYy9yYWRpby9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcmFkaW8tZ3JvdXAvcmFkaW8tZ3JvdXAuY3NzIiwid2VicGFjazovLy8uL3NyYy9yYWRpby1ncm91cC9yYWRpby1ncm91cC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvcmFkaW8tZ3JvdXAvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NsaWRlci9zcGVjdHJ1bS1zbGlkZXIuY3NzIiwid2VicGFjazovLy8uL3NyYy9zbGlkZXIvc2xpZGVyLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvc2xpZGVyL3NsaWRlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2xpZGVyL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9pY29uc2V0L2ljb25zZXQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ljb25zZXQvaWNvbnNldC1zdmcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ljb25zL2ljb25zLWxhcmdlLnN2Zy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaWNvbnMvaWNvbnMtbGFyZ2UudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ljb25zL2ljb25zLW1lZGl1bS5zdmcudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ljb25zL2ljb25zLW1lZGl1bS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaWNvbnMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2ljb25zZXQvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NpZGVuYXYvc2lkZW5hdi5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3NpZGVuYXYvc2lkZW5hdi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2lkZW5hdi9zaWRlbmF2LWl0ZW0uY3NzIiwid2VicGFjazovLy8uL3NyYy9zaWRlbmF2L3NpZGVuYXYtaXRlbS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2lkZW5hdi9zaWRlbmF2LWhlYWRpbmcuY3NzIiwid2VicGFjazovLy8uL3NyYy9zaWRlbmF2L3NpZGVuYXYtaGVhZGluZy50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc2lkZW5hdi9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvc3dpdGNoL3N3aXRjaC5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N3aXRjaC9zd2l0Y2gudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3N3aXRjaC9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGFiL3RhYi5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RhYi90YWIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RhYi9pbmRleC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGFiLWxpc3QvdGFiLWxpc3QuY3NzIiwid2VicGFjazovLy8uL3NyYy90YWItbGlzdC90YWItbGlzdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGFiLWxpc3QvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RoZW1lcy90aGVtZS1kYXJrLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvdGhlbWVzL3RoZW1lLWRhcmsudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RoZW1lcy9zY2FsZS1tZWRpdW0uY3NzIiwid2VicGFjazovLy8uL3NyYy90aGVtZXMvc2NhbGUtbWVkaXVtLnRzIiwid2VicGFjazovLy8uL3NyYy90aGVtZXMvdGhlbWUtbGlnaHQuY3NzIiwid2VicGFjazovLy8uL3NyYy90aGVtZXMvdGhlbWUtbGlnaHQudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RoZW1lcy90aGVtZS5jc3MiLCJ3ZWJwYWNrOi8vLy4vc3JjL3RoZW1lcy90aGVtZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvdGhlbWVzL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9vdmVybGF5LXJvb3Qvb3ZlcmxheS1yb290LmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvb3ZlcmxheS1yb290L2NhbGN1bGF0ZS1wb3NpdGlvbi50cyIsIndlYnBhY2s6Ly8vLi9zcmMvb3ZlcmxheS1yb290L292ZXJsYXktcm9vdC50cyIsIndlYnBhY2s6Ly8vLi9zcmMvb3ZlcmxheS1yb290L2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9vdmVybGF5LXRyaWdnZXIvb3ZlcmxheS10cmlnZ2VyLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvb3ZlcmxheS10cmlnZ2VyL292ZXJsYXktdHJpZ2dlci50cyIsIndlYnBhY2s6Ly8vLi9zcmMvb3ZlcmxheS10cmlnZ2VyL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9wb3BvdmVyL3BvcG92ZXIuY3NzIiwid2VicGFjazovLy8uL3NyYy9wb3BvdmVyL3BvcG92ZXIudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL3BvcG92ZXIvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2RlZmluZS50cyIsIndlYnBhY2s6Ly8vLi9zcmMvaW5kZXgudHMiLCJ3ZWJwYWNrOi8vLy4vZG9jdW1lbnRhdGlvbi9zcmMvdXRpbHMvc3BlY3RydW0udHMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BvcGVuLXdjL3BvbHlmaWxscy1sb2FkZXIvcG9seWZpbGxzLWxvYWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvZWxlbWVudC1jbG9zZXN0L2luZGV4Lm1qcyIsIndlYnBhY2s6Ly8vLi9kb2N1bWVudGF0aW9uL3NyYy9tYWluLnRzIiwid2VicGFjazovLy8uLi9zcmMvdXRpbHMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy90cmlnZ2Vycy9jbGljay5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3RyaWdnZXJzL3BvcHN0YXRlLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvcGF0aC10by1yZWdleHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9yZXNvbHZlci9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9yZXNvbHZlci9tYXRjaFJvdXRlLmpzIiwid2VicGFjazovLy8uLi9zcmMvcmVzb2x2ZXIvcmVzb2x2ZVJvdXRlLmpzIiwid2VicGFjazovLy8uLi9zcmMvcmVzb2x2ZXIvcmVzb2x2ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9yZXNvbHZlci9nZW5lcmF0ZVVybHMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy90cmlnZ2Vycy9zZXROYXZpZ2F0aW9uVHJpZ2dlcnMuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy90cmFuc2l0aW9ucy9hbmltYXRlLmpzIiwid2VicGFjazovLy8uLi9zcmMvcm91dGVyLmpzIiwid2VicGFjazovLy8uLi9ub2RlX21vZHVsZXMvQHZhYWRpbi92YWFkaW4tZGV2ZWxvcG1lbnQtbW9kZS1kZXRlY3Rvci92YWFkaW4tZGV2ZWxvcG1lbnQtbW9kZS1kZXRlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi4vbm9kZV9tb2R1bGVzL0B2YWFkaW4vdmFhZGluLXVzYWdlLXN0YXRpc3RpY3MvdmFhZGluLXVzYWdlLXN0YXRpc3RpY3MuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy9yb3V0ZXItbWV0YS5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL3JvdXRlci1jb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vZG9jdW1lbnRhdGlvbi9zcmMvcm91dGVyLnRzIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJ1c2VTb3VyY2VNYXAiLCJsaXN0IiwidG9TdHJpbmciLCJtYXAiLCJpdGVtIiwiY29udGVudCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYVF1ZXJ5IiwiYWxyZWFkeUltcG9ydGVkTW9kdWxlcyIsImxlbmd0aCIsImlkIiwicHVzaCIsImNzc01hcHBpbmciLCJidG9hIiwic291cmNlTWFwcGluZyIsInRvQ29tbWVudCIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsImNvbmNhdCIsInNvdXJjZU1hcCIsImJhc2U2NCIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJjc3MiLCJsb2NhdGlvbiIsIndpbmRvdyIsIkVycm9yIiwiYmFzZVVybCIsInByb3RvY29sIiwiaG9zdCIsImN1cnJlbnREaXIiLCJwYXRobmFtZSIsInJlcGxhY2UiLCJmaXhlZENzcyIsImZ1bGxNYXRjaCIsIm9yaWdVcmwiLCJ1bnF1b3RlZE9yaWdVcmwiLCJ0cmltIiwibyIsIiQxIiwidGVzdCIsIm5ld1VybCIsImluZGV4T2YiLCJzdHlsZXMiLCJuZWVkc1RlbXBsYXRlUG9seWZpbGwiLCJ0ZW1wbGF0ZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsImNsb25lTm9kZSIsIkRvY3VtZW50RnJhZ21lbnQiLCJ0ZW1wbGF0ZTIiLCJhcHBlbmRDaGlsZCIsImNsb25lIiwiY2hpbGROb2RlcyIsImZpcnN0Q2hpbGQiLCJsb2FkUG9seWZpbGxzIiwicG9seWZpbGxzIiwibmVlZHNUZW1wbGF0ZSIsIm5lZWRzU2hhZG93RG9tIiwiRWxlbWVudCIsInByb3RvdHlwZSIsIlNoYWR5RE9NIiwiZm9yY2UiLCJuZWVkc0N1c3RvbUVsZW1lbnRzIiwiY3VzdG9tRWxlbWVudHMiLCJmb3JjZVBvbHlmaWxsIiwiUHJvbWlzZSIsImFsbCIsInBhdGhUb1JlZ2V4cCIsImNhY2hlIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBLGdCQUFRLG9CQUFvQjtBQUM1QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQSxrREFBMEMsNkJBQTZCLDRHQUE0RztBQUNuTDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0EseUNBQWlDOztBQUVqQztBQUNBO0FBQ0E7QUFDQSxhQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsY0FBTTtBQUNOOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUF3QixrQ0FBa0M7QUFDMUQsY0FBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esa0RBQTBDLGdDQUFnQztBQUMxRTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLGdFQUF3RCxrQkFBa0I7QUFDMUU7QUFDQSx5REFBaUQsY0FBYztBQUMvRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaURBQXlDLGlDQUFpQztBQUMxRSx3SEFBZ0gsbUJBQW1CLEVBQUU7QUFDckk7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBMkIsMEJBQTBCLEVBQUU7QUFDdkQseUNBQWlDLGVBQWU7QUFDaEQ7QUFDQTtBQUNBOztBQUVBO0FBQ0EsOERBQXNELCtEQUErRDs7QUFFckg7QUFDQTs7QUFFQTtBQUNBLGtEQUEwQyxvQkFBb0IsV0FBVzs7QUFFekU7QUFDQTtBQUNBO0FBQ0E7QUFDQSx3QkFBZ0IsdUJBQXVCO0FBQ3ZDOzs7QUFHQTtBQUNBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDcE1BOzs7Ozs7Ozs7Ozs7OztBQWNBOzs7QUFJQTtBQUVBLE1BQU0sZ0JBQWdCLEdBQUc7QUFBSTtBQUE3QjtBQUVBOzs7Ozs7Ozs7Ozs7Ozs7OztBQWdCTSxTQUFVLHVCQUFWLENBQ0YsUUFERSxFQUNrQixhQURsQixFQUMwQztBQUM5QyxRQUFNO0FBQUMsV0FBTyxFQUFFO0FBQUM7QUFBRCxLQUFWO0FBQXFCO0FBQXJCLE1BQThCLFFBQXBDO0FBQ0EsUUFBTSxNQUFNLEdBQ1IsUUFBUSxDQUFDLGdCQUFULENBQTBCLE9BQTFCLEVBQW1DLGdCQUFuQyxFQUFxRCxJQUFyRCxFQUEyRCxLQUEzRCxDQURKO0FBRUEsTUFBSSxTQUFTLEdBQUcsOEJBQThCLENBQUMsS0FBRCxDQUE5QztBQUNBLE1BQUksSUFBSSxHQUFHLEtBQUssQ0FBQyxTQUFELENBQWhCO0FBQ0EsTUFBSSxTQUFTLEdBQUcsQ0FBQyxDQUFqQjtBQUNBLE1BQUksV0FBVyxHQUFHLENBQWxCO0FBQ0EsUUFBTSx1QkFBdUIsR0FBRyxFQUFoQztBQUNBLE1BQUksbUJBQW1CLEdBQWMsSUFBckM7O0FBQ0EsU0FBTyxNQUFNLENBQUMsUUFBUCxFQUFQLEVBQTBCO0FBQ3hCLGFBQVM7QUFDVCxVQUFNLElBQUksR0FBRyxNQUFNLENBQUMsV0FBcEIsQ0FGd0IsQ0FHeEI7O0FBQ0EsUUFBSSxJQUFJLENBQUMsZUFBTCxLQUF5QixtQkFBN0IsRUFBa0Q7QUFDaEQseUJBQW1CLEdBQUcsSUFBdEI7QUFDRCxLQU51QixDQU94Qjs7O0FBQ0EsUUFBSSxhQUFhLENBQUMsR0FBZCxDQUFrQixJQUFsQixDQUFKLEVBQTZCO0FBQzNCLDZCQUF1QixDQUFDLElBQXhCLENBQTZCLElBQTdCLEVBRDJCLENBRTNCOztBQUNBLFVBQUksbUJBQW1CLEtBQUssSUFBNUIsRUFBa0M7QUFDaEMsMkJBQW1CLEdBQUcsSUFBdEI7QUFDRDtBQUNGLEtBZHVCLENBZXhCOzs7QUFDQSxRQUFJLG1CQUFtQixLQUFLLElBQTVCLEVBQWtDO0FBQ2hDLGlCQUFXO0FBQ1o7O0FBQ0QsV0FBTyxJQUFJLEtBQUssU0FBVCxJQUFzQixJQUFJLENBQUMsS0FBTCxLQUFlLFNBQTVDLEVBQXVEO0FBQ3JEO0FBQ0E7QUFDQSxVQUFJLENBQUMsS0FBTCxHQUFhLG1CQUFtQixLQUFLLElBQXhCLEdBQStCLENBQUMsQ0FBaEMsR0FBb0MsSUFBSSxDQUFDLEtBQUwsR0FBYSxXQUE5RCxDQUhxRCxDQUlyRDs7QUFDQSxlQUFTLEdBQUcsOEJBQThCLENBQUMsS0FBRCxFQUFRLFNBQVIsQ0FBMUM7QUFDQSxVQUFJLEdBQUcsS0FBSyxDQUFDLFNBQUQsQ0FBWjtBQUNEO0FBQ0Y7O0FBQ0QseUJBQXVCLENBQUMsT0FBeEIsQ0FBaUMsQ0FBRCxJQUFPLENBQUMsQ0FBQyxVQUFGLENBQWMsV0FBZCxDQUEwQixDQUExQixDQUF2QztBQUNEOztBQUVELE1BQU0sVUFBVSxHQUFJLElBQUQsSUFBZTtBQUNoQyxNQUFJLEtBQUssR0FBSSxJQUFJLENBQUMsUUFBTCxLQUFrQjtBQUFHO0FBQXRCLElBQTJELENBQTNELEdBQStELENBQTNFO0FBQ0EsUUFBTSxNQUFNLEdBQUcsUUFBUSxDQUFDLGdCQUFULENBQTBCLElBQTFCLEVBQWdDLGdCQUFoQyxFQUFrRCxJQUFsRCxFQUF3RCxLQUF4RCxDQUFmOztBQUNBLFNBQU8sTUFBTSxDQUFDLFFBQVAsRUFBUCxFQUEwQjtBQUN4QixTQUFLO0FBQ047O0FBQ0QsU0FBTyxLQUFQO0FBQ0QsQ0FQRDs7QUFTQSxNQUFNLDhCQUE4QixHQUNoQyxDQUFDLEtBQUQsRUFBd0IsYUFBcUIsQ0FBQyxDQUE5QyxLQUFtRDtBQUNqRCxPQUFLLElBQUksQ0FBQyxHQUFHLFVBQVUsR0FBRyxDQUExQixFQUE2QixDQUFDLEdBQUcsS0FBSyxDQUFDLE1BQXZDLEVBQStDLENBQUMsRUFBaEQsRUFBb0Q7QUFDbEQsVUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLENBQUQsQ0FBbEI7O0FBQ0EsUUFBSSxvREFBb0IsQ0FBQyxJQUFELENBQXhCLEVBQWdDO0FBQzlCLGFBQU8sQ0FBUDtBQUNEO0FBQ0Y7O0FBQ0QsU0FBTyxDQUFDLENBQVI7QUFDRCxDQVRMO0FBV0E7Ozs7Ozs7QUFLTSxTQUFVLHNCQUFWLENBQ0YsUUFERSxFQUNrQixJQURsQixFQUM4QixVQUFxQixJQURuRCxFQUN1RDtBQUMzRCxRQUFNO0FBQUMsV0FBTyxFQUFFO0FBQUM7QUFBRCxLQUFWO0FBQXFCO0FBQXJCLE1BQThCLFFBQXBDLENBRDJELENBRTNEO0FBQ0E7O0FBQ0EsTUFBSSxPQUFPLEtBQUssSUFBWixJQUFvQixPQUFPLEtBQUssU0FBcEMsRUFBK0M7QUFDN0MsV0FBTyxDQUFDLFdBQVIsQ0FBb0IsSUFBcEI7QUFDQTtBQUNEOztBQUNELFFBQU0sTUFBTSxHQUNSLFFBQVEsQ0FBQyxnQkFBVCxDQUEwQixPQUExQixFQUFtQyxnQkFBbkMsRUFBcUQsSUFBckQsRUFBMkQsS0FBM0QsQ0FESjtBQUVBLE1BQUksU0FBUyxHQUFHLDhCQUE4QixDQUFDLEtBQUQsQ0FBOUM7QUFDQSxNQUFJLFdBQVcsR0FBRyxDQUFsQjtBQUNBLE1BQUksV0FBVyxHQUFHLENBQUMsQ0FBbkI7O0FBQ0EsU0FBTyxNQUFNLENBQUMsUUFBUCxFQUFQLEVBQTBCO0FBQ3hCLGVBQVc7QUFDWCxVQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsV0FBMUI7O0FBQ0EsUUFBSSxVQUFVLEtBQUssT0FBbkIsRUFBNEI7QUFDMUIsaUJBQVcsR0FBRyxVQUFVLENBQUMsSUFBRCxDQUF4QjtBQUNBLGFBQU8sQ0FBQyxVQUFSLENBQW9CLFlBQXBCLENBQWlDLElBQWpDLEVBQXVDLE9BQXZDO0FBQ0Q7O0FBQ0QsV0FBTyxTQUFTLEtBQUssQ0FBQyxDQUFmLElBQW9CLEtBQUssQ0FBQyxTQUFELENBQUwsQ0FBaUIsS0FBakIsS0FBMkIsV0FBdEQsRUFBbUU7QUFDakU7QUFDQSxVQUFJLFdBQVcsR0FBRyxDQUFsQixFQUFxQjtBQUNuQixlQUFPLFNBQVMsS0FBSyxDQUFDLENBQXRCLEVBQXlCO0FBQ3ZCLGVBQUssQ0FBQyxTQUFELENBQUwsQ0FBaUIsS0FBakIsSUFBMEIsV0FBMUI7QUFDQSxtQkFBUyxHQUFHLDhCQUE4QixDQUFDLEtBQUQsRUFBUSxTQUFSLENBQTFDO0FBQ0Q7O0FBQ0Q7QUFDRDs7QUFDRCxlQUFTLEdBQUcsOEJBQThCLENBQUMsS0FBRCxFQUFRLFNBQVIsQ0FBMUM7QUFDRDtBQUNGO0FBQ0YsQzs7Ozs7Ozs7Ozs7Ozs7QUMxSUQ7Ozs7Ozs7Ozs7Ozs7O0FBY0E7Ozs7Ozs7O0FBUUE7Ozs7QUFJQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtDQUlBOztBQUNBLE1BQU0sbUJBQW1CLEdBQUcsQ0FBQyxJQUFELEVBQWUsU0FBZixlQUNyQixJQURxQixlQUNaLFNBRFksQ0FBNUI7O0FBR0EsSUFBSSx5QkFBeUIsR0FBRyxJQUFoQzs7QUFFQSxJQUFJLE9BQU8sTUFBTSxDQUFDLFFBQWQsS0FBMkIsV0FBL0IsRUFBNEM7QUFDMUMsMkJBQXlCLEdBQUcsS0FBNUI7QUFDRCxDQUZELE1BRU8sSUFBSSxPQUFPLE1BQU0sQ0FBQyxRQUFQLENBQWdCLGtCQUF2QixLQUE4QyxXQUFsRCxFQUErRDtBQUNwRSxTQUFPLENBQUMsSUFBUixDQUNJLG1KQURKO0FBSUEsMkJBQXlCLEdBQUcsS0FBNUI7QUFDRDtBQUVEOzs7Ozs7QUFJQSxNQUFNLG9CQUFvQixHQUFJLFNBQUQsSUFDeEIsTUFBRCxJQUEyQjtBQUN6QixRQUFNLFFBQVEsR0FBRyxtQkFBbUIsQ0FBQyxNQUFNLENBQUMsSUFBUixFQUFjLFNBQWQsQ0FBcEM7QUFDQSxNQUFJLGFBQWEsR0FBRywwQ0FBYyxDQUFDLEdBQWYsQ0FBbUIsUUFBbkIsQ0FBcEI7O0FBQ0EsTUFBSSxhQUFhLEtBQUssU0FBdEIsRUFBaUM7QUFDL0IsaUJBQWEsR0FBRztBQUNkLGtCQUFZLEVBQUUsSUFBSSxPQUFKLEVBREE7QUFFZCxlQUFTLEVBQUUsSUFBSSxHQUFKO0FBRkcsS0FBaEI7QUFJQSw4Q0FBYyxDQUFDLEdBQWYsQ0FBbUIsUUFBbkIsRUFBNkIsYUFBN0I7QUFDRDs7QUFFRCxNQUFJLFFBQVEsR0FBRyxhQUFhLENBQUMsWUFBZCxDQUEyQixHQUEzQixDQUErQixNQUFNLENBQUMsT0FBdEMsQ0FBZjs7QUFDQSxNQUFJLFFBQVEsS0FBSyxTQUFqQixFQUE0QjtBQUMxQixXQUFPLFFBQVA7QUFDRDs7QUFFRCxRQUFNLEdBQUcsR0FBRyxNQUFNLENBQUMsT0FBUCxDQUFlLElBQWYsQ0FBb0IsOEJBQXBCLENBQVo7QUFDQSxVQUFRLEdBQUcsYUFBYSxDQUFDLFNBQWQsQ0FBd0IsR0FBeEIsQ0FBNEIsR0FBNUIsQ0FBWDs7QUFDQSxNQUFJLFFBQVEsS0FBSyxTQUFqQixFQUE0QjtBQUMxQixVQUFNLE9BQU8sR0FBRyxNQUFNLENBQUMsa0JBQVAsRUFBaEI7O0FBQ0EsUUFBSSx5QkFBSixFQUErQjtBQUM3QixZQUFNLENBQUMsUUFBUCxDQUFpQixrQkFBakIsQ0FBb0MsT0FBcEMsRUFBNkMsU0FBN0M7QUFDRDs7QUFDRCxZQUFRLEdBQUcsSUFBSSxnQ0FBSixDQUFhLE1BQWIsRUFBcUIsT0FBckIsQ0FBWDtBQUNBLGlCQUFhLENBQUMsU0FBZCxDQUF3QixHQUF4QixDQUE0QixHQUE1QixFQUFpQyxRQUFqQztBQUNEOztBQUNELGVBQWEsQ0FBQyxZQUFkLENBQTJCLEdBQTNCLENBQStCLE1BQU0sQ0FBQyxPQUF0QyxFQUErQyxRQUEvQztBQUNBLFNBQU8sUUFBUDtBQUNELENBN0JMOztBQStCQSxNQUFNLGNBQWMsR0FBRyxDQUFDLE1BQUQsRUFBUyxLQUFULENBQXZCO0FBRUE7Ozs7QUFHQSxNQUFNLDRCQUE0QixHQUFJLFNBQUQsSUFBc0I7QUFDekQsZ0JBQWMsQ0FBQyxPQUFmLENBQXdCLElBQUQsSUFBUztBQUM5QixVQUFNLFNBQVMsR0FBRywwQ0FBYyxDQUFDLEdBQWYsQ0FBbUIsbUJBQW1CLENBQUMsSUFBRCxFQUFPLFNBQVAsQ0FBdEMsQ0FBbEI7O0FBQ0EsUUFBSSxTQUFTLEtBQUssU0FBbEIsRUFBNkI7QUFDM0IsZUFBUyxDQUFDLFNBQVYsQ0FBb0IsT0FBcEIsQ0FBNkIsUUFBRCxJQUFhO0FBQ3ZDLGNBQU07QUFBQyxpQkFBTyxFQUFFO0FBQUM7QUFBRDtBQUFWLFlBQXVCLFFBQTdCLENBRHVDLENBRXZDOztBQUNBLGNBQU0sTUFBTSxHQUFHLElBQUksR0FBSixFQUFmO0FBQ0EsYUFBSyxDQUFDLElBQU4sQ0FBVyxPQUFPLENBQUMsZ0JBQVIsQ0FBeUIsT0FBekIsQ0FBWCxFQUE4QyxPQUE5QyxDQUF1RCxDQUFELElBQWU7QUFDbkUsZ0JBQU0sQ0FBQyxHQUFQLENBQVcsQ0FBWDtBQUNELFNBRkQ7QUFHQSwrQkFBdUIsQ0FBQyxRQUFELEVBQVcsTUFBWCxDQUF2QjtBQUNELE9BUkQ7QUFTRDtBQUNGLEdBYkQ7QUFjRCxDQWZEOztBQWlCQSxNQUFNLGNBQWMsR0FBRyxJQUFJLEdBQUosRUFBdkI7QUFFQTs7Ozs7Ozs7Ozs7Ozs7O0FBY0EsTUFBTSxxQkFBcUIsR0FDdkIsQ0FBQyxXQUFELEVBQWdDLFFBQWhDLEVBQW9ELFNBQXBELEtBQXlFO0FBQ3ZFLGdCQUFjLENBQUMsR0FBZixDQUFtQixTQUFuQixFQUR1RSxDQUV2RTs7QUFDQSxRQUFNLE1BQU0sR0FBRyxXQUFXLENBQUMsZ0JBQVosQ0FBNkIsT0FBN0IsQ0FBZixDQUh1RSxDQUl2RTs7QUFDQSxNQUFJLE1BQU0sQ0FBQyxNQUFQLEtBQWtCLENBQXRCLEVBQXlCO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBLFVBQU0sQ0FBQyxRQUFQLENBQWlCLHFCQUFqQixDQUF1QyxRQUFRLENBQUMsT0FBaEQsRUFBeUQsU0FBekQ7QUFDQTtBQUNEOztBQUNELFFBQU0sY0FBYyxHQUFHLFFBQVEsQ0FBQyxhQUFULENBQXVCLE9BQXZCLENBQXZCLENBWnVFLENBYXZFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsT0FBSyxJQUFJLENBQUMsR0FBRyxDQUFiLEVBQWdCLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBM0IsRUFBbUMsQ0FBQyxFQUFwQyxFQUF3QztBQUN0QyxVQUFNLEtBQUssR0FBRyxNQUFNLENBQUMsQ0FBRCxDQUFwQjtBQUNBLFNBQUssQ0FBQyxVQUFOLENBQWtCLFdBQWxCLENBQThCLEtBQTlCO0FBQ0Esa0JBQWMsQ0FBQyxXQUFmLElBQStCLEtBQUssQ0FBQyxXQUFyQztBQUNELEdBdEJzRSxDQXVCdkU7OztBQUNBLDhCQUE0QixDQUFDLFNBQUQsQ0FBNUIsQ0F4QnVFLENBeUJ2RTtBQUNBOztBQUNBLHdCQUFzQixDQUNsQixRQURrQixFQUNSLGNBRFEsRUFDUSxRQUFRLENBQUMsT0FBVCxDQUFpQixPQUFqQixDQUF5QixVQURqQyxDQUF0QixDQTNCdUUsQ0E2QnZFO0FBQ0E7QUFDQTs7QUFDQSxRQUFNLENBQUMsUUFBUCxDQUFpQixxQkFBakIsQ0FBdUMsUUFBUSxDQUFDLE9BQWhELEVBQXlELFNBQXpEOztBQUNBLE1BQUksTUFBTSxDQUFDLFFBQVAsQ0FBaUIsWUFBckIsRUFBbUM7QUFDakM7QUFDQTtBQUNBLFVBQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxPQUFULENBQWlCLE9BQWpCLENBQXlCLGFBQXpCLENBQXVDLE9BQXZDLENBQWQ7QUFDQSxlQUFXLENBQUMsWUFBWixDQUF5QixLQUFLLENBQUMsU0FBTixDQUFnQixJQUFoQixDQUF6QixFQUFnRCxXQUFXLENBQUMsVUFBNUQ7QUFDRCxHQUxELE1BS087QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFRLENBQUMsT0FBVCxDQUFpQixPQUFqQixDQUF5QixZQUF6QixDQUNJLGNBREosRUFDb0IsUUFBUSxDQUFDLE9BQVQsQ0FBaUIsT0FBakIsQ0FBeUIsVUFEN0M7QUFFQSxVQUFNLE9BQU8sR0FBRyxJQUFJLEdBQUosRUFBaEI7QUFDQSxXQUFPLENBQUMsR0FBUixDQUFZLGNBQVo7QUFDQSwyQkFBdUIsQ0FBQyxRQUFELEVBQVcsT0FBWCxDQUF2QjtBQUNEO0FBQ0YsQ0FwREw7QUEwREE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUF3RE8sTUFBTSxtQkFBTSxHQUNmLENBQUMsTUFBRCxFQUNDLFNBREQsRUFFQyxPQUZELEtBRWdDO0FBQzlCLFFBQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUExQjtBQUNBLFFBQU0sV0FBVyxHQUFHLHVCQUFLLENBQUMsR0FBTixDQUFVLFNBQVYsQ0FBcEI7QUFDQSxRQUFNLFlBQVksR0FBRyxTQUFTLFlBQVksVUFBckIsSUFDakIseUJBRGlCLElBQ1ksTUFBTSxZQUFZLHlDQURuRCxDQUg4QixDQUs5Qjs7QUFDQSxRQUFNLGdCQUFnQixHQUFHLFlBQVksSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFmLENBQW1CLFNBQW5CLENBQTFDLENBTjhCLENBTzlCO0FBQ0E7O0FBQ0EsUUFBTSxlQUFlLEdBQ2pCLGdCQUFnQixHQUFHLFFBQVEsQ0FBQyxzQkFBVCxFQUFILEdBQXVDLFNBRDNEO0FBRUEsa0NBQVMsQ0FDTCxNQURLLEVBRUwsZUFGSyxFQUdMO0FBQUMsbUJBQWUsRUFBRSxvQkFBb0IsQ0FBQyxTQUFEO0FBQXRDLEtBQXNELE9BQXRELENBSEssQ0FBVCxDQVg4QixDQWdCOUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLE1BQUksZ0JBQUosRUFBc0I7QUFDcEIsVUFBTSxJQUFJLEdBQUcsdUJBQUssQ0FBQyxHQUFOLENBQVUsZUFBVixDQUFiO0FBQ0EsMkJBQUssQ0FBQyxNQUFOLENBQWEsZUFBYjs7QUFDQSxRQUFJLElBQUksQ0FBQyxLQUFMLFlBQXNCLDZDQUExQixFQUE0QztBQUMxQywyQkFBcUIsQ0FDakIsZUFEaUIsRUFFakIsSUFBSSxDQUFDLEtBQUwsQ0FBVyxRQUZNLEVBR2pCLFNBSGlCLENBQXJCO0FBSUQ7O0FBQ0Qsc0NBQVcsQ0FBQyxTQUFELEVBQVksU0FBUyxDQUFDLFVBQXRCLENBQVg7QUFDQSxhQUFTLENBQUMsV0FBVixDQUFzQixlQUF0QjtBQUNBLDJCQUFLLENBQUMsR0FBTixDQUFVLFNBQVYsRUFBcUIsSUFBckI7QUFDRCxHQXJDNkIsQ0FzQzlCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EsTUFBSSxDQUFDLFdBQUQsSUFBZ0IsWUFBcEIsRUFBa0M7QUFDaEMsVUFBTSxDQUFDLFFBQVAsQ0FBaUIsWUFBakIsQ0FBK0IsU0FBd0IsQ0FBQyxJQUF4RDtBQUNEO0FBQ0YsQ0FsREUsQzs7Ozs7O0FDaFBQOzs7Ozs7Ozs7Ozs7OztBQWNBOzs7Ozs7QUFNQSxNQUFNLENBQUMseUJBQVAsR0FDSSxDQUF3QixJQUF4QixFQUFpQyxJQUFqQyxLQUFzRCxJQUQxRDs7QUErR08sTUFBTSxnQkFBZ0IsR0FBOEI7QUFFekQsYUFBVyxDQUFDLEtBQUQsRUFBaUIsSUFBakIsRUFBK0I7QUFDeEMsWUFBUSxJQUFSO0FBQ0UsV0FBSyxPQUFMO0FBQ0UsZUFBTyxLQUFLLEdBQUcsRUFBSCxHQUFRLElBQXBCOztBQUNGLFdBQUssTUFBTDtBQUNBLFdBQUssS0FBTDtBQUNFO0FBQ0E7QUFDQSxlQUFPLEtBQUssSUFBSSxJQUFULEdBQWdCLEtBQWhCLEdBQXdCLElBQUksQ0FBQyxTQUFMLENBQWUsS0FBZixDQUEvQjtBQVBKOztBQVNBLFdBQU8sS0FBUDtBQUNELEdBYndEOztBQWV6RCxlQUFhLENBQUMsS0FBRCxFQUFxQixJQUFyQixFQUFtQztBQUM5QyxZQUFRLElBQVI7QUFDRSxXQUFLLE9BQUw7QUFDRSxlQUFPLEtBQUssS0FBSyxJQUFqQjs7QUFDRixXQUFLLE1BQUw7QUFDRSxlQUFPLEtBQUssS0FBSyxJQUFWLEdBQWlCLElBQWpCLEdBQXdCLE1BQU0sQ0FBQyxLQUFELENBQXJDOztBQUNGLFdBQUssTUFBTDtBQUNBLFdBQUssS0FBTDtBQUNFLGVBQU8sSUFBSSxDQUFDLEtBQUwsQ0FBVyxLQUFYLENBQVA7QUFQSjs7QUFTQSxXQUFPLEtBQVA7QUFDRDs7QUExQndELENBQXBEO0FBa0NQOzs7OztBQUlPLE1BQU0sUUFBUSxHQUFlLENBQUMsS0FBRCxFQUFpQixHQUFqQixLQUEwQztBQUM1RTtBQUNBLFNBQU8sR0FBRyxLQUFLLEtBQVIsS0FBa0IsR0FBRyxLQUFLLEdBQVIsSUFBZSxLQUFLLEtBQUssS0FBM0MsQ0FBUDtBQUNELENBSE07QUFLUCxNQUFNLDBCQUEwQixHQUF3QjtBQUN0RCxXQUFTLEVBQUUsSUFEMkM7QUFFdEQsTUFBSSxFQUFFLE1BRmdEO0FBR3RELFdBQVMsRUFBRSxnQkFIMkM7QUFJdEQsU0FBTyxFQUFFLEtBSjZDO0FBS3RELFlBQVUsRUFBRTtBQUwwQyxDQUF4RDtBQVFBLE1BQU0sZ0JBQWdCLEdBQUcsT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsSUFBaEIsQ0FBekI7QUFFQSxNQUFNLGlCQUFpQixHQUFHLENBQTFCO0FBQ0EsTUFBTSxzQkFBc0IsR0FBRyxLQUFLLENBQXBDO0FBQ0EsTUFBTSxnQ0FBZ0MsR0FBRyxLQUFLLENBQTlDO0FBQ0EsTUFBTSwrQkFBK0IsR0FBRyxLQUFLLENBQTdDO0FBQ0EsTUFBTSxtQkFBbUIsR0FBRyxLQUFLLENBQWpDO0FBS0E7Ozs7OztBQUtNLE1BQWdCLGVBQWhCLFNBQXdDLFdBQXhDLENBQW1EO0FBME92RDtBQUNFO0FBbEJNLHdCQUE0QixDQUE1QjtBQUNBLCtCQUFnRCxTQUFoRDtBQUNBLDBCQUFtQyxnQkFBbkM7QUFDQSxpQ0FBZ0QsU0FBaEQ7QUFFUjs7Ozs7QUFJUSw4QkFBcUMsSUFBSSxHQUFKLEVBQXJDO0FBRVI7Ozs7QUFHUSxpQ0FDUSxTQURSO0FBS04sU0FBSyxVQUFMO0FBQ0Q7QUE5TUQ7Ozs7OztBQUlBLGFBQVcsa0JBQVgsR0FBNkI7QUFDM0I7QUFDQSxTQUFLLFFBQUw7QUFDQSxVQUFNLFVBQVUsR0FBYSxFQUE3QixDQUgyQixDQUkzQjtBQUNBOztBQUNBLFNBQUssZ0JBQUwsQ0FBdUIsT0FBdkIsQ0FBK0IsQ0FBQyxDQUFELEVBQUksQ0FBSixLQUFTO0FBQ3RDLFlBQU0sSUFBSSxHQUFHLEtBQUsseUJBQUwsQ0FBK0IsQ0FBL0IsRUFBa0MsQ0FBbEMsQ0FBYjs7QUFDQSxVQUFJLElBQUksS0FBSyxTQUFiLEVBQXdCO0FBQ3RCLGFBQUssdUJBQUwsQ0FBNkIsR0FBN0IsQ0FBaUMsSUFBakMsRUFBdUMsQ0FBdkM7O0FBQ0Esa0JBQVUsQ0FBQyxJQUFYLENBQWdCLElBQWhCO0FBQ0Q7QUFDRixLQU5EOztBQU9BLFdBQU8sVUFBUDtBQUNEO0FBRUQ7Ozs7OztBQUtBOzs7QUFDUSxTQUFPLHNCQUFQLEdBQTZCO0FBQ25DO0FBQ0EsUUFBSSxDQUFDLEtBQUssY0FBTCxDQUNHLHlCQUF5QixDQUFDLGtCQUFELEVBQXFCLElBQXJCLENBRDVCLENBQUwsRUFDOEQ7QUFDNUQsV0FBSyxnQkFBTCxHQUF3QixJQUFJLEdBQUosRUFBeEIsQ0FENEQsQ0FFNUQ7O0FBQ0EsWUFBTSxlQUFlLEdBQ2pCLE1BQU0sQ0FBQyxjQUFQLENBQXNCLElBQXRCLEVBQTRCLGdCQURoQzs7QUFFQSxVQUFJLGVBQWUsS0FBSyxTQUF4QixFQUFtQztBQUNqQyx1QkFBZSxDQUFDLE9BQWhCLENBQ0ksQ0FBQyxDQUFELEVBQXlCLENBQXpCLEtBQ0ksS0FBSyxnQkFBTCxDQUF1QixHQUF2QixDQUEyQixDQUEzQixFQUE4QixDQUE5QixDQUZSO0FBR0Q7QUFDRjtBQUNGO0FBRUQ7Ozs7Ozs7OztBQU9BLFNBQU8sY0FBUCxDQUNJLElBREosRUFFSSxVQUErQiwwQkFGbkMsRUFFNkQ7QUFDM0Q7QUFDQTtBQUNBO0FBQ0EsU0FBSyxzQkFBTDs7QUFDQSxTQUFLLGdCQUFMLENBQXVCLEdBQXZCLENBQTJCLElBQTNCLEVBQWlDLE9BQWpDLEVBTDJELENBTTNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFFBQUksT0FBTyxDQUFDLFVBQVIsSUFBc0IsS0FBSyxTQUFMLENBQWUsY0FBZixDQUE4QixJQUE5QixDQUExQixFQUErRDtBQUM3RDtBQUNEOztBQUNELFVBQU0sR0FBRyxHQUFHLE9BQU8sSUFBUCxLQUFnQixRQUFoQixHQUEyQixNQUFNLEVBQWpDLGVBQTJDLElBQTNDLENBQVo7QUFDQSxVQUFNLENBQUMsY0FBUCxDQUFzQixLQUFLLFNBQTNCLEVBQXNDLElBQXRDLEVBQTRDO0FBQzFDO0FBQ0EsU0FBRztBQUNELGVBQU8sS0FBSyxHQUFMLENBQVA7QUFDRCxPQUp5Qzs7QUFLMUMsU0FBRyxDQUF3QixLQUF4QixFQUFzQztBQUN2QztBQUNBLGNBQU0sUUFBUSxHQUFJLEtBQWEsSUFBYixDQUFsQixDQUZ1QyxDQUd2Qzs7QUFDQyxhQUFhLEdBQWIsSUFBb0IsS0FBcEI7O0FBQ0QsYUFBSyxjQUFMLENBQW9CLElBQXBCLEVBQTBCLFFBQTFCO0FBQ0QsT0FYeUM7O0FBWTFDLGtCQUFZLEVBQUUsSUFaNEI7QUFhMUMsZ0JBQVUsRUFBRTtBQWI4QixLQUE1QztBQWVEO0FBRUQ7Ozs7Ozs7QUFLVSxTQUFPLFFBQVAsR0FBZTtBQUN2QixRQUFJLEtBQUssY0FBTCxDQUFvQix5QkFBeUIsQ0FBQyxXQUFELEVBQWMsSUFBZCxDQUE3QyxLQUNBLEtBQUssU0FEVCxFQUNvQjtBQUNsQjtBQUNELEtBSnNCLENBS3ZCOzs7QUFDQSxVQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsY0FBUCxDQUFzQixJQUF0QixDQUFsQjs7QUFDQSxRQUFJLE9BQU8sU0FBUyxDQUFDLFFBQWpCLEtBQThCLFVBQWxDLEVBQThDO0FBQzVDLGVBQVMsQ0FBQyxRQUFWO0FBQ0Q7O0FBQ0QsU0FBSyxTQUFMLEdBQWlCLElBQWpCOztBQUNBLFNBQUssc0JBQUwsR0FYdUIsQ0FZdkI7OztBQUNBLFNBQUssdUJBQUwsR0FBK0IsSUFBSSxHQUFKLEVBQS9CLENBYnVCLENBY3ZCO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFFBQUksS0FBSyxjQUFMLENBQW9CLHlCQUF5QixDQUFDLFlBQUQsRUFBZSxJQUFmLENBQTdDLENBQUosRUFBd0U7QUFDdEUsWUFBTSxLQUFLLEdBQUcsS0FBSyxVQUFuQixDQURzRSxDQUV0RTs7QUFDQSxZQUFNLFFBQVEsR0FBRyxDQUNmLEdBQUcsTUFBTSxDQUFDLG1CQUFQLENBQTJCLEtBQTNCLENBRFksRUFFZixJQUFJLE9BQU8sTUFBTSxDQUFDLHFCQUFkLEtBQXdDLFVBQXpDLEdBQ0MsTUFBTSxDQUFDLHFCQUFQLENBQTZCLEtBQTdCLENBREQsR0FFQyxFQUZKLENBRmUsQ0FBakIsQ0FIc0UsQ0FTdEU7O0FBQ0EsV0FBSyxNQUFNLENBQVgsSUFBZ0IsUUFBaEIsRUFBMEI7QUFDeEI7QUFDQTtBQUNBO0FBQ0EsYUFBSyxjQUFMLENBQW9CLENBQXBCLEVBQXdCLEtBQWEsQ0FBQyxDQUFELENBQXJDO0FBQ0Q7QUFDRjtBQUNGO0FBRUQ7Ozs7OztBQUlRLFNBQU8seUJBQVAsQ0FDSixJQURJLEVBQ2UsT0FEZixFQUMyQztBQUNqRCxVQUFNLFNBQVMsR0FBRyxPQUFPLENBQUMsU0FBMUI7QUFDQSxXQUFPLFNBQVMsS0FBSyxLQUFkLEdBQ0gsU0FERyxHQUVGLE9BQU8sU0FBUCxLQUFxQixRQUFyQixHQUNJLFNBREosR0FFSyxPQUFPLElBQVAsS0FBZ0IsUUFBaEIsR0FBMkIsSUFBSSxDQUFDLFdBQUwsRUFBM0IsR0FBZ0QsU0FKMUQ7QUFLRDtBQUVEOzs7Ozs7OztBQU1RLFNBQU8sZ0JBQVAsQ0FDSixLQURJLEVBQ1ksR0FEWixFQUMwQixhQUF5QixRQURuRCxFQUMyRDtBQUNqRSxXQUFPLFVBQVUsQ0FBQyxLQUFELEVBQVEsR0FBUixDQUFqQjtBQUNEO0FBRUQ7Ozs7Ozs7O0FBTVEsU0FBTywyQkFBUCxDQUNKLEtBREksRUFDZ0IsT0FEaEIsRUFDNEM7QUFDbEQsVUFBTSxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQXJCO0FBQ0EsVUFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLFNBQVIsSUFBcUIsZ0JBQXZDO0FBQ0EsVUFBTSxhQUFhLEdBQ2QsT0FBTyxTQUFQLEtBQXFCLFVBQXJCLEdBQWtDLFNBQWxDLEdBQThDLFNBQVMsQ0FBQyxhQUQ3RDtBQUVBLFdBQU8sYUFBYSxHQUFHLGFBQWEsQ0FBQyxLQUFELEVBQVEsSUFBUixDQUFoQixHQUFnQyxLQUFwRDtBQUNEO0FBRUQ7Ozs7Ozs7Ozs7QUFRUSxTQUFPLHlCQUFQLENBQ0osS0FESSxFQUNZLE9BRFosRUFDd0M7QUFDOUMsUUFBSSxPQUFPLENBQUMsT0FBUixLQUFvQixTQUF4QixFQUFtQztBQUNqQztBQUNEOztBQUNELFVBQU0sSUFBSSxHQUFHLE9BQU8sQ0FBQyxJQUFyQjtBQUNBLFVBQU0sU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUExQjtBQUNBLFVBQU0sV0FBVyxHQUNiLFNBQVMsSUFBSyxTQUF1QyxDQUFDLFdBQXRELElBQ0EsZ0JBQWdCLENBQUMsV0FGckI7QUFHQSxXQUFPLFdBQVksQ0FBQyxLQUFELEVBQVEsSUFBUixDQUFuQjtBQUNEO0FBd0JEOzs7Ozs7QUFJVSxZQUFVO0FBQ2xCLFNBQUssdUJBQUwsR0FEa0IsQ0FFbEI7OztBQUNBLFNBQUssY0FBTDtBQUNEO0FBRUQ7Ozs7Ozs7Ozs7Ozs7O0FBWVEseUJBQXVCO0FBQzdCO0FBQ0E7QUFDQyxTQUFLLFdBQUwsQ0FDSSxnQkFESixDQUNzQixPQUR0QixDQUM4QixDQUFDLEVBQUQsRUFBSyxDQUFMLEtBQVU7QUFDbkMsVUFBSSxLQUFLLGNBQUwsQ0FBb0IsQ0FBcEIsQ0FBSixFQUE0QjtBQUMxQixjQUFNLEtBQUssR0FBRyxLQUFLLENBQUwsQ0FBZDtBQUNBLGVBQU8sS0FBSyxDQUFMLENBQVA7O0FBQ0EsWUFBSSxDQUFDLEtBQUssbUJBQVYsRUFBK0I7QUFDN0IsZUFBSyxtQkFBTCxHQUEyQixJQUFJLEdBQUosRUFBM0I7QUFDRDs7QUFDRCxhQUFLLG1CQUFMLENBQXlCLEdBQXpCLENBQTZCLENBQTdCLEVBQWdDLEtBQWhDO0FBQ0Q7QUFDRixLQVZKO0FBV0Y7QUFFRDs7Ozs7QUFHUSwwQkFBd0I7QUFDOUI7QUFDQTtBQUNBO0FBQ0EsU0FBSyxtQkFBTCxDQUEwQixPQUExQixDQUFrQyxDQUFDLENBQUQsRUFBSSxDQUFKLEtBQVcsS0FBYSxDQUFiLElBQWtCLENBQS9EOztBQUNBLFNBQUssbUJBQUwsR0FBMkIsU0FBM0I7QUFDRDs7QUFFRCxtQkFBaUI7QUFDZixTQUFLLFlBQUwsR0FBb0IsS0FBSyxZQUFMLEdBQW9CLG1CQUF4QyxDQURlLENBRWY7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsUUFBSSxLQUFLLHFCQUFULEVBQWdDO0FBQzlCLFdBQUsscUJBQUw7O0FBQ0EsV0FBSyxxQkFBTCxHQUE2QixTQUE3QjtBQUNEO0FBQ0Y7QUFFRDs7Ozs7OztBQUtBLHNCQUFvQixJQUNuQjtBQUVEOzs7OztBQUdBLDBCQUF3QixDQUFDLElBQUQsRUFBZSxHQUFmLEVBQWlDLEtBQWpDLEVBQW1EO0FBQ3pFLFFBQUksR0FBRyxLQUFLLEtBQVosRUFBbUI7QUFDakIsV0FBSyxvQkFBTCxDQUEwQixJQUExQixFQUFnQyxLQUFoQztBQUNEO0FBQ0Y7O0FBRU8sc0JBQW9CLENBQ3hCLElBRHdCLEVBQ0wsS0FESyxFQUV4QixVQUErQiwwQkFGUCxFQUVpQztBQUMzRCxVQUFNLElBQUksR0FBSSxLQUFLLFdBQW5COztBQUNBLFVBQU0sSUFBSSxHQUFHLElBQUksQ0FBQyx5QkFBTCxDQUErQixJQUEvQixFQUFxQyxPQUFyQyxDQUFiOztBQUNBLFFBQUksSUFBSSxLQUFLLFNBQWIsRUFBd0I7QUFDdEIsWUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLHlCQUFMLENBQStCLEtBQS9CLEVBQXNDLE9BQXRDLENBQWxCLENBRHNCLENBRXRCOzs7QUFDQSxVQUFJLFNBQVMsS0FBSyxTQUFsQixFQUE2QjtBQUMzQjtBQUNELE9BTHFCLENBTXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBLFdBQUssWUFBTCxHQUFvQixLQUFLLFlBQUwsR0FBb0IsZ0NBQXhDOztBQUNBLFVBQUksU0FBUyxJQUFJLElBQWpCLEVBQXVCO0FBQ3JCLGFBQUssZUFBTCxDQUFxQixJQUFyQjtBQUNELE9BRkQsTUFFTztBQUNMLGFBQUssWUFBTCxDQUFrQixJQUFsQixFQUF3QixTQUF4QjtBQUNELE9BbkJxQixDQW9CdEI7OztBQUNBLFdBQUssWUFBTCxHQUFvQixLQUFLLFlBQUwsR0FBb0IsQ0FBQyxnQ0FBekM7QUFDRDtBQUNGOztBQUVPLHNCQUFvQixDQUFDLElBQUQsRUFBZSxLQUFmLEVBQWlDO0FBQzNEO0FBQ0E7QUFDQSxRQUFJLEtBQUssWUFBTCxHQUFvQixnQ0FBeEIsRUFBMEQ7QUFDeEQ7QUFDRDs7QUFDRCxVQUFNLElBQUksR0FBSSxLQUFLLFdBQW5COztBQUNBLFVBQU0sUUFBUSxHQUFHLElBQUksQ0FBQyx1QkFBTCxDQUE2QixHQUE3QixDQUFpQyxJQUFqQyxDQUFqQjs7QUFDQSxRQUFJLFFBQVEsS0FBSyxTQUFqQixFQUE0QjtBQUMxQixZQUFNLE9BQU8sR0FDVCxJQUFJLENBQUMsZ0JBQUwsQ0FBdUIsR0FBdkIsQ0FBMkIsUUFBM0IsS0FBd0MsMEJBRDVDLENBRDBCLENBRzFCOztBQUNBLFdBQUssWUFBTCxHQUFvQixLQUFLLFlBQUwsR0FBb0IsK0JBQXhDO0FBQ0EsV0FBSyxRQUFMLElBQ0k7QUFDQSxVQUFJLENBQUMsMkJBQUwsQ0FBaUMsS0FBakMsRUFBd0MsT0FBeEMsQ0FGSixDQUwwQixDQVExQjs7QUFDQSxXQUFLLFlBQUwsR0FBb0IsS0FBSyxZQUFMLEdBQW9CLENBQUMsK0JBQXpDO0FBQ0Q7QUFDRjtBQUVEOzs7Ozs7O0FBS1EsZ0JBQWMsQ0FBQyxJQUFELEVBQXFCLFFBQXJCLEVBQXVDO0FBQzNELFFBQUksbUJBQW1CLEdBQUcsSUFBMUIsQ0FEMkQsQ0FFM0Q7O0FBQ0EsUUFBSSxJQUFJLEtBQUssU0FBYixFQUF3QjtBQUN0QixZQUFNLElBQUksR0FBRyxLQUFLLFdBQWxCO0FBQ0EsWUFBTSxPQUFPLEdBQ1QsSUFBSSxDQUFDLGdCQUFMLENBQXVCLEdBQXZCLENBQTJCLElBQTNCLEtBQW9DLDBCQUR4Qzs7QUFFQSxVQUFJLElBQUksQ0FBQyxnQkFBTCxDQUNJLEtBQUssSUFBTCxDQURKLEVBQzhCLFFBRDlCLEVBQ3dDLE9BQU8sQ0FBQyxVQURoRCxDQUFKLEVBQ2lFO0FBQy9ELFlBQUksQ0FBQyxLQUFLLGtCQUFMLENBQXdCLEdBQXhCLENBQTRCLElBQTVCLENBQUwsRUFBd0M7QUFDdEMsZUFBSyxrQkFBTCxDQUF3QixHQUF4QixDQUE0QixJQUE1QixFQUFrQyxRQUFsQztBQUNELFNBSDhELENBSS9EO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxZQUFJLE9BQU8sQ0FBQyxPQUFSLEtBQW9CLElBQXBCLElBQ0EsRUFBRSxLQUFLLFlBQUwsR0FBb0IsK0JBQXRCLENBREosRUFDNEQ7QUFDMUQsY0FBSSxLQUFLLHFCQUFMLEtBQStCLFNBQW5DLEVBQThDO0FBQzVDLGlCQUFLLHFCQUFMLEdBQTZCLElBQUksR0FBSixFQUE3QjtBQUNEOztBQUNELGVBQUsscUJBQUwsQ0FBMkIsR0FBM0IsQ0FBK0IsSUFBL0IsRUFBcUMsT0FBckM7QUFDRDtBQUNGLE9BaEJELE1BZ0JPO0FBQ0w7QUFDQSwyQkFBbUIsR0FBRyxLQUF0QjtBQUNEO0FBQ0Y7O0FBQ0QsUUFBSSxDQUFDLEtBQUssbUJBQU4sSUFBNkIsbUJBQWpDLEVBQXNEO0FBQ3BELFdBQUssY0FBTDtBQUNEO0FBQ0Y7QUFFRDs7Ozs7Ozs7Ozs7Ozs7O0FBYUEsZUFBYSxDQUFDLElBQUQsRUFBcUIsUUFBckIsRUFBdUM7QUFDbEQsU0FBSyxjQUFMLENBQW9CLElBQXBCLEVBQTBCLFFBQTFCOztBQUNBLFdBQU8sS0FBSyxjQUFaO0FBQ0Q7QUFFRDs7Ozs7QUFHYyxnQkFBTixHQUFvQjtBQUFBOztBQUFBO0FBQzFCO0FBQ0EsV0FBSSxDQUFDLFlBQUwsR0FBb0IsS0FBSSxDQUFDLFlBQUwsR0FBb0Isc0JBQXhDO0FBQ0EsVUFBSSxPQUFKO0FBQ0EsVUFBSSxNQUFKO0FBQ0EsWUFBTSxxQkFBcUIsR0FBRyxLQUFJLENBQUMsY0FBbkM7QUFDQSxXQUFJLENBQUMsY0FBTCxHQUFzQixJQUFJLE9BQUosQ0FBWSxDQUFDLEdBQUQsRUFBTSxHQUFOLEtBQWE7QUFDN0MsZUFBTyxHQUFHLEdBQVY7QUFDQSxjQUFNLEdBQUcsR0FBVDtBQUNELE9BSHFCLENBQXRCOztBQUlBLFVBQUk7QUFDRjtBQUNBO0FBQ0EsY0FBTSxxQkFBTjtBQUNELE9BSkQsQ0FJRSxPQUFPLENBQVAsRUFBVSxDQUdYLENBSEMsQ0FDQTtBQUNBO0FBRUY7OztBQUNBLFVBQUksQ0FBQyxLQUFJLENBQUMsYUFBVixFQUF5QjtBQUN2QixjQUFNLElBQUksT0FBSixDQUFhLEdBQUQsSUFBUyxLQUFJLENBQUMscUJBQUwsR0FBNkIsR0FBbEQsQ0FBTjtBQUNEOztBQUNELFVBQUk7QUFDRixjQUFNLE1BQU0sR0FBRyxLQUFJLENBQUMsYUFBTCxFQUFmLENBREUsQ0FFRjtBQUNBO0FBQ0E7OztBQUNBLFlBQUksTUFBTSxJQUFJLElBQWQsRUFBb0I7QUFDbEIsZ0JBQU0sTUFBTjtBQUNEO0FBQ0YsT0FSRCxDQVFFLE9BQU8sQ0FBUCxFQUFVO0FBQ1YsY0FBTSxDQUFDLENBQUQsQ0FBTjtBQUNEOztBQUNELGFBQU8sQ0FBQyxDQUFDLEtBQUksQ0FBQyxtQkFBUCxDQUFQO0FBakMwQjtBQWtDM0I7O0FBRUQsTUFBWSxhQUFaLEdBQXlCO0FBQ3ZCLFdBQVEsS0FBSyxZQUFMLEdBQW9CLG1CQUE1QjtBQUNEOztBQUVELE1BQVksbUJBQVosR0FBK0I7QUFDN0IsV0FBUSxLQUFLLFlBQUwsR0FBb0Isc0JBQTVCO0FBQ0Q7O0FBRUQsTUFBYyxVQUFkLEdBQXdCO0FBQ3RCLFdBQVEsS0FBSyxZQUFMLEdBQW9CLGlCQUE1QjtBQUNEO0FBRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdCVSxlQUFhO0FBQ3JCO0FBQ0EsUUFBSSxLQUFLLG1CQUFULEVBQThCO0FBQzVCLFdBQUssd0JBQUw7QUFDRDs7QUFDRCxRQUFJLFlBQVksR0FBRyxLQUFuQjtBQUNBLFVBQU0saUJBQWlCLEdBQUcsS0FBSyxrQkFBL0I7O0FBQ0EsUUFBSTtBQUNGLGtCQUFZLEdBQUcsS0FBSyxZQUFMLENBQWtCLGlCQUFsQixDQUFmOztBQUNBLFVBQUksWUFBSixFQUFrQjtBQUNoQixhQUFLLE1BQUwsQ0FBWSxpQkFBWjtBQUNEO0FBQ0YsS0FMRCxDQUtFLE9BQU8sQ0FBUCxFQUFVO0FBQ1Y7QUFDQTtBQUNBLGtCQUFZLEdBQUcsS0FBZjtBQUNBLFlBQU0sQ0FBTjtBQUNELEtBVkQsU0FVVTtBQUNSO0FBQ0EsV0FBSyxZQUFMO0FBQ0Q7O0FBQ0QsUUFBSSxZQUFKLEVBQWtCO0FBQ2hCLFVBQUksRUFBRSxLQUFLLFlBQUwsR0FBb0IsaUJBQXRCLENBQUosRUFBOEM7QUFDNUMsYUFBSyxZQUFMLEdBQW9CLEtBQUssWUFBTCxHQUFvQixpQkFBeEM7QUFDQSxhQUFLLFlBQUwsQ0FBa0IsaUJBQWxCO0FBQ0Q7O0FBQ0QsV0FBSyxPQUFMLENBQWEsaUJBQWI7QUFDRDtBQUNGOztBQUVPLGNBQVk7QUFDbEIsU0FBSyxrQkFBTCxHQUEwQixJQUFJLEdBQUosRUFBMUI7QUFDQSxTQUFLLFlBQUwsR0FBb0IsS0FBSyxZQUFMLEdBQW9CLENBQUMsc0JBQXpDO0FBQ0Q7QUFFRDs7Ozs7Ozs7Ozs7Ozs7O0FBYUEsTUFBSSxjQUFKLEdBQWtCO0FBQ2hCLFdBQU8sS0FBSyxjQUFaO0FBQ0Q7QUFFRDs7Ozs7Ozs7O0FBT1UsY0FBWSxDQUFDLGtCQUFELEVBQW1DO0FBQ3ZELFdBQU8sSUFBUDtBQUNEO0FBRUQ7Ozs7Ozs7Ozs7QUFRVSxRQUFNLENBQUMsa0JBQUQsRUFBbUM7QUFDakQsUUFBSSxLQUFLLHFCQUFMLEtBQStCLFNBQS9CLElBQ0EsS0FBSyxxQkFBTCxDQUEyQixJQUEzQixHQUFrQyxDQUR0QyxFQUN5QztBQUN2QztBQUNBO0FBQ0EsV0FBSyxxQkFBTCxDQUEyQixPQUEzQixDQUNJLENBQUMsQ0FBRCxFQUFJLENBQUosS0FBVSxLQUFLLG9CQUFMLENBQTBCLENBQTFCLEVBQTZCLEtBQUssQ0FBTCxDQUE3QixFQUFvRCxDQUFwRCxDQURkOztBQUVBLFdBQUsscUJBQUwsR0FBNkIsU0FBN0I7QUFDRDtBQUNGO0FBRUQ7Ozs7Ozs7Ozs7O0FBU1UsU0FBTyxDQUFDLGtCQUFELEVBQW1DLENBQ25EO0FBRUQ7Ozs7Ozs7Ozs7O0FBU1UsY0FBWSxDQUFDLGtCQUFELEVBQW1DLENBQ3hEOztBQW5sQnNEO0FBY3ZEOzs7O0FBR2lCLDRCQUFZLElBQVosQzs7QUN2Tm5COzs7Ozs7Ozs7Ozs7O0FBd0NBLE1BQU0sbUJBQW1CLEdBQ3JCLENBQUMsT0FBRCxFQUFrQixLQUFsQixLQUFxRDtBQUNuRCxRQUFNLENBQUMsY0FBUCxDQUFzQixNQUF0QixDQUE2QixPQUE3QixFQUFzQyxLQUF0QyxFQURtRCxDQUVuRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsU0FBTyxLQUFQO0FBQ0QsQ0FWTDs7QUFZQSxNQUFNLHFCQUFxQixHQUN2QixDQUFDLE9BQUQsRUFBa0IsVUFBbEIsS0FBaUQ7QUFDL0MsUUFBTTtBQUFDLFFBQUQ7QUFBTztBQUFQLE1BQW1CLFVBQXpCO0FBQ0EsU0FBTztBQUNMLFFBREs7QUFFTCxZQUZLOztBQUdMO0FBQ0EsWUFBUSxDQUFDLEtBQUQsRUFBZ0M7QUFDdEMsWUFBTSxDQUFDLGNBQVAsQ0FBc0IsTUFBdEIsQ0FBNkIsT0FBN0IsRUFBc0MsS0FBdEM7QUFDRDs7QUFOSSxHQUFQO0FBUUQsQ0FYTDtBQWFBOzs7Ozs7O0FBS08sTUFBTSxhQUFhLEdBQUksT0FBRCxJQUN4QixpQkFBRCxJQUNLLE9BQU8saUJBQVAsS0FBNkIsVUFBOUIsR0FDSixtQkFBbUIsQ0FBQyxPQUFELEVBQVUsaUJBQVYsQ0FEZixHQUVKLHFCQUFxQixDQUFDLE9BQUQsRUFBVSxpQkFBVixDQUpsQjs7QUFNUCxNQUFNLGdCQUFnQixHQUNsQixDQUFDLE9BQUQsRUFBK0IsT0FBL0IsS0FBd0Q7QUFDdEQ7QUFDQTtBQUNBO0FBQ0EsTUFBSSxPQUFPLENBQUMsSUFBUixLQUFpQixRQUFqQixJQUE2QixPQUFPLENBQUMsVUFBckMsSUFDQSxFQUFFLFdBQVcsT0FBTyxDQUFDLFVBQXJCLENBREosRUFDc0M7QUFDcEMsNkJBQ0ssT0FETCxFQUNZO0FBQ1YsY0FBUSxDQUFDLEtBQUQsRUFBOEI7QUFDcEMsYUFBSyxDQUFDLGNBQU4sQ0FBcUIsT0FBTyxDQUFDLEdBQTdCLEVBQWtDLE9BQWxDO0FBQ0Q7O0FBSFMsS0FEWjtBQU1ELEdBUkQsTUFRTztBQUNMO0FBQ0E7QUFDQTtBQUNBLFdBQU87QUFDTCxVQUFJLEVBQUUsT0FERDtBQUVMLFNBQUcsRUFBRSxNQUFNLEVBRk47QUFHTCxlQUFTLEVBQUUsS0FITjtBQUlMLGdCQUFVLEVBQUUsRUFKUDs7QUFLTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGlCQUFXO0FBQ1QsWUFBSSxPQUFPLE9BQU8sQ0FBQyxXQUFmLEtBQStCLFVBQW5DLEVBQStDO0FBQzdDLGVBQUssT0FBTyxDQUFDLEdBQWIsSUFBb0IsT0FBTyxDQUFDLFdBQVIsQ0FBb0IsSUFBcEIsQ0FBeUIsSUFBekIsQ0FBcEI7QUFDRDtBQUNGLE9BbkJJOztBQW9CTCxjQUFRLENBQUMsS0FBRCxFQUE4QjtBQUNwQyxhQUFLLENBQUMsY0FBTixDQUFxQixPQUFPLENBQUMsR0FBN0IsRUFBa0MsT0FBbEM7QUFDRDs7QUF0QkksS0FBUDtBQXdCRDtBQUNGLENBMUNMOztBQTRDQSxNQUFNLGNBQWMsR0FDaEIsQ0FBQyxPQUFELEVBQStCLEtBQS9CLEVBQThDLElBQTlDLEtBQW1FO0FBQ2hFLE9BQUssQ0FBQyxXQUFOLENBQ0ksY0FESixDQUNtQixJQURuQixFQUN5QixPQUR6QjtBQUVGLENBSkw7QUFNQTs7Ozs7Ozs7O0FBT00sU0FBVSxRQUFWLENBQW1CLE9BQW5CLEVBQWdEO0FBQ3BEO0FBQ0EsU0FBTyxDQUFDLGlCQUFELEVBQXlDLElBQXpDLEtBQ0ssSUFBSSxLQUFLLFNBQVYsR0FDUCxjQUFjLENBQUMsT0FBRCxFQUFXLGlCQUFYLEVBQXdDLElBQXhDLENBRFAsR0FFUCxnQkFBZ0IsQ0FBQyxPQUFELEVBQVcsaUJBQVgsQ0FIcEI7QUFJRDtBQUVEOzs7Ozs7O0FBTU0sU0FBVSxLQUFWLENBQWdCLFFBQWhCLEVBQWdDO0FBQ3BDLFNBQU8sQ0FBQyxpQkFBRCxFQUNDO0FBQ0EsTUFGRCxLQUU0QjtBQUNqQyxVQUFNLFVBQVUsR0FBRztBQUNqQixTQUFHO0FBQ0QsZUFBTyxLQUFLLFVBQUwsQ0FBZ0IsYUFBaEIsQ0FBOEIsUUFBOUIsQ0FBUDtBQUNELE9BSGdCOztBQUlqQixnQkFBVSxFQUFFLElBSks7QUFLakIsa0JBQVksRUFBRTtBQUxHLEtBQW5CO0FBT0EsV0FBUSxJQUFJLEtBQUssU0FBVixHQUNILFdBQVcsQ0FBQyxVQUFELEVBQWEsaUJBQWIsRUFBMEMsSUFBMUMsQ0FEUixHQUVILGFBQWEsQ0FBQyxVQUFELEVBQWEsaUJBQWIsQ0FGakI7QUFHRCxHQWJEO0FBY0Q7QUFFRDs7Ozs7OztBQU1NLFNBQVUsUUFBVixDQUFtQixRQUFuQixFQUFtQztBQUN2QyxTQUFPLENBQUMsaUJBQUQsRUFDQztBQUNBLE1BRkQsS0FFNEI7QUFDakMsVUFBTSxVQUFVLEdBQUc7QUFDakIsU0FBRztBQUNELGVBQU8sS0FBSyxVQUFMLENBQWdCLGdCQUFoQixDQUFpQyxRQUFqQyxDQUFQO0FBQ0QsT0FIZ0I7O0FBSWpCLGdCQUFVLEVBQUUsSUFKSztBQUtqQixrQkFBWSxFQUFFO0FBTEcsS0FBbkI7QUFPQSxXQUFRLElBQUksS0FBSyxTQUFWLEdBQ0gsV0FBVyxDQUFDLFVBQUQsRUFBYSxpQkFBYixFQUEwQyxJQUExQyxDQURSLEdBRUgsYUFBYSxDQUFDLFVBQUQsRUFBYSxpQkFBYixDQUZqQjtBQUdELEdBYkQ7QUFjRDs7QUFFRCxNQUFNLFdBQVcsR0FDYixDQUFDLFVBQUQsRUFBaUMsS0FBakMsRUFBZ0QsSUFBaEQsS0FBcUU7QUFDbkUsUUFBTSxDQUFDLGNBQVAsQ0FBc0IsS0FBdEIsRUFBNkIsSUFBN0IsRUFBbUMsVUFBbkM7QUFDRCxDQUhMOztBQUtBLE1BQU0sYUFBYSxHQUFHLENBQUMsVUFBRCxFQUFpQyxPQUFqQyxNQUNqQjtBQUNDLE1BQUksRUFBRSxRQURQO0FBRUMsV0FBUyxFQUFFLFdBRlo7QUFHQyxLQUFHLEVBQUUsT0FBTyxDQUFDLEdBSGQ7QUFJQztBQUpELENBRGlCLENBQXRCOztBQVFBLE1BQU0sb0JBQW9CLEdBQ3RCLENBQUMsT0FBRCxFQUFtQyxPQUFuQyxLQUE0RDtBQUMxRCwyQkFDSyxPQURMLEVBQ1k7QUFDVixZQUFRLENBQUMsS0FBRCxFQUE4QjtBQUNwQyxZQUFNLENBQUMsTUFBUCxDQUNJLEtBQUssQ0FBQyxTQUFOLENBQWdCLE9BQU8sQ0FBQyxHQUF4QixDQURKLEVBQzJELE9BRDNEO0FBRUQ7O0FBSlMsR0FEWjtBQU9ELENBVEw7O0FBV0EsTUFBTSxrQkFBa0IsR0FDcEI7QUFDQSxDQUFDLE9BQUQsRUFBbUMsS0FBbkMsRUFBK0MsSUFBL0MsS0FBb0U7QUFDbEUsUUFBTSxDQUFDLE1BQVAsQ0FBYyxLQUFLLENBQUMsSUFBRCxDQUFuQixFQUEyQixPQUEzQjtBQUNELENBSkw7QUFNQTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQTBCTyxNQUFNLFlBQVksR0FBSSxPQUFELElBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQyxDQUFDLGlCQUFELEVBQXlDLElBQXpDLEtBQ0ssSUFBSSxLQUFLLFNBQVYsR0FDQSxrQkFBa0IsQ0FBQyxPQUFELEVBQVUsaUJBQVYsRUFBdUMsSUFBdkMsQ0FEbEIsR0FFQSxvQkFBb0IsQ0FBQyxPQUFELEVBQVUsaUJBQVYsQ0FUdEIsQzs7QUNuUFA7Ozs7Ozs7Ozs7QUFXTyxNQUFNLDJCQUEyQixHQUNuQyx3QkFBd0IsUUFBUSxDQUFDLFNBQWxDLElBQ0MsYUFBYSxhQUFhLENBQUMsU0FGekI7QUFJUCxNQUFNLGlCQUFpQixHQUFHLE1BQU0sRUFBaEM7QUFFTSxNQUFPLFNBQVAsQ0FBZ0I7QUFLcEIsY0FBWSxPQUFaLEVBQTZCLFNBQTdCLEVBQThDO0FBQzVDLFFBQUksU0FBUyxLQUFLLGlCQUFsQixFQUFxQztBQUNuQyxZQUFNLElBQUksS0FBSixDQUNGLG1FQURFLENBQU47QUFFRDs7QUFDRCxTQUFLLE9BQUwsR0FBZSxPQUFmO0FBQ0QsR0FYbUIsQ0FhcEI7QUFDQTs7O0FBQ0EsTUFBSSxVQUFKLEdBQWM7QUFDWixRQUFJLEtBQUssV0FBTCxLQUFxQixTQUF6QixFQUFvQztBQUNsQztBQUNBO0FBQ0EsVUFBSSwyQkFBSixFQUFpQztBQUMvQixhQUFLLFdBQUwsR0FBbUIsSUFBSSxhQUFKLEVBQW5COztBQUNBLGFBQUssV0FBTCxDQUFpQixXQUFqQixDQUE2QixLQUFLLE9BQWxDO0FBQ0QsT0FIRCxNQUdPO0FBQ0wsYUFBSyxXQUFMLEdBQW1CLElBQW5CO0FBQ0Q7QUFDRjs7QUFDRCxXQUFPLEtBQUssV0FBWjtBQUNEOztBQUVELFVBQVE7QUFDTixXQUFPLEtBQUssT0FBWjtBQUNEOztBQS9CbUI7QUFrQ3RCOzs7Ozs7OztBQU9PLE1BQU0sU0FBUyxHQUFJLEtBQUQsSUFBbUI7QUFDMUMsU0FBTyxJQUFJLFNBQUosQ0FBYyxNQUFNLENBQUMsS0FBRCxDQUFwQixFQUE2QixpQkFBN0IsQ0FBUDtBQUNELENBRk07O0FBSVAsTUFBTSxpQkFBaUIsR0FBSSxLQUFELElBQXFCO0FBQzdDLE1BQUksS0FBSyxZQUFZLFNBQXJCLEVBQWdDO0FBQzlCLFdBQU8sS0FBSyxDQUFDLE9BQWI7QUFDRCxHQUZELE1BRU87QUFDTCxVQUFNLElBQUksS0FBSiwyRUFFRSxLQUZGLHVHQUFOO0FBSUQ7QUFDRixDQVREO0FBV0E7Ozs7Ozs7O0FBTU8sTUFBTSxHQUFHLEdBQUcsQ0FBQyxPQUFELEVBQWdDLEdBQUcsTUFBbkMsS0FBMEQ7QUFDM0UsUUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQVAsQ0FDWixDQUFDLEdBQUQsRUFBTSxDQUFOLEVBQVMsR0FBVCxLQUFpQixHQUFHLEdBQUcsaUJBQWlCLENBQUMsQ0FBRCxDQUF2QixHQUE2QixPQUFPLENBQUMsR0FBRyxHQUFHLENBQVAsQ0FEekMsRUFFWixPQUFPLENBQUMsQ0FBRCxDQUZLLENBQWhCO0FBR0EsU0FBTyxJQUFJLFNBQUosQ0FBYyxPQUFkLEVBQXVCLGlCQUF2QixDQUFQO0FBQ0QsQ0FMTSxDOztBQy9FUDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7Ozs7QUFhQTtBQUNBO0FBRUE7QUFFQTtBQUNBO0FBQ0E7QUFDQTtDQVNBO0FBQ0E7QUFDQTs7QUFDQSxDQUFDLE1BQU0sQ0FBQyxvQkFBRCxDQUFOLEtBQWlDLE1BQU0sQ0FBQyxvQkFBRCxDQUFOLEdBQStCLEVBQWhFLENBQUQsRUFDSyxJQURMLENBQ1UsT0FEVjtBQUtBOzs7Ozs7QUFLQSxTQUFTLFNBQVQsQ0FDSSxNQURKLEVBQzRCLFNBQXNCLEVBRGxELEVBQ29EO0FBQ2xELE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBUixFQUFXLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBaEMsRUFBd0MsQ0FBQyxHQUFHLE1BQTVDLEVBQW9ELENBQUMsRUFBckQsRUFBeUQ7QUFDdkQsVUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUQsQ0FBcEI7O0FBQ0EsUUFBSSxLQUFLLENBQUMsT0FBTixDQUFjLEtBQWQsQ0FBSixFQUEwQjtBQUN4QixlQUFTLENBQUMsS0FBRCxFQUFRLE1BQVIsQ0FBVDtBQUNELEtBRkQsTUFFTztBQUNMLFlBQU0sQ0FBQyxJQUFQLENBQVksS0FBWjtBQUNEO0FBQ0Y7O0FBQ0QsU0FBTyxNQUFQO0FBQ0Q7QUFFRDs7O0FBQ0EsTUFBTSxhQUFhLEdBQUksTUFBRCxJQUNsQixNQUFNLENBQUMsSUFBUCxHQUFjLE1BQU0sQ0FBQyxJQUFQLENBQVksUUFBWixDQUFkLEdBQXNDLFNBQVMsQ0FBQyxNQUFELENBRG5EOztBQUdNLE1BQU8sc0JBQVAsU0FBMEIsZUFBMUIsQ0FBeUM7QUF5QjdDO0FBQ1UsU0FBTyxRQUFQLEdBQWU7QUFDdkIsVUFBTSxRQUFOLEdBRHVCLENBRXZCO0FBQ0E7O0FBQ0EsU0FBSyxPQUFMLEdBQ0ksS0FBSyxjQUFMLENBQW9CLHlCQUF5QixDQUFDLFFBQUQsRUFBVyxJQUFYLENBQTdDLElBQ0EsS0FBSyxnQkFBTCxFQURBLEdBRUEsS0FBSyxPQUFMLElBQWdCLEVBSHBCO0FBSUQ7QUFFRDs7O0FBQ1EsU0FBTyxnQkFBUCxHQUF1QjtBQUM3QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFNLFVBQVUsR0FBRyxLQUFLLE1BQXhCO0FBQ0EsVUFBTSxNQUFNLEdBQWdCLEVBQTVCOztBQUNBLFFBQUksS0FBSyxDQUFDLE9BQU4sQ0FBYyxVQUFkLENBQUosRUFBK0I7QUFDN0IsWUFBTSxVQUFVLEdBQUcsYUFBYSxDQUFDLFVBQUQsQ0FBaEMsQ0FENkIsQ0FFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQSxZQUFNLFFBQVEsR0FBRyxVQUFVLENBQUMsV0FBWCxDQUF1QixDQUFDLEdBQUQsRUFBTSxDQUFOLEtBQVc7QUFDakQsV0FBRyxDQUFDLEdBQUosQ0FBUSxDQUFSLEVBRGlELENBRWpEOztBQUNBLGVBQU8sR0FBUDtBQUNELE9BSmdCLEVBSWQsSUFBSSxHQUFKLEVBSmMsQ0FBakIsQ0FQNkIsQ0FZN0I7O0FBQ0EsY0FBUSxDQUFDLE9BQVQsQ0FBa0IsQ0FBRCxJQUFPLE1BQU0sQ0FBQyxPQUFQLENBQWUsQ0FBZixDQUF4QjtBQUNELEtBZEQsTUFjTyxJQUFJLFVBQUosRUFBZ0I7QUFDckIsWUFBTSxDQUFDLElBQVAsQ0FBWSxVQUFaO0FBQ0Q7O0FBQ0QsV0FBTyxNQUFQO0FBQ0Q7QUFVRDs7Ozs7OztBQUtVLFlBQVU7QUFDbEIsVUFBTSxVQUFOO0FBQ0MsU0FBa0QsVUFBbEQsR0FDRyxLQUFLLGdCQUFMLEVBREgsQ0FGaUIsQ0FJbEI7QUFDQTtBQUNBOztBQUNBLFFBQUksTUFBTSxDQUFDLFVBQVAsSUFBcUIsS0FBSyxVQUFMLFlBQTJCLE1BQU0sQ0FBQyxVQUEzRCxFQUF1RTtBQUNyRSxXQUFLLFdBQUw7QUFDRDtBQUNGO0FBRUQ7Ozs7Ozs7OztBQU9VLGtCQUFnQjtBQUN4QixXQUFPLEtBQUssWUFBTCxDQUFrQjtBQUFDLFVBQUksRUFBRTtBQUFQLEtBQWxCLENBQVA7QUFDRDtBQUVEOzs7Ozs7Ozs7OztBQVNVLGFBQVc7QUFDbkIsVUFBTSxNQUFNLEdBQUksS0FBSyxXQUFMLENBQXVDLE9BQXZEOztBQUNBLFFBQUksTUFBTSxDQUFDLE1BQVAsS0FBa0IsQ0FBdEIsRUFBeUI7QUFDdkI7QUFDRCxLQUprQixDQUtuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSxRQUFJLE1BQU0sQ0FBQyxRQUFQLEtBQW9CLFNBQXBCLElBQWlDLENBQUMsTUFBTSxDQUFDLFFBQVAsQ0FBZ0IsWUFBdEQsRUFBb0U7QUFDbEUsWUFBTSxDQUFDLFFBQVAsQ0FBZ0IsV0FBaEIsQ0FBNEIscUJBQTVCLENBQ0ksTUFBTSxDQUFDLEdBQVAsQ0FBWSxDQUFELElBQU8sQ0FBQyxDQUFDLE9BQXBCLENBREosRUFDa0MsS0FBSyxTQUR2QztBQUVELEtBSEQsTUFHTyxJQUFJLDJCQUFKLEVBQWlDO0FBQ3JDLFdBQUssVUFBTCxDQUErQixrQkFBL0IsR0FDRyxNQUFNLENBQUMsR0FBUCxDQUFZLENBQUQsSUFBTyxDQUFDLENBQUMsVUFBcEIsQ0FESDtBQUVGLEtBSE0sTUFHQTtBQUNMO0FBQ0E7QUFDQSxXQUFLLDRCQUFMLEdBQW9DLElBQXBDO0FBQ0Q7QUFDRjs7QUFFRCxtQkFBaUI7QUFDZixVQUFNLGlCQUFOLEdBRGUsQ0FFZjtBQUNBOztBQUNBLFFBQUksS0FBSyxVQUFMLElBQW1CLE1BQU0sQ0FBQyxRQUFQLEtBQW9CLFNBQTNDLEVBQXNEO0FBQ3BELFlBQU0sQ0FBQyxRQUFQLENBQWdCLFlBQWhCLENBQTZCLElBQTdCO0FBQ0Q7QUFDRjtBQUVEOzs7Ozs7OztBQU1VLFFBQU0sQ0FBQyxpQkFBRCxFQUFrQztBQUNoRCxVQUFNLE1BQU4sQ0FBYSxpQkFBYjtBQUNBLFVBQU0sY0FBYyxHQUFHLEtBQUssTUFBTCxFQUF2Qjs7QUFDQSxRQUFJLGNBQWMsWUFBWSxrQ0FBOUIsRUFBOEM7QUFDM0MsV0FBSyxXQUFMLENBQ0ksTUFESixDQUVPLGNBRlAsRUFHTyxLQUFLLFVBSFosRUFJTztBQUFDLGlCQUFTLEVBQUUsS0FBSyxTQUFqQjtBQUE0QixvQkFBWSxFQUFFO0FBQTFDLE9BSlA7QUFLRixLQVQrQyxDQVVoRDtBQUNBO0FBQ0E7OztBQUNBLFFBQUksS0FBSyw0QkFBVCxFQUF1QztBQUNyQyxXQUFLLDRCQUFMLEdBQW9DLEtBQXBDOztBQUNDLFdBQUssV0FBTCxDQUF1QyxPQUF2QyxDQUFnRCxPQUFoRCxDQUF5RCxDQUFELElBQU07QUFDN0QsY0FBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsT0FBdkIsQ0FBZDtBQUNBLGFBQUssQ0FBQyxXQUFOLEdBQW9CLENBQUMsQ0FBQyxPQUF0QjtBQUNBLGFBQUssVUFBTCxDQUFnQixXQUFoQixDQUE0QixLQUE1QjtBQUNELE9BSkE7QUFLRjtBQUNGO0FBRUQ7Ozs7Ozs7QUFLVSxRQUFNLElBQ2Y7O0FBbEw0QztBQUM3Qzs7Ozs7QUFJaUIsbUNBQVksSUFBWjtBQUVqQjs7Ozs7Ozs7O0FBUU8sZ0NBQVMsbUJBQVQsQzs7Ozs7OztBQzNFVDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0FBb0JBOzs7O0FBSU8sTUFBTSxNQUFNLG1CQUFZLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTCxFQUFELENBQU4sQ0FBc0IsS0FBdEIsQ0FBNEIsQ0FBNUIsQ0FBWixPQUFaO0FBRVA7Ozs7O0FBSU8sTUFBTSxVQUFVLGlCQUFVLE1BQVYsUUFBaEI7QUFFQSxNQUFNLFdBQVcsR0FBRyxJQUFJLE1BQUosV0FBYyxNQUFkLGNBQXdCLFVBQXhCLEVBQXBCO0FBRVA7Ozs7QUFHTyxNQUFNLG9CQUFvQixHQUFHLE9BQTdCO0FBRVA7Ozs7QUFHTSxNQUFPLFFBQVAsQ0FBZTtBQUluQixjQUFZLE1BQVosRUFBb0MsT0FBcEMsRUFBZ0U7QUFIaEUsaUJBQXdCLEVBQXhCO0FBSUUsU0FBSyxPQUFMLEdBQWUsT0FBZjtBQUNBLFFBQUksS0FBSyxHQUFHLENBQUMsQ0FBYjtBQUNBLFFBQUksU0FBUyxHQUFHLENBQWhCO0FBQ0EsVUFBTSxhQUFhLEdBQVcsRUFBOUI7O0FBQ0EsVUFBTSxnQkFBZ0IsR0FBSSxRQUFELElBQWtDO0FBQ3pELFlBQU0sT0FBTyxHQUFHLFFBQVEsQ0FBQyxPQUF6QixDQUR5RCxDQUV6RDtBQUNBOztBQUNBLFlBQU0sTUFBTSxHQUFHLFFBQVEsQ0FBQyxnQkFBVCxDQUNYLE9BRFcsRUFFWDtBQUFJO0FBRk8sUUFHWCxJQUhXLEVBSVgsS0FKVyxDQUFmLENBSnlELENBU3pEO0FBQ0E7QUFDQTs7QUFDQSxVQUFJLGFBQWEsR0FBRyxDQUFwQjs7QUFDQSxhQUFPLE1BQU0sQ0FBQyxRQUFQLEVBQVAsRUFBMEI7QUFDeEIsYUFBSztBQUNMLGNBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxXQUFwQjs7QUFDQSxZQUFJLElBQUksQ0FBQyxRQUFMLEtBQWtCO0FBQUU7QUFBeEIsVUFBaUQ7QUFDL0MsZ0JBQUssSUFBZ0IsQ0FBQyxhQUFqQixFQUFMLEVBQXVDO0FBQ3JDLG9CQUFNLFVBQVUsR0FBSSxJQUFnQixDQUFDLFVBQXJDLENBRHFDLENBRXJDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0Esa0JBQUksS0FBSyxHQUFHLENBQVo7O0FBQ0EsbUJBQUssSUFBSSxDQUFDLEdBQUcsQ0FBYixFQUFnQixDQUFDLEdBQUcsVUFBVSxDQUFDLE1BQS9CLEVBQXVDLENBQUMsRUFBeEMsRUFBNEM7QUFDMUMsb0JBQUksVUFBVSxDQUFDLENBQUQsQ0FBVixDQUFjLEtBQWQsQ0FBb0IsT0FBcEIsQ0FBNEIsTUFBNUIsS0FBdUMsQ0FBM0MsRUFBOEM7QUFDNUMsdUJBQUs7QUFDTjtBQUNGOztBQUNELHFCQUFPLEtBQUssS0FBSyxDQUFqQixFQUFvQjtBQUNsQjtBQUNBO0FBQ0Esc0JBQU0sYUFBYSxHQUFHLE1BQU0sQ0FBQyxPQUFQLENBQWUsU0FBZixDQUF0QixDQUhrQixDQUlsQjs7QUFDQSxzQkFBTSxJQUFJLEdBQUcsc0JBQXNCLENBQUMsSUFBdkIsQ0FBNEIsYUFBNUIsRUFBNEMsQ0FBNUMsQ0FBYixDQUxrQixDQU1sQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLHNCQUFNLG1CQUFtQixHQUNyQixJQUFJLENBQUMsV0FBTCxLQUFxQixvQkFEekI7QUFFQSxzQkFBTSxjQUFjLEdBQ2YsSUFBZ0IsQ0FBQyxZQUFqQixDQUE4QixtQkFBOUIsQ0FETDtBQUVBLHNCQUFNLE9BQU8sR0FBRyxjQUFjLENBQUMsS0FBZixDQUFxQixXQUFyQixDQUFoQjtBQUNBLHFCQUFLLEtBQUwsQ0FBVyxJQUFYLENBQWdCO0FBQUMsc0JBQUksRUFBRSxXQUFQO0FBQW9CLHVCQUFwQjtBQUEyQixzQkFBM0I7QUFBaUM7QUFBakMsaUJBQWhCO0FBQ0Msb0JBQWdCLENBQUMsZUFBakIsQ0FBaUMsbUJBQWpDO0FBQ0QseUJBQVMsSUFBSSxPQUFPLENBQUMsTUFBUixHQUFpQixDQUE5QjtBQUNEO0FBQ0Y7O0FBQ0QsZ0JBQUssSUFBZ0IsQ0FBQyxPQUFqQixLQUE2QixVQUFsQyxFQUE4QztBQUM1Qyw4QkFBZ0IsQ0FBQyxJQUFELENBQWhCO0FBQ0Q7QUFDRixXQXRDRCxNQXNDTyxJQUFJLElBQUksQ0FBQyxRQUFMLEtBQWtCO0FBQUU7QUFBeEIsVUFBOEM7QUFDbkQsa0JBQU0sSUFBSSxHQUFJLElBQWEsQ0FBQyxJQUE1Qjs7QUFDQSxnQkFBSSxJQUFJLENBQUMsT0FBTCxDQUFhLE1BQWIsS0FBd0IsQ0FBNUIsRUFBK0I7QUFDN0Isb0JBQU0sTUFBTSxHQUFHLElBQUksQ0FBQyxVQUFwQjtBQUNBLG9CQUFNLE9BQU8sR0FBRyxJQUFJLENBQUMsS0FBTCxDQUFXLFdBQVgsQ0FBaEI7QUFDQSxvQkFBTSxTQUFTLEdBQUcsT0FBTyxDQUFDLE1BQVIsR0FBaUIsQ0FBbkMsQ0FINkIsQ0FJN0I7QUFDQTs7QUFDQSxtQkFBSyxJQUFJLENBQUMsR0FBRyxDQUFiLEVBQWdCLENBQUMsR0FBRyxTQUFwQixFQUErQixDQUFDLEVBQWhDLEVBQW9DO0FBQ2xDLHNCQUFNLENBQUMsWUFBUCxDQUNLLE9BQU8sQ0FBQyxDQUFELENBQVAsS0FBZSxFQUFoQixHQUFzQixZQUFZLEVBQWxDLEdBQ3NCLFFBQVEsQ0FBQyxjQUFULENBQXdCLE9BQU8sQ0FBQyxDQUFELENBQS9CLENBRjFCLEVBR0ksSUFISjtBQUlBLHFCQUFLLEtBQUwsQ0FBVyxJQUFYLENBQWdCO0FBQUMsc0JBQUksRUFBRSxNQUFQO0FBQWUsdUJBQUssRUFBRSxFQUFFO0FBQXhCLGlCQUFoQjtBQUNELGVBWjRCLENBYTdCO0FBQ0E7OztBQUNBLGtCQUFJLE9BQU8sQ0FBQyxTQUFELENBQVAsS0FBdUIsRUFBM0IsRUFBK0I7QUFDN0Isc0JBQU0sQ0FBQyxZQUFQLENBQW9CLFlBQVksRUFBaEMsRUFBb0MsSUFBcEM7QUFDQSw2QkFBYSxDQUFDLElBQWQsQ0FBbUIsSUFBbkI7QUFDRCxlQUhELE1BR087QUFDSixvQkFBYSxDQUFDLElBQWQsR0FBcUIsT0FBTyxDQUFDLFNBQUQsQ0FBNUI7QUFDRixlQXBCNEIsQ0FxQjdCOzs7QUFDQSx1QkFBUyxJQUFJLFNBQWI7QUFDRDtBQUNGLFdBMUJNLE1BMEJBLElBQUksSUFBSSxDQUFDLFFBQUwsS0FBa0I7QUFBRTtBQUF4QixVQUFpRDtBQUN0RCxnQkFBSyxJQUFnQixDQUFDLElBQWpCLEtBQTBCLE1BQS9CLEVBQXVDO0FBQ3JDLG9CQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsVUFBcEIsQ0FEcUMsQ0FFckM7QUFDQTtBQUNBO0FBQ0E7O0FBQ0Esa0JBQUksSUFBSSxDQUFDLGVBQUwsS0FBeUIsSUFBekIsSUFBaUMsS0FBSyxLQUFLLGFBQS9DLEVBQThEO0FBQzVELHFCQUFLO0FBQ0wsc0JBQU0sQ0FBQyxZQUFQLENBQW9CLFlBQVksRUFBaEMsRUFBb0MsSUFBcEM7QUFDRDs7QUFDRCwyQkFBYSxHQUFHLEtBQWhCO0FBQ0EsbUJBQUssS0FBTCxDQUFXLElBQVgsQ0FBZ0I7QUFBQyxvQkFBSSxFQUFFLE1BQVA7QUFBZTtBQUFmLGVBQWhCLEVBWHFDLENBWXJDO0FBQ0E7O0FBQ0Esa0JBQUksSUFBSSxDQUFDLFdBQUwsS0FBcUIsSUFBekIsRUFBK0I7QUFDNUIsb0JBQWdCLENBQUMsSUFBakIsR0FBd0IsRUFBeEI7QUFDRixlQUZELE1BRU87QUFDTCw2QkFBYSxDQUFDLElBQWQsQ0FBbUIsSUFBbkI7QUFDQSxxQkFBSztBQUNOOztBQUNELHVCQUFTO0FBQ1YsYUFyQkQsTUFxQk87QUFDTCxrQkFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFUOztBQUNBLHFCQUFPLENBQUMsQ0FBQyxHQUFJLElBQWdCLENBQUMsSUFBakIsQ0FBdUIsT0FBdkIsQ0FBK0IsTUFBL0IsRUFBdUMsQ0FBQyxHQUFHLENBQTNDLENBQU4sTUFDQSxDQUFDLENBRFIsRUFDVztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQUssS0FBTCxDQUFXLElBQVgsQ0FBZ0I7QUFBQyxzQkFBSSxFQUFFLE1BQVA7QUFBZSx1QkFBSyxFQUFFLENBQUM7QUFBdkIsaUJBQWhCO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7QUFDRixLQW5IRDs7QUFvSEEsb0JBQWdCLENBQUMsT0FBRCxDQUFoQixDQXpIOEQsQ0EwSDlEOzs7QUFDQSxTQUFLLE1BQU0sQ0FBWCxJQUFnQixhQUFoQixFQUErQjtBQUM3QixPQUFDLENBQUMsVUFBRixDQUFjLFdBQWQsQ0FBMEIsQ0FBMUI7QUFDRDtBQUNGOztBQWxJa0I7QUEwSmQsTUFBTSxvQkFBb0IsR0FBSSxJQUFELElBQXdCLElBQUksQ0FBQyxLQUFMLEtBQWUsQ0FBQyxDQUFyRSxDLENBRVA7QUFDQTs7QUFDTyxNQUFNLFlBQVksR0FBRyxNQUFNLFFBQVEsQ0FBQyxhQUFULENBQXVCLEVBQXZCLENBQTNCO0FBRVA7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBeUJPLE1BQU0sc0JBQXNCLEdBQy9CLDRKQURHLEM7Ozs7Ozs7QUNuT1A7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7Ozs7OztBQWNBOzs7QUFJQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFJTyxNQUFNLFdBQVcsR0FBSSxLQUFELElBQXVDO0FBQ2hFLFNBQ0ksS0FBSyxLQUFLLElBQVYsSUFDQSxFQUFFLE9BQU8sS0FBUCxLQUFpQixRQUFqQixJQUE2QixPQUFPLEtBQVAsS0FBaUIsVUFBaEQsQ0FGSjtBQUdELENBSk07QUFNUDs7Ozs7QUFJTSxNQUFPLGtCQUFQLENBQXlCO0FBTzdCLGNBQVksT0FBWixFQUE4QixJQUE5QixFQUE0QyxPQUE1QyxFQUE2RDtBQUY3RCxpQkFBUSxJQUFSO0FBR0UsU0FBSyxPQUFMLEdBQWUsT0FBZjtBQUNBLFNBQUssSUFBTCxHQUFZLElBQVo7QUFDQSxTQUFLLE9BQUwsR0FBZSxPQUFmO0FBQ0EsU0FBSyxLQUFMLEdBQWEsRUFBYjs7QUFDQSxTQUFLLElBQUksQ0FBQyxHQUFHLENBQWIsRUFBZ0IsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFSLEdBQWlCLENBQXJDLEVBQXdDLENBQUMsRUFBekMsRUFBNkM7QUFDM0MsV0FBSyxLQUFMLENBQVcsQ0FBWCxJQUFnQixLQUFLLFdBQUwsRUFBaEI7QUFDRDtBQUNGO0FBRUQ7Ozs7O0FBR1UsYUFBVztBQUNuQixXQUFPLElBQUksYUFBSixDQUFrQixJQUFsQixDQUFQO0FBQ0Q7O0FBRVMsV0FBUztBQUNqQixVQUFNLE9BQU8sR0FBRyxLQUFLLE9BQXJCO0FBQ0EsVUFBTSxDQUFDLEdBQUcsT0FBTyxDQUFDLE1BQVIsR0FBaUIsQ0FBM0I7QUFDQSxRQUFJLElBQUksR0FBRyxFQUFYOztBQUVBLFNBQUssSUFBSSxDQUFDLEdBQUcsQ0FBYixFQUFnQixDQUFDLEdBQUcsQ0FBcEIsRUFBdUIsQ0FBQyxFQUF4QixFQUE0QjtBQUMxQixVQUFJLElBQUksT0FBTyxDQUFDLENBQUQsQ0FBZjtBQUNBLFlBQU0sSUFBSSxHQUFHLEtBQUssS0FBTCxDQUFXLENBQVgsQ0FBYjs7QUFDQSxVQUFJLElBQUksS0FBSyxTQUFiLEVBQXdCO0FBQ3RCLGNBQU0sQ0FBQyxHQUFHLElBQUksQ0FBQyxLQUFmOztBQUNBLFlBQUksQ0FBQyxJQUFJLElBQUwsS0FDQyxLQUFLLENBQUMsT0FBTixDQUFjLENBQWQsS0FDQTtBQUNBLGVBQU8sQ0FBUCxLQUFhLFFBQWIsSUFBMEIsQ0FBUyxDQUFDLE1BQU0sQ0FBQyxRQUFSLENBSHBDLENBQUosRUFHNEQ7QUFDMUQsZUFBSyxNQUFNLENBQVgsSUFBZ0IsQ0FBaEIsRUFBd0M7QUFDdEMsZ0JBQUksSUFBSSxPQUFPLENBQVAsS0FBYSxRQUFiLEdBQXdCLENBQXhCLEdBQTRCLE1BQU0sQ0FBQyxDQUFELENBQTFDO0FBQ0Q7QUFDRixTQVBELE1BT087QUFDTCxjQUFJLElBQUksT0FBTyxDQUFQLEtBQWEsUUFBYixHQUF3QixDQUF4QixHQUE0QixNQUFNLENBQUMsQ0FBRCxDQUExQztBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxRQUFJLElBQUksT0FBTyxDQUFDLENBQUQsQ0FBZjtBQUNBLFdBQU8sSUFBUDtBQUNEOztBQUVELFFBQU07QUFDSixRQUFJLEtBQUssS0FBVCxFQUFnQjtBQUNkLFdBQUssS0FBTCxHQUFhLEtBQWI7QUFDQSxXQUFLLE9BQUwsQ0FBYSxZQUFiLENBQTBCLEtBQUssSUFBL0IsRUFBcUMsS0FBSyxTQUFMLEVBQXJDO0FBQ0Q7QUFDRjs7QUF4RDRCO0FBMkR6QixNQUFPLGFBQVAsQ0FBb0I7QUFJeEIsY0FBWSxRQUFaLEVBQXdDO0FBRnhDLGlCQUFpQixTQUFqQjtBQUdFLFNBQUssU0FBTCxHQUFpQixRQUFqQjtBQUNEOztBQUVELFVBQVEsQ0FBQyxLQUFELEVBQWU7QUFDckIsUUFBSSxLQUFLLEtBQUsseURBQVYsS0FBdUIsQ0FBQyxXQUFXLENBQUMsS0FBRCxDQUFaLElBQXVCLEtBQUssS0FBSyxLQUFLLEtBQTdELENBQUosRUFBeUU7QUFDdkUsV0FBSyxLQUFMLEdBQWEsS0FBYixDQUR1RSxDQUV2RTtBQUNBO0FBQ0E7O0FBQ0EsVUFBSSxDQUFDLHlFQUFXLENBQUMsS0FBRCxDQUFoQixFQUF5QjtBQUN2QixhQUFLLFNBQUwsQ0FBZSxLQUFmLEdBQXVCLElBQXZCO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFFBQU07QUFDSixXQUFPLHlFQUFXLENBQUMsS0FBSyxLQUFOLENBQWxCLEVBQWdDO0FBQzlCLFlBQU0sU0FBUyxHQUFHLEtBQUssS0FBdkI7QUFDQSxXQUFLLEtBQUwsR0FBYSx5REFBYjtBQUNBLGVBQVMsQ0FBQyxJQUFELENBQVQ7QUFDRDs7QUFDRCxRQUFJLEtBQUssS0FBTCxLQUFlLHlEQUFuQixFQUE2QjtBQUMzQjtBQUNEOztBQUNELFNBQUssU0FBTCxDQUFlLE1BQWY7QUFDRDs7QUE5QnVCO0FBaUNwQixNQUFPLFFBQVAsQ0FBZTtBQU9uQixjQUFZLE9BQVosRUFBa0M7QUFIbEMsaUJBQWlCLFNBQWpCO0FBQ0EseUJBQXlCLFNBQXpCO0FBR0UsU0FBSyxPQUFMLEdBQWUsT0FBZjtBQUNEO0FBRUQ7Ozs7Ozs7QUFLQSxZQUFVLENBQUMsU0FBRCxFQUFnQjtBQUN4QixTQUFLLFNBQUwsR0FBaUIsU0FBUyxDQUFDLFdBQVYsQ0FBc0IseUVBQVksRUFBbEMsQ0FBakI7QUFDQSxTQUFLLE9BQUwsR0FBZSxTQUFTLENBQUMsV0FBVixDQUFzQix5RUFBWSxFQUFsQyxDQUFmO0FBQ0Q7QUFFRDs7Ozs7Ozs7O0FBT0EsaUJBQWUsQ0FBQyxHQUFELEVBQVU7QUFDdkIsU0FBSyxTQUFMLEdBQWlCLEdBQWpCO0FBQ0EsU0FBSyxPQUFMLEdBQWUsR0FBRyxDQUFDLFdBQW5CO0FBQ0Q7QUFFRDs7Ozs7OztBQUtBLGdCQUFjLENBQUMsSUFBRCxFQUFlO0FBQzNCLFFBQUksQ0FBQyxPQUFMLENBQWEsS0FBSyxTQUFMLEdBQWlCLHlFQUFZLEVBQTFDOztBQUNBLFFBQUksQ0FBQyxPQUFMLENBQWEsS0FBSyxPQUFMLEdBQWUseUVBQVksRUFBeEM7QUFDRDtBQUVEOzs7Ozs7O0FBS0EsaUJBQWUsQ0FBQyxHQUFELEVBQWM7QUFDM0IsT0FBRyxDQUFDLE9BQUosQ0FBWSxLQUFLLFNBQUwsR0FBaUIseUVBQVksRUFBekM7O0FBQ0EsU0FBSyxPQUFMLEdBQWUsR0FBRyxDQUFDLE9BQW5CO0FBQ0EsT0FBRyxDQUFDLE9BQUosR0FBYyxLQUFLLFNBQW5CO0FBQ0Q7O0FBRUQsVUFBUSxDQUFDLEtBQUQsRUFBZTtBQUNyQixTQUFLLGFBQUwsR0FBcUIsS0FBckI7QUFDRDs7QUFFRCxRQUFNO0FBQ0osV0FBTyx5RUFBVyxDQUFDLEtBQUssYUFBTixDQUFsQixFQUF3QztBQUN0QyxZQUFNLFNBQVMsR0FBRyxLQUFLLGFBQXZCO0FBQ0EsV0FBSyxhQUFMLEdBQXFCLHlEQUFyQjtBQUNBLGVBQVMsQ0FBQyxJQUFELENBQVQ7QUFDRDs7QUFDRCxVQUFNLEtBQUssR0FBRyxLQUFLLGFBQW5COztBQUNBLFFBQUksS0FBSyxLQUFLLHlEQUFkLEVBQXdCO0FBQ3RCO0FBQ0Q7O0FBQ0QsUUFBSSxXQUFXLENBQUMsS0FBRCxDQUFmLEVBQXdCO0FBQ3RCLFVBQUksS0FBSyxLQUFLLEtBQUssS0FBbkIsRUFBMEI7QUFDeEIsYUFBSyxXQUFMLENBQWlCLEtBQWpCO0FBQ0Q7QUFDRixLQUpELE1BSU8sSUFBSSxLQUFLLFlBQVksMEVBQXJCLEVBQXFDO0FBQzFDLFdBQUsscUJBQUwsQ0FBMkIsS0FBM0I7QUFDRCxLQUZNLE1BRUEsSUFBSSxLQUFLLFlBQVksSUFBckIsRUFBMkI7QUFDaEMsV0FBSyxXQUFMLENBQWlCLEtBQWpCO0FBQ0QsS0FGTSxNQUVBLElBQ0gsS0FBSyxDQUFDLE9BQU4sQ0FBYyxLQUFkLEtBQ0E7QUFDQyxTQUFhLENBQUMsTUFBTSxDQUFDLFFBQVIsQ0FIWCxFQUc4QjtBQUNuQyxXQUFLLGVBQUwsQ0FBcUIsS0FBckI7QUFDRCxLQUxNLE1BS0EsSUFBSSxLQUFLLEtBQUssd0RBQWQsRUFBdUI7QUFDNUIsV0FBSyxLQUFMLEdBQWEsd0RBQWI7QUFDQSxXQUFLLEtBQUw7QUFDRCxLQUhNLE1BR0E7QUFDTDtBQUNBLFdBQUssV0FBTCxDQUFpQixLQUFqQjtBQUNEO0FBQ0Y7O0FBRU8sU0FBTyxDQUFDLElBQUQsRUFBVztBQUN4QixTQUFLLE9BQUwsQ0FBYSxVQUFiLENBQXlCLFlBQXpCLENBQXNDLElBQXRDLEVBQTRDLEtBQUssT0FBakQ7QUFDRDs7QUFFTyxhQUFXLENBQUMsS0FBRCxFQUFZO0FBQzdCLFFBQUksS0FBSyxLQUFMLEtBQWUsS0FBbkIsRUFBMEI7QUFDeEI7QUFDRDs7QUFDRCxTQUFLLEtBQUw7O0FBQ0EsU0FBSyxPQUFMLENBQWEsS0FBYjs7QUFDQSxTQUFLLEtBQUwsR0FBYSxLQUFiO0FBQ0Q7O0FBRU8sYUFBVyxDQUFDLEtBQUQsRUFBZTtBQUNoQyxVQUFNLElBQUksR0FBRyxLQUFLLFNBQUwsQ0FBZSxXQUE1QjtBQUNBLFNBQUssR0FBRyxLQUFLLElBQUksSUFBVCxHQUFnQixFQUFoQixHQUFxQixLQUE3Qjs7QUFDQSxRQUFJLElBQUksS0FBSyxLQUFLLE9BQUwsQ0FBYSxlQUF0QixJQUNBLElBQUksQ0FBQyxRQUFMLEtBQWtCO0FBQUU7QUFEeEIsTUFDOEM7QUFDNUM7QUFDQTtBQUNBO0FBQ0MsWUFBYSxDQUFDLElBQWQsR0FBcUIsS0FBckI7QUFDRixPQU5ELE1BTU87QUFDTCxXQUFLLFdBQUwsQ0FBaUIsUUFBUSxDQUFDLGNBQVQsQ0FDYixPQUFPLEtBQVAsS0FBaUIsUUFBakIsR0FBNEIsS0FBNUIsR0FBb0MsTUFBTSxDQUFDLEtBQUQsQ0FEN0IsQ0FBakI7QUFFRDs7QUFDRCxTQUFLLEtBQUwsR0FBYSxLQUFiO0FBQ0Q7O0FBRU8sdUJBQXFCLENBQUMsS0FBRCxFQUFzQjtBQUNqRCxVQUFNLFFBQVEsR0FBRyxLQUFLLE9BQUwsQ0FBYSxlQUFiLENBQTZCLEtBQTdCLENBQWpCOztBQUNBLFFBQUksS0FBSyxLQUFMLFlBQXNCLDhFQUF0QixJQUNBLEtBQUssS0FBTCxDQUFXLFFBQVgsS0FBd0IsUUFENUIsRUFDc0M7QUFDcEMsV0FBSyxLQUFMLENBQVcsTUFBWCxDQUFrQixLQUFLLENBQUMsTUFBeEI7QUFDRCxLQUhELE1BR087QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLFlBQU0sUUFBUSxHQUNWLElBQUksOEVBQUosQ0FBcUIsUUFBckIsRUFBK0IsS0FBSyxDQUFDLFNBQXJDLEVBQWdELEtBQUssT0FBckQsQ0FESjs7QUFFQSxZQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBVCxFQUFqQjs7QUFDQSxjQUFRLENBQUMsTUFBVCxDQUFnQixLQUFLLENBQUMsTUFBdEI7O0FBQ0EsV0FBSyxXQUFMLENBQWlCLFFBQWpCOztBQUNBLFdBQUssS0FBTCxHQUFhLFFBQWI7QUFDRDtBQUNGOztBQUVPLGlCQUFlLENBQUMsS0FBRCxFQUF5QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFJLENBQUMsS0FBSyxDQUFDLE9BQU4sQ0FBYyxLQUFLLEtBQW5CLENBQUwsRUFBZ0M7QUFDOUIsV0FBSyxLQUFMLEdBQWEsRUFBYjtBQUNBLFdBQUssS0FBTDtBQUNELEtBZDZDLENBZ0I5QztBQUNBOzs7QUFDQSxVQUFNLFNBQVMsR0FBRyxLQUFLLEtBQXZCO0FBQ0EsUUFBSSxTQUFTLEdBQUcsQ0FBaEI7QUFDQSxRQUFJLFFBQUo7O0FBRUEsU0FBSyxNQUFNLElBQVgsSUFBbUIsS0FBbkIsRUFBMEI7QUFDeEI7QUFDQSxjQUFRLEdBQUcsU0FBUyxDQUFDLFNBQUQsQ0FBcEIsQ0FGd0IsQ0FJeEI7O0FBQ0EsVUFBSSxRQUFRLEtBQUssU0FBakIsRUFBNEI7QUFDMUIsZ0JBQVEsR0FBRyxJQUFJLFFBQUosQ0FBYSxLQUFLLE9BQWxCLENBQVg7QUFDQSxpQkFBUyxDQUFDLElBQVYsQ0FBZSxRQUFmOztBQUNBLFlBQUksU0FBUyxLQUFLLENBQWxCLEVBQXFCO0FBQ25CLGtCQUFRLENBQUMsY0FBVCxDQUF3QixJQUF4QjtBQUNELFNBRkQsTUFFTztBQUNMLGtCQUFRLENBQUMsZUFBVCxDQUF5QixTQUFTLENBQUMsU0FBUyxHQUFHLENBQWIsQ0FBbEM7QUFDRDtBQUNGOztBQUNELGNBQVEsQ0FBQyxRQUFULENBQWtCLElBQWxCO0FBQ0EsY0FBUSxDQUFDLE1BQVQ7QUFDQSxlQUFTO0FBQ1Y7O0FBRUQsUUFBSSxTQUFTLEdBQUcsU0FBUyxDQUFDLE1BQTFCLEVBQWtDO0FBQ2hDO0FBQ0EsZUFBUyxDQUFDLE1BQVYsR0FBbUIsU0FBbkI7QUFDQSxXQUFLLEtBQUwsQ0FBVyxRQUFRLElBQUksUUFBUyxDQUFDLE9BQWpDO0FBQ0Q7QUFDRjs7QUFFRCxPQUFLLENBQUMsWUFBa0IsS0FBSyxTQUF4QixFQUFpQztBQUNwQyx1RUFBVyxDQUNQLEtBQUssU0FBTCxDQUFlLFVBRFIsRUFDcUIsU0FBUyxDQUFDLFdBRC9CLEVBQzZDLEtBQUssT0FEbEQsQ0FBWDtBQUVEOztBQTdMa0I7QUFnTXJCOzs7Ozs7OztBQU9NLE1BQU8sb0JBQVAsQ0FBMkI7QUFPL0IsY0FBWSxPQUFaLEVBQThCLElBQTlCLEVBQTRDLE9BQTVDLEVBQTZEO0FBSDdELGlCQUFpQixTQUFqQjtBQUNBLHlCQUF5QixTQUF6Qjs7QUFHRSxRQUFJLE9BQU8sQ0FBQyxNQUFSLEtBQW1CLENBQW5CLElBQXdCLE9BQU8sQ0FBQyxDQUFELENBQVAsS0FBZSxFQUF2QyxJQUE2QyxPQUFPLENBQUMsQ0FBRCxDQUFQLEtBQWUsRUFBaEUsRUFBb0U7QUFDbEUsWUFBTSxJQUFJLEtBQUosQ0FDRix5REFERSxDQUFOO0FBRUQ7O0FBQ0QsU0FBSyxPQUFMLEdBQWUsT0FBZjtBQUNBLFNBQUssSUFBTCxHQUFZLElBQVo7QUFDQSxTQUFLLE9BQUwsR0FBZSxPQUFmO0FBQ0Q7O0FBRUQsVUFBUSxDQUFDLEtBQUQsRUFBZTtBQUNyQixTQUFLLGFBQUwsR0FBcUIsS0FBckI7QUFDRDs7QUFFRCxRQUFNO0FBQ0osV0FBTyx5RUFBVyxDQUFDLEtBQUssYUFBTixDQUFsQixFQUF3QztBQUN0QyxZQUFNLFNBQVMsR0FBRyxLQUFLLGFBQXZCO0FBQ0EsV0FBSyxhQUFMLEdBQXFCLHlEQUFyQjtBQUNBLGVBQVMsQ0FBQyxJQUFELENBQVQ7QUFDRDs7QUFDRCxRQUFJLEtBQUssYUFBTCxLQUF1Qix5REFBM0IsRUFBcUM7QUFDbkM7QUFDRDs7QUFDRCxVQUFNLEtBQUssR0FBRyxDQUFDLENBQUMsS0FBSyxhQUFyQjs7QUFDQSxRQUFJLEtBQUssS0FBTCxLQUFlLEtBQW5CLEVBQTBCO0FBQ3hCLFVBQUksS0FBSixFQUFXO0FBQ1QsYUFBSyxPQUFMLENBQWEsWUFBYixDQUEwQixLQUFLLElBQS9CLEVBQXFDLEVBQXJDO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsYUFBSyxPQUFMLENBQWEsZUFBYixDQUE2QixLQUFLLElBQWxDO0FBQ0Q7QUFDRjs7QUFDRCxTQUFLLEtBQUwsR0FBYSxLQUFiO0FBQ0EsU0FBSyxhQUFMLEdBQXFCLHlEQUFyQjtBQUNEOztBQXhDOEI7QUEyQ2pDOzs7Ozs7Ozs7O0FBU00sTUFBTyxpQkFBUCxTQUFpQyxrQkFBakMsQ0FBbUQ7QUFHdkQsY0FBWSxPQUFaLEVBQThCLElBQTlCLEVBQTRDLE9BQTVDLEVBQTZEO0FBQzNELFVBQU0sT0FBTixFQUFlLElBQWYsRUFBcUIsT0FBckI7QUFDQSxTQUFLLE1BQUwsR0FDSyxPQUFPLENBQUMsTUFBUixLQUFtQixDQUFuQixJQUF3QixPQUFPLENBQUMsQ0FBRCxDQUFQLEtBQWUsRUFBdkMsSUFBNkMsT0FBTyxDQUFDLENBQUQsQ0FBUCxLQUFlLEVBRGpFO0FBRUQ7O0FBRVMsYUFBVztBQUNuQixXQUFPLElBQUksWUFBSixDQUFpQixJQUFqQixDQUFQO0FBQ0Q7O0FBRUQsV0FBUztBQUNQLFFBQUksS0FBSyxNQUFULEVBQWlCO0FBQ2YsYUFBTyxLQUFLLEtBQUwsQ0FBVyxDQUFYLEVBQWMsS0FBckI7QUFDRDs7QUFDRCxXQUFPLE1BQU0sU0FBTixFQUFQO0FBQ0Q7O0FBRUQsUUFBTTtBQUNKLFFBQUksS0FBSyxLQUFULEVBQWdCO0FBQ2QsV0FBSyxLQUFMLEdBQWEsS0FBYixDQURjLENBRWQ7O0FBQ0MsV0FBSyxPQUFMLENBQXFCLEtBQUssSUFBMUIsSUFBa0MsS0FBSyxTQUFMLEVBQWxDO0FBQ0Y7QUFDRjs7QUExQnNEO0FBNkJuRCxNQUFPLFlBQVAsU0FBNEIsYUFBNUIsQ0FBeUMsRSxDQUUvQztBQUNBO0FBQ0E7QUFDQTs7QUFDQSxJQUFJLHFCQUFxQixHQUFHLEtBQTVCOztBQUVBLElBQUk7QUFDRixRQUFNLE9BQU8sR0FBRztBQUNkLFFBQUksT0FBSixHQUFXO0FBQ1QsMkJBQXFCLEdBQUcsSUFBeEI7QUFDQSxhQUFPLEtBQVA7QUFDRDs7QUFKYSxHQUFoQixDQURFLENBT0Y7O0FBQ0EsUUFBTSxDQUFDLGdCQUFQLENBQXdCLE1BQXhCLEVBQWdDLE9BQWhDLEVBQWdELE9BQWhELEVBUkUsQ0FTRjs7QUFDQSxRQUFNLENBQUMsbUJBQVAsQ0FBMkIsTUFBM0IsRUFBbUMsT0FBbkMsRUFBbUQsT0FBbkQ7QUFDRCxDQVhELENBV0UsT0FBTyxFQUFQLEVBQVcsQ0FDWjs7QUFLSyxNQUFPLFNBQVAsQ0FBZ0I7QUFTcEIsY0FBWSxPQUFaLEVBQThCLFNBQTlCLEVBQWlELFlBQWpELEVBQTJFO0FBTDNFLGlCQUEyQyxTQUEzQztBQUVBLHlCQUFtRCxTQUFuRDtBQUlFLFNBQUssT0FBTCxHQUFlLE9BQWY7QUFDQSxTQUFLLFNBQUwsR0FBaUIsU0FBakI7QUFDQSxTQUFLLFlBQUwsR0FBb0IsWUFBcEI7O0FBQ0EsU0FBSyxpQkFBTCxHQUEwQixDQUFELElBQU8sS0FBSyxXQUFMLENBQWlCLENBQWpCLENBQWhDO0FBQ0Q7O0FBRUQsVUFBUSxDQUFDLEtBQUQsRUFBeUM7QUFDL0MsU0FBSyxhQUFMLEdBQXFCLEtBQXJCO0FBQ0Q7O0FBRUQsUUFBTTtBQUNKLFdBQU8seUVBQVcsQ0FBQyxLQUFLLGFBQU4sQ0FBbEIsRUFBd0M7QUFDdEMsWUFBTSxTQUFTLEdBQUcsS0FBSyxhQUF2QjtBQUNBLFdBQUssYUFBTCxHQUFxQix5REFBckI7QUFDQSxlQUFTLENBQUMsSUFBRCxDQUFUO0FBQ0Q7O0FBQ0QsUUFBSSxLQUFLLGFBQUwsS0FBdUIseURBQTNCLEVBQXFDO0FBQ25DO0FBQ0Q7O0FBRUQsVUFBTSxXQUFXLEdBQUcsS0FBSyxhQUF6QjtBQUNBLFVBQU0sV0FBVyxHQUFHLEtBQUssS0FBekI7QUFDQSxVQUFNLG9CQUFvQixHQUFHLFdBQVcsSUFBSSxJQUFmLElBQ3pCLFdBQVcsSUFBSSxJQUFmLEtBQ0ssV0FBVyxDQUFDLE9BQVosS0FBd0IsV0FBVyxDQUFDLE9BQXBDLElBQ0EsV0FBVyxDQUFDLElBQVosS0FBcUIsV0FBVyxDQUFDLElBRGpDLElBRUEsV0FBVyxDQUFDLE9BQVosS0FBd0IsV0FBVyxDQUFDLE9BSHpDLENBREo7QUFLQSxVQUFNLGlCQUFpQixHQUNuQixXQUFXLElBQUksSUFBZixLQUF3QixXQUFXLElBQUksSUFBZixJQUF1QixvQkFBL0MsQ0FESjs7QUFHQSxRQUFJLG9CQUFKLEVBQTBCO0FBQ3hCLFdBQUssT0FBTCxDQUFhLG1CQUFiLENBQ0ksS0FBSyxTQURULEVBQ29CLEtBQUssaUJBRHpCLEVBQzRDLEtBQUssUUFEakQ7QUFFRDs7QUFDRCxRQUFJLGlCQUFKLEVBQXVCO0FBQ3JCLFdBQUssUUFBTCxHQUFnQixVQUFVLENBQUMsV0FBRCxDQUExQjtBQUNBLFdBQUssT0FBTCxDQUFhLGdCQUFiLENBQ0ksS0FBSyxTQURULEVBQ29CLEtBQUssaUJBRHpCLEVBQzRDLEtBQUssUUFEakQ7QUFFRDs7QUFDRCxTQUFLLEtBQUwsR0FBYSxXQUFiO0FBQ0EsU0FBSyxhQUFMLEdBQXFCLHlEQUFyQjtBQUNEOztBQUVELGFBQVcsQ0FBQyxLQUFELEVBQWE7QUFDdEIsUUFBSSxPQUFPLEtBQUssS0FBWixLQUFzQixVQUExQixFQUFzQztBQUNwQyxXQUFLLEtBQUwsQ0FBVyxJQUFYLENBQWdCLEtBQUssWUFBTCxJQUFxQixLQUFLLE9BQTFDLEVBQW1ELEtBQW5EO0FBQ0QsS0FGRCxNQUVPO0FBQ0osV0FBSyxLQUFMLENBQW1DLFdBQW5DLENBQStDLEtBQS9DO0FBQ0Y7QUFDRjs7QUEzRG1CLEMsQ0E4RHRCO0FBQ0E7QUFDQTs7QUFDQSxNQUFNLFVBQVUsR0FBSSxDQUFELElBQTBDLENBQUMsS0FDekQscUJBQXFCLEdBQ2pCO0FBQUMsU0FBTyxFQUFFLENBQUMsQ0FBQyxPQUFaO0FBQXFCLFNBQU8sRUFBRSxDQUFDLENBQUMsT0FBaEM7QUFBeUMsTUFBSSxFQUFFLENBQUMsQ0FBQztBQUFqRCxDQURpQixHQUVqQixDQUFDLENBQUMsT0FIbUQsQ0FBOUQsQzs7Ozs7OztBQ3BmQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0FBcUNBOzs7O0FBSU8sTUFBTSxRQUFRLEdBQVcsRUFBekI7QUFFUDs7OztBQUdPLE1BQU0sT0FBTyxHQUFHLEVBQWhCLEM7Ozs7Ozs7Ozs7OztBQzlDUDs7Ozs7Ozs7Ozs7OztBQW1CQTtBQUlBOzs7O0FBR00sTUFBTyxtREFBUCxDQUErQjtBQUNuQzs7Ozs7Ozs7O0FBU0EsNEJBQTBCLENBQ3RCLE9BRHNCLEVBQ0osSUFESSxFQUNVLE9BRFYsRUFFdEIsT0FGc0IsRUFFQTtBQUN4QixVQUFNLE1BQU0sR0FBRyxJQUFJLENBQUMsQ0FBRCxDQUFuQjs7QUFDQSxRQUFJLE1BQU0sS0FBSyxHQUFmLEVBQW9CO0FBQ2xCLFlBQU0sUUFBUSxHQUFHLElBQUksa0NBQUosQ0FBc0IsT0FBdEIsRUFBK0IsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFYLENBQS9CLEVBQThDLE9BQTlDLENBQWpCO0FBQ0EsYUFBTyxRQUFRLENBQUMsS0FBaEI7QUFDRDs7QUFDRCxRQUFJLE1BQU0sS0FBSyxHQUFmLEVBQW9CO0FBQ2xCLGFBQU8sQ0FBQyxJQUFJLDBCQUFKLENBQWMsT0FBZCxFQUF1QixJQUFJLENBQUMsS0FBTCxDQUFXLENBQVgsQ0FBdkIsRUFBc0MsT0FBTyxDQUFDLFlBQTlDLENBQUQsQ0FBUDtBQUNEOztBQUNELFFBQUksTUFBTSxLQUFLLEdBQWYsRUFBb0I7QUFDbEIsYUFBTyxDQUFDLElBQUkscUNBQUosQ0FBeUIsT0FBekIsRUFBa0MsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFYLENBQWxDLEVBQWlELE9BQWpELENBQUQsQ0FBUDtBQUNEOztBQUNELFVBQU0sUUFBUSxHQUFHLElBQUksbUNBQUosQ0FBdUIsT0FBdkIsRUFBZ0MsSUFBaEMsRUFBc0MsT0FBdEMsQ0FBakI7QUFDQSxXQUFPLFFBQVEsQ0FBQyxLQUFoQjtBQUNEO0FBQ0Q7Ozs7OztBQUlBLHNCQUFvQixDQUFDLE9BQUQsRUFBdUI7QUFDekMsV0FBTyxJQUFJLHlCQUFKLENBQWEsT0FBYixDQUFQO0FBQ0Q7O0FBakNrQztBQW9DOUIsTUFBTSx3QkFBd0IsR0FBRyxJQUFJLG1EQUFKLEVBQWpDLEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDOURQO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0FBY0E7Ozs7Ozs7Ozs7Ozs7O0FBY0E7Ozs7QUFJQTtBQUNBO0FBRUE7Q0FFQTs7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFFQTtDQVNBO0FBQ0E7QUFDQTs7QUFDQSxDQUFDLE1BQU0sQ0FBQyxpQkFBRCxDQUFOLEtBQThCLE1BQU0sQ0FBQyxpQkFBRCxDQUFOLEdBQTRCLEVBQTFELENBQUQsRUFBZ0UsSUFBaEUsQ0FBcUUsT0FBckU7QUFFQTs7Ozs7QUFJTyxNQUFNLElBQUksR0FBRyxDQUFDLE9BQUQsRUFBZ0MsR0FBRyxNQUFuQyxLQUNoQixJQUFJLHlDQUFKLENBQW1CLE9BQW5CLEVBQTRCLE1BQTVCLEVBQW9DLE1BQXBDLEVBQTRDLHdCQUE1QyxDQURHO0FBR1A7Ozs7O0FBSU8sTUFBTSxHQUFHLEdBQUcsQ0FBQyxPQUFELEVBQWdDLEdBQUcsTUFBbkMsS0FDZixJQUFJLDRDQUFKLENBQXNCLE9BQXRCLEVBQStCLE1BQS9CLEVBQXVDLEtBQXZDLEVBQThDLHdCQUE5QyxDQURHLEM7Ozs7Ozs7QUN2RVA7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0FBc0JBOzs7QUFHTyxNQUFNLFlBQVksR0FBRyxNQUFNLENBQUMsY0FBUCxLQUEwQixTQUExQixJQUN2QixNQUFNLENBQUMsY0FBUCxDQUE0Qyx5QkFBNUMsS0FDRyxTQUZEO0FBSVA7Ozs7Ozs7QUFNTyxNQUFNLGFBQWEsR0FDdEIsQ0FBQyxTQUFELEVBQ0MsS0FERCxFQUVDLE1BQWlCLElBRmxCLEVBR0MsU0FBb0IsSUFIckIsS0FHbUM7QUFDakMsTUFBSSxJQUFJLEdBQUcsS0FBWDs7QUFDQSxTQUFPLElBQUksS0FBSyxHQUFoQixFQUFxQjtBQUNuQixVQUFNLENBQUMsR0FBRyxJQUFLLENBQUMsV0FBaEI7QUFDQSxhQUFTLENBQUMsWUFBVixDQUF1QixJQUF2QixFQUE4QixNQUE5QjtBQUNBLFFBQUksR0FBRyxDQUFQO0FBQ0Q7QUFDRixDQVhFO0FBYVA7Ozs7O0FBSU8sTUFBTSxXQUFXLEdBQ3BCLENBQUMsU0FBRCxFQUFrQixTQUFsQixFQUF3QyxVQUFxQixJQUE3RCxLQUNXO0FBQ0wsTUFBSSxJQUFJLEdBQUcsU0FBWDs7QUFDQSxTQUFPLElBQUksS0FBSyxPQUFoQixFQUF5QjtBQUN2QixVQUFNLENBQUMsR0FBRyxJQUFLLENBQUMsV0FBaEI7QUFDQSxhQUFTLENBQUMsV0FBVixDQUFzQixJQUF0QjtBQUNBLFFBQUksR0FBRyxDQUFQO0FBQ0Q7QUFDRixDQVRGLEM7Ozs7Ozs7QUNwRFA7QUFBQTtBQUFBO0FBQUE7QUFBQTs7Ozs7Ozs7Ozs7Ozs7QUFjQTs7O0FBSUE7QUFFQTtBQUVBOzs7OztBQUlNLE1BQU8sY0FBUCxDQUFxQjtBQU16QixjQUNJLE9BREosRUFDbUMsTUFEbkMsRUFDc0QsSUFEdEQsRUFFSSxTQUZKLEVBRWdDO0FBQzlCLFNBQUssT0FBTCxHQUFlLE9BQWY7QUFDQSxTQUFLLE1BQUwsR0FBYyxNQUFkO0FBQ0EsU0FBSyxJQUFMLEdBQVksSUFBWjtBQUNBLFNBQUssU0FBTCxHQUFpQixTQUFqQjtBQUNEO0FBRUQ7Ozs7O0FBR0EsU0FBTztBQUNMLFVBQU0sUUFBUSxHQUFHLEtBQUssT0FBTCxDQUFhLE1BQWIsR0FBc0IsQ0FBdkM7QUFDQSxRQUFJLElBQUksR0FBRyxFQUFYOztBQUNBLFNBQUssSUFBSSxDQUFDLEdBQUcsQ0FBYixFQUFnQixDQUFDLEdBQUcsUUFBcEIsRUFBOEIsQ0FBQyxFQUEvQixFQUFtQztBQUNqQyxZQUFNLENBQUMsR0FBRyxLQUFLLE9BQUwsQ0FBYSxDQUFiLENBQVYsQ0FEaUMsQ0FFakM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBLFlBQU0sS0FBSyxHQUFHLDJFQUFzQixDQUFDLElBQXZCLENBQTRCLENBQTVCLENBQWQ7O0FBQ0EsVUFBSSxLQUFKLEVBQVc7QUFDVDtBQUNBO0FBQ0E7QUFDQSxZQUFJLElBQUksQ0FBQyxDQUFDLE1BQUYsQ0FBUyxDQUFULEVBQVksS0FBSyxDQUFDLEtBQWxCLElBQTJCLEtBQUssQ0FBQyxDQUFELENBQWhDLEdBQXNDLEtBQUssQ0FBQyxDQUFELENBQTNDLEdBQ0oseUVBREksR0FDbUIsS0FBSyxDQUFDLENBQUQsQ0FEeEIsR0FDOEIsMkRBRHRDO0FBRUQsT0FORCxNQU1PO0FBQ0w7QUFDQTtBQUNBLFlBQUksSUFBSSxDQUFDLEdBQUcsK0RBQVo7QUFDRDtBQUNGOztBQUNELFdBQU8sSUFBSSxHQUFHLEtBQUssT0FBTCxDQUFhLFFBQWIsQ0FBZDtBQUNEOztBQUVELG9CQUFrQjtBQUNoQixVQUFNLFFBQVEsR0FBRyxRQUFRLENBQUMsYUFBVCxDQUF1QixVQUF2QixDQUFqQjtBQUNBLFlBQVEsQ0FBQyxTQUFULEdBQXFCLEtBQUssT0FBTCxFQUFyQjtBQUNBLFdBQU8sUUFBUDtBQUNEOztBQXBEd0I7QUF1RDNCOzs7Ozs7OztBQU9NLE1BQU8saUJBQVAsU0FBaUMsY0FBakMsQ0FBK0M7QUFDbkQsU0FBTztBQUNMLDBCQUFlLE1BQU0sT0FBTixFQUFmO0FBQ0Q7O0FBRUQsb0JBQWtCO0FBQ2hCLFVBQU0sUUFBUSxHQUFHLE1BQU0sa0JBQU4sRUFBakI7QUFDQSxVQUFNLE9BQU8sR0FBRyxRQUFRLENBQUMsT0FBekI7QUFDQSxVQUFNLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBM0I7QUFDQSxXQUFPLENBQUMsV0FBUixDQUFvQixVQUFwQjtBQUNBLHlFQUFhLENBQUMsT0FBRCxFQUFVLFVBQVUsQ0FBQyxVQUFyQixDQUFiO0FBQ0EsV0FBTyxRQUFQO0FBQ0Q7O0FBWmtELEM7Ozs7Ozs7QUN4RnJEO0FBQUE7QUFBQTtBQUFBOzs7Ozs7Ozs7Ozs7O0FBbUJBO0FBd0JBOzs7OztBQUlNLFNBQVUsZUFBVixDQUEwQixNQUExQixFQUFnRDtBQUNwRCxNQUFJLGFBQWEsR0FBRyxjQUFjLENBQUMsR0FBZixDQUFtQixNQUFNLENBQUMsSUFBMUIsQ0FBcEI7O0FBQ0EsTUFBSSxhQUFhLEtBQUssU0FBdEIsRUFBaUM7QUFDL0IsaUJBQWEsR0FBRztBQUNkLGtCQUFZLEVBQUUsSUFBSSxPQUFKLEVBREE7QUFFZCxlQUFTLEVBQUUsSUFBSSxHQUFKO0FBRkcsS0FBaEI7QUFJQSxrQkFBYyxDQUFDLEdBQWYsQ0FBbUIsTUFBTSxDQUFDLElBQTFCLEVBQWdDLGFBQWhDO0FBQ0Q7O0FBRUQsTUFBSSxRQUFRLEdBQUcsYUFBYSxDQUFDLFlBQWQsQ0FBMkIsR0FBM0IsQ0FBK0IsTUFBTSxDQUFDLE9BQXRDLENBQWY7O0FBQ0EsTUFBSSxRQUFRLEtBQUssU0FBakIsRUFBNEI7QUFDMUIsV0FBTyxRQUFQO0FBQ0QsR0FibUQsQ0FlcEQ7QUFDQTs7O0FBQ0EsUUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLE9BQVAsQ0FBZSxJQUFmLENBQW9CLDJEQUFwQixDQUFaLENBakJvRCxDQW1CcEQ7O0FBQ0EsVUFBUSxHQUFHLGFBQWEsQ0FBQyxTQUFkLENBQXdCLEdBQXhCLENBQTRCLEdBQTVCLENBQVg7O0FBQ0EsTUFBSSxRQUFRLEtBQUssU0FBakIsRUFBNEI7QUFDMUI7QUFDQSxZQUFRLEdBQUcsSUFBSSw2REFBSixDQUFhLE1BQWIsRUFBcUIsTUFBTSxDQUFDLGtCQUFQLEVBQXJCLENBQVgsQ0FGMEIsQ0FHMUI7O0FBQ0EsaUJBQWEsQ0FBQyxTQUFkLENBQXdCLEdBQXhCLENBQTRCLEdBQTVCLEVBQWlDLFFBQWpDO0FBQ0QsR0ExQm1ELENBNEJwRDs7O0FBQ0EsZUFBYSxDQUFDLFlBQWQsQ0FBMkIsR0FBM0IsQ0FBK0IsTUFBTSxDQUFDLE9BQXRDLEVBQStDLFFBQS9DO0FBQ0EsU0FBTyxRQUFQO0FBQ0Q7QUFpQk0sTUFBTSxjQUFjLEdBQUcsSUFBSSxHQUFKLEVBQXZCLEM7Ozs7Ozs7QUMvRlA7QUFBQTtBQUFBOzs7Ozs7Ozs7Ozs7O0FBb0JBLE1BQU0sVUFBVSxHQUFHLElBQUksT0FBSixFQUFuQjtBQU9BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CQTs7QUFDTyxNQUFNLFNBQVMsR0FBZ0MsQ0FBN0IsSUFDcEIsQ0FBQyxHQUFHLElBQUosS0FBdUI7QUFDdEIsUUFBTSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEdBQUcsSUFBSixDQUFYO0FBQ0EsWUFBVSxDQUFDLEdBQVgsQ0FBZSxDQUFmLEVBQWtCLElBQWxCO0FBQ0EsU0FBTyxDQUFQO0FBQ0QsQ0FMRTtBQU9BLE1BQU0sV0FBVyxHQUFJLENBQUQsSUFBaUM7QUFDMUQsU0FBTyxPQUFPLENBQVAsS0FBYSxVQUFiLElBQTJCLFVBQVUsQ0FBQyxHQUFYLENBQWUsQ0FBZixDQUFsQztBQUNELENBRk0sQzs7Ozs7OztBQ3ZEUDtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0FBY0E7OztBQUlBO0FBQ0E7QUFFQTtBQUdPLE1BQU0sS0FBSyxHQUFHLElBQUksT0FBSixFQUFkO0FBRVA7Ozs7Ozs7Ozs7Ozs7Ozs7QUFlTyxNQUFNLE1BQU0sR0FDZixDQUFDLE1BQUQsRUFDQyxTQURELEVBRUMsT0FGRCxLQUVxQztBQUNuQyxNQUFJLElBQUksR0FBRyxLQUFLLENBQUMsR0FBTixDQUFVLFNBQVYsQ0FBWDs7QUFDQSxNQUFJLElBQUksS0FBSyxTQUFiLEVBQXdCO0FBQ3RCLHVFQUFXLENBQUMsU0FBRCxFQUFZLFNBQVMsQ0FBQyxVQUF0QixDQUFYO0FBQ0EsU0FBSyxDQUFDLEdBQU4sQ0FBVSxTQUFWLEVBQXFCLElBQUksR0FBRyxJQUFJLDBEQUFKLENBQVk7QUFDakIsbUdBQWU7QUFERSxPQUVkLE9BRmMsQ0FBWixDQUE1QjtBQUlBLFFBQUksQ0FBQyxVQUFMLENBQWdCLFNBQWhCO0FBQ0Q7O0FBQ0QsTUFBSSxDQUFDLFFBQUwsQ0FBYyxNQUFkO0FBQ0EsTUFBSSxDQUFDLE1BQUw7QUFDRCxDQWZFLEM7Ozs7Ozs7QUN6Q1A7QUFBQTtBQUFBO0FBQUE7Ozs7Ozs7Ozs7Ozs7O0FBY0E7OztBQUlBO0FBSUE7QUFFQTs7Ozs7QUFJTSxNQUFPLGdCQUFQLENBQXVCO0FBTTNCLGNBQ0ksUUFESixFQUN3QixTQUR4QixFQUVJLE9BRkosRUFFMEI7QUFQMUIsa0JBQWdDLEVBQWhDO0FBUUUsU0FBSyxRQUFMLEdBQWdCLFFBQWhCO0FBQ0EsU0FBSyxTQUFMLEdBQWlCLFNBQWpCO0FBQ0EsU0FBSyxPQUFMLEdBQWUsT0FBZjtBQUNEOztBQUVELFFBQU0sQ0FBQyxNQUFELEVBQWtCO0FBQ3RCLFFBQUksQ0FBQyxHQUFHLENBQVI7O0FBQ0EsU0FBSyxNQUFNLElBQVgsSUFBbUIsS0FBSyxNQUF4QixFQUFnQztBQUM5QixVQUFJLElBQUksS0FBSyxTQUFiLEVBQXdCO0FBQ3RCLFlBQUksQ0FBQyxRQUFMLENBQWMsTUFBTSxDQUFDLENBQUQsQ0FBcEI7QUFDRDs7QUFDRCxPQUFDO0FBQ0Y7O0FBQ0QsU0FBSyxNQUFNLElBQVgsSUFBbUIsS0FBSyxNQUF4QixFQUFnQztBQUM5QixVQUFJLElBQUksS0FBSyxTQUFiLEVBQXdCO0FBQ3RCLFlBQUksQ0FBQyxNQUFMO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFFBQU07QUFDSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBTSxRQUFRLEdBQUcsNERBQVksR0FDekIsS0FBSyxRQUFMLENBQWMsT0FBZCxDQUFzQixPQUF0QixDQUE4QixTQUE5QixDQUF3QyxJQUF4QyxDQUR5QixHQUV6QixRQUFRLENBQUMsVUFBVCxDQUFvQixLQUFLLFFBQUwsQ0FBYyxPQUFkLENBQXNCLE9BQTFDLEVBQW1ELElBQW5ELENBRko7QUFJQSxVQUFNLEtBQUssR0FBRyxLQUFLLFFBQUwsQ0FBYyxLQUE1QjtBQUNBLFFBQUksU0FBUyxHQUFHLENBQWhCO0FBQ0EsUUFBSSxTQUFTLEdBQUcsQ0FBaEI7O0FBQ0EsVUFBTSxnQkFBZ0IsR0FBSSxRQUFELElBQStCO0FBQ3REO0FBQ0E7QUFDQSxZQUFNLE1BQU0sR0FBRyxRQUFRLENBQUMsZ0JBQVQsQ0FDWCxRQURXLEVBRVg7QUFBSTtBQUZPLFFBR1gsSUFIVyxFQUlYLEtBSlcsQ0FBZjtBQUtBLFVBQUksSUFBSSxHQUFHLE1BQU0sQ0FBQyxRQUFQLEVBQVgsQ0FSc0QsQ0FTdEQ7O0FBQ0EsYUFBTyxTQUFTLEdBQUcsS0FBSyxDQUFDLE1BQWxCLElBQTRCLElBQUksS0FBSyxJQUE1QyxFQUFrRDtBQUNoRCxjQUFNLElBQUksR0FBRyxLQUFLLENBQUMsU0FBRCxDQUFsQixDQURnRCxDQUVoRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0EsWUFBSSxDQUFDLGlGQUFvQixDQUFDLElBQUQsQ0FBekIsRUFBaUM7QUFDL0IsZUFBSyxNQUFMLENBQVksSUFBWixDQUFpQixTQUFqQjs7QUFDQSxtQkFBUztBQUNWLFNBSEQsTUFHTyxJQUFJLFNBQVMsS0FBSyxJQUFJLENBQUMsS0FBdkIsRUFBOEI7QUFDbkMsY0FBSSxJQUFJLENBQUMsSUFBTCxLQUFjLE1BQWxCLEVBQTBCO0FBQ3hCLGtCQUFNLElBQUksR0FBRyxLQUFLLFNBQUwsQ0FBZSxvQkFBZixDQUFvQyxLQUFLLE9BQXpDLENBQWI7QUFDQSxnQkFBSSxDQUFDLGVBQUwsQ0FBcUIsSUFBSSxDQUFDLGVBQTFCOztBQUNBLGlCQUFLLE1BQUwsQ0FBWSxJQUFaLENBQWlCLElBQWpCO0FBQ0QsV0FKRCxNQUlPO0FBQ0wsaUJBQUssTUFBTCxDQUFZLElBQVosQ0FBaUIsR0FBRyxLQUFLLFNBQUwsQ0FBZSwwQkFBZixDQUNoQixJQURnQixFQUNDLElBQUksQ0FBQyxJQUROLEVBQ1ksSUFBSSxDQUFDLE9BRGpCLEVBQzBCLEtBQUssT0FEL0IsQ0FBcEI7QUFFRDs7QUFDRCxtQkFBUztBQUNWLFNBVk0sTUFVQTtBQUNMLG1CQUFTOztBQUNULGNBQUksSUFBSSxDQUFDLFFBQUwsS0FBa0IsVUFBdEIsRUFBa0M7QUFDaEMsNEJBQWdCLENBQUUsSUFBNEIsQ0FBQyxPQUEvQixDQUFoQjtBQUNEOztBQUNELGNBQUksR0FBRyxNQUFNLENBQUMsUUFBUCxFQUFQO0FBQ0Q7QUFDRjtBQUNGLEtBdkNEOztBQXdDQSxvQkFBZ0IsQ0FBQyxRQUFELENBQWhCOztBQUNBLFFBQUksNERBQUosRUFBa0I7QUFDaEIsY0FBUSxDQUFDLFNBQVQsQ0FBbUIsUUFBbkI7QUFDQSxvQkFBYyxDQUFDLE9BQWYsQ0FBdUIsUUFBdkI7QUFDRDs7QUFDRCxXQUFPLFFBQVA7QUFDRDs7QUF4RjBCLEM7Ozs7Ozs7Ozs7Ozs7O0FDNUI3QjtBQUFBOzs7Ozs7Ozs7OztBQVlBO0FBQ0E7Ozs7Ozs7O0FDWkEsY0FBYyxtQkFBTyxDQUFDLEVBQXdEOztBQUU5RSw0Q0FBNEMsUUFBUzs7QUFFckQ7QUFDQTs7OztBQUlBLGVBQWU7O0FBRWY7QUFDQTs7QUFFQSxhQUFhLG1CQUFPLENBQUMsRUFBbUQ7O0FBRXhFOztBQUVBLEdBQUcsS0FBVSxFQUFFLEU7Ozs7OztBQ25CZiwyQkFBMkIsbUJBQU8sQ0FBQyxFQUFtRDtBQUN0RjtBQUNBLGNBQWMsUUFBUyx3SUFBd0ksMmVBQTJlLGtCQUFrQixtQkFBbUIsdUJBQXVCLGdCQUFnQixHQUFHOzs7Ozs7Ozs7QUNGNXNCO0FBRWI7Ozs7QUFJQTs7QUFDQUEsTUFBTSxDQUFDQyxPQUFQLEdBQWlCLFVBQVVDLFlBQVYsRUFBd0I7QUFDdkMsTUFBSUMsSUFBSSxHQUFHLEVBQVgsQ0FEdUMsQ0FDeEI7O0FBRWZBLE1BQUksQ0FBQ0MsUUFBTCxHQUFnQixTQUFTQSxRQUFULEdBQW9CO0FBQ2xDLFdBQU8sS0FBS0MsR0FBTCxDQUFTLFVBQVVDLElBQVYsRUFBZ0I7QUFDOUIsVUFBSUMsT0FBTyxHQUFHQyxzQkFBc0IsQ0FBQ0YsSUFBRCxFQUFPSixZQUFQLENBQXBDOztBQUVBLFVBQUlJLElBQUksQ0FBQyxDQUFELENBQVIsRUFBYTtBQUNYLGVBQU8sWUFBWUEsSUFBSSxDQUFDLENBQUQsQ0FBaEIsR0FBc0IsR0FBdEIsR0FBNEJDLE9BQTVCLEdBQXNDLEdBQTdDO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsZUFBT0EsT0FBUDtBQUNEO0FBQ0YsS0FSTSxFQVFKRSxJQVJJLENBUUMsRUFSRCxDQUFQO0FBU0QsR0FWRCxDQUh1QyxDQWFwQzs7O0FBR0hOLE1BQUksQ0FBQ08sQ0FBTCxHQUFTLFVBQVVDLE9BQVYsRUFBbUJDLFVBQW5CLEVBQStCO0FBQ3RDLFFBQUksT0FBT0QsT0FBUCxLQUFtQixRQUF2QixFQUFpQztBQUMvQkEsYUFBTyxHQUFHLENBQUMsQ0FBQyxJQUFELEVBQU9BLE9BQVAsRUFBZ0IsRUFBaEIsQ0FBRCxDQUFWO0FBQ0Q7O0FBRUQsUUFBSUUsc0JBQXNCLEdBQUcsRUFBN0I7O0FBRUEsU0FBSyxJQUFJSCxDQUFDLEdBQUcsQ0FBYixFQUFnQkEsQ0FBQyxHQUFHLEtBQUtJLE1BQXpCLEVBQWlDSixDQUFDLEVBQWxDLEVBQXNDO0FBQ3BDLFVBQUlLLEVBQUUsR0FBRyxLQUFLTCxDQUFMLEVBQVEsQ0FBUixDQUFUOztBQUVBLFVBQUlLLEVBQUUsSUFBSSxJQUFWLEVBQWdCO0FBQ2RGLDhCQUFzQixDQUFDRSxFQUFELENBQXRCLEdBQTZCLElBQTdCO0FBQ0Q7QUFDRjs7QUFFRCxTQUFLTCxDQUFDLEdBQUcsQ0FBVCxFQUFZQSxDQUFDLEdBQUdDLE9BQU8sQ0FBQ0csTUFBeEIsRUFBZ0NKLENBQUMsRUFBakMsRUFBcUM7QUFDbkMsVUFBSUosSUFBSSxHQUFHSyxPQUFPLENBQUNELENBQUQsQ0FBbEIsQ0FEbUMsQ0FDWjtBQUN2QjtBQUNBO0FBQ0E7O0FBRUEsVUFBSUosSUFBSSxDQUFDLENBQUQsQ0FBSixJQUFXLElBQVgsSUFBbUIsQ0FBQ08sc0JBQXNCLENBQUNQLElBQUksQ0FBQyxDQUFELENBQUwsQ0FBOUMsRUFBeUQ7QUFDdkQsWUFBSU0sVUFBVSxJQUFJLENBQUNOLElBQUksQ0FBQyxDQUFELENBQXZCLEVBQTRCO0FBQzFCQSxjQUFJLENBQUMsQ0FBRCxDQUFKLEdBQVVNLFVBQVY7QUFDRCxTQUZELE1BRU8sSUFBSUEsVUFBSixFQUFnQjtBQUNyQk4sY0FBSSxDQUFDLENBQUQsQ0FBSixHQUFVLE1BQU1BLElBQUksQ0FBQyxDQUFELENBQVYsR0FBZ0IsU0FBaEIsR0FBNEJNLFVBQTVCLEdBQXlDLEdBQW5EO0FBQ0Q7O0FBRURULFlBQUksQ0FBQ2EsSUFBTCxDQUFVVixJQUFWO0FBQ0Q7QUFDRjtBQUNGLEdBL0JEOztBQWlDQSxTQUFPSCxJQUFQO0FBQ0QsQ0FsREQ7O0FBb0RBLFNBQVNLLHNCQUFULENBQWdDRixJQUFoQyxFQUFzQ0osWUFBdEMsRUFBb0Q7QUFDbEQsTUFBSUssT0FBTyxHQUFHRCxJQUFJLENBQUMsQ0FBRCxDQUFKLElBQVcsRUFBekI7QUFDQSxNQUFJVyxVQUFVLEdBQUdYLElBQUksQ0FBQyxDQUFELENBQXJCOztBQUVBLE1BQUksQ0FBQ1csVUFBTCxFQUFpQjtBQUNmLFdBQU9WLE9BQVA7QUFDRDs7QUFFRCxNQUFJTCxZQUFZLElBQUksT0FBT2dCLElBQVAsS0FBZ0IsVUFBcEMsRUFBZ0Q7QUFDOUMsUUFBSUMsYUFBYSxHQUFHQyxTQUFTLENBQUNILFVBQUQsQ0FBN0I7QUFDQSxRQUFJSSxVQUFVLEdBQUdKLFVBQVUsQ0FBQ0ssT0FBWCxDQUFtQmpCLEdBQW5CLENBQXVCLFVBQVVrQixNQUFWLEVBQWtCO0FBQ3hELGFBQU8sbUJBQW1CTixVQUFVLENBQUNPLFVBQTlCLEdBQTJDRCxNQUEzQyxHQUFvRCxLQUEzRDtBQUNELEtBRmdCLENBQWpCO0FBR0EsV0FBTyxDQUFDaEIsT0FBRCxFQUFVa0IsTUFBVixDQUFpQkosVUFBakIsRUFBNkJJLE1BQTdCLENBQW9DLENBQUNOLGFBQUQsQ0FBcEMsRUFBcURWLElBQXJELENBQTBELElBQTFELENBQVA7QUFDRDs7QUFFRCxTQUFPLENBQUNGLE9BQUQsRUFBVUUsSUFBVixDQUFlLElBQWYsQ0FBUDtBQUNELEMsQ0FBQzs7O0FBR0YsU0FBU1csU0FBVCxDQUFtQk0sU0FBbkIsRUFBOEI7QUFDNUI7QUFDQSxNQUFJQyxNQUFNLEdBQUdULElBQUksQ0FBQ1UsUUFBUSxDQUFDQyxrQkFBa0IsQ0FBQ0MsSUFBSSxDQUFDQyxTQUFMLENBQWVMLFNBQWYsQ0FBRCxDQUFuQixDQUFULENBQWpCO0FBQ0EsTUFBSU0sSUFBSSxHQUFHLGlFQUFpRUwsTUFBNUU7QUFDQSxTQUFPLFNBQVNLLElBQVQsR0FBZ0IsS0FBdkI7QUFDRCxDOzs7Ozs7QUNwRkQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQSxjQUFjLG1CQUFPLENBQUMsRUFBUTs7QUFFOUI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQixtQkFBbUI7QUFDcEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsaUJBQWlCLHNCQUFzQjtBQUN2Qzs7QUFFQTtBQUNBLG1CQUFtQiwyQkFBMkI7O0FBRTlDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxnQkFBZ0IsbUJBQW1CO0FBQ25DO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxpQkFBaUIsMkJBQTJCO0FBQzVDO0FBQ0E7O0FBRUEsUUFBUSx1QkFBdUI7QUFDL0I7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQSxpQkFBaUIsdUJBQXVCO0FBQ3hDO0FBQ0E7O0FBRUEsMkJBQTJCO0FBQzNCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCLGlCQUFpQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsY0FBYzs7QUFFZCxrREFBa0Qsc0JBQXNCO0FBQ3hFO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0EsS0FBSyxLQUF3QyxFQUFFLEVBRTdDOztBQUVGLFFBQVEsc0JBQWlCO0FBQ3pCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUEsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLHVEQUF1RDtBQUN2RDs7QUFFQSw2QkFBNkIsbUJBQW1COztBQUVoRDs7QUFFQTs7QUFFQTtBQUNBOzs7Ozs7O0FDOVlBOzs7Ozs7Ozs7Ozs7QUFhQWhDLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQixVQUFVZ0MsR0FBVixFQUFlO0FBQzlCO0FBQ0EsTUFBSUMsUUFBUSxHQUFHLE9BQU9DLE1BQVAsS0FBa0IsV0FBbEIsSUFBaUNBLE1BQU0sQ0FBQ0QsUUFBdkQ7O0FBRUEsTUFBSSxDQUFDQSxRQUFMLEVBQWU7QUFDYixVQUFNLElBQUlFLEtBQUosQ0FBVSxrQ0FBVixDQUFOO0FBQ0QsR0FONkIsQ0FRL0I7OztBQUNBLE1BQUksQ0FBQ0gsR0FBRCxJQUFRLE9BQU9BLEdBQVAsS0FBZSxRQUEzQixFQUFxQztBQUNuQyxXQUFPQSxHQUFQO0FBQ0E7O0FBRUQsTUFBSUksT0FBTyxHQUFHSCxRQUFRLENBQUNJLFFBQVQsR0FBb0IsSUFBcEIsR0FBMkJKLFFBQVEsQ0FBQ0ssSUFBbEQ7QUFDQSxNQUFJQyxVQUFVLEdBQUdILE9BQU8sR0FBR0gsUUFBUSxDQUFDTyxRQUFULENBQWtCQyxPQUFsQixDQUEwQixXQUExQixFQUF1QyxHQUF2QyxDQUEzQixDQWQ4QixDQWdCL0I7O0FBQ0E7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQXlCQSxNQUFJQyxRQUFRLEdBQUdWLEdBQUcsQ0FBQ1MsT0FBSixDQUFZLHFEQUFaLEVBQW1FLFVBQVNFLFNBQVQsRUFBb0JDLE9BQXBCLEVBQTZCO0FBQzlHO0FBQ0EsUUFBSUMsZUFBZSxHQUFHRCxPQUFPLENBQzNCRSxJQURvQixHQUVwQkwsT0FGb0IsQ0FFWixVQUZZLEVBRUEsVUFBU00sQ0FBVCxFQUFZQyxFQUFaLEVBQWU7QUFBRSxhQUFPQSxFQUFQO0FBQVksS0FGN0IsRUFHcEJQLE9BSG9CLENBR1osVUFIWSxFQUdBLFVBQVNNLENBQVQsRUFBWUMsRUFBWixFQUFlO0FBQUUsYUFBT0EsRUFBUDtBQUFZLEtBSDdCLENBQXRCLENBRjhHLENBTzlHOztBQUNBLFFBQUksb0RBQW9EQyxJQUFwRCxDQUF5REosZUFBekQsQ0FBSixFQUErRTtBQUM3RSxhQUFPRixTQUFQO0FBQ0QsS0FWNkcsQ0FZOUc7OztBQUNBLFFBQUlPLE1BQUo7O0FBRUEsUUFBSUwsZUFBZSxDQUFDTSxPQUFoQixDQUF3QixJQUF4QixNQUFrQyxDQUF0QyxFQUF5QztBQUN0QztBQUNGRCxZQUFNLEdBQUdMLGVBQVQ7QUFDQSxLQUhELE1BR08sSUFBSUEsZUFBZSxDQUFDTSxPQUFoQixDQUF3QixHQUF4QixNQUFpQyxDQUFyQyxFQUF3QztBQUM5QztBQUNBRCxZQUFNLEdBQUdkLE9BQU8sR0FBR1MsZUFBbkIsQ0FGOEMsQ0FFVjtBQUNwQyxLQUhNLE1BR0E7QUFDTjtBQUNBSyxZQUFNLEdBQUdYLFVBQVUsR0FBR00sZUFBZSxDQUFDSixPQUFoQixDQUF3QixPQUF4QixFQUFpQyxFQUFqQyxDQUF0QixDQUZNLENBRXNEO0FBQzVELEtBeEI2RyxDQTBCOUc7OztBQUNBLFdBQU8sU0FBU1osSUFBSSxDQUFDQyxTQUFMLENBQWVvQixNQUFmLENBQVQsR0FBa0MsR0FBekM7QUFDQSxHQTVCYyxDQUFmLENBMUMrQixDQXdFL0I7O0FBQ0EsU0FBT1IsUUFBUDtBQUNBLENBMUVELEM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ2RBO0FBQ0EsTUFBTVUsTUFBTSxHQUFHcEIsa0NBQUgsbUJBQVo7QUFHZW9CLGlEQUFmLEU7Ozs7Ozs7Ozs7Ozs7O0FDSkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFZQTtBQVFBO0FBRU0sTUFBTyxhQUFQLFNBQXNCLGlDQUF0QixDQUFnQztBQUF0Qzs7QUFJVyxnQkFBcUMsTUFBckM7QUFHQSxrQkFBUyxLQUFUO0FBWVY7O0FBVlUsYUFBVyxNQUFYLEdBQWlCO0FBQ3BCLFdBQU8sQ0FBQyxNQUFELENBQVA7QUFDSDs7QUFFUyxRQUFNO0FBQ1osV0FBTyxtQ0FBUDtBQUlIOztBQWxCaUM7QUFDWCxtQkFBSyxXQUFMOztBQUd2QixZQURDLHVDQUFRLENBQUM7QUFBRSxTQUFPLEVBQUU7QUFBWCxDQUFELENBQ1QsRyx1QkFBQSxFLE1BQUEsRSxLQUFtRCxDQUFuRDs7QUFHQSxZQURDLHVDQUFRLENBQUM7QUFBRSxTQUFPLEVBQUUsSUFBWDtBQUFpQixNQUFJLEVBQUU7QUFBdkIsQ0FBRCxDQUNULEcsdUJBQUEsRSxRQUFBLEUsS0FBc0IsQ0FBdEIsRTs7QUM3Qko7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDQUE7Ozs7Ozs7Ozs7Ozs7QUFXQTtBQUVBOzs7Ozs7O0FBTU0sTUFBTyxtQkFBUCxTQUF5QixpQ0FBekIsQ0FBbUM7QUFBekM7O0FBQ0k7Ozs7QUFJTyxvQkFBb0IsS0FBcEI7QUFFUDs7OztBQUlPLHFCQUFxQixLQUFyQjtBQUVQOzs7OztBQUtPLG9CQUFtQixDQUFuQjtBQUVDLDBCQUEwQixLQUExQjtBQXdIWDs7QUFwSEcsTUFBVyxZQUFYLEdBQXVCO0FBQ25CLFVBQU0sSUFBSSxLQUFKLENBQVUscUNBQVYsQ0FBTjtBQUNIOztBQUVNLE9BQUs7QUFDUixRQUFJLEtBQUssUUFBVCxFQUFtQjtBQUNmO0FBQ0g7O0FBRUQsU0FBSyxZQUFMLENBQWtCLEtBQWxCO0FBQ0g7O0FBRU0sTUFBSTtBQUNQLFNBQUssWUFBTCxDQUFrQixJQUFsQjtBQUNIOztBQUVTLGNBQVk7QUFDbEIsUUFBSSxDQUFDLEtBQUssWUFBTCxDQUFrQixVQUFsQixDQUFMLEVBQW9DO0FBQ2hDLFdBQUssUUFBTCxHQUFnQixDQUFoQjtBQUNIOztBQUVELFFBQUksS0FBSyxTQUFULEVBQW9CO0FBQ2hCLFdBQUssS0FBTDtBQUNIOztBQUVELFNBQUssZ0JBQUwsQ0FBc0IsU0FBdEIsRUFBa0MsS0FBRCxJQUFVO0FBQ3ZDLFVBQUksS0FBSyxDQUFDLFlBQU4sR0FBcUIsQ0FBckIsTUFBNEIsSUFBaEMsRUFBc0M7QUFDbEMsYUFBSyxXQUFMO0FBQ0g7QUFDSixLQUpEO0FBTUEsU0FBSyxnQkFBTCxDQUFzQixTQUF0QixFQUFrQyxLQUFELElBQVU7QUFDdkMsVUFDSSxDQUFDLEtBQUssQ0FBQyxnQkFBUCxJQUNBLEtBQUssQ0FBQyxRQUROLElBRUEsS0FBSyxDQUFDLE9BQU4sS0FBa0IsQ0FIdEIsRUFJRTtBQUNFLGFBQUssY0FBTCxHQUFzQixJQUF0QjtBQUNBLG1CQUFXLENBQUMsU0FBWixDQUFzQixLQUF0QixDQUE0QixLQUE1QixDQUFrQyxJQUFsQztBQUNBLGtCQUFVLENBQUMsTUFBTyxLQUFLLGNBQUwsR0FBc0IsS0FBOUIsRUFBc0MsQ0FBdEMsQ0FBVjtBQUNIO0FBQ0osS0FWRDtBQVdIOztBQUVTLFFBQU0sQ0FBQyxpQkFBRCxFQUF3QztBQUNwRCxRQUFJLGlCQUFpQixDQUFDLEdBQWxCLENBQXNCLFVBQXRCLENBQUosRUFBdUM7QUFDbkMsV0FBSyxxQkFBTCxDQUEyQixLQUFLLFFBQWhDLEVBQTBDLGlCQUFpQixDQUFDLEdBQWxCLENBQ3RDLFVBRHNDLENBQTFDO0FBR0g7O0FBRUQsUUFBSSxpQkFBaUIsQ0FBQyxHQUFsQixDQUFzQixVQUF0QixDQUFKLEVBQXVDO0FBQ25DO0FBQ0E7QUFDQSxXQUFLLFdBQUwsR0FBbUIsS0FBSyxRQUF4QjtBQUNBLFdBQUsscUJBQUwsQ0FBMkIsS0FBSyxRQUFoQztBQUNIOztBQUVELFVBQU0sTUFBTixDQUFhLGlCQUFiO0FBQ0g7O0FBRVMsU0FBTyxDQUNiLGlCQURhLEVBQzRDO0FBRXpELFVBQU0sT0FBTixDQUFjLGlCQUFkOztBQUVBLFFBQUksaUJBQWlCLENBQUMsR0FBbEIsQ0FBc0IsVUFBdEIsQ0FBSixFQUF1QztBQUNuQyxVQUFJLEtBQUssWUFBTCxZQUE2QixnQkFBakMsRUFBbUQ7QUFDL0MsYUFBSyxZQUFMLENBQWtCLFFBQWxCLEdBQTZCLEtBQUssUUFBbEM7QUFDSDs7QUFDRCxVQUFJLEtBQUssUUFBVCxFQUFtQjtBQUNmLGFBQUssSUFBTDtBQUNIO0FBQ0o7O0FBRUQsUUFDSSxpQkFBaUIsQ0FBQyxHQUFsQixDQUFzQixVQUF0QixLQUNBLEtBQUssV0FBTCxLQUFxQixTQUZ6QixFQUdFO0FBQ0UsV0FBSyxZQUFMLENBQWtCLFFBQWxCLEdBQTZCLEtBQUssV0FBbEM7QUFDQSxXQUFLLFdBQUwsR0FBbUIsU0FBbkI7QUFDSDtBQUNKOztBQUVPLGFBQVc7QUFDZixRQUFJLEtBQUssY0FBVCxFQUF5QjtBQUNyQjtBQUNIOztBQUVELFNBQUssWUFBTCxDQUFrQixLQUFsQjtBQUNIOztBQUVPLHVCQUFxQixDQUN6QixRQUR5QixFQUV6QixXQUZ5QixFQUVMO0FBRXBCLFFBQUksUUFBSixFQUFjO0FBQ1YsV0FBSyxXQUFMLEdBQW1CLEtBQUssUUFBeEI7QUFDQSxXQUFLLFFBQUwsR0FBZ0IsQ0FBQyxDQUFqQjtBQUNBLFdBQUssWUFBTCxDQUFrQixlQUFsQixFQUFtQyxNQUFuQztBQUNILEtBSkQsTUFJTyxJQUFJLFdBQUosRUFBaUI7QUFDcEIsVUFBSSxLQUFLLFdBQUwsS0FBcUIsU0FBekIsRUFBb0M7QUFDaEMsYUFBSyxRQUFMLEdBQWdCLEtBQUssV0FBckI7QUFDSDs7QUFDRCxXQUFLLGVBQUwsQ0FBcUIsZUFBckI7QUFDSDtBQUNKOztBQUVPLHVCQUFxQixDQUFDLFFBQUQsRUFBaUI7QUFDMUMsUUFBSSxLQUFLLFFBQUwsSUFBaUIsUUFBckIsRUFBK0I7QUFDM0IsVUFBSSxLQUFLLFFBQUwsS0FBa0IsQ0FBQyxDQUF2QixFQUEwQjtBQUN0QixhQUFLLFdBQUwsR0FBbUIsS0FBSyxRQUF4QjtBQUNIOztBQUNELFdBQUssUUFBTCxHQUFnQixDQUFDLENBQWpCO0FBQ0g7QUFDSjs7QUEzSW9DOztBQUtyQyxvQkFEQyx1Q0FBUSxDQUFDO0FBQUUsTUFBSSxFQUFFLE9BQVI7QUFBaUIsU0FBTyxFQUFFO0FBQTFCLENBQUQsQ0FDVCxHLDZCQUFBLEUsVUFBQSxFLEtBQWlDLENBQWpDOztBQU1BLG9CQURDLHVDQUFRLENBQUM7QUFBRSxNQUFJLEVBQUU7QUFBUixDQUFELENBQ1QsRyw2QkFBQSxFLFdBQUEsRSxLQUFrQyxDQUFsQzs7QUFPQSxvQkFEQyx1Q0FBUSxDQUFDO0FBQUUsTUFBSSxFQUFFLE1BQVI7QUFBZ0IsU0FBTyxFQUFFO0FBQXpCLENBQUQsQ0FDVCxHLDZCQUFBLEUsVUFBQSxFLEtBQTRCLENBQTVCLEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNyQ0o7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFZQTtBQUNBO0FBRU0sTUFBTyxzQkFBUCxTQUEwQixtQkFBMUIsQ0FBbUM7QUFBekM7O0FBU2MscUJBQVksS0FBWjtBQXlDYjs7QUF2Q0csTUFBWSxPQUFaLEdBQW1CO0FBQ2YsV0FBTyxDQUFDLENBQUMsS0FBSyxhQUFMLENBQW1CLGVBQW5CLENBQVQ7QUFDSDs7QUFFRCxNQUFXLFlBQVgsR0FBdUI7QUFDbkIsUUFBSSxLQUFLLFVBQVQsRUFBcUI7QUFDakIsYUFBTyxLQUFLLFVBQUwsQ0FBZ0IsYUFBaEIsQ0FBOEIsU0FBOUIsQ0FBUDtBQUNIOztBQUNELFdBQU8sSUFBUDtBQUNIOztBQUVTLGdCQUFjO0FBQ3BCLFdBQU8sS0FBSyxTQUFMLEdBQ0QsbUNBREMsaUNBS0QsbUNBTEMsb0JBQVA7QUFTSDs7QUFFUyxRQUFNO0FBQ1osVUFBTSxjQUFjLEdBQUcsbUNBQUgscUJBQ2QsS0FBSyxPQUFMLEdBQ0ksS0FBSyxjQUFMLEVBREosR0FFSSxtQ0FGSixvQkFEYyxDQUFwQjtBQU9BLFdBQU8sS0FBSyxJQUFMLElBQWEsS0FBSyxJQUFMLENBQVUsTUFBVixHQUFtQixDQUFoQyxHQUNELG1DQURDLHFCQUVjLEtBQUssSUFGbkIsRUFFd0MsY0FGeEMsSUFJRCxtQ0FKQyxxQkFLeUIsY0FMekIsQ0FBUDtBQU9IOztBQWpEb0M7O0FBTXJDLHNCQURDLHVDQUFRLEVBQ1QsRyxnQ0FBQSxFLE1BQUEsRSxLQUFxQixDQUFyQjs7QUFHQSxzQkFEQyx1Q0FBUSxDQUFDO0FBQUUsTUFBSSxFQUFFLE9BQVI7QUFBaUIsU0FBTyxFQUFFLElBQTFCO0FBQWdDLFdBQVMsRUFBRTtBQUEzQyxDQUFELENBQ1QsRyxnQ0FBQSxFLFdBQUEsRSxLQUE0QixDQUE1QixFOzs7Ozs7Ozs7Ozs7OztBQ3hCSjtBQUNBLE1BQU1BLGFBQU0sR0FBR3BCLGtDQUFILHlCQUFaO0FBS2VvQiwrREFBZixFOztBQ05BOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWUE7QUFDQTtBQUNBO0FBRUE7Ozs7O0FBSU0sTUFBTyxhQUFQLFNBQXNCLHNCQUF0QixDQUFnQztBQUF0Qzs7QUFDSTs7OztBQUlPLG1CQUtZLEtBTFo7QUFPUDs7OztBQUlPLG1CQUFtQixLQUFuQjtBQUVQOzs7O0FBSU8saUJBQWlCLEtBQWpCO0FBS1Y7O0FBSFUsYUFBVyxNQUFYLEdBQWlCO0FBQ3BCLFdBQU8sQ0FBQyxhQUFELENBQVA7QUFDSDs7QUExQmlDOztBQUtsQyxpQkFEQyx1Q0FBUSxDQUFDO0FBQUUsU0FBTyxFQUFFO0FBQVgsQ0FBRCxDQUNULEcsdUJBQUEsRSxTQUFBLEUsS0FLeUIsQ0FMekI7O0FBV0EsaUJBREMsdUNBQVEsQ0FBQztBQUFFLE1BQUksRUFBRSxPQUFSO0FBQWlCLFNBQU8sRUFBRTtBQUExQixDQUFELENBQ1QsRyx1QkFBQSxFLFNBQUEsRSxLQUFnQyxDQUFoQzs7QUFNQSxpQkFEQyx1Q0FBUSxDQUFDO0FBQUUsTUFBSSxFQUFFLE9BQVI7QUFBaUIsU0FBTyxFQUFFO0FBQTFCLENBQUQsQ0FDVCxHLHVCQUFBLEUsT0FBQSxFLEtBQThCLENBQTlCLEU7Ozs7Ozs7Ozs7Ozs7O0FDMUNKO0FBQ0EsTUFBTUEsb0JBQU0sR0FBR3BCLGtDQUFILGdDQUFaO0FBVWVvQixzRUFBZixFOztBQ1hBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWUE7QUFDQTtBQUNBO0FBRU0sTUFBTywwQkFBUCxTQUE0QixzQkFBNUIsQ0FBc0M7QUFBNUM7O0FBRVcsaUJBQWlCLEtBQWpCO0FBR0Esb0JBQW9CLEtBQXBCO0FBR0EsMEJBQTBCLEtBQTFCO0FBS1Y7O0FBSFUsYUFBVyxNQUFYLEdBQWlCO0FBQ3BCLFdBQU8sQ0FBQyxhQUFELENBQVA7QUFDSDs7QUFadUM7O0FBRXhDLHdCQURDLHVDQUFRLENBQUM7QUFBRSxNQUFJLEVBQUUsT0FBUjtBQUFpQixTQUFPLEVBQUU7QUFBMUIsQ0FBRCxDQUNULEcsb0NBQUEsRSxPQUFBLEUsS0FBOEIsQ0FBOUI7O0FBR0Esd0JBREMsdUNBQVEsQ0FBQztBQUFFLE1BQUksRUFBRSxPQUFSO0FBQWlCLFNBQU8sRUFBRTtBQUExQixDQUFELENBQ1QsRyxvQ0FBQSxFLFVBQUEsRSxLQUFpQyxDQUFqQzs7QUFHQSx3QkFEQyx1Q0FBUSxDQUFDO0FBQUUsTUFBSSxFQUFFLE9BQVI7QUFBaUIsU0FBTyxFQUFFLElBQTFCO0FBQWdDLFdBQVMsRUFBRTtBQUEzQyxDQUFELENBQ1QsRyxvQ0FBQSxFLGdCQUFBLEUsS0FBdUMsQ0FBdkMsRTs7QUN4Qko7Ozs7Ozs7Ozs7O0FBV0E7QUFDQTtBQUVBO0FBQ0E7O0FBRUEsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFmLENBQW1CLGtCQUFuQixDQUFMLEVBQTZDO0FBQ3pDLGdCQUFjLENBQUMsTUFBZixDQUFzQixrQkFBdEIsRUFBMEMsMEJBQTFDO0FBQ0g7O0FBRUQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFmLENBQW1CLFdBQW5CLENBQUwsRUFBc0M7QUFDbEMsZ0JBQWMsQ0FBQyxNQUFmLENBQXNCLFdBQXRCLEVBQW1DLGFBQW5DO0FBQ0gsQzs7Ozs7Ozs7Ozs7Ozs7QUN2QkQ7QUFDQSxNQUFNQSxnQkFBTSxHQUFHcEIsa0NBQUgsNEJBQVo7QUFHZW9CLDhEQUFmLEU7Ozs7Ozs7Ozs7Ozs7O0FDSkE7QUFDQSxNQUFNQSxXQUFNLEdBQUdwQixrQ0FBSCx1QkFBWjtBQUdlb0Isb0RBQWYsRTs7Ozs7Ozs7Ozs7Ozs7QUNKQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVlBO0FBUUE7QUFDQTtBQUVNLE1BQU8sU0FBUCxTQUFvQixpQ0FBcEIsQ0FBOEI7QUFBcEM7O0FBUVcsaUJBQVEsRUFBUjtBQUdBLG9CQUFXLEVBQVg7QUFjVjs7QUF0QlUsYUFBVyxNQUFYLEdBQWlCO0FBQ3BCLFdBQU8sQ0FBQyxTQUFELEVBQWlCLElBQWpCLENBQVA7QUFDSDs7QUFRUyxRQUFNO0FBQ1osV0FBTyxtQ0FBUCw2QkFHMkMsS0FBSyxLQUhoRCxFQUtpQyxLQUFLLFFBTHRDO0FBVUg7O0FBeEIrQjtBQUNULGVBQUssU0FBTDs7QUFPdkIsZUFEQyx1Q0FBUSxFQUNULEcsbUJBQUEsRSxPQUFBLEUsS0FBa0IsQ0FBbEI7O0FBR0EsZUFEQyx1Q0FBUSxFQUNULEcsbUJBQUEsRSxVQUFBLEUsS0FBcUIsQ0FBckIsRTs7Ozs7Ozs7Ozs7Ozs7QUNsQ0o7QUFDQSxNQUFNQSxpQkFBTSxHQUFHcEIsa0NBQUgsNkJBQVo7QUFHZW9CLGdFQUFmLEU7Ozs7Ozs7Ozs7Ozs7O0FDSkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFZQTtBQVFBO0FBQ0E7QUFFTSxNQUFPLG9CQUFQLFNBQXlCLGlDQUF6QixDQUFtQztBQUF6Qzs7QUFRVyxpQkFBUSxFQUFSO0FBR0Esb0JBQVcsRUFBWDtBQWFWOztBQXJCVSxhQUFXLE1BQVgsR0FBaUI7QUFDcEIsV0FBTyxDQUFDLFNBQUQsRUFBaUIsVUFBakIsQ0FBUDtBQUNIOztBQVFTLFFBQU07QUFDWixXQUFPLG1DQUFQLG1DQUcyQyxLQUFLLEtBSGhELEVBS2lDLEtBQUssUUFMdEM7QUFTSDs7QUF2Qm9DO0FBQ3ZCLDBCQUFLLGVBQUw7O0FBT2QscUJBREMsdUNBQVEsQ0FBQztBQUFFLE1BQUksRUFBRTtBQUFSLENBQUQsQ0FDVCxHLDhCQUFBLEUsT0FBQSxFLEtBQWtCLENBQWxCOztBQUdBLHFCQURDLHVDQUFRLENBQUM7QUFBRSxNQUFJLEVBQUU7QUFBUixDQUFELENBQ1QsRyw4QkFBQSxFLFVBQUEsRSxLQUFxQixDQUFyQixFOzs7Ozs7Ozs7Ozs7OztBQ2xDSjtBQUNBLE1BQU1BLG1CQUFNLEdBQUdwQixrQ0FBSCwrQkFBWjtBQUdlb0Isb0VBQWYsRTs7Ozs7Ozs7Ozs7Ozs7QUNKQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVlBO0FBUUE7QUFDQTtBQUNBO0FBRU0sTUFBTyx3QkFBUCxTQUEyQixpQ0FBM0IsQ0FBcUM7QUFBM0M7O0FBUVcsaUJBQVEsRUFBUjtBQUdBLG9CQUFXLEVBQVg7QUFlVjs7QUF2QlUsYUFBVyxNQUFYLEdBQWlCO0FBQ3BCLFdBQU8sQ0FBQyxTQUFELEVBQWlCLFVBQWpCLEVBQWtDLFlBQWxDLENBQVA7QUFDSDs7QUFRUyxRQUFNO0FBQ1osV0FBTyxtQ0FBUCxxQ0FLOEIsS0FBSyxLQUxuQyxFQU1pQyxLQUFLLFFBTnRDO0FBV0g7O0FBekJzQztBQUN6Qiw4QkFBSyxpQkFBTDs7QUFPZCx1QkFEQyx1Q0FBUSxFQUNULEcsa0NBQUEsRSxPQUFBLEUsS0FBa0IsQ0FBbEI7O0FBR0EsdUJBREMsdUNBQVEsRUFDVCxHLGtDQUFBLEUsVUFBQSxFLEtBQXFCLENBQXJCLEU7O0FDbkNKOzs7Ozs7Ozs7OztBQVdBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7OztBQ1pBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWUE7QUFDQTtBQUVNLE1BQU8sMEJBQVAsU0FBNEIsbUJBQTVCLENBQXFDO0FBQTNDOztBQUVXLG1CQUFtQixLQUFuQjtBQUdBLGlCQUFpQixLQUFqQjtBQWtDVjs7QUE3QkcsTUFBVyxZQUFYLEdBQXVCO0FBQ25CLFdBQU8sS0FBSyxZQUFaO0FBQ0g7O0FBRU0sY0FBWSxDQUFDLEtBQUQsRUFBYTtBQUM1QixTQUFLLE9BQUwsR0FBZSxLQUFLLFlBQUwsQ0FBa0IsT0FBakMsQ0FENEIsQ0FHNUI7QUFDQTs7QUFDQSxVQUFNLFdBQVcsR0FBRyxJQUFJLFdBQUosQ0FBZ0IsUUFBaEIsRUFBMEI7QUFDMUMsWUFBTSxFQUFFO0FBQ0osbUJBQVcsRUFBRTtBQURULE9BRGtDO0FBSTFDLGFBQU8sRUFBRSxLQUFLLENBQUMsT0FKMkI7QUFLMUMsZ0JBQVUsRUFBRSxLQUFLLENBQUM7QUFMd0IsS0FBMUIsQ0FBcEI7QUFPQSxTQUFLLGFBQUwsQ0FBbUIsV0FBbkI7QUFDSDs7QUFFUyxRQUFNO0FBQ1osV0FBTyxtQ0FBUCxpQ0FJbUIsS0FBSyxPQUp4QixFQUtrQixLQUFLLFlBTHZCO0FBUUg7O0FBdENzQzs7QUFFdkMsd0JBREMsdUNBQVEsQ0FBQztBQUFFLE1BQUksRUFBRSxPQUFSO0FBQWlCLFNBQU8sRUFBRTtBQUExQixDQUFELENBQ1QsRyxvQ0FBQSxFLFNBQUEsRSxLQUFnQyxDQUFoQzs7QUFHQSx3QkFEQyx1Q0FBUSxDQUFDO0FBQUUsTUFBSSxFQUFFLE9BQVI7QUFBaUIsU0FBTyxFQUFFO0FBQTFCLENBQUQsQ0FDVCxHLG9DQUFBLEUsT0FBQSxFLEtBQThCLENBQTlCOztBQUdBLHdCQURDLG9DQUFLLENBQUMsUUFBRCxDQUNOLEcsb0NBQUEsRSxjQUFBLEUsS0FBd0MsQ0FBeEMsRTs7Ozs7Ozs7Ozs7Ozs7QUN2Qko7QUFDQSxNQUFNQSxlQUFNLEdBQUdwQixrQ0FBSCwyQkFBWjtBQVllb0IscUVBQWYsRTs7QUNiQTs7Ozs7Ozs7Ozs7O0FBaURBOzs7Ozs7Ozs7QUFTTSxTQUFVLGlCQUFWLENBSUosSUFKSSxFQUlLLE9BSkwsRUFJZTtBQUNqQixTQUFPLElBQUksV0FBSixDQUFtQixJQUFuQixFQUF5QixPQUF6QixDQUFQO0FBQ0gsQzs7QUNwREQ7QUFFTSxNQUFPLGdDQUFQLENBQXNCO0FBQTVCO0FBVVksc0JBQWEsSUFBSSxHQUFKLEVBQWI7QUE4QlgsR0F4QzJCLENBQ3hCOzs7QUFDTyxTQUFPLFdBQVAsR0FBa0I7QUFDckIsUUFBSSxDQUFDLGdDQUFlLENBQUMsUUFBckIsRUFBK0I7QUFDM0Isc0NBQWUsQ0FBQyxRQUFoQixHQUEyQixJQUFJLGdDQUFKLEVBQTNCO0FBQ0g7O0FBQ0QsV0FBTyxnQ0FBZSxDQUFDLFFBQXZCO0FBQ0g7O0FBS00sWUFBVSxDQUFDLElBQUQsRUFBZSxPQUFmLEVBQStCO0FBQzVDLFNBQUssVUFBTCxDQUFnQixHQUFoQixDQUFvQixJQUFwQixFQUEwQixPQUExQixFQUQ0QyxDQUc1QztBQUNBO0FBQ0E7O0FBQ0EsVUFBTSxLQUFLLEdBQUcsaUJBQWlCLENBQUMsa0JBQUQsRUFBcUI7QUFDaEQsWUFBTSxFQUFFO0FBQUUsWUFBRjtBQUFRO0FBQVI7QUFEd0MsS0FBckIsQ0FBL0IsQ0FONEMsQ0FTNUM7QUFDQTtBQUNBOztBQUNBLGNBQVUsQ0FBQyxNQUFNLE1BQU0sQ0FBQyxhQUFQLENBQXFCLEtBQXJCLENBQVAsRUFBb0MsQ0FBcEMsQ0FBVjtBQUNIOztBQUNNLGVBQWEsQ0FBQyxJQUFELEVBQWE7QUFDN0IsU0FBSyxVQUFMLENBQWdCLE1BQWhCLENBQXVCLElBQXZCLEVBRDZCLENBRTdCO0FBQ0E7QUFDQTs7QUFDQSxVQUFNLEtBQUssR0FBRyxpQkFBaUIsQ0FBQyxvQkFBRCxFQUF1QjtBQUNsRCxZQUFNLEVBQUU7QUFBRTtBQUFGO0FBRDBDLEtBQXZCLENBQS9CLENBTDZCLENBUTdCOztBQUNBLGNBQVUsQ0FBQyxNQUFNLE1BQU0sQ0FBQyxhQUFQLENBQXFCLEtBQXJCLENBQVAsRUFBb0MsQ0FBcEMsQ0FBVjtBQUNIOztBQUNNLFlBQVUsQ0FBQyxJQUFELEVBQWE7QUFDMUIsV0FBTyxLQUFLLFVBQUwsQ0FBZ0IsR0FBaEIsQ0FBb0IsSUFBcEIsQ0FBUDtBQUNIOztBQXZDdUIsQzs7Ozs7Ozs7Ozs7Ozs7QUNkNUI7QUFDQSxNQUFNQSxXQUFNLEdBQUdwQixrQ0FBSCx1QkFBWjtBQUdlb0IseURBQWYsRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0pBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWUE7QUFTQTtBQUVBO0FBQ0E7QUFFTSxNQUFPLFNBQVAsU0FBb0IsaUNBQXBCLENBQThCO0FBQXBDOztBQVVXLGdCQUFlLEdBQWY7QUE2R1Y7O0FBdEdVLGFBQVcsTUFBWCxHQUFpQjtBQUNwQixXQUFPLENBQUMsU0FBRCxDQUFQO0FBQ0g7O0FBRU0sbUJBQWlCO0FBQ3BCLFVBQU0saUJBQU4sR0FEb0IsQ0FHcEI7O0FBQ0EsU0FBSyxlQUFMLEdBQXlCLEVBQUQsSUFBb0I7QUFDeEMsVUFBSSxDQUFDLEtBQUssSUFBVixFQUFnQjtBQUNaO0FBQ0gsT0FIdUMsQ0FJeEM7OztBQUNBLFlBQU0sSUFBSSxHQUFHLEtBQUssU0FBTCxDQUFlLEtBQUssSUFBcEIsQ0FBYjs7QUFDQSxVQUFJLENBQUMsSUFBTCxFQUFXO0FBQ1A7QUFDSDs7QUFDRCxVQUFJLEVBQUUsQ0FBQyxNQUFILENBQVUsSUFBVixLQUFtQixJQUFJLENBQUMsT0FBNUIsRUFBcUM7QUFDakMsYUFBSyxVQUFMO0FBQ0g7QUFDSixLQVpEOztBQWFBLFVBQU0sQ0FBQyxnQkFBUCxDQUF3QixrQkFBeEIsRUFBNEMsS0FBSyxlQUFqRDtBQUNIOztBQUNNLHNCQUFvQjtBQUN2QixVQUFNLG9CQUFOOztBQUNBLFFBQUksS0FBSyxlQUFULEVBQTBCO0FBQ3RCLFlBQU0sQ0FBQyxtQkFBUCxDQUNJLGtCQURKLEVBRUksS0FBSyxlQUZUO0FBSUg7QUFDSjs7QUFFTSxjQUFZO0FBQ2YsU0FBSyxVQUFMO0FBQ0g7O0FBRU0sMEJBQXdCLENBQzNCLElBRDJCLEVBRTNCLEdBRjJCLEVBRzNCLEtBSDJCLEVBR2Q7QUFFYixVQUFNLHdCQUFOLENBQStCLElBQS9CLEVBQXFDLEdBQXJDLEVBQTBDLEtBQTFDO0FBQ0EsU0FBSyxVQUFMLEdBSGEsQ0FHTTtBQUN0Qjs7QUFFUyxRQUFNO0FBQ1osV0FBTyxtQ0FBUCw2QkFDMEIsS0FBSyxVQUFMLEVBRDFCO0FBR0g7O0FBRU8sWUFBVTtBQUNkLFFBQUksQ0FBQyxLQUFLLElBQVYsRUFBZ0I7QUFDWjtBQUNILEtBSGEsQ0FJZDs7O0FBQ0EsVUFBTSxJQUFJLEdBQUcsS0FBSyxTQUFMLENBQWUsS0FBSyxJQUFwQixDQUFiOztBQUNBLFFBQUksQ0FBQyxJQUFMLEVBQVc7QUFDUDtBQUNILEtBUmEsQ0FTZDs7O0FBQ0EsVUFBTSxPQUFPLEdBQUcsZ0NBQWUsQ0FBQyxXQUFoQixHQUE4QixVQUE5QixDQUF5QyxJQUFJLENBQUMsT0FBOUMsQ0FBaEI7O0FBQ0EsUUFBSSxDQUFDLE9BQUwsRUFBYztBQUNWO0FBQ0E7QUFDSDs7QUFDRCxRQUFJLENBQUMsS0FBSyxhQUFWLEVBQXlCO0FBQ3JCO0FBQ0g7O0FBQ0QsU0FBSyxhQUFMLENBQW1CLFNBQW5CLEdBQStCLEVBQS9CO0FBQ0EsV0FBTyxDQUFDLGtCQUFSLENBQ0ksS0FBSyxhQURULEVBRUksSUFBSSxDQUFDLElBRlQsRUFHSSxLQUFLLElBQUwsR0FBWSxLQUFLLElBQWpCLEdBQXdCLEVBSDVCO0FBS0g7O0FBRU8sV0FBUyxDQUFDLElBQUQsRUFBYTtBQUMxQixRQUFJLENBQUMsSUFBTCxFQUFXO0FBQ1AsYUFBTyxJQUFQO0FBQ0g7O0FBQ0QsVUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLEtBQUwsQ0FBVyxHQUFYLENBQWxCO0FBQ0EsUUFBSSxXQUFXLEdBQUcsU0FBbEI7QUFDQSxRQUFJLFFBQVEsR0FBRyxJQUFmOztBQUNBLFFBQUksU0FBUyxDQUFDLE1BQVYsR0FBbUIsQ0FBdkIsRUFBMEI7QUFDdEIsaUJBQVcsR0FBRyxTQUFTLENBQUMsQ0FBRCxDQUF2QjtBQUNBLGNBQVEsR0FBRyxTQUFTLENBQUMsQ0FBRCxDQUFwQjtBQUNIOztBQUNELFdBQU87QUFBRSxhQUFPLEVBQUUsV0FBWDtBQUF3QixVQUFJLEVBQUU7QUFBOUIsS0FBUDtBQUNIOztBQUVPLFlBQVU7QUFDZDtBQUNBLFdBQU8sbUNBQVAseUJBQ00sS0FBSyxHQUFMLEdBQ0ksbUNBREoseUJBRW9CLEtBQUssR0FGekIsSUFJSSwyQkFMVjtBQU9IOztBQXRIK0I7QUFDbEIsZUFBSyxTQUFMOztBQUdkLGVBREMsdUNBQVEsRUFDVCxHLG1CQUFBLEUsS0FBQSxFLEtBQW9CLENBQXBCOztBQUdBLGVBREMsdUNBQVEsRUFDVCxHLG1CQUFBLEUsTUFBQSxFLEtBQXFCLENBQXJCOztBQUdBLGVBREMsdUNBQVEsRUFDVCxHLG1CQUFBLEUsTUFBQSxFLEtBQTBCLENBQTFCOztBQUdBLGVBREMsb0NBQUssQ0FBQyxZQUFELENBQ04sRyxtQkFBQSxFLGVBQUEsRSxLQUFvQyxDQUFwQyxFOztBQ3ZDSjs7Ozs7Ozs7Ozs7QUFXQTtBQUNBOztBQUVBLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBZixDQUFtQixTQUFuQixDQUFMLEVBQW9DO0FBQ2hDLGdCQUFjLENBQUMsTUFBZixDQUFzQixTQUF0QixFQUFpQyxTQUFqQztBQUNILEM7Ozs7Ozs7Ozs7Ozs7O0FDaEJEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWUE7QUFDQTtBQUNBO0FBQ0E7QUFFTSxNQUFPLGlCQUFQLFNBQXdCLDBCQUF4QixDQUFvQztBQUExQzs7QUFFVyx5QkFBeUIsS0FBekI7QUFHQSxtQkFBbUIsS0FBbkI7QUE0QlY7O0FBMUJVLGFBQVcsTUFBWCxHQUFpQjtBQUNwQixXQUFPLENBQUMsaUJBQUQsQ0FBUDtBQUNIOztBQUVTLFFBQU07QUFDWixXQUFPLG1DQUFQLHFDQUVVLE1BQU0sTUFBTixFQUZWO0FBb0JIOztBQWhDcUM7O0FBRXRDLG1CQURDLHVDQUFRLENBQUM7QUFBRSxNQUFJLEVBQUUsT0FBUjtBQUFpQixTQUFPLEVBQUU7QUFBMUIsQ0FBRCxDQUNULEcsMkJBQUEsRSxlQUFBLEUsS0FBc0MsQ0FBdEM7O0FBR0EsbUJBREMsdUNBQVEsQ0FBQztBQUFFLE1BQUksRUFBRSxPQUFSO0FBQWlCLFNBQU8sRUFBRTtBQUExQixDQUFELENBQ1QsRywyQkFBQSxFLFNBQUEsRSxLQUFnQyxDQUFoQyxFOztBQ3RCSjs7Ozs7Ozs7Ozs7QUFXQTtBQUVBOztBQUVBLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBZixDQUFtQixhQUFuQixDQUFMLEVBQXdDO0FBQ3BDLGdCQUFjLENBQUMsTUFBZixDQUFzQixhQUF0QixFQUFxQyxpQkFBckM7QUFDSCxDOzs7Ozs7Ozs7Ozs7OztBQ2pCRDtBQUNBLE1BQU1BLGVBQU0sR0FBR3BCLGtDQUFILDJCQUFaO0FBR2VvQiw0REFBZixFOzs7Ozs7Ozs7Ozs7OztBQ0pBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWUE7QUFRQTtBQUNBO0FBTU0sTUFBTyxpQkFBUCxTQUF3QixpQ0FBeEIsQ0FBa0M7QUFBeEM7O0FBT1ksdUJBQTJCLE1BQTNCO0FBV0QscUJBQVksS0FBWjtBQUVDLDhCQUFvQyxJQUFwQztBQXlGWDs7QUExR1UsYUFBVyxNQUFYLEdBQWlCO0FBQ3BCLFdBQU8sQ0FBQyxRQUFELENBQVA7QUFDSDs7QUFHRCxNQUFXLFVBQVgsR0FBcUI7QUFDakIsV0FBTyxLQUFLLFdBQVo7QUFDSDs7QUFDRCxNQUFXLFVBQVgsQ0FBc0IsS0FBdEIsRUFBd0M7QUFDcEMsUUFBSSxDQUFDLE1BQUQsRUFBUyxNQUFULEVBQWlCLE1BQWpCLEVBQXlCLE1BQXpCLEVBQWlDLFFBQWpDLENBQTBDLEtBQTFDLENBQUosRUFBc0Q7QUFDbEQsV0FBSyxXQUFMLEdBQW1CLEtBQW5CO0FBQ0g7QUFDSjs7QUFPTSxZQUFVLENBQUMsRUFBRCxFQUFjO0FBQzNCLFVBQU0saUJBQWlCLEdBQUcsaUJBQWlCLENBQ3ZDLDJCQUR1QyxFQUV2QztBQUNJLGFBQU8sRUFBRSxJQURiO0FBRUksZ0JBQVUsRUFBRSxJQUZoQjtBQUdJLGNBQVEsRUFBRSxJQUhkO0FBSUksWUFBTSxFQUFFO0FBSlosS0FGdUMsQ0FBM0MsQ0FEMkIsQ0FVM0I7O0FBQ0EsVUFBTSxZQUFZLEdBQUcsS0FBSyxhQUFMLENBQW1CLGlCQUFuQixDQUFyQjs7QUFDQSxRQUFJLENBQUMsRUFBRSxDQUFDLFlBQVIsRUFBc0I7QUFDbEI7QUFDSDs7QUFDRCxRQUFJLENBQUMsWUFBTCxFQUFtQjtBQUNmLFFBQUUsQ0FBQyxZQUFILENBQWdCLFVBQWhCLEdBQTZCLE1BQTdCO0FBQ0E7QUFDSDs7QUFFRCxNQUFFLENBQUMsY0FBSDtBQUVBLFNBQUssdUJBQUw7QUFFQSxTQUFLLFNBQUwsR0FBaUIsSUFBakI7QUFFQSxNQUFFLENBQUMsWUFBSCxDQUFnQixVQUFoQixHQUE2QixLQUFLLFVBQWxDO0FBQ0EsVUFBTSxhQUFhLEdBQUcsaUJBQWlCLENBQUMsc0JBQUQsRUFBeUI7QUFDNUQsYUFBTyxFQUFFLElBRG1EO0FBRTVELGNBQVEsRUFBRSxJQUZrRDtBQUc1RCxZQUFNLEVBQUU7QUFIb0QsS0FBekIsQ0FBdkM7QUFLQSxTQUFLLGFBQUwsQ0FBbUIsYUFBbkI7QUFDSDs7QUFFTSxhQUFXLENBQUMsRUFBRCxFQUFjO0FBQzVCLFNBQUssdUJBQUw7QUFFQSxTQUFLLGtCQUFMLEdBQTBCLE1BQU0sQ0FBQyxVQUFQLENBQWtCLE1BQUs7QUFDN0MsVUFBSSxLQUFLLFNBQVQsRUFBb0I7QUFDaEIsYUFBSyxTQUFMLEdBQWlCLEtBQWpCO0FBQ0g7O0FBRUQsWUFBTSxTQUFTLEdBQUcsaUJBQWlCLENBQUMsdUJBQUQsRUFBMEI7QUFDekQsZUFBTyxFQUFFLElBRGdEO0FBRXpELGdCQUFRLEVBQUUsSUFGK0M7QUFHekQsY0FBTSxFQUFFO0FBSGlELE9BQTFCLENBQW5DO0FBS0EsV0FBSyxhQUFMLENBQW1CLFNBQW5CO0FBQ0gsS0FYeUIsRUFXdkIsR0FYdUIsQ0FBMUI7QUFZSDs7QUFFTSxRQUFNLENBQUMsRUFBRCxFQUFjO0FBQ3ZCLE1BQUUsQ0FBQyxjQUFIO0FBRUEsU0FBSyx1QkFBTDs7QUFFQSxRQUFJLEtBQUssU0FBVCxFQUFvQjtBQUNoQixXQUFLLFNBQUwsR0FBaUIsS0FBakI7QUFDSDs7QUFDRCxVQUFNLFNBQVMsR0FBRyxpQkFBaUIsQ0FBQyxrQkFBRCxFQUFxQjtBQUNwRCxhQUFPLEVBQUUsSUFEMkM7QUFFcEQsY0FBUSxFQUFFLElBRjBDO0FBR3BELFlBQU0sRUFBRTtBQUg0QyxLQUFyQixDQUFuQztBQUtBLFNBQUssYUFBTCxDQUFtQixTQUFuQjtBQUNIOztBQUVTLFFBQU07QUFDWixXQUFPLG1DQUFQLHFDQUdpQixLQUFLLE1BSHRCLEVBSXFCLEtBQUssVUFKMUIsRUFLc0IsS0FBSyxXQUwzQjtBQVVIOztBQUVTLHlCQUF1QjtBQUM3QixRQUFJLEtBQUssa0JBQVQsRUFBNkI7QUFDekIsa0JBQVksQ0FBQyxLQUFLLGtCQUFOLENBQVo7QUFDQSxXQUFLLGtCQUFMLEdBQTBCLElBQTFCO0FBQ0g7QUFDSjs7QUE1R21DO0FBQ2IsdUJBQUssYUFBTDs7QUFpQnZCLG1CQURDLHVDQUFRLENBQUM7QUFBRSxNQUFJLEVBQUUsT0FBUjtBQUFpQixTQUFPLEVBQUUsSUFBMUI7QUFBZ0MsV0FBUyxFQUFFO0FBQTNDLENBQUQsQ0FDVCxHLDJCQUFBLEUsV0FBQSxFLEtBQXlCLENBQXpCLEU7O0FDN0NKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDQUE7QUFDQSxNQUFNQSwwQkFBTSxHQUFHcEIsa0NBQUgsc0NBQVo7QUFHZW9CLGtGQUFmLEU7Ozs7Ozs7Ozs7Ozs7O0FDSkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFZQTtBQVFBO0FBRU0sTUFBTyxzQ0FBUCxTQUFrQyxpQ0FBbEMsQ0FBNEM7QUFBbEQ7O0FBUVcsbUJBQVUsRUFBVjtBQUdBLHVCQUFjLEVBQWQ7QUFTVjs7QUFqQlUsYUFBVyxNQUFYLEdBQWlCO0FBQ3BCLFdBQU8sQ0FBQyxtQkFBRCxDQUFQO0FBQ0g7O0FBUVMsUUFBTTtBQUNaLFdBQU8sbUNBQVAsMkRBRXdCLEtBQUssT0FGN0IsRUFHNEIsS0FBSyxXQUhqQztBQUtIOztBQW5CNkM7QUFDdkIsNENBQUssd0JBQUw7O0FBT3ZCLDhCQURDLHVDQUFRLEVBQ1QsRyxnREFBQSxFLFNBQUEsRSxLQUFvQixDQUFwQjs7QUFHQSw4QkFEQyx1Q0FBUSxFQUNULEcsZ0RBQUEsRSxhQUFBLEUsS0FBd0IsQ0FBeEIsRTs7QUNqQ0o7Ozs7Ozs7Ozs7Ozs7QUNBQTs7Ozs7Ozs7Ozs7OztBQWNBO0FBRUE7Ozs7Ozs7QUFNTyxNQUFNLFNBQVMsR0FBRyxxQ0FBUyxDQUFFLEtBQUQsSUFBcUIsSUFBRCxJQUFlO0FBQ3BFLE1BQUksS0FBSyxLQUFLLFNBQVYsSUFBdUIsSUFBSSxZQUFZLGlDQUEzQyxFQUEwRDtBQUN4RCxRQUFJLEtBQUssS0FBSyxJQUFJLENBQUMsS0FBbkIsRUFBMEI7QUFDeEIsWUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQUwsQ0FBZSxJQUE1QjtBQUNBLFVBQUksQ0FBQyxTQUFMLENBQWUsT0FBZixDQUF1QixlQUF2QixDQUF1QyxJQUF2QztBQUNEO0FBQ0YsR0FMRCxNQUtPO0FBQ0wsUUFBSSxDQUFDLFFBQUwsQ0FBYyxLQUFkO0FBQ0Q7QUFDRixDQVRpQyxDQUEzQixDOzs7Ozs7Ozs7Ozs7OztBQ3RCUDtBQUNBLE1BQU1BLFdBQU0sR0FBR3BCLGtDQUFILHVCQUFaO0FBR2VvQix5REFBZixFOzs7Ozs7Ozs7Ozs7OztBQ0pBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWUE7QUFPQTtBQUVBO0FBRU0sTUFBTyxTQUFQLFNBQW9CLGlDQUFwQixDQUE4QjtBQUFwQzs7QUFRVyxnQkFBMkIsU0FBM0I7QUFHQSxrQkFBNkIsU0FBN0I7QUFTVjs7QUFqQlUsYUFBVyxNQUFYLEdBQWlCO0FBQ3BCLFdBQU8sQ0FBQyxTQUFELENBQVA7QUFDSDs7QUFRUyxRQUFNO0FBQ1osV0FBTyxtQ0FBUCw2QkFDYyxTQUFTLENBQUMsS0FBSyxJQUFOLENBRHZCLEVBQzZDLFNBQVMsQ0FBQyxLQUFLLE1BQU4sQ0FEdEQ7QUFLSDs7QUFuQitCO0FBQ1QsZUFBSyxTQUFMOztBQU92QixlQURDLHVDQUFRLEVBQ1QsRyxtQkFBQSxFLE1BQUEsRSxLQUE0QyxDQUE1Qzs7QUFHQSxlQURDLHVDQUFRLEVBQ1QsRyxtQkFBQSxFLFFBQUEsRSxLQUE4QyxDQUE5QyxFOztBQ2xDSjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0FBO0FBQ0EsTUFBTUEsWUFBTSxHQUFHcEIsa0NBQUgsd0JBQVo7QUFVZW9CLDREQUFmLEU7Ozs7Ozs7Ozs7Ozs7O0FDWEE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFZQTtBQVFBO0FBQ0E7QUFDQTtBQU1BOzs7Ozs7Ozs7O0FBU00sTUFBTyxXQUFQLFNBQXFCLG1CQUFyQixDQUE4QjtBQUFwQzs7QUFLVyxnQkFBTyxFQUFQO0FBR0EsaUJBQVEsRUFBUjtBQUdBLG1CQUFtQixLQUFuQjtBQXNDVjs7QUFoRFUsYUFBVyxNQUFYLEdBQWlCO0FBQ3BCLFdBQU8sQ0FBQyxXQUFELENBQVA7QUFDSDs7QUFhRCxNQUFXLFlBQVgsR0FBdUI7QUFDbkIsV0FBTyxLQUFLLFlBQVo7QUFDSDs7QUFFTSxjQUFZO0FBQ2YsU0FBSyxPQUFMLEdBQWUsS0FBSyxZQUFMLENBQWtCLE9BQWpDO0FBQ0EsU0FBSyxhQUFMLENBQ0ksaUJBQWlCLENBQUMsaUJBQUQsRUFBb0I7QUFDakMsYUFBTyxFQUFFLElBRHdCO0FBRWpDLGNBQVEsRUFBRSxJQUZ1QjtBQUdqQyxZQUFNLEVBQUU7QUFDSixhQUFLLEVBQUUsS0FBSztBQURSO0FBSHlCLEtBQXBCLENBRHJCO0FBU0g7O0FBRVMsUUFBTTtBQUNaLFdBQU8sbUNBQVAsK0JBS2UsS0FBSyxJQUxwQixFQU1nQixLQUFLLEtBTnJCLEVBT21CLEtBQUssT0FQeEIsRUFRa0IsS0FBSyxZQVJ2QjtBQWNIOztBQWhEK0I7O0FBS2hDLGdCQURDLHVDQUFRLENBQUM7QUFBRSxNQUFJLEVBQUUsTUFBUjtBQUFnQixTQUFPLEVBQUU7QUFBekIsQ0FBRCxDQUNULEcscUJBQUEsRSxNQUFBLEUsS0FBaUIsQ0FBakI7O0FBR0EsZ0JBREMsdUNBQVEsQ0FBQztBQUFFLE1BQUksRUFBRSxNQUFSO0FBQWdCLFNBQU8sRUFBRTtBQUF6QixDQUFELENBQ1QsRyxxQkFBQSxFLE9BQUEsRSxLQUFrQixDQUFsQjs7QUFHQSxnQkFEQyx1Q0FBUSxDQUFDO0FBQUUsTUFBSSxFQUFFLE9BQVI7QUFBaUIsU0FBTyxFQUFFO0FBQTFCLENBQUQsQ0FDVCxHLHFCQUFBLEUsU0FBQSxFLEtBQWdDLENBQWhDOztBQUdBLGdCQURDLG9DQUFLLENBQUMsUUFBRCxDQUNOLEcscUJBQUEsRSxjQUFBLEUsS0FBd0MsQ0FBeEMsRTs7QUNuREo7Ozs7Ozs7Ozs7O0FBV0E7QUFFQTs7QUFFQSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQWYsQ0FBbUIsVUFBbkIsQ0FBTCxFQUFxQztBQUNqQyxnQkFBYyxDQUFDLE1BQWYsQ0FBc0IsVUFBdEIsRUFBa0MsV0FBbEM7QUFDSCxDOzs7Ozs7Ozs7Ozs7OztBQ2pCRDtBQUNBLE1BQU1BLGtCQUFNLEdBQUdwQixrQ0FBSCw4QkFBWjtBQUdlb0Isa0VBQWYsRTs7Ozs7Ozs7Ozs7Ozs7QUNKQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVlBO0FBUUE7QUFJQTs7Ozs7O0FBS00sTUFBTyxzQkFBUCxTQUEwQixpQ0FBMUIsQ0FBb0M7QUFBMUM7O0FBTVcsZ0JBQU8sRUFBUDtBQUVDLHFCQUFZLEVBQVo7QUFvRFg7O0FBM0RVLGFBQVcsTUFBWCxHQUFpQjtBQUNwQixXQUFPLENBQUMsV0FBRCxDQUFQO0FBQ0g7O0FBUUQsTUFBVyxRQUFYLEdBQW1CO0FBQ2YsV0FBTyxLQUFLLFNBQVo7QUFDSDs7QUFFRCxNQUFXLFFBQVgsQ0FBb0IsS0FBcEIsRUFBaUM7QUFDN0IsVUFBTSxLQUFLLEdBQUcsS0FBSyxHQUNaLEtBQUssYUFBTCwwQkFBcUMsS0FBckMsT0FEWSxHQUViLFNBRk47QUFJQSxTQUFLLGVBQUw7O0FBRUEsUUFBSSxLQUFKLEVBQVc7QUFDUCxXQUFLLFNBQUwsR0FBaUIsS0FBakI7QUFDQSxXQUFLLENBQUMsT0FBTixHQUFnQixJQUFoQjtBQUNILEtBSEQsTUFHTztBQUNIO0FBQ0EsV0FBSyxTQUFMLEdBQWlCLEVBQWpCO0FBQ0g7QUFDSjs7QUFFUyxRQUFNO0FBQ1osV0FBTyxtQ0FBUDtBQUdIOztBQUVTLGNBQVk7QUFDbEIsVUFBTSxZQUFZLEdBQUcsS0FBSyxhQUFMLENBQW1CLG1CQUFuQixDQUFyQjtBQUNBLFVBQU0saUJBQWlCLEdBQUcsWUFBWSxHQUFHLFlBQVksQ0FBQyxLQUFoQixHQUF3QixFQUE5RCxDQUZrQixDQUlsQjs7QUFDQSxTQUFLLFFBQUwsR0FBZ0IsS0FBSyxRQUFMLElBQWlCLGlCQUFqQztBQUVBLFNBQUssZ0JBQUwsQ0FDSSxpQkFESixFQUVLLEVBQUQsSUFBdUM7QUFDbkMsV0FBSyxRQUFMLEdBQWdCLEVBQUUsQ0FBQyxNQUFILENBQVUsS0FBMUI7QUFDSCxLQUpMO0FBTUg7O0FBRU8saUJBQWU7QUFDbkIsVUFBTSxlQUFlLEdBQUcsS0FBSyxnQkFBTCxDQUFzQixtQkFBdEIsQ0FBeEI7QUFFQSxtQkFBZSxDQUFDLE9BQWhCLENBQXlCLE9BQUQsSUFBWTtBQUNoQyxZQUFNLEtBQUssR0FBRyxPQUFkO0FBQ0EsV0FBSyxDQUFDLE9BQU4sR0FBZ0IsS0FBaEI7QUFDSCxLQUhEO0FBSUg7O0FBM0RxQzs7QUFNdEMsc0JBREMsdUNBQVEsQ0FBQztBQUFFLE1BQUksRUFBRSxNQUFSO0FBQWdCLFNBQU8sRUFBRTtBQUF6QixDQUFELENBQ1QsRyxnQ0FBQSxFLE1BQUEsRSxLQUFpQixDQUFqQjs7QUFLQSxzQkFEQyx1Q0FBUSxDQUFDO0FBQUUsU0FBTyxFQUFFO0FBQVgsQ0FBRCxDQUNULEcsZ0NBQUEsRSxVQUFBLEVBRUMsSUFGRCxFOztBQ3hDSjs7Ozs7Ozs7Ozs7QUFXQTtBQUVBOztBQUVBLElBQUksQ0FBQyxjQUFjLENBQUMsR0FBZixDQUFtQixnQkFBbkIsQ0FBTCxFQUEyQztBQUN2QyxnQkFBYyxDQUFDLE1BQWYsQ0FBc0IsZ0JBQXRCLEVBQXdDLHNCQUF4QztBQUNILEM7Ozs7Ozs7Ozs7Ozs7O0FDakJEO0FBQ0EsTUFBTUEsc0JBQU0sR0FBR3BCLGtDQUFILGtDQUFaO0FBdUJlb0IsMEVBQWYsRTs7Ozs7Ozs7Ozs7Ozs7QUN4QkE7QUFDQSxNQUFNQSxhQUFNLEdBQUdwQixrQ0FBSCx5QkFBWjtBQUdlb0Isd0RBQWYsRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDSkE7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFZQTtBQVFBO0FBQ0E7QUFDQTtBQUNBO0FBSU0sTUFBTyxhQUFQLFNBQXNCLG1CQUF0QixDQUErQjtBQUFyQzs7QUFNVyxnQkFBTyxFQUFQO0FBa0JDLGtCQUFTLEVBQVQ7QUFHRCxtQkFBVSxFQUFWO0FBR0EsaUJBQVEsRUFBUjtBQUdBLHFCQUFhLElBQWI7QUFHQSxlQUFNLEVBQU47QUFHQSxlQUFNLENBQU47QUFHQSxnQkFBTyxDQUFQO0FBR0Esb0JBQVcsS0FBWDtBQUdBLG9CQUFXLEtBQVg7QUFHQSwyQkFBa0IsS0FBbEI7QUFpUFY7O0FBblNVLGFBQVcsTUFBWCxHQUFpQjtBQUNwQixXQUFPLENBQUMsTUFBRCxFQUFlLGVBQWYsQ0FBUDtBQUNIOztBQU1ELE1BQVcsS0FBWCxHQUFnQjtBQUNaLFdBQU8sS0FBSyxNQUFaO0FBQ0g7O0FBRUQsTUFBVyxLQUFYLENBQWlCLEtBQWpCLEVBQThCO0FBQzFCLFVBQU0sUUFBUSxHQUFHLEtBQUssS0FBdEI7O0FBRUEsUUFBSSxLQUFLLEtBQUssUUFBZCxFQUF3QjtBQUNwQjtBQUNIOztBQUVELFNBQUssTUFBTCxHQUFjLEtBQUssVUFBTCxDQUFnQixLQUFoQixDQUFkO0FBQ0EsU0FBSyxhQUFMLENBQW1CLE9BQW5CLEVBQTRCLFFBQTVCO0FBQ0g7O0FBcUNELE1BQVcsWUFBWCxHQUF1QjtBQUNuQixXQUFPLEtBQUssS0FBTCxHQUFhLEtBQUssS0FBbEIsR0FBMEIsSUFBakM7QUFDSDs7QUFFUyxRQUFNO0FBQ1osV0FBTyxtQ0FBUCxpQ0FDTSxLQUFLLFdBQUwsRUFETixFQUVNLEtBQUssT0FBTCxLQUFpQixPQUFqQixHQUNJLEtBQUssZ0JBQUwsRUFESixHQUVJLEtBQUssV0FBTCxFQUpWO0FBTUg7O0FBRU8sYUFBVztBQUNmLFdBQU8sbUNBQVAsMkJBRXdDLEtBQUssS0FGN0MsRUFTYyxLQUFLLEtBVG5CO0FBYUg7O0FBRU8sY0FBWTtBQUNoQixXQUFPLG1DQUFQLDJCQUdnQixLQUFLLFdBSHJCLEVBSXVCLEtBQUssYUFKNUIsRUFLdUIsS0FBSyxhQUw1QixFQU1xQixLQUFLLFdBTjFCLEVBT3lCLEtBQUssZUFQOUIsRUFhcUIsS0FBSyxLQWIxQixFQWNvQixLQUFLLElBZHpCLEVBZW1CLEtBQUssR0FmeEIsRUFnQm1CLEtBQUssR0FoQnhCLEVBaUI0QixLQUFLLFFBakJqQyxFQWtCeUIsS0FBSyxTQUFMLElBQWtCLEtBQUssS0FsQmhELEVBbUI0QixLQUFLLEdBbkJqQyxFQW9CNEIsS0FBSyxHQXBCakMsRUFxQjZCLEtBQUssS0FyQmxDLEVBc0JzQixLQUFLLGFBdEIzQixFQXVCcUIsS0FBSyxZQXZCMUIsRUF3Qm9CLEtBQUssV0F4QnpCO0FBNEJIOztBQUVPLGFBQVc7QUFDZixXQUFPLG1DQUFQLDJCQUNzQyxLQUFLLGtCQUQzQyxFQUdvQixLQUFLLGNBSHpCLEVBT1UsS0FBSyxZQUFMLEVBUFYsRUFVb0IsS0FBSyxlQVZ6QjtBQWlCSDs7QUFFTyxrQkFBZ0I7QUFDcEIsV0FBTyxtQ0FBUCwyQkFDc0MsS0FBSyxrQkFEM0MsRUFHVSxLQUFLLFlBQUwsRUFIVjtBQU1IOztBQUVPLGVBQWEsQ0FBQyxFQUFELEVBQWlCO0FBQ2xDLFFBQUksS0FBSyxRQUFULEVBQW1CO0FBQ2Y7QUFDSDs7QUFDRCxTQUFLLEtBQUwsQ0FBVyxLQUFYO0FBQ0EsU0FBSyxRQUFMLEdBQWdCLElBQWhCO0FBQ0EsU0FBSyxNQUFMLENBQVksaUJBQVosQ0FBOEIsRUFBRSxDQUFDLFNBQWpDO0FBQ0g7O0FBRU8sYUFBVyxDQUFDLEVBQUQsRUFBaUI7QUFDaEM7QUFDQSxTQUFLLEtBQUwsQ0FBVyxLQUFYO0FBQ0EsU0FBSyxlQUFMLEdBQXVCLEtBQXZCO0FBQ0EsU0FBSyxRQUFMLEdBQWdCLEtBQWhCO0FBQ0EsU0FBSyxNQUFMLENBQVkscUJBQVosQ0FBa0MsRUFBRSxDQUFDLFNBQXJDO0FBQ0EsU0FBSyxtQkFBTDtBQUNIOztBQUVPLGVBQWEsQ0FBQyxFQUFELEVBQWlCO0FBQ2xDLFFBQUksQ0FBQyxLQUFLLFFBQVYsRUFBb0I7QUFDaEI7QUFDSDs7QUFDRCxTQUFLLEtBQUwsR0FBYSxLQUFLLHVCQUFMLENBQTZCLEVBQTdCLENBQWI7QUFDQSxTQUFLLGtCQUFMO0FBQ0g7O0FBRU8saUJBQWUsQ0FBQyxFQUFELEVBQWlCO0FBQ3BDLFNBQUssUUFBTCxHQUFnQixLQUFoQjtBQUNBLFNBQUssTUFBTCxDQUFZLHFCQUFaLENBQWtDLEVBQUUsQ0FBQyxTQUFyQztBQUNIO0FBRUQ7Ozs7OztBQUlRLG9CQUFrQixDQUFDLEVBQUQsRUFBaUI7QUFDdkMsUUFBSSxFQUFFLENBQUMsTUFBSCxLQUFjLEtBQUssTUFBbkIsSUFBNkIsS0FBSyxRQUF0QyxFQUFnRDtBQUM1QztBQUNIOztBQUNELFNBQUssUUFBTCxHQUFnQixJQUFoQjtBQUNBLFNBQUssTUFBTCxDQUFZLGlCQUFaLENBQThCLEVBQUUsQ0FBQyxTQUFqQztBQUVBLFNBQUssS0FBTCxHQUFhLEtBQUssdUJBQUwsQ0FBNkIsRUFBN0IsQ0FBYjtBQUNBLFNBQUssa0JBQUw7QUFDSDtBQUVEOzs7OztBQUdRLGVBQWE7QUFDakIsVUFBTSxVQUFVLEdBQUcsVUFBVSxDQUFDLEtBQUssS0FBTCxDQUFXLEtBQVosQ0FBN0I7QUFDQSxTQUFLLEtBQUwsR0FBYSxLQUFLLFVBQUwsQ0FBZ0IsVUFBaEIsQ0FBYjtBQUNBLFNBQUssS0FBTCxDQUFXLEtBQVgsR0FBbUIsS0FBSyxLQUFMLENBQVcsUUFBWCxFQUFuQjtBQUVBLFNBQUssa0JBQUw7QUFDQSxTQUFLLG1CQUFMO0FBQ0g7O0FBRU8sY0FBWTtBQUNoQixTQUFLLGVBQUwsR0FBdUIsSUFBdkI7QUFDSDs7QUFFTyxhQUFXO0FBQ2YsU0FBSyxlQUFMLEdBQXVCLEtBQXZCO0FBQ0g7QUFFRDs7Ozs7OztBQUtRLHlCQUF1QixDQUFDLEVBQUQsRUFBaUI7QUFDNUMsVUFBTSxJQUFJLEdBQUcsS0FBSyxxQkFBTCxFQUFiO0FBQ0EsVUFBTSxTQUFTLEdBQUcsSUFBSSxDQUFDLElBQXZCO0FBQ0EsVUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLE9BQWxCO0FBQ0EsVUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQWxCO0FBRUEsVUFBTSxPQUFPLEdBQUcsQ0FBQyxNQUFNLEdBQUcsU0FBVixJQUF1QixJQUF2QztBQUNBLFFBQUksS0FBSyxHQUFHLEtBQUssR0FBTCxHQUFXLENBQUMsS0FBSyxHQUFMLEdBQVcsS0FBSyxHQUFqQixJQUF3QixPQUEvQztBQUVBLFNBQUssR0FBRyxLQUFLLFVBQUwsQ0FBZ0IsS0FBaEIsQ0FBUjs7QUFFQSxRQUFJLEtBQUssSUFBVCxFQUFlO0FBQ1gsV0FBSyxHQUFHLElBQUksQ0FBQyxLQUFMLENBQVcsS0FBSyxHQUFHLEtBQUssSUFBeEIsSUFBZ0MsS0FBSyxJQUE3QztBQUNIOztBQUVELFdBQU8sS0FBUDtBQUNIO0FBRUQ7Ozs7OztBQUlRLFlBQVUsQ0FBQyxLQUFELEVBQWM7QUFDNUIsVUFBTSxZQUFZLEdBQUcsSUFBSSxDQUFDLEdBQUwsQ0FBUyxLQUFULEVBQWdCLEtBQUssR0FBckIsQ0FBckI7QUFDQSxXQUFPLElBQUksQ0FBQyxHQUFMLENBQVMsWUFBVCxFQUF1QixLQUFLLEdBQTVCLENBQVA7QUFDSDs7QUFFTyxvQkFBa0I7QUFDdEIsVUFBTSxVQUFVLEdBQUcsaUJBQWlCLENBQUMsaUJBQUQsRUFBb0I7QUFDcEQsYUFBTyxFQUFFLElBRDJDO0FBRXBELGNBQVEsRUFBRSxJQUYwQztBQUdwRCxZQUFNLEVBQUUsS0FBSztBQUh1QyxLQUFwQixDQUFwQztBQU1BLFNBQUssYUFBTCxDQUFtQixVQUFuQjtBQUNIOztBQUVPLHFCQUFtQjtBQUN2QixTQUFLLEtBQUwsQ0FBVyxLQUFYLEdBQW1CLEtBQUssS0FBTCxDQUFXLFFBQVgsRUFBbkI7QUFFQSxVQUFNLFdBQVcsR0FBRyxpQkFBaUIsQ0FBQyxrQkFBRCxFQUFxQjtBQUN0RCxhQUFPLEVBQUUsSUFENkM7QUFFdEQsY0FBUSxFQUFFLElBRjRDO0FBR3RELFlBQU0sRUFBRSxLQUFLO0FBSHlDLEtBQXJCLENBQXJDO0FBTUEsU0FBSyxhQUFMLENBQW1CLFdBQW5CO0FBQ0g7QUFFRDs7Ozs7QUFHQSxNQUFZLGFBQVosR0FBeUI7QUFDckIsVUFBTSxLQUFLLEdBQUcsS0FBSyxHQUFMLEdBQVcsS0FBSyxHQUE5QjtBQUNBLFVBQU0sUUFBUSxHQUFHLEtBQUssS0FBTCxHQUFhLEtBQUssR0FBbkM7QUFFQSxXQUFPLFFBQVEsR0FBRyxLQUFsQjtBQUNIOztBQUVELE1BQVksY0FBWixHQUEwQjtBQUN0Qiw0QkFBaUIsS0FBSyxhQUFMLEdBQXFCLEdBQXRDO0FBQ0g7O0FBRUQsTUFBWSxlQUFaLEdBQTJCO0FBQ3ZCLFVBQU0sS0FBSyxvQkFBYSxDQUFDLElBQUksS0FBSyxhQUFWLElBQTJCLEdBQXhDLFFBQVg7QUFDQSxVQUFNLE1BQU0sd0JBQWlCLEtBQUssYUFBTCxHQUFxQixHQUF0QyxhQUFaO0FBRUEsV0FBTyxLQUFLLEdBQUcsTUFBZjtBQUNIOztBQUVELE1BQVksV0FBWixHQUF1QjtBQUNuQiwyQkFBZ0IsS0FBSyxhQUFMLEdBQXFCLEdBQXJDO0FBQ0g7O0FBblNnQzs7QUFNakMsaUJBREMsdUNBQVEsRUFDVCxHLHVCQUFBLEUsTUFBQSxFLEtBQWlCLENBQWpCOztBQUdBLGlCQURDLHVDQUFRLENBQUM7QUFBRSxTQUFPLEVBQUU7QUFBWCxDQUFELENBQ1QsRyx1QkFBQSxFLE9BQUEsRUFFQyxJQUZEOztBQWtCQSxpQkFEQyx1Q0FBUSxDQUFDO0FBQUUsU0FBTyxFQUFFO0FBQVgsQ0FBRCxDQUNULEcsdUJBQUEsRSxTQUFBLEUsS0FBb0IsQ0FBcEI7O0FBR0EsaUJBREMsdUNBQVEsRUFDVCxHLHVCQUFBLEUsT0FBQSxFLEtBQWtCLENBQWxCOztBQUdBLGlCQURDLHVDQUFRLENBQUM7QUFBRSxTQUFPLEVBQUUsSUFBWDtBQUFpQixXQUFTLEVBQUU7QUFBNUIsQ0FBRCxDQUNULEcsdUJBQUEsRSxXQUFBLEUsS0FBeUIsQ0FBekI7O0FBR0EsaUJBREMsdUNBQVEsQ0FBQztBQUFFLE1BQUksRUFBRTtBQUFSLENBQUQsQ0FDVCxHLHVCQUFBLEUsS0FBQSxFLEtBQWdCLENBQWhCOztBQUdBLGlCQURDLHVDQUFRLENBQUM7QUFBRSxNQUFJLEVBQUU7QUFBUixDQUFELENBQ1QsRyx1QkFBQSxFLEtBQUEsRSxLQUFlLENBQWY7O0FBR0EsaUJBREMsdUNBQVEsQ0FBQztBQUFFLE1BQUksRUFBRTtBQUFSLENBQUQsQ0FDVCxHLHVCQUFBLEUsTUFBQSxFLEtBQWdCLENBQWhCOztBQUdBLGlCQURDLHVDQUFRLENBQUM7QUFBRSxNQUFJLEVBQUUsT0FBUjtBQUFpQixTQUFPLEVBQUU7QUFBMUIsQ0FBRCxDQUNULEcsdUJBQUEsRSxVQUFBLEUsS0FBd0IsQ0FBeEI7O0FBR0EsaUJBREMsdUNBQVEsQ0FBQztBQUFFLE1BQUksRUFBRSxPQUFSO0FBQWlCLFNBQU8sRUFBRTtBQUExQixDQUFELENBQ1QsRyx1QkFBQSxFLFVBQUEsRSxLQUF3QixDQUF4Qjs7QUFHQSxpQkFEQyx1Q0FBUSxDQUFDO0FBQUUsTUFBSSxFQUFFLE9BQVI7QUFBaUIsU0FBTyxFQUFFLElBQTFCO0FBQWdDLFdBQVMsRUFBRTtBQUEzQyxDQUFELENBQ1QsRyx1QkFBQSxFLGlCQUFBLEUsS0FBK0IsQ0FBL0I7O0FBR0EsaUJBREMsb0NBQUssQ0FBQyxTQUFELENBQ04sRyx1QkFBQSxFLFFBQUEsRSxLQUFnQyxDQUFoQzs7QUFHQSxpQkFEQyxvQ0FBSyxDQUFDLFFBQUQsQ0FDTixHLHVCQUFBLEUsT0FBQSxFLEtBQWlDLENBQWpDLEU7O0FDcEZKOzs7Ozs7Ozs7OztBQVdBO0FBRUE7O0FBRUEsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFmLENBQW1CLFdBQW5CLENBQUwsRUFBc0M7QUFDbEMsZ0JBQWMsQ0FBQyxNQUFmLENBQXNCLFdBQXRCLEVBQW1DLGFBQW5DO0FBQ0gsQzs7Ozs7Ozs7O0FDakJEOzs7Ozs7Ozs7Ozs7O0FBV0E7QUFFQTtBQUVNLE1BQWdCLGVBQWhCLFNBQWdDLGlDQUFoQyxDQUEwQztBQUFoRDs7QUFHYyxzQkFBc0IsS0FBdEI7QUE0RWI7O0FBeEVhLGNBQVksQ0FDbEIsaUJBRGtCLEVBQ3VDO0FBRXpEO0FBQ0EsU0FBSyxLQUFMLENBQVcsT0FBWCxHQUFxQixNQUFyQjtBQUNIO0FBRUQ7Ozs7OztBQUtBLE1BQVcsSUFBWCxDQUFnQixLQUFoQixFQUE2QjtBQUN6QjtBQUNBO0FBQ0EsUUFBSSxLQUFLLFVBQVQsRUFBcUI7QUFDakIsVUFBSSxLQUFLLEtBQVQsRUFBZ0I7QUFDWjtBQUNBLHdDQUFlLENBQUMsV0FBaEIsR0FBOEIsYUFBOUIsQ0FBNEMsS0FBSyxLQUFqRDtBQUNIOztBQUVELFVBQUksS0FBSixFQUFXO0FBQ1A7QUFDQSx3Q0FBZSxDQUFDLFdBQWhCLEdBQThCLFVBQTlCLENBQXlDLEtBQXpDLEVBQWdELElBQWhEO0FBQ0g7QUFDSjs7QUFDRCxTQUFLLEtBQUwsR0FBYSxLQUFiO0FBQ0g7O0FBQ0QsTUFBVyxJQUFYLEdBQWU7QUFDWCxXQUFPLEtBQUssS0FBWjtBQUNIO0FBV0Q7Ozs7O0FBR08sYUFBVztBQUNkLFVBQU0sSUFBSSxLQUFKLENBQVUsa0JBQVYsQ0FBTjtBQUNIO0FBRUQ7Ozs7O0FBR08sbUJBQWlCO0FBQ3BCLFVBQU0saUJBQU47O0FBRUEsUUFBSSxDQUFDLEtBQUssSUFBTixJQUFjLEtBQUssVUFBdkIsRUFBbUM7QUFDL0I7QUFDSDs7QUFDRCxvQ0FBZSxDQUFDLFdBQWhCLEdBQThCLFVBQTlCLENBQXlDLEtBQUssSUFBOUMsRUFBb0QsSUFBcEQ7QUFDQSxTQUFLLFVBQUwsR0FBa0IsSUFBbEI7QUFDSDtBQUNEOzs7OztBQUdPLHNCQUFvQjtBQUN2QixVQUFNLG9CQUFOOztBQUVBLFFBQUksQ0FBQyxLQUFLLElBQVYsRUFBZ0I7QUFDWjtBQUNIOztBQUNELG9DQUFlLENBQUMsV0FBaEIsR0FBOEIsYUFBOUIsQ0FBNEMsS0FBSyxJQUFqRDtBQUNBLFNBQUssVUFBTCxHQUFrQixLQUFsQjtBQUNIOztBQTlFMkM7QUFDOUIscUJBQUssWUFBTDs7QUFrQmQsa0JBREMsdUNBQVEsRUFDVCxHLHlCQUFBLEUsTUFBQSxFQWVDLElBZkQsRTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FDbENKOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWUE7QUFFQTtBQUVNLE1BQU8sc0JBQVAsU0FBMEIsZUFBMUIsQ0FBaUM7QUFBdkM7O0FBRVksbUJBQXlDLElBQUksR0FBSixFQUF6QztBQW1IWDtBQTlHRzs7Ozs7QUFHTyxTQUFPLENBQUMsaUJBQUQsRUFBa0M7QUFDNUMsUUFBSSxDQUFDLEtBQUssYUFBVixFQUF5QjtBQUNyQjtBQUNIOztBQUNELFVBQU0sZUFBZSxHQUFHLEtBQUssV0FBTCxDQUFpQixLQUFLLGFBQXRCLENBQXhCO0FBQ0EsU0FBSyxTQUFMLENBQWUsZUFBZjtBQUNBLFVBQU0sT0FBTixDQUFjLGlCQUFkO0FBQ0g7QUFDRDs7Ozs7Ozs7QUFNTyxvQkFBa0IsQ0FBQyxFQUFELEVBQWtCLElBQWxCLEVBQThCO0FBQ25ELFVBQU0sVUFBVSxHQUFHLEtBQUssT0FBTCxDQUFhLEdBQWIsQ0FBaUIsSUFBakIsQ0FBbkI7O0FBQ0EsUUFBSSxDQUFDLFVBQUwsRUFBaUI7QUFDYixZQUFNLElBQUksS0FBSiwrQkFBaUMsSUFBakMsRUFBTjtBQUNILEtBSmtELENBS25EO0FBQ0E7OztBQUNBLFVBQU0sVUFBVSxHQUFHLEtBQUssZUFBTCxDQUFxQixVQUFyQixDQUFuQixDQVBtRCxDQVFuRDs7QUFDQSxRQUFJLEVBQUUsQ0FBQyxVQUFQLEVBQW1CO0FBQ2YsUUFBRSxDQUFDLFVBQUgsQ0FBYyxXQUFkLENBQTBCLFVBQTFCO0FBQ0gsS0FGRCxNQUVPO0FBQ0gsUUFBRSxDQUFDLFdBQUgsQ0FBZSxVQUFmO0FBQ0g7QUFDSjtBQUVEOzs7OztBQUdPLGFBQVc7QUFDZCxXQUFPLENBQUMsR0FBRyxLQUFLLE9BQUwsQ0FBYSxJQUFiLEVBQUosQ0FBUDtBQUNIOztBQUVTLGlCQUFlLENBQUMsU0FBRCxFQUE0QjtBQUNqRCxVQUFNLE9BQU8sR0FBRyxTQUFTLENBQUMsU0FBVixDQUFvQixJQUFwQixDQUFoQixDQURpRCxDQUVqRDs7QUFDQSxVQUFNLEdBQUcsR0FBRyxRQUFRLENBQUMsZUFBVCxDQUNSLDRCQURRLEVBRVIsS0FGUSxDQUFaO0FBSUEsVUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLFlBQVIsQ0FBcUIsU0FBckIsS0FBbUMsRUFBbkQsQ0FQaUQsQ0FRakQ7QUFDQTs7QUFDQSxVQUFNLE9BQU8sR0FDVCxrRUFESjtBQUVBLE9BQUcsQ0FBQyxLQUFKLENBQVUsT0FBVixHQUFvQixPQUFwQixDQVppRCxDQWFqRDs7QUFDQSxPQUFHLENBQUMsWUFBSixDQUFpQixTQUFqQixFQUE0QixPQUE1QjtBQUNBLE9BQUcsQ0FBQyxZQUFKLENBQWlCLHFCQUFqQixFQUF3QyxlQUF4QztBQUNBLE9BQUcsQ0FBQyxZQUFKLENBQWlCLFdBQWpCLEVBQThCLE9BQTlCLEVBaEJpRCxDQWlCakQ7O0FBQ0EsV0FBTyxPQUFPLENBQUMsVUFBUixDQUFtQixNQUFuQixHQUE0QixDQUFuQyxFQUFzQztBQUNsQyxTQUFHLENBQUMsV0FBSixDQUFnQixPQUFPLENBQUMsVUFBUixDQUFtQixDQUFuQixDQUFoQjtBQUNIOztBQUNELFdBQU8sR0FBUDtBQUNIOztBQUNTLGdCQUFjLENBQUMsSUFBRCxFQUFhO0FBQ2pDLFdBQU8sSUFBUDtBQUNIOztBQUNTLHNCQUFvQixDQUFDLElBQUQsRUFBYTtBQUN2QyxXQUFPLElBQVA7QUFDSDs7QUFDUyxzQkFBb0I7QUFDMUIsV0FBTyxtQ0FBUDtBQUNIOztBQUVTLFFBQU07QUFDWixXQUFPLG1DQUFQLGdDQUN3QixLQUFLLFlBRDdCLEVBRVUsS0FBSyxvQkFBTCxFQUZWO0FBS0g7O0FBRVMsV0FBUyxDQUFDLEtBQUQsRUFBb0I7QUFDbkM7QUFDQSxVQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsTUFBTixDQUNaLENBQUMsSUFBRCxFQUFPLE9BQVAsS0FBa0I7QUFDZCxZQUFNLGdCQUFnQixHQUFHLE9BQU8sQ0FBQyxnQkFBUixDQUF5QixRQUF6QixDQUF6QjtBQUNBLFVBQUksQ0FBQyxJQUFMLENBQVUsR0FBRyxnQkFBYjtBQUNBLGFBQU8sSUFBUDtBQUNILEtBTFcsRUFNWixFQU5ZLENBQWhCO0FBUUEsV0FBTyxDQUFDLE9BQVIsQ0FBaUIsTUFBRCxJQUFXO0FBQ3ZCLFdBQUssT0FBTCxDQUFhLEdBQWIsQ0FBaUIsS0FBSyxvQkFBTCxDQUEwQixNQUFNLENBQUMsRUFBakMsQ0FBakIsRUFBdUQsTUFBdkQ7QUFDSCxLQUZEO0FBR0g7O0FBRVMsYUFBVyxDQUFDLFVBQUQsRUFBNEI7QUFDN0MsVUFBTSxLQUFLLEdBQUcsVUFBVSxDQUFDLGFBQVgsQ0FBeUI7QUFBRSxhQUFPLEVBQUU7QUFBWCxLQUF6QixDQUFkLENBRDZDLENBRTdDOztBQUNBLFVBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxNQUFOLENBQWMsSUFBRCxJQUFTO0FBQ25DLGFBQU8sSUFBSSxDQUFDLFFBQUwsS0FBa0IsS0FBekI7QUFDSCxLQUZnQixDQUFqQjtBQUdBLFdBQU8sUUFBUDtBQUNIOztBQUVPLGNBQVksQ0FBQyxHQUFELEVBQVc7QUFDM0IsVUFBTSxVQUFVLEdBQUcsR0FBRyxDQUFDLE1BQXZCO0FBQ0EsVUFBTSxRQUFRLEdBQUcsS0FBSyxXQUFMLENBQWlCLFVBQWpCLENBQWpCO0FBQ0EsU0FBSyxTQUFMLENBQWUsUUFBZjtBQUNIOztBQXBIa0M7QUFDckIsNEJBQUssZ0JBQUw7O0FBSWQsc0JBREMsb0NBQUssQ0FBQyxNQUFELENBQ04sRyxnQ0FBQSxFLGVBQUEsRSxLQUF3QyxDQUF4QyxFOzs7Ozs7Ozs7Ozs7OztBQ3JCSjs7Ozs7Ozs7Ozs7QUFXQTtBQUNlLHNGQUFmLG9DOztBQ1pBOzs7Ozs7Ozs7OztBQWNBO0FBRUE7QUFFTSxNQUFPLHNCQUFQLFNBQTBCLHNCQUExQixDQUFvQztBQUd0QztBQUNJO0FBQ0EsU0FBSyxJQUFMLEdBQVksSUFBWixDQUZKLENBRXNCO0FBQ3JCOztBQUVTLHNCQUFvQjtBQUMxQixXQUFPLGVBQVA7QUFDSDtBQUNEOzs7Ozs7O0FBS1UsZ0JBQWMsQ0FBQyxJQUFELEVBQWE7QUFDakMsbUNBQXdCLElBQXhCO0FBQ0g7O0FBQ1Msc0JBQW9CLENBQUMsSUFBRCxFQUFhO0FBQ3ZDLFdBQU8sSUFBSSxDQUFDLE9BQUwsQ0FBYSxnQkFBYixFQUErQixFQUEvQixDQUFQO0FBQ0g7O0FBckJxQztBQUN4Qiw0QkFBSyxnQkFBTCxDOzs7Ozs7Ozs7Ozs7OztBQ25CbEI7Ozs7Ozs7Ozs7O0FBV0E7QUFDZSx1RkFBZixxQzs7QUNaQTs7Ozs7Ozs7Ozs7QUFjQTtBQUVBO0FBRU0sTUFBTyx3QkFBUCxTQUEyQixzQkFBM0IsQ0FBcUM7QUFHdkM7QUFDSTtBQUNBLFNBQUssSUFBTCxHQUFZLElBQVosQ0FGSixDQUVzQjtBQUNyQjs7QUFFUyxzQkFBb0I7QUFDMUIsV0FBTyxnQkFBUDtBQUNIO0FBQ0Q7Ozs7Ozs7QUFLVSxnQkFBYyxDQUFDLElBQUQsRUFBYTtBQUNqQyxtQ0FBd0IsSUFBeEI7QUFDSDs7QUFDUyxzQkFBb0IsQ0FBQyxJQUFELEVBQWE7QUFDdkMsV0FBTyxJQUFJLENBQUMsT0FBTCxDQUFhLGdCQUFiLEVBQStCLEVBQS9CLENBQVA7QUFDSDs7QUFyQnNDO0FBQ3pCLDhCQUFLLGlCQUFMLEM7O0FDbkJsQjs7Ozs7Ozs7Ozs7QUFXQTs7O0FDWEE7Ozs7Ozs7Ozs7O0FBV0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7O0FDWkE7QUFDQSxNQUFNQSxjQUFNLEdBQUdwQixrQ0FBSCwwQkFBWjtBQUdlb0IsMERBQWYsRTs7Ozs7Ozs7Ozs7Ozs7QUNKQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVlBO0FBU0E7QUFNTSxNQUFPLGVBQVAsU0FBdUIsaUNBQXZCLENBQWlDO0FBQXZDOztBQVFXLGlCQUE0QixTQUE1QjtBQWVWOztBQXBCVSxhQUFXLE1BQVgsR0FBaUI7QUFDcEIsV0FBTyxDQUFDLE9BQUQsQ0FBUDtBQUNIOztBQUtPLGNBQVksQ0FBQyxFQUFELEVBQTJDO0FBQzNELFNBQUssS0FBTCxHQUFhLEVBQUUsQ0FBQyxNQUFILENBQVUsS0FBdkI7QUFDSDs7QUFFUyxRQUFNO0FBQ1osV0FBTyxtQ0FBUCxtQ0FDMkIsS0FBSyxZQURoQztBQU9IOztBQXRCa0M7QUFDWixxQkFBSyxZQUFMOztBQU92QixrQkFEQyx1Q0FBUSxDQUFDO0FBQUUsU0FBTyxFQUFFO0FBQVgsQ0FBRCxDQUNULEcseUJBQUEsRSxPQUFBLEUsS0FBNkMsQ0FBN0MsRTs7Ozs7Ozs7Ozs7Ozs7QUNuQ0o7QUFDQSxNQUFNQSxtQkFBTSxHQUFHcEIsa0NBQUgsK0JBQVo7QUFPZW9CLG9FQUFmLEU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ1JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWUE7QUFPQTtBQUNBO0FBSUE7QUFFTSxNQUFPLHdCQUFQLFNBQTJCLGlDQUEzQixDQUFxQztBQUEzQzs7QUFRVyxpQkFBNEIsU0FBNUI7QUFHQSxvQkFBb0IsS0FBcEI7QUFHQSxvQkFBVyxLQUFYO0FBR0Esb0JBQVcsSUFBWDtBQUdBLGdCQUEyQixTQUEzQjtBQUdBLGtCQUE2QixTQUE3QjtBQUdBLGlCQUFnQixFQUFoQjtBQXlFVjs7QUFoR1UsYUFBVyxNQUFYLEdBQWlCO0FBQ3BCLFdBQU8sQ0FBQyxZQUFELENBQVA7QUFDSDs7QUF1QkQsTUFBYyxhQUFkLEdBQTJCO0FBQ3ZCLFdBQU8sS0FBSyxPQUFMLENBQWEsWUFBYixDQUFQO0FBQ0g7O0FBRUQsTUFBYyxXQUFkLEdBQXlCO0FBQ3JCLFdBQU8sQ0FBQyxDQUFDLEtBQUssYUFBTCxDQUFtQixpQkFBbkIsQ0FBVDtBQUNIOztBQUVELE1BQWMsS0FBZCxHQUFtQjtBQUNmLFFBQUksS0FBSyxHQUFHLENBQVo7QUFDQSxRQUFJLE9BQU8sR0FBRyxLQUFLLGFBQW5COztBQUNBLFdBQU8sT0FBTyxZQUFZLHdCQUExQixFQUF1QztBQUNuQyxXQUFLO0FBQ0wsYUFBTyxHQUFHLE9BQU8sQ0FBQyxhQUFsQjtBQUNIOztBQUNELFdBQU8sS0FBUDtBQUNIOztBQUVTLGNBQVk7QUFDbEIsVUFBTSxhQUFhLEdBQUcsS0FBSyxhQUEzQjs7QUFDQSxRQUFJLGFBQUosRUFBbUI7QUFDZixtQkFBYSxDQUFDLGdCQUFkLENBQStCLG1CQUEvQixFQUFxRCxFQUFELElBQ2hELEtBQUssbUJBQUwsQ0FBeUIsRUFBekIsQ0FESjtBQUdBLFdBQUssUUFBTCxHQUNJLEtBQUssS0FBTCxJQUFjLElBQWQsSUFBc0IsS0FBSyxLQUFMLEtBQWUsYUFBYSxDQUFDLEtBRHZEO0FBRUg7QUFDSjs7QUFFUyxxQkFBbUIsQ0FBQyxFQUFELEVBQVU7QUFDbkMsU0FBSyxRQUFMLEdBQWdCLEVBQUUsQ0FBQyxNQUFILEtBQWMsSUFBOUI7QUFDSDs7QUFFUyxhQUFXO0FBQ2pCLFFBQUksS0FBSyxLQUFMLElBQWMsQ0FBQyxLQUFLLFFBQXhCLEVBQWtDO0FBQzlCLFVBQUksS0FBSyxXQUFULEVBQXNCO0FBQ2xCLGFBQUssUUFBTCxHQUFnQixDQUFDLEtBQUssUUFBdEI7QUFDSCxPQUZELE1BRU87QUFDSCxjQUFNLFlBQVksR0FBd0I7QUFDdEMsZUFBSyxFQUFFLEtBQUs7QUFEMEIsU0FBMUM7QUFJQSxjQUFNLGNBQWMsR0FBRyxpQkFBaUIsQ0FBQyxtQkFBRCxFQUFzQjtBQUMxRCxpQkFBTyxFQUFFLElBRGlEO0FBRTFELGtCQUFRLEVBQUUsSUFGZ0Q7QUFHMUQsZ0JBQU0sRUFBRTtBQUhrRCxTQUF0QixDQUF4QztBQU1BLGFBQUssYUFBTCxDQUFtQixjQUFuQjtBQUNIO0FBQ0o7QUFDSjs7QUFFUyxRQUFNO0FBQ1osV0FBTyxtQ0FBUCx3Q0FFZ0IsU0FBUyxDQUFDLEtBQUssSUFBTixDQUZ6QixFQUdrQixTQUFTLENBQUMsS0FBSyxNQUFOLENBSDNCLEVBSXNCLEtBQUssS0FKM0IsRUFLa0IsS0FBSyxXQUx2QixFQVFVLEtBQUssS0FSZixFQVVNLEtBQUssUUFBTCxHQUNJLG1DQURKLG1DQUlJLFNBZFY7QUFnQkg7O0FBbEdzQztBQUNoQiw4QkFBSyxpQkFBTDs7QUFPdkIsdUJBREMsdUNBQVEsRUFDVCxHLGtDQUFBLEUsT0FBQSxFLEtBQTZDLENBQTdDOztBQUdBLHVCQURDLHVDQUFRLENBQUM7QUFBRSxNQUFJLEVBQUUsT0FBUjtBQUFpQixTQUFPLEVBQUU7QUFBMUIsQ0FBRCxDQUNULEcsa0NBQUEsRSxVQUFBLEUsS0FBaUMsQ0FBakM7O0FBR0EsdUJBREMsdUNBQVEsQ0FBQztBQUFFLE1BQUksRUFBRSxPQUFSO0FBQWlCLFNBQU8sRUFBRTtBQUExQixDQUFELENBQ1QsRyxrQ0FBQSxFLFVBQUEsRSxLQUF3QixDQUF4Qjs7QUFHQSx1QkFEQyx1Q0FBUSxDQUFDO0FBQUUsTUFBSSxFQUFFLE9BQVI7QUFBaUIsU0FBTyxFQUFFO0FBQTFCLENBQUQsQ0FDVCxHLGtDQUFBLEUsVUFBQSxFLEtBQXVCLENBQXZCOztBQUdBLHVCQURDLHVDQUFRLEVBQ1QsRyxrQ0FBQSxFLE1BQUEsRSxLQUE0QyxDQUE1Qzs7QUFHQSx1QkFEQyx1Q0FBUSxFQUNULEcsa0NBQUEsRSxRQUFBLEUsS0FBOEMsQ0FBOUM7O0FBR0EsdUJBREMsdUNBQVEsRUFDVCxHLGtDQUFBLEUsT0FBQSxFLEtBQTBCLENBQTFCLEU7Ozs7Ozs7Ozs7Ozs7O0FDcERKO0FBQ0EsTUFBTUEsc0JBQU0sR0FBR3BCLGtDQUFILGtDQUFaO0FBR2VvQiwwRUFBZixFOzs7Ozs7Ozs7Ozs7OztBQ0pBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWUE7QUFRQTtBQUNBO0FBRU0sTUFBTyw4QkFBUCxTQUE4QixpQ0FBOUIsQ0FBd0M7QUFBOUM7O0FBSVcsaUJBQVEsRUFBUjtBQWNWOztBQVpVLGFBQVcsTUFBWCxHQUFpQjtBQUNwQixXQUFPLENBQUMsWUFBRCxFQUFvQixlQUFwQixDQUFQO0FBQ0g7O0FBRVMsUUFBTTtBQUNaLFdBQU8sbUNBQVAsMkNBQ3VCLEtBQUssS0FENUI7QUFNSDs7QUFqQnlDO0FBQ25CLG9DQUFLLG9CQUFMOztBQUd2QiwwQkFEQyx1Q0FBUSxDQUFDO0FBQUUsU0FBTyxFQUFFO0FBQVgsQ0FBRCxDQUNULEcsd0NBQUEsRSxPQUFBLEUsS0FBa0IsQ0FBbEIsRTs7QUMzQko7Ozs7Ozs7Ozs7O0FBV0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7O0FDWkE7QUFDQSxNQUFNQSxhQUFNLEdBQUdwQixrQ0FBSCx5QkFBWjtBQVFlb0IsK0RBQWYsRTs7Ozs7Ozs7Ozs7Ozs7QUNUQTs7Ozs7Ozs7Ozs7QUFZQTtBQUNBO0FBQ0E7QUFFTSxNQUFPLGFBQVAsU0FBc0IsMEJBQXRCLENBQWtDO0FBQzdCLGFBQVcsTUFBWCxHQUFpQjtBQUNwQixXQUFPLENBQUMsYUFBRCxDQUFQO0FBQ0g7O0FBRVMsUUFBTTtBQUNaLFdBQU8sbUNBQVAsaUNBQ00sTUFBTSxNQUFOLEVBRE47QUFLSDs7QUFYbUMsQzs7QUNoQnhDOzs7Ozs7Ozs7OztBQVdBO0FBRUE7O0FBRUEsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFmLENBQW1CLFdBQW5CLENBQUwsRUFBc0M7QUFDbEMsZ0JBQWMsQ0FBQyxNQUFmLENBQXNCLFdBQXRCLEVBQW1DLGFBQW5DO0FBQ0gsQzs7Ozs7Ozs7Ozs7Ozs7QUNqQkQ7QUFDQSxNQUFNQSxVQUFNLEdBQUdwQixrQ0FBSCxzQkFBWjtBQUdlb0Isa0RBQWYsRTs7Ozs7Ozs7Ozs7Ozs7QUNKQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQVlBO0FBUUE7QUFFTSxNQUFPLE9BQVAsU0FBbUIsaUNBQW5CLENBQTZCO0FBQW5DOztBQVFXLG9CQUFXLEtBQVg7QUFHQSxpQkFBUSxFQUFSO0FBUVY7O0FBaEJVLGFBQVcsTUFBWCxHQUFpQjtBQUNwQixXQUFPLENBQUMsR0FBRCxDQUFQO0FBQ0g7O0FBU1MsUUFBTTtBQUNaLFdBQU8sbUNBQVA7QUFHSDs7QUFsQjhCO0FBQ1IsYUFBSyxRQUFMOztBQU92QixjQURDLHVDQUFRLENBQUM7QUFBRSxNQUFJLEVBQUUsT0FBUjtBQUFpQixTQUFPLEVBQUU7QUFBMUIsQ0FBRCxDQUNULEcsaUJBQUEsRSxVQUFBLEUsS0FBd0IsQ0FBeEI7O0FBR0EsY0FEQyx1Q0FBUSxDQUFDO0FBQUUsTUFBSSxFQUFFLE1BQVI7QUFBZ0IsU0FBTyxFQUFFO0FBQXpCLENBQUQsQ0FDVCxHLGlCQUFBLEUsT0FBQSxFLEtBQWtCLENBQWxCOztBQUdBLGNBREMsdUNBQVEsRUFDVCxHLGlCQUFBLEUsUUFBQSxFQUlDLElBSkQsRTs7QUNwQ0o7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBQTtBQUNBLE1BQU1BLGVBQU0sR0FBR3BCLGtDQUFILDJCQUFaO0FBR2VvQiw0REFBZixFOzs7Ozs7Ozs7Ozs7OztBQ0pBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWUE7QUFRQTtBQUNBO0FBRU0sTUFBTyxnQkFBUCxTQUF1QixpQ0FBdkIsQ0FBaUM7QUFBdkM7O0FBUVcscUJBQThCLFFBQTlCO0FBbUJDLHFCQUFZLEVBQVo7QUFvRFg7O0FBNUVVLGFBQVcsTUFBWCxHQUFpQjtBQUNwQixXQUFPLENBQUMsUUFBRCxDQUFQO0FBQ0g7O0FBTUQsTUFBVyxRQUFYLEdBQW1CO0FBQ2YsV0FBTyxLQUFLLFNBQVo7QUFDSDs7QUFFRCxNQUFXLFFBQVgsQ0FBb0IsS0FBcEIsRUFBaUM7QUFDN0IsVUFBTSxRQUFRLEdBQUcsS0FBSyxRQUF0Qjs7QUFFQSxRQUFJLEtBQUssS0FBSyxRQUFkLEVBQXdCO0FBQ3BCO0FBQ0g7O0FBQ0QsU0FBSyxrQkFBTCxDQUF3QixLQUF4QjtBQUVBLFNBQUssU0FBTCxHQUFpQixLQUFqQjtBQUNBLFNBQUssYUFBTCxDQUFtQixVQUFuQixFQUErQixRQUEvQjtBQUNIOztBQUlNLFNBQU8sQ0FBQyxFQUFELEVBQVU7QUFDcEIsVUFBTSxNQUFNLEdBQUcsRUFBRSxDQUFDLE1BQWxCOztBQUNBLFFBQUksTUFBSixFQUFZO0FBQ1IsWUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLFlBQVAsQ0FBb0IsT0FBcEIsQ0FBZDs7QUFDQSxVQUFJLEtBQUosRUFBVztBQUNQLGNBQU0sWUFBWSxHQUFHLEtBQUssYUFBTCxDQUNqQixpQkFBaUIsQ0FBQyxvQkFBRCxFQUF1QjtBQUNwQyxpQkFBTyxFQUFFLElBRDJCO0FBRXBDLGtCQUFRLEVBQUUsSUFGMEI7QUFHcEMsZ0JBQU0sRUFBRTtBQUNKLG9CQUFRLEVBQUU7QUFETjtBQUg0QixTQUF2QixDQURBLENBQXJCOztBQVNBLFlBQUksWUFBSixFQUFrQjtBQUNkLGVBQUssUUFBTCxHQUFnQixLQUFoQjtBQUNIO0FBQ0o7QUFDSjtBQUNKOztBQUdTLFFBQU07QUFDWixXQUFPLG1DQUFQLHFDQUVrQixLQUFLLE9BRnZCLEVBR3NCLEtBQUssWUFIM0I7QUFNSDs7QUFFTyxjQUFZO0FBQ2hCLFNBQUssa0JBQUwsQ0FBd0IsS0FBSyxRQUE3QjtBQUNIOztBQUVPLG9CQUFrQixDQUFDLEtBQUQsRUFBYztBQUNwQyxVQUFNLGVBQWUsR0FBRyxLQUFLLGdCQUFMLENBQXNCLFlBQXRCLENBQXhCO0FBRUEsbUJBQWUsQ0FBQyxPQUFoQixDQUF5QixPQUFELElBQVk7QUFDaEMsYUFBTyxDQUFDLGVBQVIsQ0FBd0IsVUFBeEI7QUFDSCxLQUZEOztBQUlBLFFBQUksS0FBSyxDQUFDLE1BQVYsRUFBa0I7QUFDZCxZQUFNLGNBQWMsR0FBRyxLQUFLLGFBQUwsb0JBQThCLEtBQTlCLFNBQXZCOztBQUVBLFVBQUksY0FBSixFQUFvQjtBQUNoQixzQkFBYyxDQUFDLFlBQWYsQ0FBNEIsVUFBNUIsRUFBd0MsRUFBeEM7QUFDSDtBQUNKO0FBQ0o7O0FBOUVrQztBQUNaLHNCQUFLLGFBQUw7O0FBT3ZCLG1CQURDLHVDQUFRLENBQUM7QUFBRSxTQUFPLEVBQUU7QUFBWCxDQUFELENBQ1QsRywwQkFBQSxFLFdBQUEsRSxLQUE4QyxDQUE5Qzs7QUFHQSxtQkFEQyx1Q0FBUSxDQUFDO0FBQUUsU0FBTyxFQUFFO0FBQVgsQ0FBRCxDQUNULEcsMEJBQUEsRSxVQUFBLEVBRUMsSUFGRDs7QUF3Q0EsbUJBREMsdUNBQVEsRUFDVCxHLDBCQUFBLEUsUUFBQSxFQU9DLElBUEQsRTs7QUMxRUo7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBQTtBQUNBLE1BQU1BLGlCQUFNLEdBQUdwQixrQ0FBSCw2QkFBWjtBQUdlb0IsZ0VBQWYsRTs7Ozs7Ozs7Ozs7Ozs7QUNKQTs7Ozs7Ozs7Ozs7QUFZQTtBQUNBO0FBRU0sTUFBTyxvQkFBUCxTQUF5QixpQ0FBekIsQ0FBbUM7QUFDOUIsYUFBVyxNQUFYLEdBQWlCO0FBQ3BCLFdBQU8sQ0FBQyxVQUFELENBQVA7QUFDSDs7QUFFUyxRQUFNO0FBQ1osV0FBTyxtQ0FBUDtBQUdIOztBQVRvQyxDOzs7Ozs7Ozs7Ozs7OztBQ2Z6QztBQUNBLE1BQU1BLG1CQUFNLEdBQUdwQixrQ0FBSCwrQkFBWjtBQUdlb0Isb0VBQWYsRTs7Ozs7Ozs7Ozs7Ozs7QUNKQTs7Ozs7Ozs7Ozs7QUFZQTtBQUNBO0FBRU0sTUFBTyx3QkFBUCxTQUEyQixpQ0FBM0IsQ0FBcUM7QUFDaEMsYUFBVyxNQUFYLEdBQWlCO0FBQ3BCLFdBQU8sQ0FBQyxZQUFELENBQVA7QUFDSDs7QUFFUyxRQUFNO0FBQ1osV0FBTyxtQ0FBUDtBQUdIOztBQVRzQyxDOzs7Ozs7Ozs7Ozs7OztBQ2YzQztBQUNBLE1BQU1BLGtCQUFNLEdBQUdwQixrQ0FBSCw4QkFBWjtBQUdlb0Isa0VBQWYsRTs7Ozs7Ozs7Ozs7Ozs7QUNKQTs7Ozs7Ozs7Ozs7QUFZQTtBQUNBO0FBRU0sTUFBTyxzQkFBUCxTQUEwQixpQ0FBMUIsQ0FBb0M7QUFDL0IsYUFBVyxNQUFYLEdBQWlCO0FBQ3BCLFdBQU8sQ0FBQyxXQUFELENBQVA7QUFDSDs7QUFFUyxRQUFNO0FBQ1osV0FBTyxtQ0FBUDtBQUdIOztBQVRxQyxDOzs7Ozs7Ozs7Ozs7OztBQ2YxQztBQUNBLE1BQU1BLFlBQU0sR0FBR3BCLGtDQUFILHdCQUFaO0FBR2VvQixzREFBZixFOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0pBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWUE7QUFPQTtBQUVNLE1BQU8sV0FBUCxTQUFxQixpQ0FBckIsQ0FBK0I7QUFBckM7O0FBQ0k7Ozs7QUFJTyxpQkFBMEIsT0FBMUI7QUFFUDs7OztBQUlPLGlCQUFrQixRQUFsQjtBQXVEVjs7QUFyRFUsYUFBVyxNQUFYLEdBQWlCO0FBQ3BCLFdBQU8sQ0FBQyxLQUFELENBQVA7QUFDSDs7QUFFTyxhQUFXLENBQUMsUUFBRCxFQUF5QjtBQUN4QyxRQUFJLE1BQUo7O0FBQ0EsUUFBSSxLQUFLLEtBQUwsS0FBZSxPQUFuQixFQUE0QjtBQUN4QixZQUFNLEdBQUcsbUNBQUgsZ0NBQzJCLFFBRDNCLENBQU47QUFHSCxLQUpELE1BSU8sSUFBSSxLQUFLLEtBQUwsS0FBZSxNQUFuQixFQUEyQjtBQUM5QixZQUFNLEdBQUcsbUNBQUgsMEJBQzBCLFFBRDFCLENBQU47QUFHSCxLQUpNLE1BSUE7QUFDSCxhQUFPLENBQUMsSUFBUix5QkFBOEIsS0FBSyxLQUFuQztBQUNBLGFBQU8sUUFBUDtBQUNIOztBQUNELFFBQUksQ0FBQyxjQUFjLENBQUMsR0FBZixvQkFBK0IsS0FBSyxLQUFwQyxFQUFMLEVBQW1EO0FBQy9DLGFBQU8sQ0FBQyxJQUFSLG9DQUNnQyxLQUFLLEtBRHJDO0FBR0g7O0FBQ0QsV0FBTyxNQUFQO0FBQ0g7O0FBRU8sYUFBVyxDQUFDLFFBQUQsRUFBeUI7QUFDeEMsUUFBSSxNQUFKOztBQUNBLFFBQUksS0FBSyxLQUFMLEtBQWUsUUFBbkIsRUFBNkI7QUFDekIsWUFBTSxHQUFHLG1DQUFILDBCQUM0QixRQUQ1QixDQUFOO0FBR0gsS0FKRCxNQUlPO0FBQ0gsYUFBTyxDQUFDLElBQVIseUJBQThCLEtBQUssS0FBbkM7QUFDQSxhQUFPLFFBQVA7QUFDSDs7QUFDRCxRQUFJLENBQUMsY0FBYyxDQUFDLEdBQWYsb0JBQStCLEtBQUssS0FBcEMsRUFBTCxFQUFtRDtBQUMvQyxhQUFPLENBQUMsSUFBUixvQ0FDZ0MsS0FBSyxLQURyQztBQUdIOztBQUNELFdBQU8sTUFBUDtBQUNIOztBQUVTLFFBQU07QUFDWixXQUFPLEtBQUssV0FBTCxDQUNILEtBQUssV0FBTCxDQUNJLG1DQURKLDBCQURHLENBQVA7QUFPSDs7QUFqRWdDOztBQUtqQyxnQkFEQyx1Q0FBUSxDQUFDO0FBQUUsU0FBTyxFQUFFO0FBQVgsQ0FBRCxDQUNULEcscUJBQUEsRSxPQUFBLEUsS0FBeUMsQ0FBekM7O0FBTUEsZ0JBREMsdUNBQVEsQ0FBQztBQUFFLFNBQU8sRUFBRTtBQUFYLENBQUQsQ0FDVCxHLHFCQUFBLEUsT0FBQSxFLEtBQWtDLENBQWxDLEU7O0FDaENKOzs7Ozs7Ozs7OztBQVdBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxJQUFJLENBQUMsY0FBYyxDQUFDLEdBQWYsQ0FBbUIsZUFBbkIsQ0FBTCxFQUEwQztBQUN0QyxnQkFBYyxDQUFDLE1BQWYsQ0FBc0IsZUFBdEIsRUFBdUMsb0JBQXZDO0FBQ0g7O0FBRUQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFmLENBQW1CLGdCQUFuQixDQUFMLEVBQTJDO0FBQ3ZDLGdCQUFjLENBQUMsTUFBZixDQUFzQixnQkFBdEIsRUFBd0Msc0JBQXhDO0FBQ0g7O0FBRUQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFmLENBQW1CLGlCQUFuQixDQUFMLEVBQTRDO0FBQ3hDLGdCQUFjLENBQUMsTUFBZixDQUFzQixpQkFBdEIsRUFBeUMsd0JBQXpDO0FBQ0g7O0FBRUQsSUFBSSxDQUFDLGNBQWMsQ0FBQyxHQUFmLENBQW1CLFVBQW5CLENBQUwsRUFBcUM7QUFDakMsZ0JBQWMsQ0FBQyxNQUFmLENBQXNCLFVBQXRCLEVBQWtDLFdBQWxDO0FBQ0gsQzs7Ozs7Ozs7Ozs7Ozs7QUNqQ0Q7QUFDQSxNQUFNQSxtQkFBTSxHQUFHcEIsa0NBQUgsK0JBQVo7QUFHZW9CLG9FQUFmLEU7O0FDSkE7Ozs7Ozs7Ozs7O0FBb0dBLE1BQU0sSUFBSSxHQUFpQjtBQUN2QixRQUFNLEVBQUUsS0FEZTtBQUV2QixNQUFJLEVBQUUsTUFGaUI7QUFHdkIsT0FBSyxFQUFFLE1BSGdCO0FBSXZCLEtBQUcsRUFBRTtBQUprQixDQUEzQjtBQU9BLE1BQU0saUJBQWlCLEdBQWlCO0FBQ3BDLFFBQU0sRUFBRSxLQUQ0QjtBQUVwQyxNQUFJLEVBQUUsT0FGOEI7QUFHcEMsT0FBSyxFQUFFLE1BSDZCO0FBSXBDLEtBQUcsRUFBRTtBQUorQixDQUF4QztBQU9BLE1BQU0sVUFBVSxHQUFtQjtBQUMvQixNQUFJLEVBQUUsS0FEeUI7QUFFL0IsS0FBRyxFQUFFO0FBRjBCLENBQW5DO0FBS0EsTUFBTSxTQUFTLEdBQW1CO0FBQzlCLE1BQUksRUFBRSxPQUR3QjtBQUU5QixLQUFHLEVBQUU7QUFGeUIsQ0FBbEM7QUFLQSxNQUFNLHNCQUFzQixHQUF5QixFQUFyRDs7QUFFQSxTQUFTLHNCQUFULENBQ0ksZ0JBREosRUFDNkI7QUFFekIsTUFBSSxLQUFKO0FBQ0EsTUFBSSxNQUFKO0FBQ0EsTUFBSSxHQUFHLEdBQUcsQ0FBVjtBQUNBLE1BQUksSUFBSSxHQUFHLENBQVg7QUFDQSxRQUFNLE1BQU0sR0FBVztBQUFFLE9BQUcsRUFBRSxDQUFQO0FBQVUsUUFBSSxFQUFFO0FBQWhCLEdBQXZCOztBQUVBLE1BQUksZ0JBQWdCLENBQUMsT0FBakIsS0FBNkIsTUFBakMsRUFBeUM7QUFDckMsU0FBSyxHQUFHLE1BQU0sQ0FBQyxVQUFmO0FBQ0EsVUFBTSxHQUFHLE1BQU0sQ0FBQyxXQUFoQjs7QUFFQSxRQUFJLGdCQUFnQixDQUFDLGFBQXJCLEVBQW9DO0FBQ2hDLFlBQU0sQ0FBQyxHQUFQLEdBQ0ksZ0JBQWdCLENBQUMsYUFBakIsQ0FBK0IsZUFBL0IsQ0FBK0MsU0FEbkQ7QUFFQSxZQUFNLENBQUMsSUFBUCxHQUNJLGdCQUFnQixDQUFDLGFBQWpCLENBQStCLGVBQS9CLENBQStDLFVBRG5EO0FBRUgsS0FMRCxNQUtPO0FBQ0gsWUFBTSxDQUFDLEdBQVAsR0FBYSxnQkFBZ0IsQ0FBQyxTQUE5QjtBQUNBLFlBQU0sQ0FBQyxJQUFQLEdBQWMsZ0JBQWdCLENBQUMsVUFBL0I7QUFDSDtBQUNKLEdBYkQsTUFhTztBQUNILEtBQUM7QUFDRyxXQURIO0FBRUcsWUFGSDtBQUdHLFNBSEg7QUFJRztBQUpILFFBS0csZ0JBQWdCLENBQUMscUJBQWpCLEVBTEo7QUFNQSxVQUFNLENBQUMsR0FBUCxHQUFhLGdCQUFnQixDQUFDLFNBQTlCO0FBQ0EsVUFBTSxDQUFDLElBQVAsR0FBYyxnQkFBZ0IsQ0FBQyxVQUEvQjtBQUNIOztBQUVELFNBQU87QUFBRSxTQUFGO0FBQVMsVUFBVDtBQUFpQixVQUFqQjtBQUF5QixPQUF6QjtBQUE4QjtBQUE5QixHQUFQO0FBQ0g7O0FBRUQsU0FBUyxRQUFULENBQ0ksSUFESixFQUVJLE1BRkosRUFHSSxJQUhKLEVBSUksbUJBSkosRUFLSSxPQUxKLEVBS21CO0FBRWYsUUFBTSxlQUFlLEdBQUcsbUJBQW1CLENBQUMsTUFBcEIsQ0FBMkIsSUFBM0IsQ0FBeEI7QUFDQSxRQUFNLGVBQWUsR0FBVyxtQkFBbUIsQ0FDL0MsU0FBUyxDQUFDLElBQUQsQ0FEc0MsQ0FBbkQ7QUFJQSxRQUFNLGVBQWUsR0FBRyxNQUFNLEdBQUcsT0FBVCxHQUFtQixlQUEzQztBQUNBLFFBQU0sYUFBYSxHQUFXLE1BQU0sR0FBRyxPQUFULEdBQW1CLGVBQW5CLEdBQXFDLElBQW5FOztBQUVBLE1BQUksZUFBZSxHQUFHLENBQXRCLEVBQXlCO0FBQ3JCLFdBQU8sQ0FBQyxlQUFSO0FBQ0gsR0FGRCxNQUVPLElBQUksYUFBYSxHQUFHLGVBQXBCLEVBQXFDO0FBQ3hDLFdBQU8sSUFBSSxDQUFDLEdBQUwsQ0FBUyxlQUFlLEdBQUcsYUFBM0IsRUFBMEMsQ0FBQyxlQUEzQyxDQUFQO0FBQ0gsR0FGTSxNQUVBO0FBQ0gsV0FBTyxDQUFQO0FBQ0g7QUFDSjs7QUFFRCxTQUFTLFVBQVQsQ0FDSSxJQURKLEVBRUksTUFGSixFQUdJLElBSEosRUFJSSxPQUpKLEVBS0ksU0FMSixFQU1JLHVCQU5KLEVBT0ksMkJBUEosRUFPdUM7QUFFbkMsUUFBTSxlQUFlLEdBQUcsdUJBQXVCLENBQUMsTUFBeEIsQ0FBK0IsSUFBL0IsQ0FBeEI7QUFDQSxRQUFNLGVBQWUsR0FBRyx1QkFBdUIsQ0FBQyxTQUFTLENBQUMsSUFBRCxDQUFWLENBQS9DO0FBRUEsUUFBTSxlQUFlLEdBQ2pCLDJCQUEyQixDQUFDLElBQUQsQ0FBM0IsR0FBb0MsTUFBcEMsR0FBNkMsT0FBN0MsR0FBdUQsZUFEM0Q7QUFFQSxRQUFNLGFBQWEsR0FDZiwyQkFBMkIsQ0FBQyxJQUFELENBQTNCLEdBQ0EsTUFEQSxHQUVBLE9BRkEsR0FHQSxlQUhBLEdBSUEsSUFMSjs7QUFPQSxNQUFJLGVBQWUsR0FBRyxDQUFsQixLQUF3QixTQUFTLEtBQUssS0FBZCxJQUF1QixTQUFTLEtBQUssTUFBN0QsQ0FBSixFQUEwRTtBQUN0RSxXQUFPLElBQVA7QUFDSCxHQUZELE1BRU8sSUFDSCxhQUFhLEdBQUcsZUFBaEIsS0FDQyxTQUFTLEtBQUssUUFBZCxJQUEwQixTQUFTLEtBQUssT0FEekMsQ0FERyxFQUdMO0FBQ0UsV0FBTyxJQUFQO0FBQ0gsR0FMTSxNQUtBO0FBQ0gsV0FBTyxLQUFQO0FBQ0g7QUFDSjs7QUFFRCxTQUFTLFVBQVQsQ0FBb0IsSUFBcEIsRUFBaUM7QUFDN0IsUUFBTSxLQUFLLEdBQUcsTUFBTSxDQUFDLGdCQUFQLENBQXdCLElBQXhCLENBQWQ7QUFDQSxTQUFPO0FBQ0gsVUFBTSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsWUFBUCxFQUErQixFQUEvQixDQUFSLElBQThDLENBRG5EO0FBRUgsUUFBSSxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsVUFBUCxFQUE2QixFQUE3QixDQUFSLElBQTRDLENBRi9DO0FBR0gsU0FBSyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsV0FBUCxFQUE4QixFQUE5QixDQUFSLElBQTZDLENBSGpEO0FBSUgsT0FBRyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUCxFQUE0QixFQUE1QixDQUFSLElBQTJDO0FBSjdDLEdBQVA7QUFNSDs7QUFFRCxTQUFTLGNBQVQsQ0FBd0IsS0FBeEIsRUFBcUM7QUFDakMsTUFBSSxzQkFBc0IsQ0FBQyxLQUFELENBQTFCLEVBQW1DO0FBQy9CLFdBQU8sc0JBQXNCLENBQUMsS0FBRCxDQUE3QjtBQUNIOztBQUNELFFBQU0sQ0FBQyxTQUFELElBQWMsS0FBSyxDQUFDLEtBQU4sQ0FBWSxHQUFaLENBQXBCO0FBQ0EsTUFBSSxHQUFHLGNBQUgsSUFBcUIsS0FBSyxDQUFDLEtBQU4sQ0FBWSxHQUFaLENBQXpCO0FBQ0EsUUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQUQsQ0FBSixJQUFtQixPQUFoQztBQUNBLFFBQU0sU0FBUyxHQUFHLFVBQVUsQ0FBQyxJQUFELENBQTVCOztBQUVBLE1BQUksQ0FBQyxJQUFJLENBQUMsY0FBRCxDQUFULEVBQTJCO0FBQ3ZCLGtCQUFjLEdBQUcsUUFBakI7QUFDSDs7QUFFRCxRQUFNLElBQUksR0FBRyxTQUFTLENBQUMsSUFBRCxDQUF0QjtBQUNBLFFBQU0sU0FBUyxHQUFHLFNBQVMsQ0FBQyxTQUFELENBQTNCO0FBQ0Esd0JBQXNCLENBQUMsS0FBRCxDQUF0QixHQUFnQztBQUM1QixRQUQ0QjtBQUU1QixhQUY0QjtBQUc1QixrQkFINEI7QUFJNUIsYUFKNEI7QUFLNUIsYUFMNEI7QUFNNUI7QUFONEIsR0FBaEM7QUFRQSxTQUFPLHNCQUFzQixDQUFDLEtBQUQsQ0FBN0I7QUFDSDs7QUFFRCxTQUFTLGVBQVQsQ0FDSSxXQURKLEVBRUksbUJBRkosRUFHSSxXQUhKLEVBSUksYUFKSixFQUtJLE1BTEosRUFNSSxXQU5KLEVBTXVCO0FBRW5CLFFBQU07QUFDRixRQURFO0FBRUYsYUFGRTtBQUdGLGtCQUhFO0FBSUYsYUFKRTtBQUtGLFFBTEU7QUFNRjtBQU5FLE1BT0YsYUFQSjtBQVNBLFFBQU0sUUFBUSxHQUFhO0FBQ3ZCLE9BQUcsRUFBRSxDQURrQjtBQUV2QixRQUFJLEVBQUUsQ0FGaUI7QUFHdkIsVUFBTSxFQUFFLENBSGU7QUFJdkIsU0FBSyxFQUFFO0FBSmdCLEdBQTNCO0FBT0EsVUFBUSxDQUFDLFNBQUQsQ0FBUixHQUFzQixXQUFXLENBQUMsU0FBRCxDQUFYLEdBQXlCLFdBQS9DOztBQUNBLE1BQUksY0FBYyxLQUFLLFFBQXZCLEVBQWlDO0FBQzdCLFlBQVEsQ0FBQyxTQUFELENBQVIsSUFDSSxDQUFDLFdBQVcsQ0FBQyxTQUFELENBQVgsR0FBeUIsV0FBVyxDQUFDLFNBQUQsQ0FBckMsSUFBb0QsQ0FEeEQ7QUFFSCxHQUhELE1BR08sSUFBSSxjQUFjLEtBQUssU0FBdkIsRUFBa0M7QUFDckMsWUFBUSxDQUFDLFNBQUQsQ0FBUixJQUF1QixXQUFXLENBQUMsU0FBRCxDQUFYLEdBQXlCLFdBQVcsQ0FBQyxTQUFELENBQTNEO0FBQ0gsR0F4QmtCLENBMEJuQjs7O0FBQ0EsTUFBSSxXQUFXLENBQUMsU0FBRCxDQUFYLEdBQXlCLFdBQVcsQ0FBQyxTQUFELENBQXhDLEVBQXFEO0FBQ2pELFVBQU0sK0JBQStCLEdBQUcsSUFBSSxDQUFDLEdBQUwsQ0FDcEMsUUFBUSxDQUFDLFNBQUQsQ0FENEIsRUFFcEMsV0FBVyxDQUFDLFNBQUQsQ0FGeUIsQ0FBeEM7QUFJQSxZQUFRLENBQUMsU0FBRCxDQUFSLEdBQXNCLElBQUksQ0FBQyxHQUFMLENBQ2xCLCtCQURrQixFQUVsQixXQUFXLENBQUMsU0FBRCxDQUFYLEdBQ0ksV0FBVyxDQUFDLFNBQUQsQ0FEZixHQUVJLFdBQVcsQ0FBQyxTQUFELENBSkcsQ0FBdEI7QUFNSDs7QUFFRCxVQUFRLENBQUMsSUFBRCxDQUFSLEdBQ0ksU0FBUyxLQUFLLElBQWQsR0FDTSxXQUFXLENBQUMsSUFBRCxDQUFYLEdBQW9CLFdBQVcsQ0FBQyxJQUFELENBQS9CLEdBQXdDLE1BRDlDLEdBRU0sV0FBVyxDQUFDLElBQUQsQ0FBWCxHQUFvQixXQUFXLENBQUMsSUFBRCxDQUEvQixHQUF3QyxNQUhsRDtBQUtBLFNBQU8sUUFBUDtBQUNIOztBQUVLLFNBQVUseUJBQVYsQ0FDRixjQURFLEVBRUYsbUJBRkUsRUFHRixXQUhFLEVBSUYsV0FKRSxFQUtGLE9BTEUsRUFNRixPQU5FLEVBT0YsSUFQRSxFQVFGLGtCQVJFLEVBU0YsMkJBVEUsRUFVRixNQVZFLEVBV0YsV0FYRSxFQVdpQjtBQUVuQixNQUFJLGFBQWEsR0FBRyxjQUFjLENBQUMsY0FBRCxDQUFsQztBQUNBLFFBQU07QUFDRixRQURFO0FBRUYsUUFGRTtBQUdGLGFBSEU7QUFJRixhQUpFO0FBS0YsYUFMRTtBQU1GO0FBTkUsTUFPRixhQVBKO0FBUUEsTUFBSSxRQUFRLEdBQUcsZUFBZSxDQUMxQixXQUQwQixFQUUxQixtQkFGMEIsRUFHMUIsV0FIMEIsRUFJMUIsYUFKMEIsRUFLMUIsTUFMMEIsRUFNMUIsV0FOMEIsQ0FBOUI7QUFRQSxNQUFJLGdCQUFnQixHQUFHLE1BQXZCLENBbkJtQixDQXFCbkI7O0FBQ0EsTUFDSSxJQUFJLElBQ0osVUFBVSxDQUNOLElBRE0sRUFFTixRQUFRLENBQUMsSUFBRCxDQUZGLEVBR04sV0FBVyxDQUFDLElBQUQsQ0FITCxFQUlOLE9BSk0sRUFLTixTQUxNLEVBTU4sa0JBTk0sRUFPTiwyQkFQTSxDQUZkLEVBV0U7QUFDRSxVQUFNLG9CQUFvQixHQUFHLGNBQWMsV0FDcEMsaUJBQWlCLENBQUMsU0FBRCxDQURtQixjQUNKLGNBREksRUFBM0M7QUFHQSxVQUFNLFdBQVcsR0FBRyxvQkFBb0IsQ0FBQyxJQUF6QztBQUNBLFVBQU0sV0FBVyxHQUFHLG9CQUFvQixDQUFDLElBQXpDO0FBRUEsVUFBTSxlQUFlLEdBQUcsZUFBZSxDQUNuQyxXQURtQyxFQUVuQyxtQkFGbUMsRUFHbkMsV0FIbUMsRUFJbkMsb0JBSm1DLEVBS25DLENBQUMsQ0FBRCxHQUFLLE1BTDhCLEVBTW5DLFdBTm1DLENBQXZDLENBUEYsQ0FnQkU7O0FBQ0EsUUFDSSxDQUFDLFVBQVUsQ0FDUCxXQURPLEVBRVAsZUFBZSxDQUFDLFdBQUQsQ0FGUixFQUdQLFdBQVcsQ0FBQyxXQUFELENBSEosRUFJUCxPQUpPLEVBS1AsaUJBQWlCLENBQUMsU0FBRCxDQUxWLEVBTVAsa0JBTk8sRUFPUCwyQkFQTyxDQURmLEVBVUU7QUFDRSxtQkFBYSxHQUFHLG9CQUFoQjtBQUNBLGNBQVEsR0FBRyxlQUFYO0FBQ0Esc0JBQWdCLEdBQUcsQ0FBQyxDQUFELEdBQUssTUFBeEI7QUFDSDtBQUNKOztBQUVELE1BQUksS0FBSyxHQUFHLFFBQVEsQ0FDaEIsU0FEZ0IsRUFFaEIsUUFBUSxDQUFDLFNBQUQsQ0FGUSxFQUdoQixXQUFXLENBQUMsU0FBRCxDQUhLLEVBSWhCLGtCQUpnQixFQUtoQixPQUxnQixDQUFwQjtBQU9BLFVBQVEsQ0FBQyxTQUFELENBQVIsSUFBdUIsS0FBdkI7QUFFQSxRQUFNLFNBQVMsR0FBRyxJQUFJLENBQUMsR0FBTCxDQUNkLENBRGMsRUFFZCxrQkFBa0IsQ0FBQyxNQUFuQixHQUNJLGtCQUFrQixDQUFDLEdBRHZCLEdBRUksa0JBQWtCLENBQUMsTUFBbkIsQ0FBMEIsR0FGOUIsR0FHSSwyQkFBMkIsQ0FBQyxHQUhoQyxHQUlJLFFBQVEsQ0FBQyxHQUpiLEdBS0ksT0FBTyxDQUFDLEdBTFosR0FNSSxPQUFPLENBQUMsTUFOWixHQU9JLE9BVFUsQ0FBbEI7QUFXQSxhQUFXLENBQUMsTUFBWixHQUFxQixJQUFJLENBQUMsR0FBTCxDQUFTLFdBQVcsQ0FBQyxNQUFyQixFQUE2QixTQUE3QixDQUFyQjtBQUVBLFVBQVEsR0FBRyxlQUFlLENBQ3RCLFdBRHNCLEVBRXRCLG1CQUZzQixFQUd0QixXQUhzQixFQUl0QixhQUpzQixFQUt0QixnQkFMc0IsRUFNdEIsV0FOc0IsQ0FBMUI7QUFRQSxPQUFLLEdBQUcsS0FBSyxHQUFHLFFBQVEsQ0FDcEIsU0FEb0IsRUFFcEIsUUFBUSxDQUFDLFNBQUQsQ0FGWSxFQUdwQixXQUFXLENBQUMsU0FBRCxDQUhTLEVBSXBCLGtCQUpvQixFQUtwQixPQUxvQixDQUF4QjtBQVFBLFVBQVEsQ0FBQyxTQUFELENBQVIsSUFBdUIsS0FBdkI7QUFFQSxRQUFNLGFBQWEsR0FBcUI7QUFDcEMsT0FBRyxFQUFFLENBRCtCO0FBRXBDLFVBQU0sRUFBRSxDQUY0QjtBQUdwQyxRQUFJLEVBQUUsQ0FIOEI7QUFJcEMsU0FBSyxFQUFFO0FBSjZCLEdBQXhDO0FBTUEsZUFBYSxDQUFDLFNBQUQsQ0FBYixHQUNJLFdBQVcsQ0FBQyxTQUFELENBQVgsR0FBeUIsV0FBVyxDQUFDLFNBQUQsQ0FBcEMsR0FDTSxJQUROLEdBRU0sV0FBVyxDQUFDLFNBQUQsQ0FBWCxHQUNBLFFBQVEsQ0FBQyxTQUFELENBRFIsR0FFQSxXQUFXLENBQUMsU0FBRCxDQUFYLEdBQXlCLENBTG5DO0FBT0EsU0FBTztBQUNILG1CQUFlLEVBQUUsYUFBYSxDQUFDLElBQWQsSUFBc0IsQ0FEcEM7QUFFSCxrQkFBYyxFQUFFLGFBQWEsQ0FBQyxHQUFkLElBQXFCLENBRmxDO0FBR0gsYUFIRztBQUlILGFBQVMsRUFBRSxhQUFhLENBQUMsU0FKdEI7QUFLSCxnQkFBWSxFQUFFLFFBQVEsQ0FBQyxJQUFULElBQWlCLENBTDVCO0FBTUgsZUFBVyxFQUFFLFFBQVEsQ0FBQyxHQUFULElBQWdCO0FBTjFCLEdBQVA7QUFRSDs7QUFFRCxTQUFTLGlCQUFULENBQ0ksTUFESixFQUVJLFNBRkosRUFFMEI7QUFFdEIsUUFBTSxjQUFjLEdBQUcsTUFBTSxDQUFDLHFCQUFQLEVBQXZCO0FBQ0EsUUFBTSxpQkFBaUIsR0FBRyxTQUFTLENBQUMscUJBQVYsRUFBMUI7QUFDQSxTQUFPO0FBQ0gsVUFBTSxFQUFFLGNBQWMsQ0FBQyxNQUFmLEdBQXdCLGlCQUFpQixDQUFDLE1BRC9DO0FBRUgsVUFBTSxFQUFFLGNBQWMsQ0FBQyxNQUZwQjtBQUdILFFBQUksRUFBRSxjQUFjLENBQUMsSUFBZixHQUFzQixpQkFBaUIsQ0FBQyxJQUgzQztBQUlILFNBQUssRUFBRSxjQUFjLENBQUMsS0FBZixHQUF1QixpQkFBaUIsQ0FBQyxLQUo3QztBQUtILE9BQUcsRUFBRSxjQUFjLENBQUMsR0FBZixHQUFxQixpQkFBaUIsQ0FBQyxHQUx6QztBQU1ILFNBQUssRUFBRSxjQUFjLENBQUMsS0FObkI7QUFPSCxLQUFDLEVBQUUsY0FBYyxDQUFDLENBUGY7QUFRSCxLQUFDLEVBQUUsY0FBYyxDQUFDO0FBUmYsR0FBUDtBQVVIOztBQUVhLFNBQVUsaUJBQVYsQ0FDVixjQURVLEVBRVYsV0FGVSxFQUdWLE1BSFUsRUFJVixTQUpVLEVBS1YsT0FMVSxFQU1WLElBTlUsRUFPVixpQkFQVSxFQVFWLE1BUlUsRUFTVixXQVRVLEVBU1M7QUFFbkIsUUFBTSxlQUFlLEdBQUcsU0FBUyxDQUFDLE9BQVYsS0FBc0IsTUFBOUM7QUFDQSxRQUFNLFdBQVcsR0FBRyxlQUFlLEdBQzVCLE1BQU0sQ0FBQyxxQkFBUCxFQUQ0QixHQUU1QixpQkFBaUIsQ0FBQyxNQUFELEVBQVMsU0FBVCxDQUZ4Qjs7QUFJQSxNQUFJLENBQUMsZUFBTCxFQUFzQjtBQUNsQixlQUFXLENBQUMsR0FBWixJQUFtQixRQUFRLENBQUMsTUFBTSxDQUFDLEtBQVAsQ0FBYSxTQUFkLEVBQW1DLEVBQW5DLENBQVIsSUFBa0QsQ0FBckU7QUFDQSxlQUFXLENBQUMsSUFBWixJQUNJLFFBQVEsQ0FBQyxNQUFNLENBQUMsS0FBUCxDQUFhLFVBQWQsRUFBb0MsRUFBcEMsQ0FBUixJQUFtRCxDQUR2RDtBQUVIOztBQUVELFFBQU0sV0FBVyxHQUFHLFdBQVcsQ0FBQyxxQkFBWixFQUFwQjtBQUNBLFFBQU0sT0FBTyxHQUFHLFVBQVUsQ0FBQyxXQUFELENBQTFCO0FBQ0EsYUFBVyxDQUFDLEtBQVosSUFBcUIsT0FBTyxDQUFDLElBQVIsR0FBZSxPQUFPLENBQUMsS0FBNUM7QUFDQSxhQUFXLENBQUMsTUFBWixJQUFzQixPQUFPLENBQUMsR0FBUixHQUFjLE9BQU8sQ0FBQyxNQUE1QztBQUVBLFFBQU0sbUJBQW1CLEdBQUcsc0JBQXNCLENBQUMsU0FBRCxDQUFsRDtBQUNBLFFBQU0saUJBQWlCLEdBQUcsU0FBMUI7QUFDQSxRQUFNLGtCQUFrQixHQUFHLHNCQUFzQixDQUFDLGlCQUFELENBQWpEO0FBQ0EsUUFBTSwyQkFBMkIsR0FDN0IsaUJBQWlCLENBQUMsT0FBbEIsS0FBOEIsTUFBOUIsR0FDTyxTQUFTLENBQUMscUJBQVYsRUFEUCxHQUVPLGlCQUFpQixDQUFDLFNBQUQsRUFBWSxpQkFBWixDQUg1QjtBQUlBLFNBQU8seUJBQXlCLENBQzVCLGNBRDRCLEVBRTVCLG1CQUY0QixFQUc1QixXQUg0QixFQUk1QixXQUo0QixFQUs1QixPQUw0QixFQU01QixPQU40QixFQU81QixJQVA0QixFQVE1QixrQkFSNEIsRUFTNUIsMkJBVDRCLEVBVTVCLE1BVjRCLEVBVzVCLFdBWDRCLENBQWhDO0FBYUgsQzs7Ozs7Ozs7Ozs7Ozs7QUNuZ0JEOzs7Ozs7Ozs7Ozs7Ozs7OztHQVlBOzs7QUFFQTtBQVFBO0FBRUE7QUFDQTtBQTJCQSxNQUFNLGNBQWMsR0FBNkI7QUFDN0Msa0JBQWdCLEVBQUUsRUFEMkI7QUFFN0MsYUFBVyxFQUFFLENBRmdDO0FBRzdDLE1BQUksRUFBRSxJQUh1QztBQUk3QyxRQUFNLEVBQUUsQ0FKcUM7QUFLN0MsV0FBUyxFQUFFO0FBTGtDLENBQWpEO0FBUU0sTUFBTyx3QkFBUCxTQUEyQixpQ0FBM0IsQ0FBcUM7QUFBM0M7O0FBUVcsbUJBQVUsS0FBVjtBQUdBLHFCQUF1QixRQUF2QjtBQUdBLGtCQUFTLENBQVQ7QUFHQyx1QkFBbUMsT0FBbkM7QUFHQSxrQkFBUyxLQUFUO0FBZ0tYOztBQWpMVSxhQUFXLE1BQVgsR0FBaUI7QUFDcEIsV0FBTyxDQUFDLFlBQUQsQ0FBUDtBQUNIOztBQTRCTSxhQUFXLENBQUMsRUFBRCxFQUFVO0FBQ3hCLFVBQU0sV0FBVyxHQUFHLEtBQUssaUJBQUwsQ0FBdUIsRUFBdkIsQ0FBcEI7O0FBRUEsUUFBSSxDQUFDLEtBQUssTUFBVixFQUFrQjtBQUNkO0FBQ0g7O0FBRUQsUUFBSSxLQUFLLFdBQUwsS0FBcUIsT0FBckIsSUFBZ0MsV0FBcEMsRUFBaUQ7QUFDN0M7QUFDQSxRQUFFLENBQUMsZUFBSDtBQUNIOztBQUVELFNBQUssYUFBTDtBQUVBLFVBQU0sYUFBYSxHQUFHLGlCQUFpQixDQUFDLHNCQUFELEVBQXlCO0FBQzVELGFBQU8sRUFBRSxJQURtRDtBQUU1RCxjQUFRLEVBQUUsSUFGa0Q7QUFHNUQsWUFBTSxFQUFFO0FBSG9ELEtBQXpCLENBQXZDO0FBS0EsU0FBSyxhQUFMLENBQW1CLGFBQW5CO0FBQ0EsU0FBSyxNQUFMLEdBQWMsS0FBZDtBQUNBLFNBQUssT0FBTCxHQUFlLEtBQWY7QUFDSDs7QUFFTSxlQUFhLENBQUMsRUFBRCxFQUF5QztBQUN6RCxRQUFJLEtBQUssTUFBVCxFQUFpQjtBQUNiO0FBQ0g7O0FBQ0QsU0FBSyxNQUFMLEdBQWMsSUFBZDtBQUNBLFNBQUssYUFBTDtBQUNBLFNBQUssa0JBQUwsQ0FBd0IsRUFBeEI7O0FBQ0EsUUFBSSxLQUFLLGNBQVQsRUFBeUI7QUFDckIsV0FBSyxjQUFMLENBQW9CLFlBQXBCLENBQWlDLE1BQWpDLEVBQXlDLFNBQXpDO0FBQ0EsV0FBSyxXQUFMLENBQWlCLEtBQUssY0FBdEI7QUFDSDs7QUFFRCxTQUFLLE9BQUwsR0FBZSxNQUFNLENBQUMsVUFBUCxDQUFrQixNQUFLO0FBQ2xDLFdBQUssT0FBTCxHQUFlLElBQWY7QUFDQSxXQUFLLHFCQUFMO0FBQ0gsS0FIYyxFQUdaLEVBQUUsQ0FBQyxNQUFILENBQVUsS0FIRSxDQUFmO0FBSUg7O0FBRU0sZ0JBQWMsQ0FBQyxFQUFELEVBQTBDO0FBQzNELFFBQUksS0FBSyxPQUFULEVBQWtCO0FBQ2Qsa0JBQVksQ0FBQyxLQUFLLE9BQU4sQ0FBWjtBQUNIOztBQUNELFFBQUksRUFBRSxDQUFDLE1BQUgsQ0FBVSxPQUFWLEtBQXNCLEtBQUssY0FBL0IsRUFBK0M7QUFDM0MsV0FBSyxhQUFMO0FBQ0EsV0FBSyxNQUFMLEdBQWMsS0FBZDtBQUNBLFdBQUssT0FBTCxHQUFlLEtBQWY7QUFDSDtBQUNKOztBQUVTLFFBQU07QUFDWixVQUFNLGlCQUFpQixHQUFHO0FBQ3RCLGlCQUFXLEVBQUcsRUFBRCxJQUFjO0FBQ3ZCLGFBQUssV0FBTCxDQUFpQixFQUFqQjtBQUNILE9BSHFCO0FBSXRCLGFBQU8sRUFBRTtBQUphLEtBQTFCO0FBT0EsV0FBTyxtQ0FBUCw2Q0FFMkIsS0FBSyxhQUZoQyxFQUc0QixLQUFLLGNBSGpDLEVBSWlCLGlCQUpqQixFQVFrQixLQUFLLE1BUnZCLEVBU21CLEtBQUssT0FUeEIsRUFVZ0IsS0FBSyxhQVZyQjtBQWVIOztBQUVPLG1CQUFpQixDQUFDLEVBQUQsRUFBVTtBQUMvQjtBQUNBO0FBRUEsVUFBTSxJQUFJLEdBQUcsS0FBSyxDQUFDLElBQU4sQ0FBVyxFQUFFLENBQUMsWUFBSCxFQUFYLENBQWI7O0FBRUEsUUFBSSxJQUFJLElBQUksSUFBSSxDQUFDLE1BQWpCLEVBQXlCO0FBQ3JCO0FBQ0EsV0FBSyxNQUFNLFdBQVgsSUFBMEIsSUFBMUIsRUFBZ0M7QUFDNUIsY0FBTSxPQUFPLEdBQUcsV0FBaEI7O0FBQ0EsWUFBSSxPQUFPLEtBQUssS0FBSyxPQUFyQixFQUE4QjtBQUMxQixpQkFBTyxJQUFQO0FBQ0g7QUFDSjtBQUNKOztBQUNELFdBQU8sS0FBUDtBQUNIOztBQUVPLGVBQWE7QUFDakIsUUFBSSxLQUFLLGNBQUwsSUFBdUIsS0FBSyxjQUFMLENBQW9CLFVBQS9DLEVBQTJEO0FBQ3ZELFdBQUssY0FBTCxDQUFvQixVQUFwQixDQUErQixXQUEvQixDQUEyQyxLQUFLLGNBQWhEO0FBQ0g7QUFDSjs7QUFFTyxvQkFBa0IsQ0FBQyxFQUFELEVBQW1DO0FBQ3pELFNBQUssY0FBTCxHQUFzQixFQUFFLENBQUMsTUFBSCxDQUFVLE9BQWhDO0FBQ0EsU0FBSyxPQUFMLEdBQWUsRUFBRSxDQUFDLE1BQUgsQ0FBVSxPQUF6QjtBQUNBLFNBQUssU0FBTCxHQUFpQixFQUFFLENBQUMsTUFBSCxDQUFVLFNBQTNCO0FBQ0EsU0FBSyxNQUFMLEdBQWMsRUFBRSxDQUFDLE1BQUgsQ0FBVSxNQUF4QjtBQUNBLFNBQUssV0FBTCxHQUFtQixFQUFFLENBQUMsTUFBSCxDQUFVLFdBQTdCO0FBQ0g7O0FBRU8sdUJBQXFCO0FBQ3pCLFFBQUksQ0FBQyxLQUFLLE9BQU4sSUFBaUIsQ0FBQyxLQUFLLGNBQTNCLEVBQTJDO0FBQ3ZDO0FBQ0g7O0FBRUQsVUFBTSxPQUFPLEdBQTZCO0FBQ3RDLHNCQUFnQixFQUFFLENBRG9CO0FBRXRDLGlCQUFXLEVBQUUsQ0FGeUI7QUFHdEMsVUFBSSxFQUFFLEtBSGdDO0FBSXRDLFlBQU0sRUFBRSxLQUFLLE1BSnlCO0FBS3RDLGVBQVMsRUFBRSxLQUFLO0FBTHNCLEtBQTFDO0FBUUEsVUFBTSxlQUFlLHFCQUFRLGNBQVIsRUFBMkIsT0FBM0IsQ0FBckI7QUFFQSxTQUFLLFFBQUwsR0FBZ0IsaUJBQWlCLENBQzdCLGVBQWUsQ0FBQyxTQURhLEVBRTdCLEtBQUssY0FGd0IsRUFHN0IsS0FBSyxPQUh3QixFQUk3QixJQUo2QixFQUs3QixlQUFlLENBQUMsZ0JBTGEsRUFNN0IsZUFBZSxDQUFDLElBTmEsRUFPN0IsSUFQNkIsRUFRN0IsZUFBZSxDQUFDLE1BUmEsRUFTN0IsZUFBZSxDQUFDLFdBVGEsQ0FBakM7QUFXSDs7QUFFRCxNQUFZLGFBQVosR0FBeUI7QUFDckIsUUFBSSxLQUFLLFFBQVQsRUFBbUI7QUFDZiw0QkFBZSxLQUFLLFFBQUwsQ0FBYyxXQUE3Qix1QkFDSSxLQUFLLFFBQUwsQ0FBYyxZQURsQjtBQUdIOztBQUVELFdBQU8sRUFBUDtBQUNIOztBQW5Mc0M7QUFDekIsOEJBQUssY0FBTDs7QUFPZCx1QkFEQyx1Q0FBUSxDQUFDO0FBQUUsTUFBSSxFQUFFLE9BQVI7QUFBaUIsU0FBTyxFQUFFO0FBQTFCLENBQUQsQ0FDVCxHLGtDQUFBLEUsU0FBQSxFLEtBQXVCLENBQXZCOztBQUdBLHVCQURDLHVDQUFRLENBQUM7QUFBRSxTQUFPLEVBQUU7QUFBWCxDQUFELENBQ1QsRyxrQ0FBQSxFLFdBQUEsRSxLQUF1QyxDQUF2Qzs7QUFHQSx1QkFEQyx1Q0FBUSxDQUFDO0FBQUUsTUFBSSxFQUFFLE1BQVI7QUFBZ0IsU0FBTyxFQUFFO0FBQXpCLENBQUQsQ0FDVCxHLGtDQUFBLEUsUUFBQSxFLEtBQWtCLENBQWxCOztBQUdBLHVCQURDLHVDQUFRLEVBQ1QsRyxrQ0FBQSxFLGFBQUEsRSxLQUFtRCxDQUFuRDs7QUFHQSx1QkFEQyx1Q0FBUSxDQUFDO0FBQUUsTUFBSSxFQUFFLE9BQVI7QUFBaUIsU0FBTyxFQUFFO0FBQTFCLENBQUQsQ0FDVCxHLGtDQUFBLEUsUUFBQSxFLEtBQXVCLENBQXZCOztBQUdBLHVCQURDLHVDQUFRLEVBQ1QsRyxrQ0FBQSxFLFVBQUEsRSxLQUFrQyxDQUFsQzs7QUFHQSx1QkFEQyx1Q0FBUSxFQUNULEcsa0NBQUEsRSxTQUFBLEUsS0FBOEIsQ0FBOUI7O0FBR0EsdUJBREMsdUNBQVEsRUFDVCxHLGtDQUFBLEUsZ0JBQUEsRSxLQUFxQyxDQUFyQyxFOztBQ3pGSjs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQ0FBO0FBQ0EsTUFBTUEsc0JBQU0sR0FBR3BCLGtDQUFILGtDQUFaO0FBR2VvQiwwRUFBZixFOzs7Ozs7Ozs7Ozs7OztBQ0pBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBWUE7QUFRQTtBQVFBO0FBRU0sTUFBTyw4QkFBUCxTQUE4QixpQ0FBOUIsQ0FBd0M7QUFBOUM7O0FBUVcscUJBQXVCLFFBQXZCO0FBR0Esa0JBQVMsQ0FBVDtBQWdJVjs7QUF4SVUsYUFBVyxNQUFYLEdBQWlCO0FBQ3BCLFdBQU8sQ0FBQyxlQUFELENBQVA7QUFDSDs7QUFZTSxlQUFhLENBQUMsRUFBRCxFQUFZLFdBQVosRUFBNEM7QUFDNUQsVUFBTSxPQUFPLEdBQUcsV0FBVyxLQUFLLE9BQWhDO0FBQ0EsVUFBTSxjQUFjLEdBQUcsT0FBTyxHQUFHLEtBQUssWUFBUixHQUF1QixLQUFLLFlBQTFEO0FBQ0EsVUFBTSxjQUFjLEdBQUcsY0FBYyxHQUMvQixjQUFjLENBQUMsWUFBZixDQUE0QixPQUE1QixDQUQrQixHQUUvQixJQUZOO0FBR0EsVUFBTSxLQUFLLEdBQUcsY0FBYyxHQUFHLFVBQVUsQ0FBQyxjQUFELENBQWIsR0FBZ0MsQ0FBNUQ7O0FBRUEsUUFBSSxDQUFDLGNBQUwsRUFBcUI7QUFDakI7QUFDSDs7QUFDRCxVQUFNLGlCQUFpQixHQUFzQjtBQUN6QyxhQUFPLEVBQUUsY0FEZ0M7QUFFekMsV0FBSyxFQUFFLEtBRmtDO0FBR3pDLFlBQU0sRUFBRSxLQUFLLE1BSDRCO0FBSXpDLGVBQVMsRUFBRSxLQUFLLFNBSnlCO0FBS3pDLGFBQU8sRUFBRSxJQUxnQztBQU16QyxpQkFBVyxFQUFFO0FBTjRCLEtBQTdDO0FBU0EsVUFBTSxnQkFBZ0IsR0FBRyxpQkFBaUIsQ0FBQyxpQkFBRCxFQUFvQjtBQUMxRCxhQUFPLEVBQUUsSUFEaUQ7QUFFMUQsY0FBUSxFQUFFLElBRmdEO0FBRzFELFlBQU0sRUFBRTtBQUhrRCxLQUFwQixDQUExQztBQU1BLFNBQUssYUFBTCxDQUFtQixnQkFBbkI7QUFDSDs7QUFFTSxnQkFBYyxDQUFDLEVBQUQsRUFBWSxXQUFaLEVBQTRDO0FBQzdELFVBQU0sT0FBTyxHQUFHLFdBQVcsS0FBSyxPQUFoQztBQUNBLFVBQU0sY0FBYyxHQUFHLE9BQU8sR0FBRyxLQUFLLFlBQVIsR0FBdUIsS0FBSyxZQUExRDs7QUFFQSxRQUFJLENBQUMsY0FBTCxFQUFxQjtBQUNqQjtBQUNIOztBQUVELFVBQU0sa0JBQWtCLEdBQXVCO0FBQzNDLGFBQU8sRUFBRTtBQURrQyxLQUEvQztBQUlBLFVBQU0saUJBQWlCLEdBQUcsaUJBQWlCLENBQUMsa0JBQUQsRUFBcUI7QUFDNUQsYUFBTyxFQUFFLElBRG1EO0FBRTVELGNBQVEsRUFBRSxJQUZrRDtBQUc1RCxZQUFNLEVBQUU7QUFIb0QsS0FBckIsQ0FBM0M7QUFNQSxTQUFLLGFBQUwsQ0FBbUIsaUJBQW5CO0FBQ0g7O0FBRU0sZ0JBQWMsQ0FBQyxFQUFELEVBQVU7QUFDM0IsUUFBSSxLQUFLLFlBQVQsRUFBdUI7QUFDbkIsV0FBSyxhQUFMLENBQW1CLEVBQW5CLEVBQXVCLE9BQXZCO0FBQ0g7QUFDSjs7QUFFTSxvQkFBa0IsQ0FBQyxFQUFELEVBQVU7QUFDL0IsUUFBSSxLQUFLLFlBQVQsRUFBdUI7QUFDbkIsV0FBSyxhQUFMLENBQW1CLEVBQW5CLEVBQXVCLE9BQXZCO0FBQ0g7QUFDSjs7QUFFTSxxQkFBbUIsQ0FBQyxFQUFELEVBQVU7QUFDaEMsUUFBSSxLQUFLLFlBQVQsRUFBdUI7QUFDbkIsV0FBSyxjQUFMLENBQW9CLEVBQXBCLEVBQXdCLE9BQXhCO0FBQ0g7QUFDSjs7QUFFUyxRQUFNO0FBQ1osV0FBTyxtQ0FBUCxtREFHaUIsS0FBSyxjQUh0QixFQUlzQixLQUFLLGtCQUozQixFQUtzQixLQUFLLG1CQUwzQixFQVVzQixLQUFLLGlCQVYzQixFQWVzQixLQUFLLGlCQWYzQjtBQW9CSDs7QUFFTyxtQkFBaUIsQ0FBQyxFQUFELEVBQVU7QUFDL0IsUUFBSSxFQUFFLENBQUMsTUFBUCxFQUFlO0FBQ1gsWUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLE1BQWhCO0FBQ0EsWUFBTSxPQUFPLEdBQUcsS0FBSyxrQkFBTCxDQUF3QixJQUF4QixDQUFoQjs7QUFFQSxVQUFJLE9BQUosRUFBYTtBQUNULGFBQUssWUFBTCxHQUFvQixPQUFwQjtBQUNIO0FBQ0o7QUFDSjs7QUFFTyxtQkFBaUIsQ0FBQyxFQUFELEVBQVU7QUFDL0IsUUFBSSxFQUFFLENBQUMsTUFBUCxFQUFlO0FBQ1gsWUFBTSxJQUFJLEdBQUcsRUFBRSxDQUFDLE1BQWhCO0FBQ0EsWUFBTSxPQUFPLEdBQUcsS0FBSyxrQkFBTCxDQUF3QixJQUF4QixDQUFoQjs7QUFFQSxVQUFJLE9BQUosRUFBYTtBQUNULGFBQUssWUFBTCxHQUFvQixPQUFwQjtBQUNIO0FBQ0o7QUFDSjs7QUFFTyxvQkFBa0IsQ0FBQyxJQUFELEVBQXNCO0FBQzVDLFVBQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxhQUFMLEVBQWQ7O0FBRUEsUUFBSSxLQUFLLENBQUMsTUFBVixFQUFrQjtBQUNkLGFBQU8sS0FBSyxDQUFDLENBQUQsQ0FBWjtBQUNIOztBQUVELFdBQU8sSUFBUDtBQUNIOztBQTFJeUM7QUFDNUIsb0NBQUssaUJBQUw7O0FBT2QsMEJBREMsdUNBQVEsQ0FBQztBQUFFLFNBQU8sRUFBRTtBQUFYLENBQUQsQ0FDVCxHLHdDQUFBLEUsV0FBQSxFLEtBQXVDLENBQXZDOztBQUdBLDBCQURDLHVDQUFRLENBQUM7QUFBRSxNQUFJLEVBQUUsTUFBUjtBQUFnQixTQUFPLEVBQUU7QUFBekIsQ0FBRCxDQUNULEcsd0NBQUEsRSxRQUFBLEUsS0FBa0IsQ0FBbEIsRTs7QUN6Q0o7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUNBQTtBQUNBLE1BQU1BLGNBQU0sR0FBR3BCLGtDQUFILDBCQUFaO0FBR2VvQiwwREFBZixFOzs7Ozs7Ozs7Ozs7OztBQ0pBOzs7Ozs7Ozs7OztBQVlBO0FBRUE7QUFFTSxNQUFPLGVBQVAsU0FBdUIsaUNBQXZCLENBQWlDO0FBRzVCLGFBQVcsTUFBWCxHQUFpQjtBQUNwQixXQUFPLENBQUMsT0FBRCxDQUFQO0FBQ0g7O0FBRVMsUUFBTTtBQUNaLFdBQU8sbUNBQVA7QUFJSDs7QUFaa0M7QUFDckIscUJBQUssWUFBTCxDOztBQ2pCbEI7Ozs7Ozs7Ozs7Ozs7QUNBQTs7Ozs7Ozs7Ozs7O0FBZUE7Ozs7O0FBS00sU0FBVSxtQkFBVixDQUE4QixTQUE5QixFQUE2RDtBQUMvRCxNQUFJLENBQUMsY0FBYyxDQUFDLEdBQWYsQ0FBbUIsU0FBUyxDQUFDLEVBQTdCLENBQUwsRUFBdUM7QUFDbkMsa0JBQWMsQ0FBQyxNQUFmLENBQXNCLFNBQVMsQ0FBQyxFQUFoQyxFQUFvQyxTQUFwQztBQUNIO0FBQ0o7QUFFRDs7Ozs7O0FBS00sU0FBVSxvQkFBVixDQUNGLEdBQUcsVUFERCxFQUNtQztBQUVyQyxPQUFLLE1BQU0sSUFBWCxJQUFtQixVQUFuQixFQUErQjtBQUMzQix1QkFBbUIsQ0FBQyxJQUFELENBQW5CO0FBQ0g7QUFDSixDOztBQ3JDRDs7Ozs7Ozs7Ozs7QUFXQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtDQUdBLGdIOzs7Ozs7Ozs7OztBQ3BDQTtBQUNBOztBQUVBLE1BQU07QUFBRSxxQkFBRjtBQUF1QixzQkFBb0I7QUFBM0MsSUFBNkQsbUJBQW5FO0FBQUEsTUFBbUQsdUZBQW5EOztBQUNBLE1BQU0sdUJBQWMsR0FBRyxNQUFNLENBQUMsTUFBUCxDQUFjLFFBQWQsRUFBd0IsTUFBeEIsQ0FBZ0MsT0FBRCxJQUFZO0FBQzlELFNBQU8sQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUFqQjtBQUNILENBRnNCLENBQXZCO0FBSUEsNkJBQW9CLENBQUMsR0FBRyx1QkFBSixFQUFvQixHQUFHLE1BQU0sQ0FBQyxNQUFQLENBQWMsNEJBQWQsQ0FBdkIsQ0FBcEIsQzs7Ozs7Ozs7OztBQ1JBOzs7OztBQUtBLFNBQVNDLHFCQUFULEdBQWlDO0FBQy9CO0FBQ0EsUUFBTUMsUUFBUSxHQUFHQyxRQUFRLENBQUNDLGFBQVQsQ0FBdUIsVUFBdkIsQ0FBakI7O0FBQ0EsTUFBSSxFQUFFLGFBQWFGLFFBQWYsQ0FBSixFQUE4QjtBQUM1QixXQUFPLElBQVA7QUFDRCxHQUw4QixDQU0vQjs7O0FBQ0EsTUFBSSxFQUFFQSxRQUFRLENBQUNoRCxPQUFULENBQWlCbUQsU0FBakIsY0FBd0NDLGdCQUExQyxDQUFKLEVBQWlFO0FBQy9ELFdBQU8sSUFBUDtBQUNELEdBVDhCLENBVS9COzs7QUFDQSxRQUFNQyxTQUFTLEdBQUdKLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixVQUF2QixDQUFsQjtBQUNBRyxXQUFTLENBQUNyRCxPQUFWLENBQWtCc0QsV0FBbEIsQ0FBOEJMLFFBQVEsQ0FBQ0MsYUFBVCxDQUF1QixLQUF2QixDQUE5QjtBQUNBRixVQUFRLENBQUNoRCxPQUFULENBQWlCc0QsV0FBakIsQ0FBNkJELFNBQTdCO0FBQ0EsUUFBTUUsS0FBSyxHQUFHUCxRQUFRLENBQUNHLFNBQVQsQ0FBbUIsSUFBbkIsQ0FBZDtBQUNBLFNBQ0U7QUFDQUksU0FBSyxDQUFDdkQsT0FBTixDQUFjd0QsVUFBZCxDQUF5QmpELE1BQXpCLEtBQW9DLENBQXBDLElBQ0E7QUFDQWdELFNBQUssQ0FBQ3ZELE9BQU4sQ0FBY3lELFVBQWQsQ0FBeUJ6RCxPQUF6QixDQUFpQ3dELFVBQWpDLENBQTRDakQsTUFBNUMsS0FBdUQ7QUFKekQ7QUFNRDtBQUVEOzs7Ozs7O0FBS2UsU0FBU21ELGFBQVQsR0FBeUI7QUFDdEMsUUFBTUMsU0FBUyxHQUFHLEVBQWxCO0FBQ0EsUUFBTUMsYUFBYSxHQUFHYixxQkFBcUIsRUFBM0M7QUFDQSxRQUFNYyxjQUFjLEdBQ2xCLEVBQUUsa0JBQWtCQyxPQUFPLENBQUNDLFNBQTVCLEtBQ0EsRUFBRSxpQkFBaUJELE9BQU8sQ0FBQ0MsU0FBM0IsQ0FEQSxJQUVBO0FBQ0NuQyxRQUFNLENBQUNvQyxRQUFQLElBQW1CcEMsTUFBTSxDQUFDb0MsUUFBUCxDQUFnQkMsS0FKdEMsQ0FIc0MsQ0FRdEM7O0FBQ0EsUUFBTUMsbUJBQW1CLEdBQUcsQ0FBQ3RDLE1BQU0sQ0FBQ3VDLGNBQVIsSUFBMEJ2QyxNQUFNLENBQUN1QyxjQUFQLENBQXNCQyxhQUE1RSxDQVRzQyxDQVd0QztBQUNBOztBQUNBLE1BQUksRUFBRSxxQkFBcUJ4QyxNQUF2QixDQUFKLEVBQW9DO0FBQ2xDO0FBQ0ErQixhQUFTLENBQUNsRCxJQUFWLENBQWUsZ0ZBQWY7QUFDRDs7QUFFRCxNQUFJbUQsYUFBSixFQUFtQjtBQUNqQjtBQUNBRCxhQUFTLENBQUNsRCxJQUFWLENBQWUsd0hBQWY7QUFDRCxHQUhELE1BR08sSUFBSW9ELGNBQWMsSUFBSUssbUJBQXRCLEVBQTJDO0FBQ2hEO0FBQ0E7QUFDQVAsYUFBUyxDQUFDbEQsSUFBVixDQUFlLHdIQUFmO0FBQ0Q7O0FBRUQsU0FBTzRELE9BQU8sQ0FBQ0MsR0FBUixDQUFZWCxTQUFaLENBQVA7QUFDRCxDOztBQzdERDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFZSw0REFBUSxFQUFDO0FBQ3hCOzs7QUNuQ0E7Ozs7Ozs7Ozs7O0FBWUE7QUFDQTtBQUVBLGFBQWEsR0FBRyxJQUFoQixDQUFxQixNQUFLO0FBQ3RCLGlCQUFRLENBQUMsTUFBRCxDQUFSOztBQUNBLHFCQUFPLENBQUMsRUFBRCxDQUFQOztBQUNBLHFCQUFPLENBQUMsRUFBRCxDQUFQOztBQUNBLHFCQUFPLENBQUMsRUFBRCxDQUFQOztBQUNBLHFCQUFPLENBQUMsRUFBRCxDQUFQO0FBQ0gsQ0FORCxFOzs7Ozs7Ozs7O0FDZk8sU0FBUyxPQUFULENBQWlCLGFBQWpCLEVBQWdDO0FBQ3JDLGVBQWEsR0FBRyxhQUFhLElBQUksRUFBakM7QUFDQSxTQUFPLEtBQUssQ0FBQyxPQUFOLENBQWMsYUFBZCxJQUErQixhQUEvQixHQUErQyxDQUFDLGFBQUQsQ0FBdEQ7QUFDRDs7QUFFTSxTQUFTLEdBQVQsQ0FBYSxHQUFiLEVBQWtCO0FBQ3ZCLG1DQUEwQixHQUExQjtBQUNEOztBQUVNLFNBQVMsUUFBVCxDQUFrQixLQUFsQixFQUF5QjtBQUM5QixNQUFJLE9BQU8sS0FBUCxLQUFpQixRQUFyQixFQUErQjtBQUM3QixXQUFPLE1BQU0sQ0FBQyxLQUFELENBQWI7QUFDRDs7QUFFRCxRQUFNLFVBQVUsR0FBRyxNQUFNLENBQUMsU0FBUCxDQUFpQixRQUFqQixDQUEwQixJQUExQixDQUErQixLQUEvQixFQUFzQyxLQUF0QyxDQUE0QyxVQUE1QyxFQUF3RCxDQUF4RCxDQUFuQjs7QUFDQSxNQUFJLFVBQVUsS0FBSyxRQUFmLElBQTJCLFVBQVUsS0FBSyxPQUE5QyxFQUF1RDtBQUNyRCxxQkFBVSxVQUFWLGNBQXdCLElBQUksQ0FBQyxTQUFMLENBQWUsS0FBZixDQUF4QjtBQUNELEdBRkQsTUFFTztBQUNMLFdBQU8sVUFBUDtBQUNEO0FBQ0Y7O0FBRUQsTUFBTSxNQUFNLEdBQUcsUUFBZjtBQUNBLE1BQU0sUUFBUSxHQUFHLFVBQWpCO0FBQ0EsTUFBTSxVQUFVLEdBQUcsQ0FBQyxNQUFELEVBQVMsUUFBVCxDQUFuQjs7QUFFQSxTQUFTLFlBQVQsQ0FBc0IsR0FBdEIsRUFBMkI7QUFDekIsTUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFKLENBQVUsYUFBVixDQUFMLEVBQStCO0FBQzdCLFVBQU0sSUFBSSxLQUFKLENBQ0osR0FBRyx5Q0FBaUMsR0FBakMsK0JBREMsQ0FBTjtBQUdEO0FBQ0Y7O0FBRU0sU0FBUyxXQUFULENBQXFCLEtBQXJCLEVBQTRCO0FBQ2pDLE1BQUksQ0FBQyxLQUFELElBQVUsQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLElBQVAsQ0FBdkIsRUFBcUM7QUFDbkMsVUFBTSxJQUFJLEtBQUosQ0FDSixHQUFHLHNHQURDLENBQU47QUFHRDs7QUFFRCxRQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBckI7QUFFQSxRQUFNLFVBQVUsR0FBRyxDQUFDLFdBQUQsRUFBYyxVQUFkLEVBQTBCLFFBQTFCLENBQW5COztBQUNBLE1BQ0UsQ0FBQyxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQVAsQ0FBWCxJQUNBLENBQUMsS0FBSyxDQUFDLE9BQU4sQ0FBYyxLQUFLLENBQUMsUUFBcEIsQ0FERCxJQUVBLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxRQUFQLENBRlgsSUFHQSxDQUFDLFFBQVEsQ0FBQyxNQUFELENBSFQsSUFJQSxDQUFDLFVBQVUsQ0FBQyxJQUFYLENBQWdCLEdBQUcsSUFBSSxRQUFRLENBQUMsS0FBSyxDQUFDLEdBQUQsQ0FBTixDQUEvQixDQUxILEVBTUU7QUFDQSxVQUFNLElBQUksS0FBSixDQUNKLEdBQUcsQ0FDRCxrQ0FBMEIsS0FBSyxDQUFDLElBQWhDLG9DQUE0RCxVQUFVLENBQUMsSUFBWCxDQUFnQixNQUFoQixDQUE1RCxtREFEQyxDQURDLENBQU47QUFNRDs7QUFFRCxNQUFJLE1BQUosRUFBWTtBQUNWLFFBQUksUUFBUSxDQUFDLE1BQUQsQ0FBWixFQUFzQjtBQUNwQixrQkFBWSxDQUFDLE1BQUQsQ0FBWjtBQUNELEtBRkQsTUFFTyxJQUFJLENBQUMsVUFBVSxDQUFDLElBQVgsQ0FBZ0IsR0FBRyxJQUFJLEdBQUcsSUFBSSxNQUE5QixDQUFMLEVBQTRDO0FBQ2pELFlBQU0sSUFBSSxLQUFKLENBQ0osR0FBRyxDQUFDLDhDQUE4QyxRQUE5QyxHQUF5RCxRQUF6RCxHQUFvRSxNQUFwRSxHQUE2RSxpQkFBOUUsQ0FEQyxDQUFOO0FBR0QsS0FKTSxNQUlBO0FBQ0wsZ0JBQVUsQ0FBQyxPQUFYLENBQW1CLEdBQUcsSUFBSSxHQUFHLElBQUksTUFBUCxJQUFpQixZQUFZLENBQUMsTUFBTSxDQUFDLEdBQUQsQ0FBUCxDQUF2RDtBQUNEO0FBQ0Y7O0FBRUQsTUFBSSxLQUFLLENBQUMsUUFBVixFQUFvQjtBQUNsQixLQUFDLFFBQUQsRUFBVyxXQUFYLEVBQXdCLE9BQXhCLENBQWdDLGNBQWMsSUFBSTtBQUNoRCxVQUFJLGNBQWMsSUFBSSxLQUF0QixFQUE2QjtBQUMzQixlQUFPLENBQUMsSUFBUixDQUNFLEdBQUcsQ0FDRCx5QkFBaUIsS0FBSyxDQUFDLElBQXZCLDRDQUF5RCxjQUF6RCw4R0FDNkUsY0FEN0UsUUFEQyxDQURMO0FBTUQ7QUFDRixLQVREO0FBVUQ7QUFDRjs7QUFFTSxTQUFTLFlBQVQsQ0FBc0IsTUFBdEIsRUFBOEI7QUFDbkMsU0FBTyxDQUFDLE1BQUQsQ0FBUCxDQUFnQixPQUFoQixDQUF3QixLQUFLLElBQUksV0FBVyxDQUFDLEtBQUQsQ0FBNUM7QUFDRDs7QUFFRCxTQUFTLFVBQVQsQ0FBb0IsR0FBcEIsRUFBeUIsR0FBekIsRUFBOEI7QUFDNUIsTUFBSSxNQUFNLEdBQUcsUUFBUSxDQUFDLElBQVQsQ0FBYyxhQUFkLENBQTRCLGlCQUFpQixHQUFqQixHQUF1QixXQUFuRCxDQUFiOztBQUNBLE1BQUksQ0FBQyxNQUFMLEVBQWE7QUFDWCxVQUFNLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsUUFBdkIsQ0FBVDtBQUNBLFVBQU0sQ0FBQyxZQUFQLENBQW9CLEtBQXBCLEVBQTJCLEdBQTNCOztBQUNBLFFBQUksR0FBRyxLQUFLLE1BQVosRUFBb0I7QUFDbEIsWUFBTSxDQUFDLFlBQVAsQ0FBb0IsTUFBcEIsRUFBNEIsTUFBNUI7QUFDRCxLQUZELE1BRU8sSUFBSSxHQUFHLEtBQUssUUFBWixFQUFzQjtBQUMzQixZQUFNLENBQUMsWUFBUCxDQUFvQixRQUFwQixFQUE4QixFQUE5QjtBQUNEOztBQUNELFVBQU0sQ0FBQyxLQUFQLEdBQWUsSUFBZjtBQUNEOztBQUNELFNBQU8sSUFBSSxPQUFKLENBQVksQ0FBQyxPQUFELEVBQVUsTUFBVixLQUFxQjtBQUN0QyxVQUFNLENBQUMsa0JBQVAsR0FBNEIsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsQ0FBQyxJQUFJO0FBQy9DLFlBQU0sQ0FBQyxxQkFBUCxHQUErQixJQUEvQjtBQUNBLGFBQU8sQ0FBQyxDQUFELENBQVA7QUFDRCxLQUhEOztBQUlBLFVBQU0sQ0FBQyxPQUFQLEdBQWlCLENBQUMsSUFBSTtBQUNwQixVQUFJLE1BQU0sQ0FBQyxVQUFYLEVBQXVCO0FBQ3JCLGNBQU0sQ0FBQyxVQUFQLENBQWtCLFdBQWxCLENBQThCLE1BQTlCO0FBQ0Q7O0FBQ0QsWUFBTSxDQUFDLENBQUQsQ0FBTjtBQUNELEtBTEQ7O0FBTUEsUUFBSSxNQUFNLENBQUMsVUFBUCxLQUFzQixJQUExQixFQUFnQztBQUM5QixjQUFRLENBQUMsSUFBVCxDQUFjLFdBQWQsQ0FBMEIsTUFBMUI7QUFDRCxLQUZELE1BRU8sSUFBSSxNQUFNLENBQUMscUJBQVgsRUFBa0M7QUFDdkMsYUFBTztBQUNSO0FBQ0YsR0FoQk0sQ0FBUDtBQWlCRDs7QUFFTSxTQUFTLFVBQVQsQ0FBb0IsTUFBcEIsRUFBNEI7QUFDakMsTUFBSSxRQUFRLENBQUMsTUFBRCxDQUFaLEVBQXNCO0FBQ3BCLFdBQU8sVUFBVSxDQUFDLE1BQUQsQ0FBakI7QUFDRCxHQUZELE1BRU87QUFDTCxXQUFPLE9BQU8sQ0FBQyxJQUFSLENBQ0wsVUFBVSxDQUNQLE1BREgsQ0FDVSxHQUFHLElBQUksR0FBRyxJQUFJLE1BRHhCLEVBRUcsR0FGSCxDQUVPLEdBQUcsSUFBSSxVQUFVLENBQUMsTUFBTSxDQUFDLEdBQUQsQ0FBUCxFQUFjLEdBQWQsQ0FGeEIsQ0FESyxDQUFQO0FBS0Q7QUFDRjs7QUFFTSxTQUFTLGVBQVQsQ0FBeUIsSUFBekIsRUFBK0IsTUFBL0IsRUFBdUM7QUFDNUMsU0FBTyxDQUFDLE1BQU0sQ0FBQyxhQUFQLENBQXFCLElBQUksV0FBSix5QkFDVixJQURVLEdBRTNCO0FBQUMsY0FBVSxFQUFFLElBQUksS0FBSyxJQUF0QjtBQUE0QjtBQUE1QixHQUYyQixDQUFyQixDQUFSO0FBSUQ7O0FBRU0sU0FBUyxRQUFULENBQWtCLENBQWxCLEVBQXFCOztBQUUxQixTQUFPLE9BQU8sQ0FBUCxLQUFhLFFBQWIsSUFBeUIsQ0FBQyxDQUFDLENBQWxDO0FBQ0Q7O0FBRU0sU0FBUyxVQUFULENBQW9CLENBQXBCLEVBQXVCO0FBQzVCLFNBQU8sT0FBTyxDQUFQLEtBQWEsVUFBcEI7QUFDRDs7QUFFTSxTQUFTLFFBQVQsQ0FBa0IsQ0FBbEIsRUFBcUI7QUFDMUIsU0FBTyxPQUFPLENBQVAsS0FBYSxRQUFwQjtBQUNEOztBQUVNLFNBQVMsZ0JBQVQsQ0FBMEIsT0FBMUIsRUFBbUM7QUFDeEMsUUFBTSxLQUFLLEdBQUcsSUFBSSxLQUFKLENBQVUsR0FBRywyQkFBb0IsT0FBTyxDQUFDLFFBQTVCLE9BQWIsQ0FBZDtBQUNBLE9BQUssQ0FBQyxPQUFOLEdBQWdCLE9BQWhCO0FBQ0EsT0FBSyxDQUFDLElBQU4sR0FBYSxHQUFiO0FBQ0EsU0FBTyxLQUFQO0FBQ0Q7O0FBRU0sTUFBTSxjQUFjLEdBQUcsSUFBSyxNQUFNLGNBQU4sQ0FBcUIsRUFBMUIsRUFBdkI7QUM3SlA7O0FBQ0EsU0FBUyxlQUFULENBQXlCLE1BQXpCLEVBQWlDOzs7QUFHL0IsUUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLElBQXBCO0FBQ0EsUUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLFFBQXhCO0FBQ0EsUUFBTSxXQUFXLEdBQUcsUUFBUSxLQUFLLE9BQWIsSUFBd0IsSUFBSSxLQUFLLElBQXJEO0FBQ0EsUUFBTSxZQUFZLEdBQUcsUUFBUSxLQUFLLFFBQWIsSUFBeUIsSUFBSSxLQUFLLEtBQXZEO0FBQ0EsUUFBTSxJQUFJLEdBQUksV0FBVyxJQUFJLFlBQWhCLEdBQ1QsTUFBTSxDQUFDLFFBREUsQ0FDTTtBQUROLElBRVQsTUFBTSxDQUFDLElBRlgsQ0FQK0IsQ0FTZjs7QUFDaEIsbUJBQVUsUUFBVixlQUF1QixJQUF2QjtBQUNELEM7Ozs7O0FBS0QsU0FBUyw4QkFBVCxDQUF3QyxLQUF4QyxFQUErQzs7QUFFN0MsTUFBSSxLQUFLLENBQUMsZ0JBQVYsRUFBNEI7QUFDMUI7QUFDRCxHQUo0QyxDOzs7QUFPN0MsTUFBSSxLQUFLLENBQUMsTUFBTixLQUFpQixDQUFyQixFQUF3QjtBQUN0QjtBQUNELEdBVDRDLEM7OztBQVk3QyxNQUFJLEtBQUssQ0FBQyxRQUFOLElBQWtCLEtBQUssQ0FBQyxPQUF4QixJQUFtQyxLQUFLLENBQUMsTUFBekMsSUFBbUQsS0FBSyxDQUFDLE9BQTdELEVBQXNFO0FBQ3BFO0FBQ0QsR0FkNEMsQzs7O0FBaUI3QyxNQUFJLE1BQU0sR0FBRyxLQUFLLENBQUMsTUFBbkI7QUFDQSxRQUFNLElBQUksR0FBRyxLQUFLLENBQUMsWUFBTixHQUNULEtBQUssQ0FBQyxZQUFOLEVBRFMsR0FFUixLQUFLLENBQUMsSUFBTixJQUFjLEVBRm5CLENBbEI2QyxDOzs7QUF3QjdDLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBYixFQUFnQixDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQXpCLEVBQWlDLENBQUMsRUFBbEMsRUFBc0M7QUFDcEMsVUFBTSxNQUFNLEdBQUcsSUFBSSxDQUFDLENBQUQsQ0FBbkI7O0FBQ0EsUUFBSSxNQUFNLENBQUMsUUFBUCxJQUFtQixNQUFNLENBQUMsUUFBUCxDQUFnQixXQUFoQixPQUFrQyxHQUF6RCxFQUE4RDtBQUM1RCxZQUFNLEdBQUcsTUFBVDtBQUNBO0FBQ0Q7QUFDRjs7QUFFRCxTQUFPLE1BQU0sSUFBSSxNQUFNLENBQUMsUUFBUCxDQUFnQixXQUFoQixPQUFrQyxHQUFuRCxFQUF3RDtBQUN0RCxVQUFNLEdBQUcsTUFBTSxDQUFDLFVBQWhCO0FBQ0QsR0FsQzRDLEM7OztBQXFDN0MsTUFBSSxDQUFDLE1BQUQsSUFBVyxNQUFNLENBQUMsUUFBUCxDQUFnQixXQUFoQixPQUFrQyxHQUFqRCxFQUFzRDtBQUNwRDtBQUNELEdBdkM0QyxDOzs7QUEwQzdDLE1BQUksTUFBTSxDQUFDLE1BQVAsSUFBaUIsTUFBTSxDQUFDLE1BQVAsQ0FBYyxXQUFkLE9BQWdDLE9BQXJELEVBQThEO0FBQzVEO0FBQ0QsR0E1QzRDLEM7OztBQStDN0MsTUFBSSxNQUFNLENBQUMsWUFBUCxDQUFvQixVQUFwQixDQUFKLEVBQXFDO0FBQ25DO0FBQ0QsR0FqRDRDLEM7OztBQW9EN0MsTUFBSSxNQUFNLENBQUMsUUFBUCxLQUFvQixNQUFNLENBQUMsUUFBUCxDQUFnQixRQUFwQyxJQUFnRCxNQUFNLENBQUMsSUFBUCxLQUFnQixFQUFwRSxFQUF3RTtBQUN0RTtBQUNELEdBdEQ0QyxDOzs7O0FBMEQ3QyxRQUFNLE1BQU0sR0FBRyxNQUFNLENBQUMsTUFBUCxJQUFpQixlQUFlLENBQUMsTUFBRCxDQUEvQzs7QUFDQSxNQUFJLE1BQU0sS0FBSyxNQUFNLENBQUMsUUFBUCxDQUFnQixNQUEvQixFQUF1QztBQUNyQztBQUNELEdBN0Q0QyxDOzs7QUFnRTdDLE1BQUksZUFBZSxDQUFDLElBQUQsRUFBTztBQUFDLFlBQVEsRUFBRSxNQUFNLENBQUM7QUFBbEIsR0FBUCxDQUFuQixFQUF3RDtBQUN0RCxTQUFLLENBQUMsY0FBTjtBQUNEO0FBQ0Y7Ozs7Ozs7Ozs7Ozs7QUFZRCxNQUFNLEtBQUssR0FBRztBQUNaLFVBQVEsR0FBRztBQUNULFVBQU0sQ0FBQyxRQUFQLENBQWdCLGdCQUFoQixDQUFpQyxPQUFqQyxFQUEwQyw4QkFBMUM7QUFDRCxHQUhXOztBQUtaLFlBQVUsR0FBRztBQUNYLFVBQU0sQ0FBQyxRQUFQLENBQWdCLG1CQUFoQixDQUFvQyxPQUFwQyxFQUE2Qyw4QkFBN0M7QUFDRDs7QUFQVyxDQUFkLEMsQ0NoR0E7O0FBQ0EsTUFBTSxJQUFJLEdBQUcsVUFBVSxJQUFWLENBQWUsU0FBUyxDQUFDLFNBQXpCLENBQWI7OztBQUdBLElBQUksSUFBSSxJQUFJLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxhQUFSLENBQXZCLEVBQStDO0FBQzdDLFFBQU0sQ0FBQyxhQUFQLEdBQXVCLFVBQVMsTUFBVCxFQUFpQixNQUFqQixFQUF5QjtBQUM5QyxVQUFNLEdBQUcsTUFBTSxJQUFJLEVBQW5CO0FBQ0EsUUFBSSxDQUFDLEdBQUcsUUFBUSxDQUFDLFdBQVQsQ0FBcUIsT0FBckIsQ0FBUjtBQUNBLEtBQUMsQ0FBQyxTQUFGLENBQVksTUFBWixFQUFvQixPQUFPLENBQUMsTUFBTSxDQUFDLE9BQVIsQ0FBM0IsRUFBNkMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxVQUFSLENBQXBEO0FBQ0EsS0FBQyxDQUFDLEtBQUYsR0FBVSxNQUFNLENBQUMsS0FBUCxJQUFnQixJQUExQjtBQUNBLFdBQU8sQ0FBUDtBQUNELEdBTkQ7O0FBT0EsUUFBTSxDQUFDLGFBQVAsQ0FBcUIsU0FBckIsR0FBaUMsTUFBTSxDQUFDLEtBQVAsQ0FBYSxTQUE5QztBQUNEOztBQUVELFNBQVMsaUNBQVQsQ0FBMkMsS0FBM0MsRUFBa0Q7QUFDaEQsTUFBSSxLQUFLLENBQUMsS0FBTixLQUFnQixzQkFBcEIsRUFBNEM7QUFDMUM7QUFDRDs7QUFDRCxpQkFBZSxDQUFDLElBQUQsRUFBTztBQUFDLFlBQVEsRUFBRSxNQUFNLENBQUMsUUFBUCxDQUFnQjtBQUEzQixHQUFQLENBQWY7QUFDRDs7Ozs7Ozs7OztBQVNELE1BQU0sUUFBUSxHQUFHO0FBQ2YsVUFBUSxHQUFHO0FBQ1QsVUFBTSxDQUFDLGdCQUFQLENBQXdCLFVBQXhCLEVBQW9DLGlDQUFwQztBQUNELEdBSGM7O0FBS2YsWUFBVSxHQUFHO0FBQ1gsVUFBTSxDQUFDLG1CQUFQLENBQTJCLFVBQTNCLEVBQXVDLGlDQUF2QztBQUNEOztBQVBjLENBQWpCO0FDL0JBOzs7O0FBR0Esa0JBQWMsR0FBRyxZQUFqQjtBQUNBLFdBQW9CLEdBQUcsS0FBdkI7QUFDQSxhQUFzQixHQUFHLE9BQXpCO0FBQ0Esc0JBQStCLEdBQUcsZ0JBQWxDO0FBQ0Esb0JBQTZCLEdBQUcsY0FBaEM7Ozs7O0FBS0EsSUFBSSxpQkFBaUIsR0FBRyxHQUF4QjtBQUNBLElBQUksa0JBQWtCLEdBQUcsSUFBekI7Ozs7Ozs7QUFPQSxJQUFJLFdBQVcsR0FBRyxJQUFJLE1BQUosQ0FBVyxDOztBQUczQixTQUgyQixFOzs7OztBQVMzQixxRkFUMkIsRUFVM0IsSUFWMkIsQ0FVdEIsR0FWc0IsQ0FBWCxFQVVMLEdBVkssQ0FBbEI7Ozs7Ozs7OztBQW1CQSxTQUFTLEtBQVQsQ0FBZ0IsR0FBaEIsRUFBcUIsT0FBckIsRUFBOEI7QUFDNUIsTUFBSSxNQUFNLEdBQUcsRUFBYjtBQUNBLE1BQUksR0FBRyxHQUFHLENBQVY7QUFDQSxNQUFJLEtBQUssR0FBRyxDQUFaO0FBQ0EsTUFBSSxJQUFJLEdBQUcsRUFBWDtBQUNBLE1BQUksZ0JBQWdCLEdBQUksT0FBTyxJQUFJLE9BQU8sQ0FBQyxTQUFwQixJQUFrQyxpQkFBekQ7QUFDQSxNQUFJLFVBQVUsR0FBSSxPQUFPLElBQUksT0FBTyxDQUFDLFVBQXBCLElBQW1DLGtCQUFwRDtBQUNBLE1BQUksV0FBVyxHQUFHLEtBQWxCO0FBQ0EsTUFBSSxHQUFKOztBQUVBLFNBQU8sQ0FBQyxHQUFHLEdBQUcsV0FBVyxDQUFDLElBQVosQ0FBaUIsR0FBakIsQ0FBUCxNQUFrQyxJQUF6QyxFQUErQztBQUM3QyxRQUFJLENBQUMsR0FBRyxHQUFHLENBQUMsQ0FBRCxDQUFYO0FBQ0EsUUFBSSxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUQsQ0FBakI7QUFDQSxRQUFJLE1BQU0sR0FBRyxHQUFHLENBQUMsS0FBakI7QUFDQSxRQUFJLElBQUksR0FBRyxDQUFDLEtBQUosQ0FBVSxLQUFWLEVBQWlCLE1BQWpCLENBQVI7QUFDQSxTQUFLLEdBQUcsTUFBTSxHQUFHLENBQUMsQ0FBQyxNQUFuQixDQUw2QyxDOztBQVE3QyxRQUFJLE9BQUosRUFBYTtBQUNYLFVBQUksSUFBSSxPQUFPLENBQUMsQ0FBRCxDQUFmO0FBQ0EsaUJBQVcsR0FBRyxJQUFkO0FBQ0E7QUFDRDs7QUFFRCxRQUFJLElBQUksR0FBRyxFQUFYO0FBQ0EsUUFBSSxJQUFJLEdBQUcsR0FBRyxDQUFDLEtBQUQsQ0FBZDtBQUNBLFFBQUksSUFBSSxHQUFHLEdBQUcsQ0FBQyxDQUFELENBQWQ7QUFDQSxRQUFJLE9BQU8sR0FBRyxHQUFHLENBQUMsQ0FBRCxDQUFqQjtBQUNBLFFBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxDQUFELENBQWY7QUFDQSxRQUFJLFFBQVEsR0FBRyxHQUFHLENBQUMsQ0FBRCxDQUFsQjs7QUFFQSxRQUFJLENBQUMsV0FBRCxJQUFnQixJQUFJLENBQUMsTUFBekIsRUFBaUM7QUFDL0IsVUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQUwsR0FBYyxDQUF0Qjs7QUFFQSxVQUFJLFVBQVUsQ0FBQyxPQUFYLENBQW1CLElBQUksQ0FBQyxDQUFELENBQXZCLElBQThCLENBQUMsQ0FBbkMsRUFBc0M7QUFDcEMsWUFBSSxHQUFHLElBQUksQ0FBQyxDQUFELENBQVg7QUFDQSxZQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUwsQ0FBVyxDQUFYLEVBQWMsQ0FBZCxDQUFQO0FBQ0Q7QUFDRixLQTVCNEMsQzs7O0FBK0I3QyxRQUFJLElBQUosRUFBVTtBQUNSLFlBQU0sQ0FBQyxJQUFQLENBQVksSUFBWjtBQUNBLFVBQUksR0FBRyxFQUFQO0FBQ0EsaUJBQVcsR0FBRyxLQUFkO0FBQ0Q7O0FBRUQsUUFBSSxPQUFPLEdBQUcsSUFBSSxLQUFLLEVBQVQsSUFBZSxJQUFJLEtBQUssU0FBeEIsSUFBcUMsSUFBSSxLQUFLLElBQTVEO0FBQ0EsUUFBSSxNQUFNLEdBQUcsUUFBUSxLQUFLLEdBQWIsSUFBb0IsUUFBUSxLQUFLLEdBQTlDO0FBQ0EsUUFBSSxRQUFRLEdBQUcsUUFBUSxLQUFLLEdBQWIsSUFBb0IsUUFBUSxLQUFLLEdBQWhEO0FBQ0EsUUFBSSxTQUFTLEdBQUcsSUFBSSxJQUFJLGdCQUF4QjtBQUNBLFFBQUksT0FBTyxHQUFHLE9BQU8sSUFBSSxLQUF6QjtBQUVBLFVBQU0sQ0FBQyxJQUFQLENBQVk7QUFDVixVQUFJLEVBQUUsSUFBSSxJQUFJLEdBQUcsRUFEUDtBQUVWLFlBQU0sRUFBRSxJQUZFO0FBR1YsZUFBUyxFQUFFLFNBSEQ7QUFJVixjQUFRLEVBQUUsUUFKQTtBQUtWLFlBQU0sRUFBRSxNQUxFO0FBTVYsYUFBTyxFQUFFLE9BTkM7QUFPVixhQUFPLEVBQUUsT0FBTyxHQUFHLFdBQVcsQ0FBQyxPQUFELENBQWQsR0FBMEIsT0FBTyxZQUFZLENBQUMsU0FBRCxDQUFuQixHQUFpQztBQVBqRSxLQUFaO0FBU0QsR0E5RDJCLEM7OztBQWlFNUIsTUFBSSxJQUFJLElBQUksS0FBSyxHQUFHLEdBQUcsQ0FBQyxNQUF4QixFQUFnQztBQUM5QixVQUFNLENBQUMsSUFBUCxDQUFZLElBQUksR0FBRyxHQUFHLENBQUMsTUFBSixDQUFXLEtBQVgsQ0FBbkI7QUFDRDs7QUFFRCxTQUFPLE1BQVA7QUFDRDs7Ozs7Ozs7OztBQVNELFNBQVMsT0FBVCxDQUFrQixHQUFsQixFQUF1QixPQUF2QixFQUFnQztBQUM5QixTQUFPLGdCQUFnQixDQUFDLEtBQUssQ0FBQyxHQUFELEVBQU0sT0FBTixDQUFOLENBQXZCO0FBQ0Q7Ozs7OztBQUtELFNBQVMsZ0JBQVQsQ0FBMkIsTUFBM0IsRUFBbUM7O0FBRWpDLE1BQUksT0FBTyxHQUFHLElBQUksS0FBSixDQUFVLE1BQU0sQ0FBQyxNQUFqQixDQUFkLENBRmlDLEM7O0FBS2pDLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBYixFQUFnQixDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQTNCLEVBQW1DLENBQUMsRUFBcEMsRUFBd0M7QUFDdEMsUUFBSSxPQUFPLE1BQU0sQ0FBQyxDQUFELENBQWIsS0FBcUIsUUFBekIsRUFBbUM7QUFDakMsYUFBTyxDQUFDLENBQUQsQ0FBUCxHQUFhLElBQUksTUFBSixDQUFXLFNBQVMsTUFBTSxDQUFDLENBQUQsQ0FBTixDQUFVLE9BQW5CLEdBQTZCLElBQXhDLENBQWI7QUFDRDtBQUNGOztBQUVELFNBQU8sVUFBVSxJQUFWLEVBQWdCLE9BQWhCLEVBQXlCO0FBQzlCLFFBQUksSUFBSSxHQUFHLEVBQVg7QUFDQSxRQUFJLE1BQU0sR0FBSSxPQUFPLElBQUksT0FBTyxDQUFDLE1BQXBCLElBQStCLGtCQUE1Qzs7QUFFQSxTQUFLLElBQUksQ0FBQyxHQUFHLENBQWIsRUFBZ0IsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUEzQixFQUFtQyxDQUFDLEVBQXBDLEVBQXdDO0FBQ3RDLFVBQUksS0FBSyxHQUFHLE1BQU0sQ0FBQyxDQUFELENBQWxCOztBQUVBLFVBQUksT0FBTyxLQUFQLEtBQWlCLFFBQXJCLEVBQStCO0FBQzdCLFlBQUksSUFBSSxLQUFSO0FBQ0E7QUFDRDs7QUFFRCxVQUFJLEtBQUssR0FBRyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFQLENBQVAsR0FBc0IsU0FBdEM7QUFDQSxVQUFJLE9BQUo7O0FBRUEsVUFBSSxLQUFLLENBQUMsT0FBTixDQUFjLEtBQWQsQ0FBSixFQUEwQjtBQUN4QixZQUFJLENBQUMsS0FBSyxDQUFDLE1BQVgsRUFBbUI7QUFDakIsZ0JBQU0sSUFBSSxTQUFKLENBQWMsZUFBZSxLQUFLLENBQUMsSUFBckIsR0FBNEIsZ0NBQTFDLENBQU47QUFDRDs7QUFFRCxZQUFJLEtBQUssQ0FBQyxNQUFOLEtBQWlCLENBQXJCLEVBQXdCO0FBQ3RCLGNBQUksS0FBSyxDQUFDLFFBQVYsRUFBb0I7QUFFcEIsZ0JBQU0sSUFBSSxTQUFKLENBQWMsZUFBZSxLQUFLLENBQUMsSUFBckIsR0FBNEIsbUJBQTFDLENBQU47QUFDRDs7QUFFRCxhQUFLLElBQUksQ0FBQyxHQUFHLENBQWIsRUFBZ0IsQ0FBQyxHQUFHLEtBQUssQ0FBQyxNQUExQixFQUFrQyxDQUFDLEVBQW5DLEVBQXVDO0FBQ3JDLGlCQUFPLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFELENBQU4sRUFBVyxLQUFYLENBQWhCOztBQUVBLGNBQUksQ0FBQyxPQUFPLENBQUMsQ0FBRCxDQUFQLENBQVcsSUFBWCxDQUFnQixPQUFoQixDQUFMLEVBQStCO0FBQzdCLGtCQUFNLElBQUksU0FBSixDQUFjLG1CQUFtQixLQUFLLENBQUMsSUFBekIsR0FBZ0MsY0FBaEMsR0FBaUQsS0FBSyxDQUFDLE9BQXZELEdBQWlFLEdBQS9FLENBQU47QUFDRDs7QUFFRCxjQUFJLElBQUksQ0FBQyxDQUFDLEtBQUssQ0FBTixHQUFVLEtBQUssQ0FBQyxNQUFoQixHQUF5QixLQUFLLENBQUMsU0FBaEMsSUFBNkMsT0FBckQ7QUFDRDs7QUFFRDtBQUNEOztBQUVELFVBQUksT0FBTyxLQUFQLEtBQWlCLFFBQWpCLElBQTZCLE9BQU8sS0FBUCxLQUFpQixRQUE5QyxJQUEwRCxPQUFPLEtBQVAsS0FBaUIsU0FBL0UsRUFBMEY7QUFDeEYsZUFBTyxHQUFHLE1BQU0sQ0FBQyxNQUFNLENBQUMsS0FBRCxDQUFQLEVBQWdCLEtBQWhCLENBQWhCOztBQUVBLFlBQUksQ0FBQyxPQUFPLENBQUMsQ0FBRCxDQUFQLENBQVcsSUFBWCxDQUFnQixPQUFoQixDQUFMLEVBQStCO0FBQzdCLGdCQUFNLElBQUksU0FBSixDQUFjLGVBQWUsS0FBSyxDQUFDLElBQXJCLEdBQTRCLGNBQTVCLEdBQTZDLEtBQUssQ0FBQyxPQUFuRCxHQUE2RCxjQUE3RCxHQUE4RSxPQUE5RSxHQUF3RixHQUF0RyxDQUFOO0FBQ0Q7O0FBRUQsWUFBSSxJQUFJLEtBQUssQ0FBQyxNQUFOLEdBQWUsT0FBdkI7QUFDQTtBQUNEOztBQUVELFVBQUksS0FBSyxDQUFDLFFBQVYsRUFBb0I7O0FBRWxCLFlBQUksS0FBSyxDQUFDLE9BQVYsRUFBbUIsSUFBSSxJQUFJLEtBQUssQ0FBQyxNQUFkO0FBRW5CO0FBQ0Q7O0FBRUQsWUFBTSxJQUFJLFNBQUosQ0FBYyxlQUFlLEtBQUssQ0FBQyxJQUFyQixHQUE0QixVQUE1QixJQUEwQyxLQUFLLENBQUMsTUFBTixHQUFlLFVBQWYsR0FBNEIsVUFBdEUsQ0FBZCxDQUFOO0FBQ0Q7O0FBRUQsV0FBTyxJQUFQO0FBQ0QsR0E3REQ7QUE4REQ7Ozs7Ozs7OztBQVFELFNBQVMsWUFBVCxDQUF1QixHQUF2QixFQUE0QjtBQUMxQixTQUFPLEdBQUcsQ0FBQyxPQUFKLENBQVksMkJBQVosRUFBeUMsTUFBekMsQ0FBUDtBQUNEOzs7Ozs7Ozs7QUFRRCxTQUFTLFdBQVQsQ0FBc0IsS0FBdEIsRUFBNkI7QUFDM0IsU0FBTyxLQUFLLENBQUMsT0FBTixDQUFjLGNBQWQsRUFBOEIsTUFBOUIsQ0FBUDtBQUNEOzs7Ozs7Ozs7QUFRRCxTQUFTLEtBQVQsQ0FBZ0IsT0FBaEIsRUFBeUI7QUFDdkIsU0FBTyxPQUFPLElBQUksT0FBTyxDQUFDLFNBQW5CLEdBQStCLEVBQS9CLEdBQW9DLEdBQTNDO0FBQ0Q7Ozs7Ozs7Ozs7QUFTRCxTQUFTLGNBQVQsQ0FBeUIsSUFBekIsRUFBK0IsSUFBL0IsRUFBcUM7QUFDbkMsTUFBSSxDQUFDLElBQUwsRUFBVyxPQUFPLElBQVAsQ0FEd0IsQzs7QUFJbkMsTUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLE1BQUwsQ0FBWSxLQUFaLENBQWtCLFdBQWxCLENBQWI7O0FBRUEsTUFBSSxNQUFKLEVBQVk7QUFDVixTQUFLLElBQUksQ0FBQyxHQUFHLENBQWIsRUFBZ0IsQ0FBQyxHQUFHLE1BQU0sQ0FBQyxNQUEzQixFQUFtQyxDQUFDLEVBQXBDLEVBQXdDO0FBQ3RDLFVBQUksQ0FBQyxJQUFMLENBQVU7QUFDUixZQUFJLEVBQUUsQ0FERTtBQUVSLGNBQU0sRUFBRSxJQUZBO0FBR1IsaUJBQVMsRUFBRSxJQUhIO0FBSVIsZ0JBQVEsRUFBRSxLQUpGO0FBS1IsY0FBTSxFQUFFLEtBTEE7QUFNUixlQUFPLEVBQUUsS0FORDtBQU9SLGVBQU8sRUFBRTtBQVBELE9BQVY7QUFTRDtBQUNGOztBQUVELFNBQU8sSUFBUDtBQUNEOzs7Ozs7Ozs7OztBQVVELFNBQVMsYUFBVCxDQUF3QixJQUF4QixFQUE4QixJQUE5QixFQUFvQyxPQUFwQyxFQUE2QztBQUMzQyxNQUFJLEtBQUssR0FBRyxFQUFaOztBQUVBLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBYixFQUFnQixDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQXpCLEVBQWlDLENBQUMsRUFBbEMsRUFBc0M7QUFDcEMsU0FBSyxDQUFDLElBQU4sQ0FBVyxZQUFZLENBQUMsSUFBSSxDQUFDLENBQUQsQ0FBTCxFQUFVLElBQVYsRUFBZ0IsT0FBaEIsQ0FBWixDQUFxQyxNQUFoRDtBQUNEOztBQUVELFNBQU8sSUFBSSxNQUFKLENBQVcsUUFBUSxLQUFLLENBQUMsSUFBTixDQUFXLEdBQVgsQ0FBUixHQUEwQixHQUFyQyxFQUEwQyxLQUFLLENBQUMsT0FBRCxDQUEvQyxDQUFQO0FBQ0Q7Ozs7Ozs7Ozs7O0FBVUQsU0FBUyxjQUFULENBQXlCLElBQXpCLEVBQStCLElBQS9CLEVBQXFDLE9BQXJDLEVBQThDO0FBQzVDLFNBQU8sY0FBYyxDQUFDLEtBQUssQ0FBQyxJQUFELEVBQU8sT0FBUCxDQUFOLEVBQXVCLElBQXZCLEVBQTZCLE9BQTdCLENBQXJCO0FBQ0Q7Ozs7Ozs7Ozs7O0FBVUQsU0FBUyxjQUFULENBQXlCLE1BQXpCLEVBQWlDLElBQWpDLEVBQXVDLE9BQXZDLEVBQWdEO0FBQzlDLFNBQU8sR0FBRyxPQUFPLElBQUksRUFBckI7QUFFQSxNQUFJLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBckI7QUFDQSxNQUFJLEdBQUcsR0FBRyxPQUFPLENBQUMsR0FBUixLQUFnQixLQUExQjtBQUNBLE1BQUksU0FBUyxHQUFHLFlBQVksQ0FBQyxPQUFPLENBQUMsU0FBUixJQUFxQixpQkFBdEIsQ0FBNUI7QUFDQSxNQUFJLFVBQVUsR0FBRyxPQUFPLENBQUMsVUFBUixJQUFzQixrQkFBdkM7QUFDQSxNQUFJLFFBQVEsR0FBRyxHQUFHLE1BQUgsQ0FBVSxPQUFPLENBQUMsUUFBUixJQUFvQixFQUE5QixFQUFrQyxHQUFsQyxDQUFzQyxZQUF0QyxFQUFvRCxNQUFwRCxDQUEyRCxHQUEzRCxFQUFnRSxJQUFoRSxDQUFxRSxHQUFyRSxDQUFmO0FBQ0EsTUFBSSxLQUFLLEdBQUcsRUFBWjtBQUNBLE1BQUksY0FBYyxHQUFHLE1BQU0sQ0FBQyxNQUFQLEtBQWtCLENBQXZDLENBVDhDLEM7O0FBWTlDLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBYixFQUFnQixDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQTNCLEVBQW1DLENBQUMsRUFBcEMsRUFBd0M7QUFDdEMsUUFBSSxLQUFLLEdBQUcsTUFBTSxDQUFDLENBQUQsQ0FBbEI7O0FBRUEsUUFBSSxPQUFPLEtBQVAsS0FBaUIsUUFBckIsRUFBK0I7QUFDN0IsV0FBSyxJQUFJLFlBQVksQ0FBQyxLQUFELENBQXJCO0FBQ0Esb0JBQWMsR0FBRyxDQUFDLEtBQUssTUFBTSxDQUFDLE1BQVAsR0FBZ0IsQ0FBdEIsSUFBMkIsVUFBVSxDQUFDLE9BQVgsQ0FBbUIsS0FBSyxDQUFDLEtBQUssQ0FBQyxNQUFOLEdBQWUsQ0FBaEIsQ0FBeEIsSUFBOEMsQ0FBQyxDQUEzRjtBQUNELEtBSEQsTUFHTztBQUNMLFVBQUksTUFBTSxHQUFHLFlBQVksQ0FBQyxLQUFLLENBQUMsTUFBUCxDQUF6QjtBQUNBLFVBQUksT0FBTyxHQUFHLEtBQUssQ0FBQyxNQUFOLEdBQ1YsUUFBUSxLQUFLLENBQUMsT0FBZCxHQUF3QixNQUF4QixHQUFpQyxNQUFqQyxHQUEwQyxLQUExQyxHQUFrRCxLQUFLLENBQUMsT0FBeEQsR0FBa0UsS0FEeEQsR0FFVixLQUFLLENBQUMsT0FGVjtBQUlBLFVBQUksSUFBSixFQUFVLElBQUksQ0FBQyxJQUFMLENBQVUsS0FBVjs7QUFFVixVQUFJLEtBQUssQ0FBQyxRQUFWLEVBQW9CO0FBQ2xCLFlBQUksS0FBSyxDQUFDLE9BQVYsRUFBbUI7QUFDakIsZUFBSyxJQUFJLE1BQU0sR0FBRyxHQUFULEdBQWUsT0FBZixHQUF5QixJQUFsQztBQUNELFNBRkQsTUFFTztBQUNMLGVBQUssSUFBSSxRQUFRLE1BQVIsR0FBaUIsR0FBakIsR0FBdUIsT0FBdkIsR0FBaUMsS0FBMUM7QUFDRDtBQUNGLE9BTkQsTUFNTztBQUNMLGFBQUssSUFBSSxNQUFNLEdBQUcsR0FBVCxHQUFlLE9BQWYsR0FBeUIsR0FBbEM7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsTUFBSSxHQUFKLEVBQVM7QUFDUCxRQUFJLENBQUMsTUFBTCxFQUFhLEtBQUssSUFBSSxRQUFRLFNBQVIsR0FBb0IsSUFBN0I7QUFFYixTQUFLLElBQUksUUFBUSxLQUFLLEdBQWIsR0FBbUIsR0FBbkIsR0FBeUIsUUFBUSxRQUFSLEdBQW1CLEdBQXJEO0FBQ0QsR0FKRCxNQUlPO0FBQ0wsUUFBSSxDQUFDLE1BQUwsRUFBYSxLQUFLLElBQUksUUFBUSxTQUFSLEdBQW9CLEtBQXBCLEdBQTRCLFFBQTVCLEdBQXVDLEtBQWhEO0FBQ2IsUUFBSSxDQUFDLGNBQUwsRUFBcUIsS0FBSyxJQUFJLFFBQVEsU0FBUixHQUFvQixHQUFwQixHQUEwQixRQUExQixHQUFxQyxHQUE5QztBQUN0Qjs7QUFFRCxTQUFPLElBQUksTUFBSixDQUFXLE1BQU0sS0FBakIsRUFBd0IsS0FBSyxDQUFDLE9BQUQsQ0FBN0IsQ0FBUDtBQUNEOzs7Ozs7Ozs7Ozs7Ozs7QUFjRCxTQUFTLFlBQVQsQ0FBdUIsSUFBdkIsRUFBNkIsSUFBN0IsRUFBbUMsT0FBbkMsRUFBNEM7QUFDMUMsTUFBSSxJQUFJLFlBQVksTUFBcEIsRUFBNEI7QUFDMUIsV0FBTyxjQUFjLENBQUMsSUFBRCxFQUFPLElBQVAsQ0FBckI7QUFDRDs7QUFFRCxNQUFJLEtBQUssQ0FBQyxPQUFOLENBQWMsSUFBZCxDQUFKLEVBQXlCO0FBQ3ZCLFdBQU8sYUFBYTtBQUFBO0FBQXdCLFFBQXhCLEVBQStCLElBQS9CLEVBQXFDLE9BQXJDLENBQXBCO0FBQ0Q7O0FBRUQsU0FBTyxjQUFjO0FBQUE7QUFBd0IsTUFBeEIsRUFBK0IsSUFBL0IsRUFBcUMsT0FBckMsQ0FBckI7QUFDRDs7Ozs7O0FDbFhEOzs7Ozs7Ozs7QUFXQSxNQUFNO0FBQUMsZ0JBQWM7QUFBZixJQUFtQixNQUFNLENBQUMsU0FBaEM7QUFDQSxNQUFNLEtBQUssR0FBRyxJQUFJLEdBQUosRUFBZCxDOztBQUVBLEtBQUssQ0FBQyxHQUFOLENBQVUsUUFBVixFQUFvQjtBQUNsQixNQUFJLEVBQUUsRUFEWTtBQUVsQixTQUFPLEVBQUU7QUFGUyxDQUFwQjs7QUFLQSxTQUFTLFdBQVQsQ0FBcUIsR0FBckIsRUFBMEI7QUFDeEIsTUFBSTtBQUNGLFdBQU8sa0JBQWtCLENBQUMsR0FBRCxDQUF6QjtBQUNELEdBRkQsQ0FFRSxPQUFPLEdBQVAsRUFBWTtBQUNaLFdBQU8sR0FBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBUyxTQUFULENBQW1CLFNBQW5CLEVBQThCLElBQTlCLEVBQW9DLEtBQXBDLEVBQTJDLFVBQTNDLEVBQXVELFlBQXZELEVBQXFFO0FBQ25FLE9BQUssR0FBRyxDQUFDLENBQUMsS0FBVjtBQUNBLFFBQU0sUUFBUSxhQUFNLFNBQU4sY0FBbUIsS0FBbkIsQ0FBZDtBQUNBLE1BQUksTUFBTSxHQUFHLEtBQUssQ0FBQyxHQUFOLENBQVUsUUFBVixDQUFiOztBQUVBLE1BQUksQ0FBQyxNQUFMLEVBQWE7QUFDWCxVQUFNLElBQUksR0FBRyxFQUFiO0FBQ0EsVUFBTSxHQUFHO0FBQ1AsVUFETztBQUVQLGFBQU8sRUFBRVksY0FBWSxDQUFDLFNBQUQsRUFBWSxJQUFaLEVBQWtCO0FBQ3JDLFdBQUcsRUFBRSxLQURnQztBQUVyQyxjQUFNLEVBQUUsU0FBUyxLQUFLO0FBRmUsT0FBbEI7QUFGZCxLQUFUO0FBT0EsU0FBSyxDQUFDLEdBQU4sQ0FBVSxRQUFWLEVBQW9CLE1BQXBCO0FBQ0Q7O0FBRUQsUUFBTSxDQUFDLEdBQUcsTUFBTSxDQUFDLE9BQVAsQ0FBZSxJQUFmLENBQW9CLElBQXBCLENBQVY7O0FBQ0EsTUFBSSxDQUFDLENBQUwsRUFBUTtBQUNOLFdBQU8sSUFBUDtBQUNEOztBQUVELFFBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFQLENBQWMsRUFBZCxFQUFrQixZQUFsQixDQUFmOztBQUVBLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBYixFQUFnQixDQUFDLEdBQUcsQ0FBQyxDQUFDLE1BQXRCLEVBQThCLENBQUMsRUFBL0IsRUFBbUM7QUFDakMsVUFBTSxHQUFHLEdBQUcsTUFBTSxDQUFDLElBQVAsQ0FBWSxDQUFDLEdBQUcsQ0FBaEIsQ0FBWjtBQUNBLFVBQU0sSUFBSSxHQUFHLEdBQUcsQ0FBQyxJQUFqQjtBQUNBLFVBQU0sS0FBSyxHQUFHLENBQUMsQ0FBQyxDQUFELENBQWY7O0FBQ0EsUUFBSSxLQUFLLEtBQUssU0FBVixJQUF1QixDQUFDLDRCQUFjLENBQUMsSUFBZixDQUFvQixNQUFwQixFQUE0QixJQUE1QixDQUE1QixFQUErRDtBQUM3RCxVQUFJLEdBQUcsQ0FBQyxNQUFSLEVBQWdCO0FBQ2QsY0FBTSxDQUFDLElBQUQsQ0FBTixHQUFlLEtBQUssR0FBRyxLQUFLLENBQUMsS0FBTixDQUFZLEdBQUcsQ0FBQyxTQUFoQixFQUEyQixHQUEzQixDQUErQixXQUEvQixDQUFILEdBQWlELEVBQXJFO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsY0FBTSxDQUFDLElBQUQsQ0FBTixHQUFlLEtBQUssR0FBRyxXQUFXLENBQUMsS0FBRCxDQUFkLEdBQXdCLEtBQTVDO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFNBQU87QUFDTCxRQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUQsQ0FERjtBQUVMLFFBQUksRUFBRSxDQUFDLFVBQVUsSUFBSSxFQUFmLEVBQW1CLE1BQW5CLENBQTBCLE1BQU0sQ0FBQyxJQUFqQyxDQUZEO0FBR0w7QUFISyxHQUFQO0FBS0Q7QUNyRUQ7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBd0RBLFNBQVMsVUFBVCxDQUFvQixLQUFwQixFQUEyQixRQUEzQixFQUFxQyxrQkFBckMsRUFBeUQsVUFBekQsRUFBcUUsWUFBckUsRUFBbUY7QUFDakYsTUFBSSxLQUFKO0FBQ0EsTUFBSSxZQUFKO0FBQ0EsTUFBSSxVQUFVLEdBQUcsQ0FBakI7QUFDQSxNQUFJLFNBQVMsR0FBRyxLQUFLLENBQUMsSUFBTixJQUFjLEVBQTlCOztBQUNBLE1BQUksU0FBUyxDQUFDLE1BQVYsQ0FBaUIsQ0FBakIsTUFBd0IsR0FBNUIsRUFBaUM7QUFDL0IsUUFBSSxrQkFBSixFQUF3QjtBQUN0QixlQUFTLEdBQUcsU0FBUyxDQUFDLE1BQVYsQ0FBaUIsQ0FBakIsQ0FBWjtBQUNEOztBQUNELHNCQUFrQixHQUFHLElBQXJCO0FBQ0Q7O0FBRUQsU0FBTztBQUNMLFFBQUksQ0FBQyxXQUFELEVBQWM7QUFDaEIsVUFBSSxLQUFLLEtBQUssV0FBZCxFQUEyQjtBQUN6QixlQUFPO0FBQUMsY0FBSSxFQUFFO0FBQVAsU0FBUDtBQUNEOztBQUVELFlBQU0sUUFBUSxHQUFHLEtBQUssQ0FBQyxVQUFOLEdBQW1CLEtBQUssQ0FBQyxVQUFOLElBQW9CLEtBQUssQ0FBQyxRQUE5RDs7QUFFQSxVQUFJLENBQUMsS0FBTCxFQUFZO0FBQ1YsYUFBSyxHQUFHLFNBQVMsQ0FBQyxTQUFELEVBQVksUUFBWixFQUFzQixDQUFDLFFBQXZCLEVBQWlDLFVBQWpDLEVBQTZDLFlBQTdDLENBQWpCOztBQUVBLFlBQUksS0FBSixFQUFXO0FBQ1QsaUJBQU87QUFDTCxnQkFBSSxFQUFFLEtBREQ7QUFFTCxpQkFBSyxFQUFFO0FBQ0wsbUJBREs7QUFFTCxrQkFBSSxFQUFFLEtBQUssQ0FBQyxJQUZQO0FBR0wsb0JBQU0sRUFBRSxLQUFLLENBQUMsTUFIVDtBQUlMLGtCQUFJLEVBQUUsS0FBSyxDQUFDO0FBSlA7QUFGRixXQUFQO0FBU0Q7QUFDRjs7QUFFRCxVQUFJLEtBQUssSUFBSSxRQUFiLEVBQXVCO0FBQ3JCLGVBQU8sVUFBVSxHQUFHLFFBQVEsQ0FBQyxNQUE3QixFQUFxQztBQUNuQyxjQUFJLENBQUMsWUFBTCxFQUFtQjtBQUNqQixrQkFBTSxVQUFVLEdBQUcsUUFBUSxDQUFDLFVBQUQsQ0FBM0I7QUFDQSxzQkFBVSxDQUFDLE1BQVgsR0FBb0IsS0FBcEI7QUFFQSxnQkFBSSxhQUFhLEdBQUcsS0FBSyxDQUFDLElBQU4sQ0FBVyxNQUEvQjs7QUFDQSxnQkFBSSxhQUFhLEdBQUcsQ0FBaEIsSUFBcUIsUUFBUSxDQUFDLE1BQVQsQ0FBZ0IsYUFBaEIsTUFBbUMsR0FBNUQsRUFBaUU7QUFDL0QsMkJBQWEsSUFBSSxDQUFqQjtBQUNEOztBQUVELHdCQUFZLEdBQUcsVUFBVSxDQUN2QixVQUR1QixFQUV2QixRQUFRLENBQUMsTUFBVCxDQUFnQixhQUFoQixDQUZ1QixFQUd2QixrQkFIdUIsRUFJdkIsS0FBSyxDQUFDLElBSmlCLEVBS3ZCLEtBQUssQ0FBQyxNQUxpQixDQUF6QjtBQU9EOztBQUVELGdCQUFNLFVBQVUsR0FBRyxZQUFZLENBQUMsSUFBYixDQUFrQixXQUFsQixDQUFuQjs7QUFDQSxjQUFJLENBQUMsVUFBVSxDQUFDLElBQWhCLEVBQXNCO0FBQ3BCLG1CQUFPO0FBQ0wsa0JBQUksRUFBRSxLQUREO0FBRUwsbUJBQUssRUFBRSxVQUFVLENBQUM7QUFGYixhQUFQO0FBSUQ7O0FBRUQsc0JBQVksR0FBRyxJQUFmO0FBQ0Esb0JBQVU7QUFDWDtBQUNGOztBQUVELGFBQU87QUFBQyxZQUFJLEVBQUU7QUFBUCxPQUFQO0FBQ0Q7O0FBMURJLEdBQVA7QUE0REQ7QUNoSUQ7Ozs7Ozs7Ozs7QUFXQSxTQUFTLFlBQVQsQ0FBc0IsT0FBdEIsRUFBK0I7QUFDN0IsTUFBSSxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQVIsQ0FBYyxNQUFmLENBQWQsRUFBc0M7QUFDcEMsV0FBTyxPQUFPLENBQUMsS0FBUixDQUFjLE1BQWQsQ0FBcUIsT0FBckIsQ0FBUDtBQUNEOztBQUNELFNBQU8sU0FBUDtBQUNEO0FDaEJEOzs7Ozs7Ozs7O0FBY0EsU0FBUyxZQUFULENBQXNCLFdBQXRCLEVBQW1DLFVBQW5DLEVBQStDO0FBQzdDLE1BQUksS0FBSyxHQUFHLFVBQVo7O0FBQ0EsU0FBTyxLQUFQLEVBQWM7QUFDWixTQUFLLEdBQUcsS0FBSyxDQUFDLE1BQWQ7O0FBQ0EsUUFBSSxLQUFLLEtBQUssV0FBZCxFQUEyQjtBQUN6QixhQUFPLElBQVA7QUFDRDtBQUNGOztBQUNELFNBQU8sS0FBUDtBQUNEOztBQUVELFNBQVMsb0JBQVQsQ0FBOEIsY0FBOUIsRUFBOEM7QUFDNUMsTUFBSSxZQUFZLG1CQUFZLGNBQWMsQ0FBQyxRQUEzQixnREFBaEI7QUFDQSxRQUFNLFNBQVMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxLQUFmLElBQXdCLEVBQXpCLEVBQTZCLElBQS9DOztBQUNBLE1BQUksU0FBSixFQUFlO0FBQ2IsZ0JBQVksZ0RBQXlDLFNBQXpDLE1BQVo7QUFDRDs7QUFDRCxTQUFPLFlBQVA7QUFDRDs7QUFFRCxTQUFTLGVBQVQsQ0FBeUIsT0FBekIsRUFBa0MsS0FBbEMsRUFBeUM7QUFDdkMsUUFBTTtBQUFDLFNBQUQ7QUFBUTtBQUFSLE1BQWdCLEtBQXRCOztBQUNBLFdBQVMscUJBQVQsQ0FBK0IsUUFBL0IsRUFBeUMsS0FBekMsRUFBZ0Q7QUFDOUMsV0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFQLElBQWlCLENBQUMsUUFBbEIsSUFBOEIsQ0FBQyxRQUFRLENBQUMsTUFBeEMsSUFBa0QsUUFBUSxDQUFDLFFBQVEsQ0FBQyxNQUFULEdBQWtCLENBQW5CLENBQVIsQ0FBOEIsS0FBOUIsS0FBd0MsS0FBSyxDQUFDLE1BQXZHO0FBQ0Q7O0FBRUQsTUFBSSxLQUFLLElBQUksQ0FBQyxLQUFLLENBQUMsV0FBcEIsRUFBaUM7QUFDL0IsVUFBTSxJQUFJLEdBQUc7QUFBQyxVQUFEO0FBQU87QUFBUCxLQUFiOztBQUNBLFFBQUkscUJBQXFCLENBQUMsT0FBTyxDQUFDLEtBQVQsRUFBZ0IsS0FBaEIsQ0FBekIsRUFBaUQ7QUFDL0MsYUFBTyxDQUFDLEtBQVIsR0FBZ0IsQ0FBQyxJQUFELENBQWhCO0FBQ0QsS0FGRCxNQUVPO0FBQ0wsYUFBTyxDQUFDLEtBQVIsQ0FBYyxJQUFkLENBQW1CLElBQW5CO0FBQ0Q7QUFDRjtBQUNGOzs7Ozs7QUFLRCxNQUFNLFFBQU4sQ0FBZTtBQUNiLGFBQVcsQ0FBQyxNQUFELEVBQVMsT0FBTyxHQUFHLEVBQW5CLEVBQXVCO0FBQ2hDLFFBQUksTUFBTSxDQUFDLE1BQUQsQ0FBTixLQUFtQixNQUF2QixFQUErQjtBQUM3QixZQUFNLElBQUksU0FBSixDQUFjLGdCQUFkLENBQU47QUFDRDs7QUFFRCxTQUFLLE9BQUwsR0FBZSxPQUFPLENBQUMsT0FBUixJQUFtQixFQUFsQztBQUNBLFNBQUssWUFBTCxHQUFvQixPQUFPLENBQUMsWUFBNUI7QUFDQSxTQUFLLFlBQUwsR0FBb0IsT0FBTyxDQUFDLFlBQVIsSUFBd0IsWUFBNUM7QUFDQSxTQUFLLE9BQUwsR0FBZSxNQUFNLENBQUMsTUFBUCxDQUFjO0FBQUMsY0FBUSxFQUFFO0FBQVgsS0FBZCxFQUFnQyxPQUFPLENBQUMsT0FBeEMsQ0FBZjtBQUNBLFNBQUssSUFBTCxHQUFZLEtBQUssQ0FBQyxPQUFOLENBQWMsTUFBZCxJQUF3QjtBQUFDLFVBQUksRUFBRSxFQUFQO0FBQVcsZ0JBQVUsRUFBRSxNQUF2QjtBQUErQixZQUFNLEVBQUUsSUFBdkM7QUFBNkMsaUJBQVcsRUFBRTtBQUExRCxLQUF4QixHQUEwRixNQUF0RztBQUNBLFNBQUssSUFBTCxDQUFVLE1BQVYsR0FBbUIsSUFBbkI7QUFDRDs7Ozs7Ozs7OztBQVNELFdBQVMsR0FBRztBQUNWLFdBQU8sQ0FBQyxHQUFHLEtBQUssSUFBTCxDQUFVLFVBQWQsQ0FBUDtBQUNEOzs7Ozs7Ozs7QUFRRCxXQUFTLENBQUMsTUFBRCxFQUFTO0FBQ2hCLGdCQUFZLENBQUMsTUFBRCxDQUFaO0FBQ0EsVUFBTSxTQUFTLEdBQUcsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxNQUFELENBQVgsQ0FBbEI7QUFDQSxTQUFLLElBQUwsQ0FBVSxVQUFWLEdBQXVCLFNBQXZCO0FBQ0Q7Ozs7Ozs7Ozs7OztBQVdELFdBQVMsQ0FBQyxNQUFELEVBQVM7QUFDaEIsZ0JBQVksQ0FBQyxNQUFELENBQVo7O0FBQ0EsU0FBSyxJQUFMLENBQVUsVUFBVixDQUFxQixJQUFyQixDQUEwQixHQUFHLE9BQU8sQ0FBQyxNQUFELENBQXBDOztBQUNBLFdBQU8sS0FBSyxTQUFMLEVBQVA7QUFDRDs7Ozs7O0FBS0QsY0FBWSxHQUFHO0FBQ2IsU0FBSyxTQUFMLENBQWUsRUFBZjtBQUNEOzs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW1CRCxTQUFPLENBQUMsaUJBQUQsRUFBb0I7QUFDekIsVUFBTSxPQUFPLEdBQUcsTUFBTSxDQUFDLE1BQVAsQ0FDZCxFQURjLEVBRWQsS0FBSyxPQUZTLEVBR2QsUUFBUSxDQUFDLGlCQUFELENBQVIsR0FBOEI7QUFBQyxjQUFRLEVBQUU7QUFBWCxLQUE5QixHQUE4RCxpQkFIaEQsQ0FBaEI7QUFLQSxVQUFNLEtBQUssR0FBRyxVQUFVLENBQ3RCLEtBQUssSUFEaUIsRUFFdEIsS0FBSyxtQkFBTCxDQUF5QixPQUFPLENBQUMsUUFBakMsQ0FGc0IsRUFHdEIsS0FBSyxPQUhpQixDQUF4QjtBQUtBLFVBQU0sT0FBTyxHQUFHLEtBQUssWUFBckI7QUFDQSxRQUFJLE9BQU8sR0FBRyxJQUFkO0FBQ0EsUUFBSSxXQUFXLEdBQUcsSUFBbEI7QUFDQSxRQUFJLGNBQWMsR0FBRyxPQUFyQjs7QUFFQSxhQUFTLElBQVQsQ0FBYyxNQUFkLEVBQXNCLE1BQU0sR0FBRyxPQUFPLENBQUMsS0FBUixDQUFjLEtBQTdDLEVBQW9ELFVBQXBELEVBQWdFO0FBQzlELFlBQU0sV0FBVyxHQUFHLFVBQVUsS0FBSyxJQUFmLElBQXVCLE9BQU8sQ0FBQyxLQUFSLENBQWMsS0FBekQ7QUFDQSxhQUFPLEdBQUcsV0FBVyxJQUFJLEtBQUssQ0FBQyxJQUFOLENBQVcsV0FBWCxDQUF6QjtBQUNBLGlCQUFXLEdBQUcsSUFBZDs7QUFFQSxVQUFJLENBQUMsTUFBTCxFQUFhO0FBQ1gsWUFBSSxPQUFPLENBQUMsSUFBUixJQUFnQixDQUFDLFlBQVksQ0FBQyxNQUFELEVBQVMsT0FBTyxDQUFDLEtBQVIsQ0FBYyxLQUF2QixDQUFqQyxFQUFnRTtBQUM5RCxxQkFBVyxHQUFHLE9BQWQ7QUFDQSxpQkFBTyxPQUFPLENBQUMsT0FBUixDQUFnQixjQUFoQixDQUFQO0FBQ0Q7QUFDRjs7QUFFRCxVQUFJLE9BQU8sQ0FBQyxJQUFaLEVBQWtCO0FBQ2hCLGVBQU8sT0FBTyxDQUFDLE1BQVIsQ0FBZSxnQkFBZ0IsQ0FBQyxPQUFELENBQS9CLENBQVA7QUFDRDs7QUFFRCxxQkFBZSxDQUFDLE9BQUQsRUFBVSxPQUFPLENBQUMsS0FBbEIsQ0FBZjtBQUNBLG9CQUFjLEdBQUcsTUFBTSxDQUFDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCLE9BQWxCLEVBQTJCLE9BQU8sQ0FBQyxLQUFuQyxDQUFqQjtBQUVBLGFBQU8sT0FBTyxDQUFDLE9BQVIsQ0FBZ0IsT0FBTyxDQUFDLGNBQUQsQ0FBdkIsRUFBeUMsSUFBekMsQ0FBOEMsVUFBVSxJQUFJO0FBQ2pFLFlBQUksVUFBVSxLQUFLLElBQWYsSUFBdUIsVUFBVSxLQUFLLFNBQXRDLElBQW1ELFVBQVUsS0FBSyxjQUF0RSxFQUFzRjtBQUNwRix3QkFBYyxDQUFDLE1BQWYsR0FBd0IsVUFBVSxDQUFDLE1BQVgsSUFBcUIsVUFBN0M7QUFDQSxpQkFBTyxjQUFQO0FBQ0Q7O0FBQ0QsZUFBTyxJQUFJLENBQUMsTUFBRCxFQUFTLE1BQVQsRUFBaUIsVUFBakIsQ0FBWDtBQUNELE9BTk0sQ0FBUDtBQU9EOztBQUVELFdBQU8sQ0FBQyxJQUFSLEdBQWUsSUFBZjtBQUVBLFdBQU8sT0FBTyxDQUFDLE9BQVIsR0FDSixJQURJLENBQ0MsTUFBTSxJQUFJLENBQUMsSUFBRCxFQUFPLEtBQUssSUFBWixDQURYLEVBRUosS0FGSSxDQUVHLEtBQUQsSUFBVztBQUNoQixZQUFNLFlBQVksR0FBRyxvQkFBb0IsQ0FBQyxjQUFELENBQXpDOztBQUNBLFVBQUksQ0FBQyxLQUFMLEVBQVk7QUFDVixhQUFLLEdBQUcsSUFBSSxLQUFKLENBQVUsWUFBVixDQUFSO0FBQ0QsT0FGRCxNQUVPO0FBQ0wsZUFBTyxDQUFDLElBQVIsQ0FBYSxZQUFiO0FBQ0Q7O0FBQ0QsV0FBSyxDQUFDLE9BQU4sR0FBZ0IsS0FBSyxDQUFDLE9BQU4sSUFBaUIsY0FBakMsQ0FQZ0IsQzs7QUFTaEIsVUFBSSxFQUFFLEtBQUssWUFBWSxZQUFuQixDQUFKLEVBQXNDO0FBQ3BDLGFBQUssQ0FBQyxJQUFOLEdBQWEsS0FBSyxDQUFDLElBQU4sSUFBYyxHQUEzQjtBQUNEOztBQUNELFVBQUksS0FBSyxZQUFULEVBQXVCO0FBQ3JCLHNCQUFjLENBQUMsTUFBZixHQUF3QixLQUFLLFlBQUwsQ0FBa0IsS0FBbEIsQ0FBeEI7QUFDQSxlQUFPLGNBQVA7QUFDRDs7QUFDRCxZQUFNLEtBQU47QUFDRCxLQW5CSSxDQUFQO0FBb0JEOzs7Ozs7QUFLRCxTQUFPLFdBQVAsQ0FBbUIsR0FBbkIsRUFBd0IsSUFBeEIsRUFBOEI7QUFDNUIsV0FBTyxJQUFJLEdBQUosQ0FBUSxHQUFSLEVBQWEsSUFBYixDQUFQO0FBQ0Q7Ozs7Ozs7Ozs7QUFTRCxNQUFJLGtCQUFKLEdBQXlCO0FBQ3ZCLFdBQU8sS0FBSyxPQUFMLEdBQ0gsS0FBSyxXQUFMLENBQWlCLFdBQWpCLENBQ0EsS0FBSyxPQURMLEVBRUEsUUFBUSxDQUFDLE9BQVQsSUFBb0IsUUFBUSxDQUFDLEdBRjdCLEVBR0EsSUFIQSxDQUdLLE9BSEwsQ0FHYSxTQUhiLEVBR3dCLEVBSHhCLENBREcsR0FLSCxFQUxKO0FBTUQ7Ozs7Ozs7Ozs7O0FBVUQscUJBQW1CLENBQUMsUUFBRCxFQUFXO0FBQzVCLFFBQUksQ0FBQyxLQUFLLE9BQVYsRUFBbUI7O0FBRWpCLGFBQU8sUUFBUDtBQUNEOztBQUVELFVBQU0sSUFBSSxHQUFHLEtBQUssa0JBQWxCOztBQUNBLFVBQU0sYUFBYSxHQUFHLEtBQUssV0FBTCxDQUFpQixXQUFqQixDQUE2QixRQUE3QixFQUF1QyxJQUF2QyxFQUE2QyxJQUFuRTs7QUFDQSxRQUFJLGFBQWEsQ0FBQyxLQUFkLENBQW9CLENBQXBCLEVBQXVCLElBQUksQ0FBQyxNQUE1QixNQUF3QyxJQUE1QyxFQUFrRDtBQUNoRCxhQUFPLGFBQWEsQ0FBQyxLQUFkLENBQW9CLElBQUksQ0FBQyxNQUF6QixDQUFQO0FBQ0Q7QUFDRjs7QUExTFk7O0FBNkxmLFFBQVEsQ0FBQyxZQUFULEdBQXdCQSxjQUF4QjtBQ2xQQTs7Ozs7Ozs7O0FBWUEsTUFBTTtBQUFBLGdCQUFDQTtBQUFELElBQWlCLFFBQXZCO0FBQ0EsTUFBTUMsT0FBSyxHQUFHLElBQUksR0FBSixFQUFkOztBQUVBLFNBQVMsV0FBVCxDQUFxQixZQUFyQixFQUFtQyxLQUFuQyxFQUEwQyxNQUExQyxFQUFrRDtBQUNoRCxRQUFNLElBQUksR0FBRyxLQUFLLENBQUMsSUFBTixJQUFjLEtBQUssQ0FBQyxTQUFqQzs7QUFDQSxNQUFJLElBQUosRUFBVTtBQUNSLFFBQUksWUFBWSxDQUFDLEdBQWIsQ0FBaUIsSUFBakIsQ0FBSixFQUE0QjtBQUMxQixrQkFBWSxDQUFDLEdBQWIsQ0FBaUIsSUFBakIsRUFBdUIsSUFBdkIsQ0FBNEIsS0FBNUI7QUFDRCxLQUZELE1BRU87QUFDTCxrQkFBWSxDQUFDLEdBQWIsQ0FBaUIsSUFBakIsRUFBdUIsQ0FBQyxLQUFELENBQXZCO0FBQ0Q7QUFDRjs7QUFFRCxNQUFJLEtBQUssQ0FBQyxPQUFOLENBQWMsTUFBZCxDQUFKLEVBQTJCO0FBQ3pCLFNBQUssSUFBSSxDQUFDLEdBQUcsQ0FBYixFQUFnQixDQUFDLEdBQUcsTUFBTSxDQUFDLE1BQTNCLEVBQW1DLENBQUMsRUFBcEMsRUFBd0M7QUFDdEMsWUFBTSxVQUFVLEdBQUcsTUFBTSxDQUFDLENBQUQsQ0FBekI7QUFDQSxnQkFBVSxDQUFDLE1BQVgsR0FBb0IsS0FBcEI7QUFDQSxpQkFBVyxDQUFDLFlBQUQsRUFBZSxVQUFmLEVBQTJCLFVBQVUsQ0FBQyxVQUFYLElBQXlCLFVBQVUsQ0FBQyxRQUEvRCxDQUFYO0FBQ0Q7QUFDRjtBQUNGOztBQUVELFNBQVMsY0FBVCxDQUF3QixZQUF4QixFQUFzQyxTQUF0QyxFQUFpRDtBQUMvQyxRQUFNLE1BQU0sR0FBRyxZQUFZLENBQUMsR0FBYixDQUFpQixTQUFqQixDQUFmOztBQUNBLE1BQUksTUFBTSxJQUFJLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLENBQTlCLEVBQWlDO0FBQy9CLFVBQU0sSUFBSSxLQUFKLENBQ0osc0NBQThCLFNBQTlCLHdEQURJLENBQU47QUFJRDs7QUFDRCxTQUFPLE1BQU0sSUFBSSxNQUFNLENBQUMsQ0FBRCxDQUF2QjtBQUNEOztBQUVELFNBQVMsWUFBVCxDQUFzQixLQUF0QixFQUE2QjtBQUMzQixNQUFJLElBQUksR0FBRyxLQUFLLENBQUMsSUFBakI7QUFDQSxNQUFJLEdBQUcsS0FBSyxDQUFDLE9BQU4sQ0FBYyxJQUFkLElBQXNCLElBQUksQ0FBQyxDQUFELENBQTFCLEdBQWdDLElBQXZDO0FBQ0EsU0FBTyxJQUFJLEtBQUssU0FBVCxHQUFxQixJQUFyQixHQUE0QixFQUFuQztBQUNEOztBQUVELFNBQVMsWUFBVCxDQUFzQixNQUF0QixFQUE4QixPQUFPLEdBQUcsRUFBeEMsRUFBNEM7QUFDMUMsTUFBSSxFQUFFLE1BQU0sWUFBWSxRQUFwQixDQUFKLEVBQW1DO0FBQ2pDLFVBQU0sSUFBSSxTQUFKLENBQWMscUNBQWQsQ0FBTjtBQUNEOztBQUVELFFBQU0sWUFBWSxHQUFHLElBQUksR0FBSixFQUFyQjtBQUVBLFNBQU8sQ0FBQyxTQUFELEVBQVksTUFBWixLQUF1QjtBQUM1QixRQUFJLEtBQUssR0FBRyxjQUFjLENBQUMsWUFBRCxFQUFlLFNBQWYsQ0FBMUI7O0FBQ0EsUUFBSSxDQUFDLEtBQUwsRUFBWTtBQUNWLGtCQUFZLENBQUMsS0FBYixHQURVLENBQ1c7O0FBQ3JCLGlCQUFXLENBQUMsWUFBRCxFQUFlLE1BQU0sQ0FBQyxJQUF0QixFQUE0QixNQUFNLENBQUMsSUFBUCxDQUFZLFVBQXhDLENBQVg7QUFFQSxXQUFLLEdBQUcsY0FBYyxDQUFDLFlBQUQsRUFBZSxTQUFmLENBQXRCOztBQUNBLFVBQUksQ0FBQyxLQUFMLEVBQVk7QUFDVixjQUFNLElBQUksS0FBSixtQkFBb0IsU0FBcEIsa0JBQU47QUFDRDtBQUNGOztBQUVELFFBQUksTUFBTSxHQUFHQSxPQUFLLENBQUMsR0FBTkEsQ0FBVSxLQUFLLENBQUMsUUFBaEJBLENBQWI7O0FBQ0EsUUFBSSxDQUFDLE1BQUwsRUFBYTtBQUNYLFVBQUksUUFBUSxHQUFHLFlBQVksQ0FBQyxLQUFELENBQTNCO0FBQ0EsVUFBSSxFQUFFLEdBQUcsS0FBSyxDQUFDLE1BQWY7O0FBQ0EsYUFBTyxFQUFQLEVBQVc7QUFDVCxjQUFNLElBQUksR0FBRyxZQUFZLENBQUMsRUFBRCxDQUF6Qjs7QUFDQSxZQUFJLElBQUosRUFBVTtBQUNSLGtCQUFRLEdBQUcsSUFBSSxDQUFDLE9BQUwsQ0FBYSxLQUFiLEVBQW9CLEVBQXBCLElBQTBCLEdBQTFCLEdBQWdDLFFBQVEsQ0FBQyxPQUFULENBQWlCLEtBQWpCLEVBQXdCLEVBQXhCLENBQTNDO0FBQ0Q7O0FBQ0QsVUFBRSxHQUFHLEVBQUUsQ0FBQyxNQUFSO0FBQ0Q7O0FBQ0QsWUFBTSxNQUFNLEdBQUdELGNBQVksQ0FBQyxLQUFiQSxDQUFtQixRQUFuQkEsQ0FBZjtBQUNBLFlBQU0sTUFBTSxHQUFHQSxjQUFZLENBQUMsZ0JBQWJBLENBQThCLE1BQTlCQSxDQUFmO0FBQ0EsWUFBTSxJQUFJLEdBQUcsTUFBTSxDQUFDLE1BQVAsQ0FBYyxJQUFkLENBQWI7O0FBQ0EsV0FBSyxJQUFJLENBQUMsR0FBRyxDQUFiLEVBQWdCLENBQUMsR0FBRyxNQUFNLENBQUMsTUFBM0IsRUFBbUMsQ0FBQyxFQUFwQyxFQUF3QztBQUN0QyxZQUFJLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFELENBQVAsQ0FBYixFQUEwQjtBQUN4QixjQUFJLENBQUMsTUFBTSxDQUFDLENBQUQsQ0FBTixDQUFVLElBQVgsQ0FBSixHQUF1QixJQUF2QjtBQUNEO0FBQ0Y7O0FBQ0QsWUFBTSxHQUFHO0FBQUMsY0FBRDtBQUFTO0FBQVQsT0FBVDtBQUNBQyxhQUFLLENBQUMsR0FBTkEsQ0FBVSxRQUFWQSxFQUFvQixNQUFwQkE7QUFDQSxXQUFLLENBQUMsUUFBTixHQUFpQixRQUFqQjtBQUNEOztBQUVELFFBQUksR0FBRyxHQUFHLE1BQU0sQ0FBQyxNQUFQLENBQWMsTUFBZCxFQUFzQixPQUF0QixLQUFrQyxHQUE1Qzs7QUFFQSxRQUFJLE9BQU8sQ0FBQyxvQkFBUixJQUFnQyxNQUFwQyxFQUE0QztBQUMxQyxZQUFNLFdBQVcsR0FBRyxFQUFwQjtBQUNBLFlBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxJQUFQLENBQVksTUFBWixDQUFiOztBQUNBLFdBQUssSUFBSSxDQUFDLEdBQUcsQ0FBYixFQUFnQixDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQXpCLEVBQWlDLENBQUMsRUFBbEMsRUFBc0M7QUFDcEMsY0FBTSxHQUFHLEdBQUcsSUFBSSxDQUFDLENBQUQsQ0FBaEI7O0FBQ0EsWUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFQLENBQVksR0FBWixDQUFMLEVBQXVCO0FBQ3JCLHFCQUFXLENBQUMsR0FBRCxDQUFYLEdBQW1CLE1BQU0sQ0FBQyxHQUFELENBQXpCO0FBQ0Q7QUFDRjs7QUFDRCxZQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsb0JBQVIsQ0FBNkIsV0FBN0IsQ0FBZDs7QUFDQSxVQUFJLEtBQUosRUFBVztBQUNULFdBQUcsSUFBSSxLQUFLLENBQUMsTUFBTixDQUFhLENBQWIsTUFBb0IsR0FBcEIsR0FBMEIsS0FBMUIsY0FBc0MsS0FBdEMsQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQsV0FBTyxHQUFQO0FBQ0QsR0F0REQ7QUF1REQ7QUNqSEQ7Ozs7Ozs7Ozs7QUFRQSxJQUFJLFFBQVEsR0FBRyxFQUFmOztBQUVlLFNBQVMscUJBQVQsQ0FBK0IsV0FBL0IsRUFBNEM7QUFDekQsVUFBUSxDQUFDLE9BQVQsQ0FBaUIsT0FBTyxJQUFJLE9BQU8sQ0FBQyxVQUFSLEVBQTVCO0FBRUEsYUFBVyxDQUFDLE9BQVosQ0FBb0IsT0FBTyxJQUFJLE9BQU8sQ0FBQyxRQUFSLEVBQS9CO0FBRUEsVUFBUSxHQUFHLFdBQVg7QUFDRDs7QUNoQkQsTUFBTSxXQUFXLEdBQUcsSUFBSSxJQUFJO0FBQzFCLFFBQU0sSUFBSSxHQUFHLGdCQUFnQixDQUFDLElBQUQsQ0FBaEIsQ0FBdUIsZ0JBQXZCLENBQXdDLGdCQUF4QyxDQUFiO0FBQ0EsU0FBTyxJQUFJLElBQUksSUFBSSxLQUFLLE1BQXhCO0FBQ0QsQ0FIRDs7QUFLQSxNQUFNLGdCQUFnQixHQUFHLENBQUMsSUFBRCxFQUFPLEVBQVAsS0FBYztBQUNyQyxRQUFNLFFBQVEsR0FBRyxNQUFNO0FBQ3JCLFFBQUksQ0FBQyxtQkFBTCxDQUF5QixjQUF6QixFQUF5QyxRQUF6QztBQUNBLE1BQUU7QUFDSCxHQUhEOztBQUlBLE1BQUksQ0FBQyxnQkFBTCxDQUFzQixjQUF0QixFQUFzQyxRQUF0QztBQUNELENBTkQ7O0FBUUEsU0FBUyxPQUFULENBQWlCLElBQWpCLEVBQXVCLFNBQXZCLEVBQWtDO0FBQ2hDLE1BQUksQ0FBQyxTQUFMLENBQWUsR0FBZixDQUFtQixTQUFuQjtBQUVBLFNBQU8sSUFBSSxPQUFKLENBQVksT0FBTyxJQUFJO0FBQzVCLFFBQUksV0FBVyxDQUFDLElBQUQsQ0FBZixFQUF1QjtBQUNyQixZQUFNLElBQUksR0FBRyxJQUFJLENBQUMscUJBQUwsRUFBYjtBQUNBLFlBQU0sSUFBSSxxQkFBYyxJQUFJLENBQUMsTUFBTCxHQUFjLElBQUksQ0FBQyxHQUFqQyx3QkFBa0QsSUFBSSxDQUFDLEtBQUwsR0FBYSxJQUFJLENBQUMsSUFBcEUsT0FBVjtBQUNBLFVBQUksQ0FBQyxZQUFMLENBQWtCLE9BQWxCLGdDQUFrRCxJQUFsRDtBQUNBLHNCQUFnQixDQUFDLElBQUQsRUFBTyxNQUFNO0FBQzNCLFlBQUksQ0FBQyxTQUFMLENBQWUsTUFBZixDQUFzQixTQUF0QjtBQUNBLFlBQUksQ0FBQyxlQUFMLENBQXFCLE9BQXJCO0FBQ0EsZUFBTztBQUNSLE9BSmUsQ0FBaEI7QUFLRCxLQVRELE1BU087QUFDTCxVQUFJLENBQUMsU0FBTCxDQUFlLE1BQWYsQ0FBc0IsU0FBdEI7QUFDQSxhQUFPO0FBQ1I7QUFDRixHQWRNLENBQVA7QUFlRDs7QUNiRCxNQUFNLGtCQUFrQixHQUFHLEdBQTNCOztBQUVBLFNBQVMsZ0JBQVQsQ0FBMEIsTUFBMUIsRUFBa0M7QUFDaEMsU0FBTyxNQUFNLEtBQUssSUFBWCxJQUFtQixNQUFNLEtBQUssU0FBckM7QUFDRDs7QUFFRCxTQUFTLHNCQUFULENBQWdDLE9BQWhDLEVBQXlDO0FBQ3ZDLFFBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxNQUFQLENBQWMsRUFBZCxFQUFrQixPQUFsQixDQUFiO0FBQ0EsU0FBTyxJQUFJLENBQUMsSUFBWjtBQUNBLFNBQU8sSUFBUDtBQUNEOztBQUVELFNBQVMsY0FBVCxDQUF3QjtBQUFDLFVBQVEsR0FBRyxFQUFaO0FBQWdCLE9BQUssR0FBRyxFQUF4QjtBQUE0QixRQUFNLEdBQUcsRUFBckM7QUFBeUMsY0FBekM7QUFBdUQ7QUFBdkQsQ0FBeEIsRUFBMEYsS0FBMUYsRUFBaUc7QUFDL0YsUUFBTSxNQUFNLEdBQUcsS0FBSyxDQUFDLEdBQU4sQ0FBVSxJQUFJLElBQUksSUFBSSxDQUFDLEtBQXZCLENBQWY7QUFDQSxTQUFPO0FBQ0wsV0FBTyxFQUFFLFFBQVEsSUFBSSxRQUFRLENBQUMsT0FBckIsSUFBZ0MsRUFEcEM7QUFFTCxZQUZLO0FBR0wsVUFISztBQUlMLFNBQUssRUFBRSxLQUFLLElBQUksTUFBTSxDQUFDLE1BQVAsSUFBaUIsTUFBTSxDQUFDLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLENBQWpCLENBQWhDLElBQXVELElBSnpEO0FBS0wsVUFMSztBQU1MLGdCQU5LO0FBT0wsVUFBTSxFQUFFLENBQUMsVUFBVSxHQUFHLEVBQWQsS0FBcUIsb0JBQW9CLENBQy9DLE1BQU0sQ0FBQyxZQUFQLENBQW9CLE9BQXBCLENBQ0UsY0FBYyxDQUFDLE1BQUQsQ0FEaEIsRUFFRSxNQUFNLENBQUMsTUFBUCxDQUFjLEVBQWQsRUFBa0IsTUFBbEIsRUFBMEIsVUFBMUIsQ0FGRixDQUQrQyxFQUkvQyxRQUorQztBQVA1QyxHQUFQO0FBY0Q7O0FBRUQsU0FBUyxjQUFULENBQXdCLE9BQXhCLEVBQWlDLFFBQWpDLEVBQTJDO0FBQ3pDLFFBQU0sTUFBTSxHQUFHLE1BQU0sQ0FBQyxNQUFQLENBQWMsRUFBZCxFQUFrQixPQUFPLENBQUMsTUFBMUIsQ0FBZjtBQUNBLFNBQU87QUFDTCxZQUFRLEVBQUU7QUFDUixjQURRO0FBRVIsVUFBSSxFQUFFLE9BQU8sQ0FBQyxRQUZOO0FBR1I7QUFIUTtBQURMLEdBQVA7QUFPRDs7QUFFRCxTQUFTLGVBQVQsQ0FBeUIsT0FBekIsRUFBa0MsU0FBbEMsRUFBNkM7QUFDM0MsUUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLGFBQVQsQ0FBdUIsU0FBdkIsQ0FBaEI7QUFDQSxTQUFPLENBQUMsUUFBUixHQUFtQixjQUFjLENBQUMsT0FBRCxDQUFqQztBQUNBLFFBQU0sS0FBSyxHQUFHLE9BQU8sQ0FBQyxLQUFSLENBQWMsR0FBZCxDQUFrQixJQUFJLElBQUksSUFBSSxDQUFDLEtBQS9CLEVBQXNDLE9BQXRDLENBQThDLE9BQU8sQ0FBQyxLQUF0RCxDQUFkO0FBQ0EsU0FBTyxDQUFDLEtBQVIsQ0FBYyxLQUFkLEVBQXFCLE9BQXJCLEdBQStCLE9BQS9CO0FBQ0EsU0FBTyxPQUFQO0FBQ0Q7O0FBRUQsU0FBUyxxQkFBVCxDQUErQixRQUEvQixFQUF5QyxJQUF6QyxFQUErQyxPQUEvQyxFQUF3RDtBQUN0RCxNQUFJLFVBQVUsQ0FBQyxRQUFELENBQWQsRUFBMEI7QUFDeEIsV0FBTyxRQUFRLENBQUMsS0FBVCxDQUFlLE9BQWYsRUFBd0IsSUFBeEIsQ0FBUDtBQUNEO0FBQ0Y7O0FBRUQsU0FBUyxLQUFULENBQWUsaUJBQWYsRUFBa0MsSUFBbEMsRUFBd0MsT0FBeEMsRUFBaUQ7QUFDL0MsU0FBTyxlQUFlLElBQUk7QUFDeEIsUUFBSSxlQUFlLEtBQUssZUFBZSxDQUFDLE1BQWhCLElBQTBCLGVBQWUsQ0FBQyxRQUEvQyxDQUFuQixFQUE2RTtBQUMzRSxhQUFPLGVBQVA7QUFDRDs7QUFFRCxRQUFJLE9BQUosRUFBYTtBQUNYLGFBQU8scUJBQXFCLENBQUMsT0FBTyxDQUFDLGlCQUFELENBQVIsRUFBNkIsSUFBN0IsRUFBbUMsT0FBbkMsQ0FBNUI7QUFDRDtBQUNGLEdBUkQ7QUFTRDs7QUFFRCxTQUFTLGtCQUFULENBQTRCLFdBQTVCLEVBQXlDLEtBQXpDLEVBQWdEO0FBQzlDLE1BQUksQ0FBQyxLQUFLLENBQUMsT0FBTixDQUFjLFdBQWQsQ0FBRCxJQUErQixDQUFDLFFBQVEsQ0FBQyxXQUFELENBQTVDLEVBQTJEO0FBQ3pELFVBQU0sSUFBSSxLQUFKLENBQ0osR0FBRyxzREFDMkMsS0FBSyxDQUFDLElBRGpELGlEQUM0RixXQUQ1RixFQURDLENBQU47QUFLRDs7QUFFRCxPQUFLLENBQUMsVUFBTixHQUFtQixFQUFuQjtBQUNBLFFBQU0sV0FBVyxHQUFHLE9BQU8sQ0FBQyxXQUFELENBQTNCOztBQUNBLE9BQUssSUFBSSxDQUFDLEdBQUcsQ0FBYixFQUFnQixDQUFDLEdBQUcsV0FBVyxDQUFDLE1BQWhDLEVBQXdDLENBQUMsRUFBekMsRUFBNkM7QUFDM0MsZUFBVyxDQUFDLFdBQVcsQ0FBQyxDQUFELENBQVosQ0FBWDs7QUFDQSxTQUFLLENBQUMsVUFBTixDQUFpQixJQUFqQixDQUFzQixXQUFXLENBQUMsQ0FBRCxDQUFqQztBQUNEO0FBQ0Y7O0FBRUQsU0FBUyxjQUFULENBQXdCLEtBQXhCLEVBQStCO0FBQzdCLE1BQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFuQixFQUEyQjtBQUN6QixVQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMsQ0FBRCxDQUFMLENBQVMsVUFBeEI7O0FBQ0EsU0FBSyxJQUFJLENBQUMsR0FBRyxDQUFiLEVBQWdCLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBMUIsRUFBa0MsQ0FBQyxFQUFuQyxFQUF1QztBQUNyQyxZQUFNLENBQUMsV0FBUCxDQUFtQixLQUFLLENBQUMsQ0FBRCxDQUF4QjtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCxTQUFTLG9CQUFULENBQThCLFFBQTlCLEVBQXdDLE1BQXhDLEVBQWdEO0FBQzlDLFFBQU0sSUFBSSxHQUFHLE1BQU0sQ0FBQyxrQkFBcEI7QUFDQSxTQUFPLElBQUksR0FDUCxNQUFNLENBQUMsV0FBUCxDQUFtQixXQUFuQixDQUErQixRQUFRLENBQUMsT0FBVCxDQUFpQixLQUFqQixFQUF3QixFQUF4QixDQUEvQixFQUE0RCxJQUE1RCxFQUFrRSxRQUQzRCxHQUVQLFFBRko7QUFHRDs7QUFFRCxTQUFTLGNBQVQsQ0FBd0IsS0FBeEIsRUFBK0I7QUFDN0IsU0FBTyxLQUFLLENBQUMsR0FBTixDQUFVLElBQUksSUFBSSxJQUFJLENBQUMsSUFBdkIsRUFBNkIsTUFBN0IsQ0FBb0MsQ0FBQyxDQUFELEVBQUksQ0FBSixLQUFVO0FBQ25ELFFBQUksQ0FBQyxDQUFDLE1BQU4sRUFBYztBQUNaLGFBQU8sQ0FBQyxDQUFDLE9BQUYsQ0FBVSxLQUFWLEVBQWlCLEVBQWpCLElBQXVCLEdBQXZCLEdBQTZCLENBQUMsQ0FBQyxPQUFGLENBQVUsS0FBVixFQUFpQixFQUFqQixDQUFwQztBQUNEOztBQUNELFdBQU8sQ0FBUDtBQUNELEdBTE0sRUFLSixFQUxJLENBQVA7QUFNRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBc0NNLE1BQU0sTUFBTixTQUFxQixRQUFyQixDQUE4Qjs7Ozs7Ozs7Ozs7OztBQWNuQyxhQUFXLENBQUMsTUFBRCxFQUFTLE9BQVQsRUFBa0I7QUFDM0IsVUFBTSxXQUFXLEdBQUcsUUFBUSxDQUFDLElBQVQsQ0FBYyxhQUFkLENBQTRCLE1BQTVCLENBQXBCO0FBQ0EsVUFBTSxFQUFOLEVBQVUsTUFBTSxDQUFDLE1BQVAsQ0FBYzs7QUFFdEIsYUFBTyxFQUFFLFdBQVcsSUFBSSxXQUFXLENBQUMsWUFBWixDQUF5QixNQUF6QjtBQUZGLEtBQWQsRUFHUCxPQUhPLENBQVY7O0FBS0EsU0FBSyxZQUFMLEdBQW9CLE9BQU8sSUFBSSxLQUFLLGNBQUwsQ0FBb0IsT0FBcEIsQ0FBL0I7O0FBRUEsVUFBTSxRQUFRLEdBQUcsTUFBTSxDQUFDLGlCQUF4QjtBQUNBLFVBQU0sQ0FBQyxXQUFQLENBQW1CLEtBQW5CLENBQXlCLE1BQXpCLEVBQWlDLE1BQU0sQ0FBQyxJQUFQLENBQVksUUFBWixFQUFzQixHQUF0QixDQUEwQixHQUFHLElBQUksUUFBUSxDQUFDLEdBQUQsQ0FBekMsQ0FBakM7Ozs7Ozs7Ozs7QUFVQSxTQUFLLE9BQUw7Ozs7Ozs7Ozs7QUFVQSxTQUFLLEtBQUw7QUFDQSxTQUFLLEtBQUwsR0FBYSxPQUFPLENBQUMsT0FBUixDQUFnQixNQUFoQixDQUFiOzs7Ozs7Ozs7OztBQVdBLFNBQUssUUFBTDtBQUNBLFNBQUssUUFBTCxHQUFnQixjQUFjLENBQUM7QUFBQyxjQUFRLEVBQUU7QUFBWCxLQUFELENBQTlCO0FBRUEsU0FBSyxxQkFBTCxHQUE2QixDQUE3QjtBQUNBLFNBQUssd0JBQUwsR0FBZ0MsS0FBSyxtQkFBTCxDQUF5QixJQUF6QixDQUE4QixJQUE5QixDQUFoQztBQUNBLFNBQUssU0FBTCxDQUFlLE1BQWY7QUFDQSxTQUFLLFNBQUw7QUFDRDs7QUFFRCxnQkFBYyxDQUFDLE9BQUQsRUFBVTtBQUN0QixVQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBdEI7QUFFQSxRQUFJLFNBQVMsR0FBRyxPQUFPLENBQUMsT0FBUixFQUFoQjs7QUFFQSxRQUFJLFVBQVUsQ0FBQyxLQUFLLENBQUMsUUFBUCxDQUFkLEVBQWdDO0FBQzlCLGVBQVMsR0FBRyxTQUFTLENBQ2xCLElBRFMsQ0FDSixNQUFNLEtBQUssQ0FBQyxRQUFOLENBQWUsc0JBQXNCLENBQUMsT0FBRCxDQUFyQyxDQURGLEVBRVQsSUFGUyxDQUVKLFFBQVEsSUFBSTs7O0FBR2hCLFlBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxRQUFELENBQWpCLElBQStCLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxRQUFQLENBQTlDLEVBQWdFO0FBQzlELGtCQUFRLEdBQUcsS0FBSyxDQUFDLFFBQWpCO0FBQ0Q7O0FBQ0QsMEJBQWtCLENBQUMsUUFBRCxFQUFXLEtBQVgsQ0FBbEI7QUFDRCxPQVRTLENBQVo7QUFVRDs7QUFFRCxVQUFNLFFBQVEsR0FBRztBQUNmLGNBQVEsRUFBRSxJQUFJLElBQUksY0FBYyxDQUFDLE9BQUQsRUFBVSxJQUFWLENBRGpCO0FBRWYsZUFBUyxFQUFFLFNBQVMsSUFBSSxlQUFlLENBQUMsT0FBRCxFQUFVLFNBQVY7QUFGeEIsS0FBakI7QUFLQSxXQUFPLFNBQVMsQ0FDYixJQURJLENBQ0MsTUFBTSxxQkFBcUIsQ0FBQyxLQUFLLENBQUMsTUFBUCxFQUFlLENBQUMsT0FBRCxFQUFVLFFBQVYsQ0FBZixFQUFvQyxLQUFwQyxDQUQ1QixFQUVKLElBRkksQ0FFQyxNQUFNLElBQUk7QUFDZCxVQUFJLGdCQUFnQixDQUFDLE1BQUQsQ0FBcEIsRUFBOEI7Ozs7QUFJNUIsWUFBSSxNQUFNLFlBQVksV0FBbEIsSUFDQSxNQUFNLENBQUMsUUFEUCxJQUVBLE1BQU0sS0FBSyxjQUZmLEVBRStCO0FBQzdCLGlCQUFPLE1BQVA7QUFDRDtBQUNGOztBQUVELFVBQUksUUFBUSxDQUFDLEtBQUssQ0FBQyxRQUFQLENBQVosRUFBOEI7QUFDNUIsZUFBTyxRQUFRLENBQUMsUUFBVCxDQUFrQixLQUFLLENBQUMsUUFBeEIsQ0FBUDtBQUNEOztBQUVELFVBQUksS0FBSyxDQUFDLE1BQVYsRUFBa0I7QUFDaEIsZUFBTyxVQUFVLENBQUMsS0FBSyxDQUFDLE1BQVAsQ0FBVixDQUNKLElBREksQ0FDQyxNQUFNLENBQUUsQ0FEVCxFQUNXLE1BQU07QUFDcEIsZ0JBQU0sSUFBSSxLQUFKLENBQVUsR0FBRyw2QkFBc0IsS0FBSyxDQUFDLE1BQTVCLHlDQUFiLENBQU47QUFDRCxTQUhJLENBQVA7QUFJRDtBQUNGLEtBeEJJLEVBeUJKLElBekJJLENBeUJDLE1BQU0sSUFBSTtBQUNkLFVBQUksZ0JBQWdCLENBQUMsTUFBRCxDQUFwQixFQUE4QjtBQUM1QixlQUFPLE1BQVA7QUFDRDs7QUFDRCxVQUFJLFFBQVEsQ0FBQyxLQUFLLENBQUMsU0FBUCxDQUFaLEVBQStCO0FBQzdCLGVBQU8sUUFBUSxDQUFDLFNBQVQsQ0FBbUIsS0FBSyxDQUFDLFNBQXpCLENBQVA7QUFDRDtBQUNGLEtBaENJLENBQVA7QUFpQ0Q7Ozs7Ozs7Ozs7Ozs7QUFZRCxXQUFTLENBQUMsTUFBRCxFQUFTO0FBQ2hCLFFBQUksTUFBSixFQUFZO0FBQ1YsV0FBSyxjQUFMLENBQW9CLE1BQXBCO0FBQ0Q7O0FBQ0QsU0FBSyxRQUFMLEdBQWdCLE1BQWhCO0FBQ0Q7Ozs7Ozs7O0FBT0QsV0FBUyxHQUFHO0FBQ1YsV0FBTyxLQUFLLFFBQVo7QUFDRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWlGRCxXQUFTLENBQUMsTUFBRCxFQUFTO0FBQ2hCLFNBQUssWUFBTCxHQUFvQixTQUFwQjtBQUNBLFVBQU0sU0FBTixDQUFnQixNQUFoQjs7QUFDQSxTQUFLLG1CQUFMO0FBQ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQW9CRCxRQUFNLENBQUMsaUJBQUQsRUFBb0IsbUJBQXBCLEVBQXlDO0FBQzdDLFVBQU0sUUFBUSxHQUFHLEVBQUUsS0FBSyxxQkFBeEI7QUFDQSxVQUFNLFFBQVEsR0FBRyxpQkFBaUIsQ0FBQyxRQUFsQixJQUE4QixpQkFBL0MsQ0FGNkMsQzs7QUFLN0MsU0FBSyxLQUFMLEdBQWEsS0FBSyxPQUFMLENBQWEsaUJBQWIsRTs7OztBQUFBLEtBTVYsSUFOVSxDQU1MLE9BQU8sSUFBSSxLQUFLLG1CQUFMLENBQXlCLE9BQXpCLENBTk4sRUFRVixJQVJVLENBUUwsT0FBTyxJQUFJO0FBQ2YsVUFBSSxRQUFRLEtBQUssS0FBSyxxQkFBdEIsRUFBNkM7QUFDM0MsY0FBTSxlQUFlLEdBQUcsS0FBSyxpQkFBN0IsQ0FEMkMsQzs7QUFJM0MsWUFBSSxPQUFPLEtBQUssZUFBaEIsRUFBaUM7QUFDL0IsaUJBQU8sS0FBSyxRQUFaO0FBQ0Q7O0FBRUQsYUFBSyxRQUFMLEdBQWdCLGNBQWMsQ0FBQyxPQUFELENBQTlCO0FBQ0EsdUJBQWUsQ0FBQyxrQkFBRCxFQUFxQjtBQUFDLGdCQUFNLEVBQUUsSUFBVDtBQUFlLGtCQUFRLEVBQUUsS0FBSztBQUE5QixTQUFyQixDQUFmOztBQUVBLFlBQUksbUJBQUosRUFBeUI7QUFDdkIsZUFBSyxzQkFBTCxDQUE0QixPQUFPLENBQUMsUUFBcEMsRUFBOEMsT0FBTyxDQUFDLFlBQXREO0FBQ0Q7O0FBRUQsYUFBSyxxQkFBTCxDQUEyQixPQUEzQixFQUFvQyxlQUFwQzs7QUFDQSxjQUFNLGFBQWEsR0FBRyxLQUFLLGlCQUFMLENBQXVCLE9BQXZCLENBQXRCOztBQUVBLGFBQUssMEJBQUwsQ0FBZ0MsT0FBaEM7O0FBQ0EsYUFBSywwQkFBTCxDQUFnQyxPQUFoQyxFQUF5QyxlQUF6Qzs7QUFFQSxlQUFPLGFBQWEsQ0FBQyxJQUFkLENBQW1CLE1BQU07QUFDOUIsY0FBSSxRQUFRLEtBQUssS0FBSyxxQkFBdEIsRUFBNkM7Ozs7QUFJM0MsaUJBQUssMkJBQUw7O0FBRUEsaUJBQUssaUJBQUwsR0FBeUIsT0FBekI7QUFDQSxtQkFBTyxLQUFLLFFBQVo7QUFDRDtBQUNGLFNBVk0sQ0FBUDtBQVdEO0FBQ0YsS0ExQ1UsRUEyQ1YsS0EzQ1UsQ0EyQ0osS0FBSyxJQUFJO0FBQ2QsVUFBSSxRQUFRLEtBQUssS0FBSyxxQkFBdEIsRUFBNkM7QUFDM0MsWUFBSSxtQkFBSixFQUF5QjtBQUN2QixlQUFLLHNCQUFMLENBQTRCLFFBQTVCO0FBQ0Q7O0FBQ0Qsc0JBQWMsQ0FBQyxLQUFLLFFBQUwsSUFBaUIsS0FBSyxRQUFMLENBQWMsUUFBaEMsQ0FBZDtBQUNBLGFBQUssUUFBTCxHQUFnQixjQUFjLENBQUM7QUFBQyxrQkFBRDtBQUFXLGtCQUFRLEVBQUU7QUFBckIsU0FBRCxDQUE5QjtBQUNBLHVCQUFlLENBQUMsT0FBRCxFQUFVO0FBQUMsZ0JBQU0sRUFBRSxJQUFUO0FBQWUsZUFBZjtBQUFzQjtBQUF0QixTQUFWLENBQWY7QUFDQSxjQUFNLEtBQU47QUFDRDtBQUNGLEtBckRVLENBQWI7QUFzREEsV0FBTyxLQUFLLEtBQVo7QUFDRDs7QUFFRCxxQkFBbUIsQ0FBQyxlQUFELEVBQWtCLGNBQWMsR0FBRyxlQUFuQyxFQUFvRDtBQUNyRSxXQUFPLEtBQUssMkJBQUwsQ0FBaUMsY0FBakMsRUFDSixJQURJLENBQ0MsY0FBYyxJQUFJO0FBQ3RCLFlBQU0sY0FBYyxHQUFHLGNBQWMsS0FBSyxjQUFuQixHQUFvQyxjQUFwQyxHQUFxRCxlQUE1RTtBQUNBLGFBQU8sY0FBYyxDQUFDLElBQWYsR0FDSixJQURJLENBQ0MsV0FBVyxJQUFJO0FBQ25CLFlBQUksV0FBVyxLQUFLLElBQWhCLElBQXdCLFdBQVcsS0FBSyxjQUE1QyxFQUE0RDtBQUMxRCxnQkFBTSxXQUFXLEdBQUcsb0JBQW9CLENBQ3RDLGNBQWMsQ0FBQyxjQUFjLENBQUMsS0FBaEIsQ0FEd0IsRUFFdEMsY0FBYyxDQUFDLFFBRnVCLENBQXhDOztBQUlBLGNBQUksV0FBVyxLQUFLLGNBQWMsQ0FBQyxRQUFuQyxFQUE2QztBQUMzQyxrQkFBTSxnQkFBZ0IsQ0FBQyxjQUFELENBQXRCO0FBQ0Q7QUFDRjs7QUFDRCxlQUFPLFdBQVcsSUFBSSxXQUFXLEtBQUssY0FBL0IsR0FDSCxLQUFLLG1CQUFMLENBQXlCLGNBQXpCLEVBQXlDLFdBQXpDLENBREcsR0FFSCxLQUFLLDRCQUFMLENBQWtDLGNBQWxDLENBRko7QUFHRCxPQWRJLENBQVA7QUFlRCxLQWxCSSxDQUFQO0FBbUJEOztBQUVELDZCQUEyQixDQUFDLE9BQUQsRUFBVTtBQUNuQyxVQUFNLE1BQU0sR0FBRyxPQUFPLENBQUMsTUFBdkI7O0FBQ0EsUUFBSSxNQUFNLFlBQVksV0FBdEIsRUFBbUM7QUFDakMsYUFBTyxPQUFPLENBQUMsT0FBUixDQUFnQixPQUFoQixDQUFQO0FBQ0QsS0FGRCxNQUVPLElBQUksTUFBTSxDQUFDLFFBQVgsRUFBcUI7QUFDMUIsYUFBTyxLQUFLLFVBQUwsQ0FBZ0IsTUFBTSxDQUFDLFFBQXZCLEVBQWlDLE9BQU8sQ0FBQyxlQUF6QyxFQUNKLElBREksQ0FDQyxPQUFPLElBQUksS0FBSywyQkFBTCxDQUFpQyxPQUFqQyxDQURaLENBQVA7QUFFRCxLQUhNLE1BR0EsSUFBSSxNQUFNLFlBQVksS0FBdEIsRUFBNkI7QUFDbEMsYUFBTyxPQUFPLENBQUMsTUFBUixDQUFlLE1BQWYsQ0FBUDtBQUNELEtBRk0sTUFFQTtBQUNMLGFBQU8sT0FBTyxDQUFDLE1BQVIsQ0FDTCxJQUFJLEtBQUosQ0FDRSxHQUFHLENBQ0QscURBQTZDLE9BQU8sQ0FBQyxRQUFyRCwyRUFDdUQsUUFBUSxDQUFDLE1BQUQsQ0FEL0QsaUVBREMsQ0FETCxDQURLLENBQVA7QUFRRDtBQUNGOztBQUVELDhCQUE0QixDQUFDLG9CQUFELEVBQXVCO0FBQ2pELFdBQU8sS0FBSyxzQkFBTCxDQUE0QixvQkFBNUIsRUFBa0QsSUFBbEQsQ0FBdUQsY0FBYyxJQUFJO0FBQzlFLFVBQUksY0FBYyxLQUFLLEtBQUssaUJBQXhCLElBQTZDLGNBQWMsS0FBSyxvQkFBcEUsRUFBMEY7QUFDeEYsZUFBTyxjQUFQO0FBQ0Q7O0FBQ0QsYUFBTyxLQUFLLG1CQUFMLENBQXlCLGNBQXpCLENBQVA7QUFDRCxLQUxNLENBQVA7QUFNRDs7QUFFRCx3QkFBc0IsQ0FBQyxVQUFELEVBQWE7QUFDakMsVUFBTSxlQUFlLEdBQUcsS0FBSyxpQkFBTCxJQUEwQixFQUFsRDtBQUNBLFVBQU0sYUFBYSxHQUFHLGVBQWUsQ0FBQyxLQUFoQixJQUF5QixFQUEvQztBQUNBLFVBQU0sUUFBUSxHQUFHLFVBQVUsQ0FBQyxLQUE1QjtBQUVBLFFBQUksU0FBUyxHQUFHLE9BQU8sQ0FBQyxPQUFSLEVBQWhCOztBQUNBLFVBQU0sT0FBTyxHQUFHLE9BQU87QUFBQyxZQUFNLEVBQUU7QUFBVCxLQUFQLENBQWhCOztBQUNBLFVBQU0sUUFBUSxHQUFJLFFBQUQsSUFBYyxjQUFjLENBQUMsVUFBRCxFQUFhLFFBQWIsQ0FBN0M7O0FBRUEsY0FBVSxDQUFDLG9CQUFYLEdBQWtDLENBQWxDOztBQUNBLFFBQUksYUFBYSxDQUFDLE1BQWxCLEVBQTBCO0FBQ3hCLFdBQUssSUFBSSxDQUFDLEdBQUcsQ0FBYixFQUFnQixDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUwsQ0FBUyxhQUFhLENBQUMsTUFBdkIsRUFBK0IsUUFBUSxDQUFDLE1BQXhDLENBQXBCLEVBQXFFLENBQUMsR0FBRyxFQUFFLFVBQVUsQ0FBQyxvQkFBdEYsRUFBNEc7QUFDMUcsWUFBSSxhQUFhLENBQUMsQ0FBRCxDQUFiLENBQWlCLEtBQWpCLEtBQTJCLFFBQVEsQ0FBQyxDQUFELENBQVIsQ0FBWSxLQUF2QyxJQUNDLGFBQWEsQ0FBQyxDQUFELENBQWIsQ0FBaUIsSUFBakIsS0FBMEIsUUFBUSxDQUFDLENBQUQsQ0FBUixDQUFZLElBRHZDLElBRUMsQ0FBQyxhQUFhLENBQUMsQ0FBRCxDQUFiLENBQWlCLE9BQWpCLElBQTRCLGFBQWEsQ0FBQyxDQUFELENBQWIsQ0FBaUIsT0FBakIsQ0FBeUIsU0FBdEQsT0FDSSxRQUFRLENBQUMsQ0FBRCxDQUFSLENBQVksT0FBWixJQUF1QixRQUFRLENBQUMsQ0FBRCxDQUFSLENBQVksT0FBWixDQUFvQixTQUQvQyxDQUZMLEVBSUU7QUFDQTtBQUNEO0FBQ0Y7O0FBRUQsV0FBSyxJQUFJLENBQUMsR0FBRyxhQUFhLENBQUMsTUFBZCxHQUF1QixDQUFwQyxFQUF1QyxDQUFDLElBQUksVUFBVSxDQUFDLG9CQUF2RCxFQUE2RSxDQUFDLEVBQTlFLEVBQWtGO0FBQ2hGLGNBQU0sUUFBUSxHQUFHLGNBQWMsQ0FBQyxVQUFELENBQS9CO0FBQ0EsaUJBQVMsR0FBRyxTQUFTLENBQ2xCLElBRFMsQ0FDSixLQUFLLENBQUMsZUFBRCxFQUFrQixDQUFDLFFBQUQsRUFBVztBQUFDO0FBQUQsU0FBWCxFQUFzQixJQUF0QixDQUFsQixFQUErQyxhQUFhLENBQUMsQ0FBRCxDQUFiLENBQWlCLE9BQWhFLENBREQsRUFFVCxJQUZTLENBRUosTUFBTSxJQUFJO0FBQ2QsY0FBSSxDQUFDLENBQUMsTUFBTSxJQUFJLEVBQVgsRUFBZSxRQUFwQixFQUE4QjtBQUM1QixtQkFBTyxNQUFQO0FBQ0Q7QUFDRixTQU5TLENBQVo7QUFPRDtBQUNGOztBQUVELFNBQUssSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLG9CQUF4QixFQUE4QyxDQUFDLEdBQUcsUUFBUSxDQUFDLE1BQTNELEVBQW1FLENBQUMsRUFBcEUsRUFBd0U7QUFDdEUsWUFBTSxRQUFRLEdBQUcsY0FBYyxDQUFDLFVBQUQsRUFBYSxRQUFRLENBQUMsQ0FBRCxDQUFSLENBQVksS0FBekIsQ0FBL0I7QUFDQSxlQUFTLEdBQUcsU0FBUyxDQUFDLElBQVYsQ0FBZSxLQUFLLENBQUMsZUFBRCxFQUFrQixDQUFDLFFBQUQsRUFBVztBQUFDLGVBQUQ7QUFBVTtBQUFWLE9BQVgsRUFBZ0MsSUFBaEMsQ0FBbEIsRUFBeUQsUUFBUSxDQUFDLENBQUQsQ0FBUixDQUFZLE9BQXJFLENBQXBCLENBQVo7QUFDRDs7QUFFRCxXQUFPLFNBQVMsQ0FBQyxJQUFWLENBQWUsZUFBZSxJQUFJO0FBQ3ZDLFVBQUksZUFBSixFQUFxQjtBQUNuQixZQUFJLGVBQWUsQ0FBQyxNQUFwQixFQUE0QjtBQUMxQixpQkFBTyxLQUFLLGlCQUFaO0FBQ0Q7O0FBQ0QsWUFBSSxlQUFlLENBQUMsUUFBcEIsRUFBOEI7QUFDNUIsaUJBQU8sS0FBSyxVQUFMLENBQWdCLGVBQWUsQ0FBQyxRQUFoQyxFQUEwQyxVQUFVLENBQUMsZUFBckQsQ0FBUDtBQUNEO0FBQ0Y7O0FBQ0QsYUFBTyxVQUFQO0FBQ0QsS0FWTSxDQUFQO0FBV0Q7O0FBRUQsWUFBVSxDQUFDLFlBQUQsRUFBZSxPQUFmLEVBQXdCO0FBQ2hDLFFBQUksT0FBTyxHQUFHLGtCQUFkLEVBQWtDO0FBQ2hDLFlBQU0sSUFBSSxLQUFKLENBQVUsR0FBRyw2Q0FBc0MsWUFBWSxDQUFDLElBQW5ELEVBQWIsQ0FBTjtBQUNEOztBQUVELFdBQU8sS0FBSyxPQUFMLENBQWE7QUFDbEIsY0FBUSxFQUFFLEtBQUssVUFBTCxDQUNSLFlBQVksQ0FBQyxRQURMLEVBRVIsWUFBWSxDQUFDLE1BRkwsQ0FEUTtBQUtsQixrQkFBWSxFQUFFLFlBQVksQ0FBQyxJQUxUO0FBTWxCLHFCQUFlLEVBQUUsQ0FBQyxPQUFPLElBQUksQ0FBWixJQUFpQjtBQU5oQixLQUFiLENBQVA7QUFRRDs7QUFFRCxnQkFBYyxDQUFDLE1BQU0sR0FBRyxLQUFLLFFBQWYsRUFBeUI7QUFDckMsUUFBSSxFQUFFLE1BQU0sWUFBWSxJQUFwQixDQUFKLEVBQStCO0FBQzdCLFlBQU0sSUFBSSxTQUFKLENBQWMsR0FBRyxrRUFBMkQsTUFBM0QsT0FBakIsQ0FBTjtBQUNEO0FBQ0Y7O0FBRUQsd0JBQXNCLENBQUMsUUFBRCxFQUFXLE9BQVgsRUFBb0I7QUFDeEMsUUFBSSxNQUFNLENBQUMsUUFBUCxDQUFnQixRQUFoQixLQUE2QixRQUFqQyxFQUEyQztBQUN6QyxZQUFNLFdBQVcsR0FBRyxPQUFPLEdBQUcsY0FBSCxHQUFvQixXQUEvQztBQUNBLFlBQU0sQ0FBQyxPQUFQLENBQWUsV0FBZixFQUE0QixJQUE1QixFQUFrQyxRQUFRLENBQUMsS0FBM0MsRUFBa0QsUUFBbEQ7QUFDQSxZQUFNLENBQUMsYUFBUCxDQUFxQixJQUFJLGFBQUosQ0FBa0IsVUFBbEIsRUFBOEI7QUFBQyxhQUFLLEVBQUU7QUFBUixPQUE5QixDQUFyQjtBQUNEO0FBQ0Y7O0FBRUQsdUJBQXFCLENBQUMsT0FBRCxFQUFVLGVBQVYsRUFBMkI7QUFDOUMsU0FBSyxjQUFMLEdBRDhDLEM7Ozs7QUFLOUMsU0FBSyx3QkFBTCxHQUw4QyxDOzs7O0FBUzlDLFFBQUksbUJBQW1CLEdBQUcsS0FBSyxRQUEvQjs7QUFDQSxTQUFLLElBQUksQ0FBQyxHQUFHLENBQWIsRUFBZ0IsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxvQkFBNUIsRUFBa0QsQ0FBQyxFQUFuRCxFQUF1RDtBQUNyRCxZQUFNLGdCQUFnQixHQUFHLGVBQWUsSUFBSSxlQUFlLENBQUMsS0FBaEIsQ0FBc0IsQ0FBdEIsRUFBeUIsT0FBckU7O0FBQ0EsVUFBSSxnQkFBSixFQUFzQjtBQUNwQixZQUFJLGdCQUFnQixDQUFDLFVBQWpCLEtBQWdDLG1CQUFwQyxFQUF5RDtBQUN2RCxpQkFBTyxDQUFDLEtBQVIsQ0FBYyxDQUFkLEVBQWlCLE9BQWpCLEdBQTJCLGdCQUEzQjtBQUNBLDZCQUFtQixHQUFHLGdCQUF0QjtBQUNELFNBSEQsTUFHTztBQUNMO0FBQ0Q7QUFDRjtBQUNGLEtBcEI2QyxDOzs7OztBQXlCOUMsU0FBSyxxQkFBTCxHQUE2QixLQUFLLENBQUMsSUFBTixDQUFXLG1CQUFtQixDQUFDLFFBQS9CLENBQTdCO0FBQ0EsU0FBSyxrQkFBTCxHQUEwQixFQUExQixDQTFCOEMsQzs7Ozs7QUFnQzlDLFFBQUksYUFBYSxHQUFHLG1CQUFwQjs7QUFDQSxTQUFLLElBQUksQ0FBQyxHQUFHLE9BQU8sQ0FBQyxvQkFBckIsRUFBMkMsQ0FBQyxHQUFHLE9BQU8sQ0FBQyxLQUFSLENBQWMsTUFBN0QsRUFBcUUsQ0FBQyxFQUF0RSxFQUEwRTtBQUN4RSxZQUFNLFlBQVksR0FBRyxPQUFPLENBQUMsS0FBUixDQUFjLENBQWQsRUFBaUIsT0FBdEM7O0FBQ0EsVUFBSSxZQUFKLEVBQWtCO0FBQ2hCLHFCQUFhLENBQUMsV0FBZCxDQUEwQixZQUExQjs7QUFDQSxZQUFJLGFBQWEsS0FBSyxtQkFBdEIsRUFBMkM7QUFDekMsZUFBSyxrQkFBTCxDQUF3QixJQUF4QixDQUE2QixZQUE3QjtBQUNEOztBQUNELHFCQUFhLEdBQUcsWUFBaEI7QUFDRDtBQUNGO0FBQ0Y7O0FBRUQsNkJBQTJCLEdBQUc7QUFDNUIsUUFBSSxLQUFLLHFCQUFULEVBQWdDO0FBQzlCLG9CQUFjLENBQUMsS0FBSyxxQkFBTixDQUFkO0FBQ0Q7O0FBQ0QsU0FBSyxxQkFBTCxHQUE2QixJQUE3QjtBQUNBLFNBQUssa0JBQUwsR0FBMEIsSUFBMUI7QUFDRDs7QUFFRCwwQkFBd0IsR0FBRztBQUN6QixRQUFJLEtBQUsscUJBQUwsSUFBOEIsS0FBSyxrQkFBdkMsRUFBMkQ7QUFDekQsb0JBQWMsQ0FBQyxLQUFLLGtCQUFOLENBQWQ7QUFDQSxXQUFLLHFCQUFMLEdBQTZCLElBQTdCO0FBQ0EsV0FBSyxrQkFBTCxHQUEwQixJQUExQjtBQUNEO0FBQ0Y7O0FBRUQsNEJBQTBCLENBQUMsY0FBRCxFQUFpQixhQUFqQixFQUFnQztBQUN4RCxRQUFJLENBQUMsYUFBTCxFQUFvQjtBQUNsQjtBQUNELEtBSHVELEM7OztBQU14RCxTQUFLLElBQUksQ0FBQyxHQUFHLGFBQWEsQ0FBQyxLQUFkLENBQW9CLE1BQXBCLEdBQTZCLENBQTFDLEVBQTZDLENBQUMsSUFBSSxjQUFjLENBQUMsb0JBQWpFLEVBQXVGLENBQUMsRUFBeEYsRUFBNEY7QUFDMUYsWUFBTSxnQkFBZ0IsR0FBRyxhQUFhLENBQUMsS0FBZCxDQUFvQixDQUFwQixFQUF1QixPQUFoRDs7QUFDQSxVQUFJLENBQUMsZ0JBQUwsRUFBdUI7QUFDckI7QUFDRDs7QUFDRCxVQUFJO0FBQ0YsY0FBTSxRQUFRLEdBQUcsY0FBYyxDQUFDLGNBQUQsQ0FBL0I7QUFDQSw2QkFBcUIsQ0FDbkIsZ0JBQWdCLENBQUMsWUFERSxFQUVuQixDQUFDLFFBQUQsRUFBVyxFQUFYLEVBQWUsYUFBYSxDQUFDLFFBQTdCLENBRm1CLEVBR25CLGdCQUhtQixDQUFyQjtBQUlELE9BTkQsU0FNVTtBQUNSLHNCQUFjLENBQUMsZ0JBQWdCLENBQUMsUUFBbEIsQ0FBZDtBQUNEO0FBQ0Y7QUFDRjs7QUFFRCw0QkFBMEIsQ0FBQyxjQUFELEVBQWlCOztBQUV6QyxTQUFLLElBQUksQ0FBQyxHQUFHLGNBQWMsQ0FBQyxvQkFBNUIsRUFBa0QsQ0FBQyxHQUFHLGNBQWMsQ0FBQyxLQUFmLENBQXFCLE1BQTNFLEVBQW1GLENBQUMsRUFBcEYsRUFBd0Y7QUFDdEYsWUFBTSxnQkFBZ0IsR0FBRyxjQUFjLENBQUMsS0FBZixDQUFxQixDQUFyQixFQUF3QixPQUF4QixJQUFtQyxFQUE1RDtBQUNBLFlBQU0sUUFBUSxHQUFHLGNBQWMsQ0FBQyxjQUFELEVBQWlCLGNBQWMsQ0FBQyxLQUFmLENBQXFCLENBQXJCLEVBQXdCLEtBQXpDLENBQS9CO0FBQ0EsMkJBQXFCLENBQ25CLGdCQUFnQixDQUFDLFlBREUsRUFFbkIsQ0FBQyxRQUFELEVBQVcsRUFBWCxFQUFlLGNBQWMsQ0FBQyxRQUE5QixDQUZtQixFQUduQixnQkFIbUIsQ0FBckI7QUFJRDtBQUNGOztBQUVELG1CQUFpQixDQUFDLE9BQUQsRUFBVTtBQUN6QixVQUFNLElBQUksR0FBRyxDQUFDLEtBQUsscUJBQUwsSUFBOEIsRUFBL0IsRUFBbUMsQ0FBbkMsQ0FBYjtBQUNBLFVBQU0sRUFBRSxHQUFHLENBQUMsS0FBSyxrQkFBTCxJQUEyQixFQUE1QixFQUFnQyxDQUFoQyxDQUFYO0FBQ0EsVUFBTSxRQUFRLEdBQUcsRUFBakI7QUFFQSxVQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBdEI7QUFDQSxRQUFJLE1BQUo7O0FBQ0EsU0FBSyxJQUFJLENBQUMsR0FBRyxLQUFLLENBQUMsTUFBbkIsRUFBMkIsQ0FBQyxHQUFHLENBQS9CLEVBQWtDLENBQUMsRUFBbkMsRUFBdUM7QUFDckMsVUFBSSxLQUFLLENBQUMsQ0FBQyxHQUFHLENBQUwsQ0FBTCxDQUFhLEtBQWIsQ0FBbUIsT0FBdkIsRUFBZ0M7QUFDOUIsY0FBTSxHQUFHLEtBQUssQ0FBQyxDQUFDLEdBQUcsQ0FBTCxDQUFMLENBQWEsS0FBYixDQUFtQixPQUE1QjtBQUNBO0FBQ0Q7QUFDRjs7QUFFRCxRQUFJLElBQUksSUFBSSxFQUFSLElBQWMsTUFBbEIsRUFBMEI7QUFDeEIsWUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLE1BQUQsQ0FBUixJQUFvQixNQUFNLENBQUMsS0FBM0IsSUFBb0MsU0FBbEQ7QUFDQSxZQUFNLEtBQUssR0FBRyxRQUFRLENBQUMsTUFBRCxDQUFSLElBQW9CLE1BQU0sQ0FBQyxLQUEzQixJQUFvQyxVQUFsRDtBQUNBLGNBQVEsQ0FBQyxJQUFULENBQWMsT0FBTyxDQUFDLElBQUQsRUFBTyxLQUFQLENBQXJCO0FBQ0EsY0FBUSxDQUFDLElBQVQsQ0FBYyxPQUFPLENBQUMsRUFBRCxFQUFLLEtBQUwsQ0FBckI7QUFDRDs7QUFFRCxXQUFPLE9BQU8sQ0FBQyxHQUFSLENBQVksUUFBWixFQUFzQixJQUF0QixDQUEyQixNQUFNLE9BQWpDLENBQVA7QUFDRDs7Ozs7Ozs7O0FBUUQsV0FBUyxHQUFHO0FBQ1YsVUFBTSxDQUFDLGdCQUFQLENBQXdCLGtCQUF4QixFQUE0QyxLQUFLLHdCQUFqRDtBQUNEOzs7Ozs7O0FBTUQsYUFBVyxHQUFHO0FBQ1osVUFBTSxDQUFDLG1CQUFQLENBQTJCLGtCQUEzQixFQUErQyxLQUFLLHdCQUFwRDtBQUNEOztBQUVELHFCQUFtQixDQUFDLEtBQUQsRUFBUTtBQUN6QixVQUFNLFFBQVEsR0FBRyxLQUFLLEdBQUcsS0FBSyxDQUFDLE1BQU4sQ0FBYSxRQUFoQixHQUEyQixNQUFNLENBQUMsUUFBUCxDQUFnQixRQUFqRTs7QUFDQSxRQUFJLFFBQVEsQ0FBQyxLQUFLLG1CQUFMLENBQXlCLFFBQXpCLENBQUQsQ0FBWixFQUFrRDtBQUNoRCxVQUFJLEtBQUssSUFBSSxLQUFLLENBQUMsY0FBbkIsRUFBbUM7QUFDakMsYUFBSyxDQUFDLGNBQU47QUFDRDs7QUFDRCxXQUFLLE1BQUwsQ0FBWSxRQUFaLEVBQXNCLElBQXRCO0FBQ0Q7QUFDRjs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCRCxTQUFPLFdBQVAsQ0FBbUIsR0FBRyxRQUF0QixFQUFnQztBQUM5Qix5QkFBcUIsQ0FBQyxRQUFELENBQXJCO0FBQ0Q7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFxQkQsWUFBVSxDQUFDLElBQUQsRUFBTyxNQUFQLEVBQWU7QUFDdkIsUUFBSSxDQUFDLEtBQUssWUFBVixFQUF3QjtBQUN0QixXQUFLLFlBQUwsR0FBb0IsWUFBWSxDQUFDLElBQUQsQ0FBaEM7QUFDRDs7QUFDRCxXQUFPLG9CQUFvQixDQUN6QixLQUFLLFlBQUwsQ0FBa0IsSUFBbEIsRUFBd0IsTUFBeEIsQ0FEeUIsRUFFekIsSUFGeUIsQ0FBM0I7QUFJRDs7Ozs7Ozs7Ozs7Ozs7QUFhRCxZQUFVLENBQUMsSUFBRCxFQUFPLE1BQVAsRUFBZTtBQUN2QixXQUFPLG9CQUFvQixDQUN6QixNQUFNLENBQUMsWUFBUCxDQUFvQixPQUFwQixDQUE0QixJQUE1QixFQUFrQyxNQUFsQyxDQUR5QixFQUV6QixJQUZ5QixDQUEzQjtBQUlEOzs7Ozs7Ozs7Ozs7QUFXRCxTQUFPLEVBQVAsQ0FBVSxRQUFWLEVBQW9CO0FBQ2xCLFdBQU8sZUFBZSxDQUFDLElBQUQsRUFBTztBQUFDO0FBQUQsS0FBUCxDQUF0QjtBQUNEOztBQWhxQmtDOztBQ25LckMsTUFBTSxvQkFBb0IsR0FDeEIsc0VBREY7O0FBR0EsU0FBUyxVQUFULEdBQXNCO0FBQ3BCLFdBQVMsSUFBVCxHQUFnQjs7OztBQUlkLFdBQU8sSUFBUDtBQUNEOztBQUNELFNBQU8sZUFBZSxDQUFDLElBQUQsQ0FBdEI7QUFDRDs7QUFFRCxTQUFTLGlCQUFULEdBQTZCO0FBQzNCLE1BQUk7QUFDRixXQUFPLHVCQUF1QixNQUFPLFdBQVcsTUFBTSxDQUFDLFVBQVUsRUFBNUIsSUFBa0MsQ0FBQyxvQkFBb0IsRUFBNUY7QUFDRCxHQUZELENBRUUsT0FBTyxDQUFQLEVBQVU7O0FBRVYsV0FBTyxLQUFQO0FBQ0Q7QUFDRjs7QUFFRCxTQUFTLHVCQUFULEdBQW1DO0FBQ2pDLFNBQU8sWUFBWSxDQUFDLE9BQWIsQ0FBcUIsOEJBQXJCLENBQVA7QUFDRDs7QUFFRCxTQUFTLFdBQVQsR0FBdUI7QUFDckIsU0FBUSxDQUFDLFdBQUQsRUFBYSxXQUFiLEVBQTBCLE9BQTFCLENBQWtDLE1BQU0sQ0FBQyxRQUFQLENBQWdCLFFBQWxELEtBQStELENBQXZFO0FBQ0Q7O0FBRUQsU0FBUyxvQkFBVCxHQUFnQztBQUM5QixNQUFJLE1BQU0sQ0FBQyxNQUFQLElBQWlCLE1BQU0sQ0FBQyxNQUFQLENBQWMsSUFBL0IsSUFBdUMsTUFBTSxDQUFDLE1BQVAsQ0FBYyxJQUFkLENBQW1CLE9BQTlELEVBQXVFO0FBQ3JFLFVBQU0sa0JBQWtCLEdBQUcsTUFBTSxDQUFDLElBQVAsQ0FBWSxNQUFNLENBQUMsTUFBUCxDQUFjLElBQWQsQ0FBbUIsT0FBL0IsRUFDMUIsR0FEMEIsQ0FDdEIsR0FBRyxJQUFJLE1BQU0sQ0FBQyxNQUFQLENBQWMsSUFBZCxDQUFtQixPQUFuQixDQUEyQixHQUEzQixDQURlLEVBRTFCLE1BRjBCLENBRW5CLE1BQU0sSUFBSSxNQUFNLENBQUMsY0FGRSxDQUEzQjs7QUFHQSxRQUFJLGtCQUFrQixDQUFDLE1BQW5CLEdBQTRCLENBQWhDLEVBQW1DO0FBQ2pDLGFBQU8sSUFBUDtBQUNEO0FBQ0Y7O0FBQ0QsU0FBTyxLQUFQO0FBQ0Q7O0FBRUQsU0FBUyxlQUFULENBQXlCLFFBQXpCLEVBQW1DLElBQW5DLEVBQXlDO0FBQ3ZDLE1BQUksT0FBTyxRQUFQLEtBQW9CLFVBQXhCLEVBQW9DO0FBQ2xDO0FBQ0Q7O0FBRUQsUUFBTSxLQUFLLEdBQUcsb0JBQW9CLENBQUMsSUFBckIsQ0FBMEIsUUFBUSxDQUFDLFFBQVQsRUFBMUIsQ0FBZDs7QUFDQSxNQUFJLEtBQUosRUFBVztBQUNULFFBQUk7O0FBRUYsY0FBUSxHQUFHLElBQUksUUFBSixDQUFhLEtBQUssQ0FBQyxDQUFELENBQWxCLENBQVg7QUFDRCxLQUhELENBR0UsT0FBTyxDQUFQLEVBQVU7O0FBRVYsYUFBTyxDQUFDLEdBQVIsQ0FBWSw0REFBWixFQUEwRSxDQUExRTtBQUNEO0FBQ0Y7O0FBRUQsU0FBTyxRQUFRLENBQUMsSUFBRCxDQUFmO0FBQ0QsQzs7OztBQUlELE1BQU0sQ0FBQyxRQUFELENBQU4sR0FBbUIsTUFBTSxDQUFDLFFBQUQsQ0FBTixJQUFvQixFQUF2Qzs7Ozs7Ozs7Ozs7Ozs7QUFjTyxNQUFNLG9CQUFvQixHQUFHLFVBQVMsUUFBVCxFQUFtQixJQUFuQixFQUF5QjtBQUMzRCxNQUFJLE1BQU0sQ0FBQyxNQUFQLENBQWMsZUFBbEIsRUFBbUM7QUFDakMsV0FBTyxlQUFlLENBQUMsUUFBRCxFQUFXLElBQVgsQ0FBdEI7QUFDRDtBQUNGLENBSk07O0FBTVAsSUFBSSxNQUFNLENBQUMsTUFBUCxDQUFjLGVBQWQsS0FBa0MsU0FBdEMsRUFBaUQ7QUFDL0MsUUFBTSxDQUFDLE1BQVAsQ0FBYyxlQUFkLEdBQWdDLGlCQUFpQixFQUFqRDtBQUNEO0FDckZEOzs7QUFZQSxTQUFTLHVCQUFULEdBQW1DOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWdkbEM7O0FBRU0sTUFBTSxlQUFlLEdBQUcsWUFBVztBQUN4QyxNQUFJLE9BQU8sb0JBQVAsS0FBZ0MsVUFBcEMsRUFBZ0Q7QUFDOUMsV0FBTyxvQkFBb0IsQ0FBQyx1QkFBRCxDQUEzQjtBQUNEO0FBQ0YsQ0FKTTs7QUM1ZFAsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsTUFBTSxDQUFDLE1BQVAsSUFBaUIsRUFBakM7QUFDQSxNQUFNLENBQUMsTUFBUCxDQUFjLGFBQWQsR0FBOEIsTUFBTSxDQUFDLE1BQVAsQ0FBYyxhQUFkLElBQStCLEVBQTdEO0FBRUEsTUFBTSxDQUFDLE1BQVAsQ0FBYyxhQUFkLENBQTRCLElBQTVCLENBQWlDO0FBQy9CLElBQUUsRUFBRSxnQkFEMkI7QUFFL0IsU0FBTyxFQUFFO0FBRnNCLENBQWpDO0FBS0EsZUFBZTtBQ05mLE1BQU0sQ0FBQyxpQkFBUCxHQUEyQjtBQUFDLFVBQUQ7QUFBVztBQUFYLENBQTNCOzs7QUNKQTtBQUFBOzs7Ozs7Ozs7OztBQVlBO0FBRUEsTUFBTSxTQUFTLEdBQ1gsc0RBREo7QUFFQSxNQUFNLE9BQU8sR0FDVCxRQUFRLENBQUMsUUFBVCxDQUFrQixRQUFsQixLQUErQixzQkFBL0IsR0FBd0QsU0FBeEQsR0FBb0UsU0FEeEU7O0FBR0EsTUFBTSwwQkFBTixTQUFrQyxNQUFsQyxDQUF3QztBQVlwQyxjQUFtQixNQUFuQixFQUFpQyxPQUFqQyxFQUF1RDtBQUNuRCxVQUFNLE1BQU4sRUFBYyxPQUFkO0FBQ0g7O0FBRU0sSUFBRSxDQUFDLFFBQUQsRUFBaUI7QUFDdEIsV0FBTyxNQUFNLENBQUMsRUFBUCxDQUFVLFFBQVYsQ0FBUDtBQUNIOztBQUVNLGNBQVksQ0FBQyxNQUFELEVBQWU7QUFDOUIsUUFBSSxDQUFDLEtBQUssUUFBTixJQUFrQixDQUFDLEtBQUssUUFBTCxDQUFjLEtBQXJDLEVBQTRDLE9BQU8sS0FBUDtBQUM1QyxVQUFNLE1BQU0sR0FBRyxLQUFLLFVBQUwsQ0FBZ0IsS0FBSyxRQUFMLENBQWMsS0FBZCxDQUFvQixJQUFwQyxFQUEwQyxNQUExQyxDQUFmO0FBQ0EsV0FBTyxLQUFLLEVBQUwsQ0FBUSxNQUFSLENBQVA7QUFDSDs7QUF4Qm1DOztBQTJCakMsTUFBTSxTQUFTLEdBQUcsSUFBSSwwQkFBSixDQUF3QixRQUFRLENBQUMsSUFBakMsRUFBdUM7QUFDNUQsU0FBTyxFQUFFO0FBRG1ELENBQXZDLENBQWxCO0FBR1AsU0FBUyxDQUFDLFNBQVYsQ0FBb0IsQ0FDaEI7QUFBRSxNQUFJLEVBQUUsR0FBUjtBQUFhLFdBQVMsRUFBRTtBQUF4QixDQURnQixFQUVoQjtBQUFFLE1BQUksRUFBRSw4QkFBUjtBQUF3QyxXQUFTLEVBQUU7QUFBbkQsQ0FGZ0IsRUFHaEI7QUFBRSxNQUFJLEVBQUUsZ0JBQVI7QUFBMEIsV0FBUyxFQUFFO0FBQXJDLENBSGdCLENBQXBCLEUiLCJmaWxlIjoibWFpbi42NWNkNGE0ZGE3NTA1OWE3M2FiYi5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIGluc3RhbGwgYSBKU09OUCBjYWxsYmFjayBmb3IgY2h1bmsgbG9hZGluZ1xuIFx0ZnVuY3Rpb24gd2VicGFja0pzb25wQ2FsbGJhY2soZGF0YSkge1xuIFx0XHR2YXIgY2h1bmtJZHMgPSBkYXRhWzBdO1xuIFx0XHR2YXIgbW9yZU1vZHVsZXMgPSBkYXRhWzFdO1xuXG5cbiBcdFx0Ly8gYWRkIFwibW9yZU1vZHVsZXNcIiB0byB0aGUgbW9kdWxlcyBvYmplY3QsXG4gXHRcdC8vIHRoZW4gZmxhZyBhbGwgXCJjaHVua0lkc1wiIGFzIGxvYWRlZCBhbmQgZmlyZSBjYWxsYmFja1xuIFx0XHR2YXIgbW9kdWxlSWQsIGNodW5rSWQsIGkgPSAwLCByZXNvbHZlcyA9IFtdO1xuIFx0XHRmb3IoO2kgPCBjaHVua0lkcy5sZW5ndGg7IGkrKykge1xuIFx0XHRcdGNodW5rSWQgPSBjaHVua0lkc1tpXTtcbiBcdFx0XHRpZihpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF0pIHtcbiBcdFx0XHRcdHJlc29sdmVzLnB1c2goaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdWzBdKTtcbiBcdFx0XHR9XG4gXHRcdFx0aW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdID0gMDtcbiBcdFx0fVxuIFx0XHRmb3IobW9kdWxlSWQgaW4gbW9yZU1vZHVsZXMpIHtcbiBcdFx0XHRpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9yZU1vZHVsZXMsIG1vZHVsZUlkKSkge1xuIFx0XHRcdFx0bW9kdWxlc1ttb2R1bGVJZF0gPSBtb3JlTW9kdWxlc1ttb2R1bGVJZF07XG4gXHRcdFx0fVxuIFx0XHR9XG4gXHRcdGlmKHBhcmVudEpzb25wRnVuY3Rpb24pIHBhcmVudEpzb25wRnVuY3Rpb24oZGF0YSk7XG5cbiBcdFx0d2hpbGUocmVzb2x2ZXMubGVuZ3RoKSB7XG4gXHRcdFx0cmVzb2x2ZXMuc2hpZnQoKSgpO1xuIFx0XHR9XG5cbiBcdH07XG5cblxuIFx0Ly8gVGhlIG1vZHVsZSBjYWNoZVxuIFx0dmFyIGluc3RhbGxlZE1vZHVsZXMgPSB7fTtcblxuIFx0Ly8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3NcbiBcdC8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuIFx0Ly8gUHJvbWlzZSA9IGNodW5rIGxvYWRpbmcsIDAgPSBjaHVuayBsb2FkZWRcbiBcdHZhciBpbnN0YWxsZWRDaHVua3MgPSB7XG4gXHRcdDE6IDBcbiBcdH07XG5cblxuXG4gXHQvLyBzY3JpcHQgcGF0aCBmdW5jdGlvblxuIFx0ZnVuY3Rpb24ganNvbnBTY3JpcHRTcmMoY2h1bmtJZCkge1xuIFx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXy5wICsgXCJcIiArICh7fVtjaHVua0lkXXx8Y2h1bmtJZCkgKyBcIi5cIiArIHtcIjBcIjpcIjM1ZjE3NmU0NTE3ZjIzYWY0ZDE3XCIsXCIyXCI6XCIxN2Y3YzU0MTE5ZGFmZjkwNjJkMFwiLFwiM1wiOlwiOTE2NzFhODAyNWUzMjUzMmM2YmJcIixcIjRcIjpcIjAyZmNiMzYxNWJkOThkNTkyNWUzXCJ9W2NodW5rSWRdICsgXCIuanNcIlxuIFx0fVxuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cbiBcdC8vIFRoaXMgZmlsZSBjb250YWlucyBvbmx5IHRoZSBlbnRyeSBjaHVuay5cbiBcdC8vIFRoZSBjaHVuayBsb2FkaW5nIGZ1bmN0aW9uIGZvciBhZGRpdGlvbmFsIGNodW5rc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5lID0gZnVuY3Rpb24gcmVxdWlyZUVuc3VyZShjaHVua0lkKSB7XG4gXHRcdHZhciBwcm9taXNlcyA9IFtdO1xuXG5cbiBcdFx0Ly8gSlNPTlAgY2h1bmsgbG9hZGluZyBmb3IgamF2YXNjcmlwdFxuXG4gXHRcdHZhciBpbnN0YWxsZWRDaHVua0RhdGEgPSBpbnN0YWxsZWRDaHVua3NbY2h1bmtJZF07XG4gXHRcdGlmKGluc3RhbGxlZENodW5rRGF0YSAhPT0gMCkgeyAvLyAwIG1lYW5zIFwiYWxyZWFkeSBpbnN0YWxsZWRcIi5cblxuIFx0XHRcdC8vIGEgUHJvbWlzZSBtZWFucyBcImN1cnJlbnRseSBsb2FkaW5nXCIuXG4gXHRcdFx0aWYoaW5zdGFsbGVkQ2h1bmtEYXRhKSB7XG4gXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSk7XG4gXHRcdFx0fSBlbHNlIHtcbiBcdFx0XHRcdC8vIHNldHVwIFByb21pc2UgaW4gY2h1bmsgY2FjaGVcbiBcdFx0XHRcdHZhciBwcm9taXNlID0gbmV3IFByb21pc2UoZnVuY3Rpb24ocmVzb2x2ZSwgcmVqZWN0KSB7XG4gXHRcdFx0XHRcdGluc3RhbGxlZENodW5rRGF0YSA9IGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IFtyZXNvbHZlLCByZWplY3RdO1xuIFx0XHRcdFx0fSk7XG4gXHRcdFx0XHRwcm9taXNlcy5wdXNoKGluc3RhbGxlZENodW5rRGF0YVsyXSA9IHByb21pc2UpO1xuXG4gXHRcdFx0XHQvLyBzdGFydCBjaHVuayBsb2FkaW5nXG4gXHRcdFx0XHR2YXIgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2NyaXB0Jyk7XG4gXHRcdFx0XHR2YXIgb25TY3JpcHRDb21wbGV0ZTtcblxuIFx0XHRcdFx0c2NyaXB0LmNoYXJzZXQgPSAndXRmLTgnO1xuIFx0XHRcdFx0c2NyaXB0LnRpbWVvdXQgPSAxMjA7XG4gXHRcdFx0XHRpZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5uYykge1xuIFx0XHRcdFx0XHRzY3JpcHQuc2V0QXR0cmlidXRlKFwibm9uY2VcIiwgX193ZWJwYWNrX3JlcXVpcmVfXy5uYyk7XG4gXHRcdFx0XHR9XG4gXHRcdFx0XHRzY3JpcHQuc3JjID0ganNvbnBTY3JpcHRTcmMoY2h1bmtJZCk7XG5cbiBcdFx0XHRcdC8vIGNyZWF0ZSBlcnJvciBiZWZvcmUgc3RhY2sgdW53b3VuZCB0byBnZXQgdXNlZnVsIHN0YWNrdHJhY2UgbGF0ZXJcbiBcdFx0XHRcdHZhciBlcnJvciA9IG5ldyBFcnJvcigpO1xuIFx0XHRcdFx0b25TY3JpcHRDb21wbGV0ZSA9IGZ1bmN0aW9uIChldmVudCkge1xuIFx0XHRcdFx0XHQvLyBhdm9pZCBtZW0gbGVha3MgaW4gSUUuXG4gXHRcdFx0XHRcdHNjcmlwdC5vbmVycm9yID0gc2NyaXB0Lm9ubG9hZCA9IG51bGw7XG4gXHRcdFx0XHRcdGNsZWFyVGltZW91dCh0aW1lb3V0KTtcbiBcdFx0XHRcdFx0dmFyIGNodW5rID0gaW5zdGFsbGVkQ2h1bmtzW2NodW5rSWRdO1xuIFx0XHRcdFx0XHRpZihjaHVuayAhPT0gMCkge1xuIFx0XHRcdFx0XHRcdGlmKGNodW5rKSB7XG4gXHRcdFx0XHRcdFx0XHR2YXIgZXJyb3JUeXBlID0gZXZlbnQgJiYgKGV2ZW50LnR5cGUgPT09ICdsb2FkJyA/ICdtaXNzaW5nJyA6IGV2ZW50LnR5cGUpO1xuIFx0XHRcdFx0XHRcdFx0dmFyIHJlYWxTcmMgPSBldmVudCAmJiBldmVudC50YXJnZXQgJiYgZXZlbnQudGFyZ2V0LnNyYztcbiBcdFx0XHRcdFx0XHRcdGVycm9yLm1lc3NhZ2UgPSAnTG9hZGluZyBjaHVuayAnICsgY2h1bmtJZCArICcgZmFpbGVkLlxcbignICsgZXJyb3JUeXBlICsgJzogJyArIHJlYWxTcmMgKyAnKSc7XG4gXHRcdFx0XHRcdFx0XHRlcnJvci50eXBlID0gZXJyb3JUeXBlO1xuIFx0XHRcdFx0XHRcdFx0ZXJyb3IucmVxdWVzdCA9IHJlYWxTcmM7XG4gXHRcdFx0XHRcdFx0XHRjaHVua1sxXShlcnJvcik7XG4gXHRcdFx0XHRcdFx0fVxuIFx0XHRcdFx0XHRcdGluc3RhbGxlZENodW5rc1tjaHVua0lkXSA9IHVuZGVmaW5lZDtcbiBcdFx0XHRcdFx0fVxuIFx0XHRcdFx0fTtcbiBcdFx0XHRcdHZhciB0aW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbigpe1xuIFx0XHRcdFx0XHRvblNjcmlwdENvbXBsZXRlKHsgdHlwZTogJ3RpbWVvdXQnLCB0YXJnZXQ6IHNjcmlwdCB9KTtcbiBcdFx0XHRcdH0sIDEyMDAwMCk7XG4gXHRcdFx0XHRzY3JpcHQub25lcnJvciA9IHNjcmlwdC5vbmxvYWQgPSBvblNjcmlwdENvbXBsZXRlO1xuIFx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZChzY3JpcHQpO1xuIFx0XHRcdH1cbiBcdFx0fVxuIFx0XHRyZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpO1xuIFx0fTtcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG4gXHQvLyBvbiBlcnJvciBmdW5jdGlvbiBmb3IgYXN5bmMgbG9hZGluZ1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5vZSA9IGZ1bmN0aW9uKGVycikgeyBjb25zb2xlLmVycm9yKGVycik7IHRocm93IGVycjsgfTtcblxuIFx0dmFyIGpzb25wQXJyYXkgPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gPSB3aW5kb3dbXCJ3ZWJwYWNrSnNvbnBcIl0gfHwgW107XG4gXHR2YXIgb2xkSnNvbnBGdW5jdGlvbiA9IGpzb25wQXJyYXkucHVzaC5iaW5kKGpzb25wQXJyYXkpO1xuIFx0anNvbnBBcnJheS5wdXNoID0gd2VicGFja0pzb25wQ2FsbGJhY2s7XG4gXHRqc29ucEFycmF5ID0ganNvbnBBcnJheS5zbGljZSgpO1xuIFx0Zm9yKHZhciBpID0gMDsgaSA8IGpzb25wQXJyYXkubGVuZ3RoOyBpKyspIHdlYnBhY2tKc29ucENhbGxiYWNrKGpzb25wQXJyYXlbaV0pO1xuIFx0dmFyIHBhcmVudEpzb25wRnVuY3Rpb24gPSBvbGRKc29ucEZ1bmN0aW9uO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTEpO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG4vKipcbiAqIEBtb2R1bGUgc2hhZHktcmVuZGVyXG4gKi9cblxuaW1wb3J0IHtpc1RlbXBsYXRlUGFydEFjdGl2ZSwgVGVtcGxhdGUsIFRlbXBsYXRlUGFydH0gZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG5cbmNvbnN0IHdhbGtlck5vZGVGaWx0ZXIgPSAxMzMgLyogTm9kZUZpbHRlci5TSE9XX3tFTEVNRU5UfENPTU1FTlR8VEVYVH0gKi87XG5cbi8qKlxuICogUmVtb3ZlcyB0aGUgbGlzdCBvZiBub2RlcyBmcm9tIGEgVGVtcGxhdGUgc2FmZWx5LiBJbiBhZGRpdGlvbiB0byByZW1vdmluZ1xuICogbm9kZXMgZnJvbSB0aGUgVGVtcGxhdGUsIHRoZSBUZW1wbGF0ZSBwYXJ0IGluZGljZXMgYXJlIHVwZGF0ZWQgdG8gbWF0Y2hcbiAqIHRoZSBtdXRhdGVkIFRlbXBsYXRlIERPTS5cbiAqXG4gKiBBcyB0aGUgdGVtcGxhdGUgaXMgd2Fsa2VkIHRoZSByZW1vdmFsIHN0YXRlIGlzIHRyYWNrZWQgYW5kXG4gKiBwYXJ0IGluZGljZXMgYXJlIGFkanVzdGVkIGFzIG5lZWRlZC5cbiAqXG4gKiBkaXZcbiAqICAgZGl2IzEgKHJlbW92ZSkgPC0tIHN0YXJ0IHJlbW92aW5nIChyZW1vdmluZyBub2RlIGlzIGRpdiMxKVxuICogICAgIGRpdlxuICogICAgICAgZGl2IzIgKHJlbW92ZSkgIDwtLSBjb250aW51ZSByZW1vdmluZyAocmVtb3Zpbmcgbm9kZSBpcyBzdGlsbCBkaXYjMSlcbiAqICAgICAgICAgZGl2XG4gKiBkaXYgPC0tIHN0b3AgcmVtb3Zpbmcgc2luY2UgcHJldmlvdXMgc2libGluZyBpcyB0aGUgcmVtb3Zpbmcgbm9kZSAoZGl2IzEsXG4gKiByZW1vdmVkIDQgbm9kZXMpXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZW1vdmVOb2Rlc0Zyb21UZW1wbGF0ZShcbiAgICB0ZW1wbGF0ZTogVGVtcGxhdGUsIG5vZGVzVG9SZW1vdmU6IFNldDxOb2RlPikge1xuICBjb25zdCB7ZWxlbWVudDoge2NvbnRlbnR9LCBwYXJ0c30gPSB0ZW1wbGF0ZTtcbiAgY29uc3Qgd2Fsa2VyID1cbiAgICAgIGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIoY29udGVudCwgd2Fsa2VyTm9kZUZpbHRlciwgbnVsbCwgZmFsc2UpO1xuICBsZXQgcGFydEluZGV4ID0gbmV4dEFjdGl2ZUluZGV4SW5UZW1wbGF0ZVBhcnRzKHBhcnRzKTtcbiAgbGV0IHBhcnQgPSBwYXJ0c1twYXJ0SW5kZXhdO1xuICBsZXQgbm9kZUluZGV4ID0gLTE7XG4gIGxldCByZW1vdmVDb3VudCA9IDA7XG4gIGNvbnN0IG5vZGVzVG9SZW1vdmVJblRlbXBsYXRlID0gW107XG4gIGxldCBjdXJyZW50UmVtb3ZpbmdOb2RlOiBOb2RlfG51bGwgPSBudWxsO1xuICB3aGlsZSAod2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICBub2RlSW5kZXgrKztcbiAgICBjb25zdCBub2RlID0gd2Fsa2VyLmN1cnJlbnROb2RlIGFzIEVsZW1lbnQ7XG4gICAgLy8gRW5kIHJlbW92YWwgaWYgc3RlcHBlZCBwYXN0IHRoZSByZW1vdmluZyBub2RlXG4gICAgaWYgKG5vZGUucHJldmlvdXNTaWJsaW5nID09PSBjdXJyZW50UmVtb3ZpbmdOb2RlKSB7XG4gICAgICBjdXJyZW50UmVtb3ZpbmdOb2RlID0gbnVsbDtcbiAgICB9XG4gICAgLy8gQSBub2RlIHRvIHJlbW92ZSB3YXMgZm91bmQgaW4gdGhlIHRlbXBsYXRlXG4gICAgaWYgKG5vZGVzVG9SZW1vdmUuaGFzKG5vZGUpKSB7XG4gICAgICBub2Rlc1RvUmVtb3ZlSW5UZW1wbGF0ZS5wdXNoKG5vZGUpO1xuICAgICAgLy8gVHJhY2sgbm9kZSB3ZSdyZSByZW1vdmluZ1xuICAgICAgaWYgKGN1cnJlbnRSZW1vdmluZ05vZGUgPT09IG51bGwpIHtcbiAgICAgICAgY3VycmVudFJlbW92aW5nTm9kZSA9IG5vZGU7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIFdoZW4gcmVtb3ZpbmcsIGluY3JlbWVudCBjb3VudCBieSB3aGljaCB0byBhZGp1c3Qgc3Vic2VxdWVudCBwYXJ0IGluZGljZXNcbiAgICBpZiAoY3VycmVudFJlbW92aW5nTm9kZSAhPT0gbnVsbCkge1xuICAgICAgcmVtb3ZlQ291bnQrKztcbiAgICB9XG4gICAgd2hpbGUgKHBhcnQgIT09IHVuZGVmaW5lZCAmJiBwYXJ0LmluZGV4ID09PSBub2RlSW5kZXgpIHtcbiAgICAgIC8vIElmIHBhcnQgaXMgaW4gYSByZW1vdmVkIG5vZGUgZGVhY3RpdmF0ZSBpdCBieSBzZXR0aW5nIGluZGV4IHRvIC0xIG9yXG4gICAgICAvLyBhZGp1c3QgdGhlIGluZGV4IGFzIG5lZWRlZC5cbiAgICAgIHBhcnQuaW5kZXggPSBjdXJyZW50UmVtb3ZpbmdOb2RlICE9PSBudWxsID8gLTEgOiBwYXJ0LmluZGV4IC0gcmVtb3ZlQ291bnQ7XG4gICAgICAvLyBnbyB0byB0aGUgbmV4dCBhY3RpdmUgcGFydC5cbiAgICAgIHBhcnRJbmRleCA9IG5leHRBY3RpdmVJbmRleEluVGVtcGxhdGVQYXJ0cyhwYXJ0cywgcGFydEluZGV4KTtcbiAgICAgIHBhcnQgPSBwYXJ0c1twYXJ0SW5kZXhdO1xuICAgIH1cbiAgfVxuICBub2Rlc1RvUmVtb3ZlSW5UZW1wbGF0ZS5mb3JFYWNoKChuKSA9PiBuLnBhcmVudE5vZGUhLnJlbW92ZUNoaWxkKG4pKTtcbn1cblxuY29uc3QgY291bnROb2RlcyA9IChub2RlOiBOb2RlKSA9PiB7XG4gIGxldCBjb3VudCA9IChub2RlLm5vZGVUeXBlID09PSAxMSAvKiBOb2RlLkRPQ1VNRU5UX0ZSQUdNRU5UX05PREUgKi8pID8gMCA6IDE7XG4gIGNvbnN0IHdhbGtlciA9IGRvY3VtZW50LmNyZWF0ZVRyZWVXYWxrZXIobm9kZSwgd2Fsa2VyTm9kZUZpbHRlciwgbnVsbCwgZmFsc2UpO1xuICB3aGlsZSAod2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICBjb3VudCsrO1xuICB9XG4gIHJldHVybiBjb3VudDtcbn07XG5cbmNvbnN0IG5leHRBY3RpdmVJbmRleEluVGVtcGxhdGVQYXJ0cyA9XG4gICAgKHBhcnRzOiBUZW1wbGF0ZVBhcnRbXSwgc3RhcnRJbmRleDogbnVtYmVyID0gLTEpID0+IHtcbiAgICAgIGZvciAobGV0IGkgPSBzdGFydEluZGV4ICsgMTsgaSA8IHBhcnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHBhcnQgPSBwYXJ0c1tpXTtcbiAgICAgICAgaWYgKGlzVGVtcGxhdGVQYXJ0QWN0aXZlKHBhcnQpKSB7XG4gICAgICAgICAgcmV0dXJuIGk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiAtMTtcbiAgICB9O1xuXG4vKipcbiAqIEluc2VydHMgdGhlIGdpdmVuIG5vZGUgaW50byB0aGUgVGVtcGxhdGUsIG9wdGlvbmFsbHkgYmVmb3JlIHRoZSBnaXZlblxuICogcmVmTm9kZS4gSW4gYWRkaXRpb24gdG8gaW5zZXJ0aW5nIHRoZSBub2RlIGludG8gdGhlIFRlbXBsYXRlLCB0aGUgVGVtcGxhdGVcbiAqIHBhcnQgaW5kaWNlcyBhcmUgdXBkYXRlZCB0byBtYXRjaCB0aGUgbXV0YXRlZCBUZW1wbGF0ZSBET00uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbnNlcnROb2RlSW50b1RlbXBsYXRlKFxuICAgIHRlbXBsYXRlOiBUZW1wbGF0ZSwgbm9kZTogTm9kZSwgcmVmTm9kZTogTm9kZXxudWxsID0gbnVsbCkge1xuICBjb25zdCB7ZWxlbWVudDoge2NvbnRlbnR9LCBwYXJ0c30gPSB0ZW1wbGF0ZTtcbiAgLy8gSWYgdGhlcmUncyBubyByZWZOb2RlLCB0aGVuIHB1dCBub2RlIGF0IGVuZCBvZiB0ZW1wbGF0ZS5cbiAgLy8gTm8gcGFydCBpbmRpY2VzIG5lZWQgdG8gYmUgc2hpZnRlZCBpbiB0aGlzIGNhc2UuXG4gIGlmIChyZWZOb2RlID09PSBudWxsIHx8IHJlZk5vZGUgPT09IHVuZGVmaW5lZCkge1xuICAgIGNvbnRlbnQuYXBwZW5kQ2hpbGQobm9kZSk7XG4gICAgcmV0dXJuO1xuICB9XG4gIGNvbnN0IHdhbGtlciA9XG4gICAgICBkb2N1bWVudC5jcmVhdGVUcmVlV2Fsa2VyKGNvbnRlbnQsIHdhbGtlck5vZGVGaWx0ZXIsIG51bGwsIGZhbHNlKTtcbiAgbGV0IHBhcnRJbmRleCA9IG5leHRBY3RpdmVJbmRleEluVGVtcGxhdGVQYXJ0cyhwYXJ0cyk7XG4gIGxldCBpbnNlcnRDb3VudCA9IDA7XG4gIGxldCB3YWxrZXJJbmRleCA9IC0xO1xuICB3aGlsZSAod2Fsa2VyLm5leHROb2RlKCkpIHtcbiAgICB3YWxrZXJJbmRleCsrO1xuICAgIGNvbnN0IHdhbGtlck5vZGUgPSB3YWxrZXIuY3VycmVudE5vZGUgYXMgRWxlbWVudDtcbiAgICBpZiAod2Fsa2VyTm9kZSA9PT0gcmVmTm9kZSkge1xuICAgICAgaW5zZXJ0Q291bnQgPSBjb3VudE5vZGVzKG5vZGUpO1xuICAgICAgcmVmTm9kZS5wYXJlbnROb2RlIS5pbnNlcnRCZWZvcmUobm9kZSwgcmVmTm9kZSk7XG4gICAgfVxuICAgIHdoaWxlIChwYXJ0SW5kZXggIT09IC0xICYmIHBhcnRzW3BhcnRJbmRleF0uaW5kZXggPT09IHdhbGtlckluZGV4KSB7XG4gICAgICAvLyBJZiB3ZSd2ZSBpbnNlcnRlZCB0aGUgbm9kZSwgc2ltcGx5IGFkanVzdCBhbGwgc3Vic2VxdWVudCBwYXJ0c1xuICAgICAgaWYgKGluc2VydENvdW50ID4gMCkge1xuICAgICAgICB3aGlsZSAocGFydEluZGV4ICE9PSAtMSkge1xuICAgICAgICAgIHBhcnRzW3BhcnRJbmRleF0uaW5kZXggKz0gaW5zZXJ0Q291bnQ7XG4gICAgICAgICAgcGFydEluZGV4ID0gbmV4dEFjdGl2ZUluZGV4SW5UZW1wbGF0ZVBhcnRzKHBhcnRzLCBwYXJ0SW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIHBhcnRJbmRleCA9IG5leHRBY3RpdmVJbmRleEluVGVtcGxhdGVQYXJ0cyhwYXJ0cywgcGFydEluZGV4KTtcbiAgICB9XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuLyoqXG4gKiBNb2R1bGUgdG8gYWRkIHNoYWR5IERPTS9zaGFkeSBDU1MgcG9seWZpbGwgc3VwcG9ydCB0byBsaXQtaHRtbCB0ZW1wbGF0ZVxuICogcmVuZGVyaW5nLiBTZWUgdGhlIFtbcmVuZGVyXV0gbWV0aG9kIGZvciBkZXRhaWxzLlxuICpcbiAqIEBtb2R1bGUgc2hhZHktcmVuZGVyXG4gKiBAcHJlZmVycmVkXG4gKi9cblxuLyoqXG4gKiBEbyBub3QgcmVtb3ZlIHRoaXMgY29tbWVudDsgaXQga2VlcHMgdHlwZWRvYyBmcm9tIG1pc3BsYWNpbmcgdGhlIG1vZHVsZVxuICogZG9jcy5cbiAqL1xuaW1wb3J0IHtyZW1vdmVOb2Rlc30gZnJvbSAnLi9kb20uanMnO1xuaW1wb3J0IHtpbnNlcnROb2RlSW50b1RlbXBsYXRlLCByZW1vdmVOb2Rlc0Zyb21UZW1wbGF0ZX0gZnJvbSAnLi9tb2RpZnktdGVtcGxhdGUuanMnO1xuaW1wb3J0IHtSZW5kZXJPcHRpb25zfSBmcm9tICcuL3JlbmRlci1vcHRpb25zLmpzJztcbmltcG9ydCB7cGFydHMsIHJlbmRlciBhcyBsaXRSZW5kZXJ9IGZyb20gJy4vcmVuZGVyLmpzJztcbmltcG9ydCB7dGVtcGxhdGVDYWNoZXN9IGZyb20gJy4vdGVtcGxhdGUtZmFjdG9yeS5qcyc7XG5pbXBvcnQge1RlbXBsYXRlSW5zdGFuY2V9IGZyb20gJy4vdGVtcGxhdGUtaW5zdGFuY2UuanMnO1xuaW1wb3J0IHtUZW1wbGF0ZVJlc3VsdH0gZnJvbSAnLi90ZW1wbGF0ZS1yZXN1bHQuanMnO1xuaW1wb3J0IHttYXJrZXIsIFRlbXBsYXRlfSBmcm9tICcuL3RlbXBsYXRlLmpzJztcblxuZXhwb3J0IHtodG1sLCBzdmcsIFRlbXBsYXRlUmVzdWx0fSBmcm9tICcuLi9saXQtaHRtbC5qcyc7XG5cbi8vIEdldCBhIGtleSB0byBsb29rdXAgaW4gYHRlbXBsYXRlQ2FjaGVzYC5cbmNvbnN0IGdldFRlbXBsYXRlQ2FjaGVLZXkgPSAodHlwZTogc3RyaW5nLCBzY29wZU5hbWU6IHN0cmluZykgPT5cbiAgICBgJHt0eXBlfS0tJHtzY29wZU5hbWV9YDtcblxubGV0IGNvbXBhdGlibGVTaGFkeUNTU1ZlcnNpb24gPSB0cnVlO1xuXG5pZiAodHlwZW9mIHdpbmRvdy5TaGFkeUNTUyA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgY29tcGF0aWJsZVNoYWR5Q1NTVmVyc2lvbiA9IGZhbHNlO1xufSBlbHNlIGlmICh0eXBlb2Ygd2luZG93LlNoYWR5Q1NTLnByZXBhcmVUZW1wbGF0ZURvbSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgY29uc29sZS53YXJuKFxuICAgICAgYEluY29tcGF0aWJsZSBTaGFkeUNTUyB2ZXJzaW9uIGRldGVjdGVkLmAgK1xuICAgICAgYFBsZWFzZSB1cGRhdGUgdG8gYXQgbGVhc3QgQHdlYmNvbXBvbmVudHMvd2ViY29tcG9uZW50c2pzQDIuMC4yIGFuZGAgK1xuICAgICAgYEB3ZWJjb21wb25lbnRzL3NoYWR5Y3NzQDEuMy4xLmApO1xuICBjb21wYXRpYmxlU2hhZHlDU1NWZXJzaW9uID0gZmFsc2U7XG59XG5cbi8qKlxuICogVGVtcGxhdGUgZmFjdG9yeSB3aGljaCBzY29wZXMgdGVtcGxhdGUgRE9NIHVzaW5nIFNoYWR5Q1NTLlxuICogQHBhcmFtIHNjb3BlTmFtZSB7c3RyaW5nfVxuICovXG5jb25zdCBzaGFkeVRlbXBsYXRlRmFjdG9yeSA9IChzY29wZU5hbWU6IHN0cmluZykgPT5cbiAgICAocmVzdWx0OiBUZW1wbGF0ZVJlc3VsdCkgPT4ge1xuICAgICAgY29uc3QgY2FjaGVLZXkgPSBnZXRUZW1wbGF0ZUNhY2hlS2V5KHJlc3VsdC50eXBlLCBzY29wZU5hbWUpO1xuICAgICAgbGV0IHRlbXBsYXRlQ2FjaGUgPSB0ZW1wbGF0ZUNhY2hlcy5nZXQoY2FjaGVLZXkpO1xuICAgICAgaWYgKHRlbXBsYXRlQ2FjaGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICB0ZW1wbGF0ZUNhY2hlID0ge1xuICAgICAgICAgIHN0cmluZ3NBcnJheTogbmV3IFdlYWtNYXA8VGVtcGxhdGVTdHJpbmdzQXJyYXksIFRlbXBsYXRlPigpLFxuICAgICAgICAgIGtleVN0cmluZzogbmV3IE1hcDxzdHJpbmcsIFRlbXBsYXRlPigpXG4gICAgICAgIH07XG4gICAgICAgIHRlbXBsYXRlQ2FjaGVzLnNldChjYWNoZUtleSwgdGVtcGxhdGVDYWNoZSk7XG4gICAgICB9XG5cbiAgICAgIGxldCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FjaGUuc3RyaW5nc0FycmF5LmdldChyZXN1bHQuc3RyaW5ncyk7XG4gICAgICBpZiAodGVtcGxhdGUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgICB9XG5cbiAgICAgIGNvbnN0IGtleSA9IHJlc3VsdC5zdHJpbmdzLmpvaW4obWFya2VyKTtcbiAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGVDYWNoZS5rZXlTdHJpbmcuZ2V0KGtleSk7XG4gICAgICBpZiAodGVtcGxhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBjb25zdCBlbGVtZW50ID0gcmVzdWx0LmdldFRlbXBsYXRlRWxlbWVudCgpO1xuICAgICAgICBpZiAoY29tcGF0aWJsZVNoYWR5Q1NTVmVyc2lvbikge1xuICAgICAgICAgIHdpbmRvdy5TaGFkeUNTUyEucHJlcGFyZVRlbXBsYXRlRG9tKGVsZW1lbnQsIHNjb3BlTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGVtcGxhdGUgPSBuZXcgVGVtcGxhdGUocmVzdWx0LCBlbGVtZW50KTtcbiAgICAgICAgdGVtcGxhdGVDYWNoZS5rZXlTdHJpbmcuc2V0KGtleSwgdGVtcGxhdGUpO1xuICAgICAgfVxuICAgICAgdGVtcGxhdGVDYWNoZS5zdHJpbmdzQXJyYXkuc2V0KHJlc3VsdC5zdHJpbmdzLCB0ZW1wbGF0ZSk7XG4gICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfTtcblxuY29uc3QgVEVNUExBVEVfVFlQRVMgPSBbJ2h0bWwnLCAnc3ZnJ107XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwgc3R5bGUgZWxlbWVudHMgZnJvbSBUZW1wbGF0ZXMgZm9yIHRoZSBnaXZlbiBzY29wZU5hbWUuXG4gKi9cbmNvbnN0IHJlbW92ZVN0eWxlc0Zyb21MaXRUZW1wbGF0ZXMgPSAoc2NvcGVOYW1lOiBzdHJpbmcpID0+IHtcbiAgVEVNUExBVEVfVFlQRVMuZm9yRWFjaCgodHlwZSkgPT4ge1xuICAgIGNvbnN0IHRlbXBsYXRlcyA9IHRlbXBsYXRlQ2FjaGVzLmdldChnZXRUZW1wbGF0ZUNhY2hlS2V5KHR5cGUsIHNjb3BlTmFtZSkpO1xuICAgIGlmICh0ZW1wbGF0ZXMgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdGVtcGxhdGVzLmtleVN0cmluZy5mb3JFYWNoKCh0ZW1wbGF0ZSkgPT4ge1xuICAgICAgICBjb25zdCB7ZWxlbWVudDoge2NvbnRlbnR9fSA9IHRlbXBsYXRlO1xuICAgICAgICAvLyBJRSAxMSBkb2Vzbid0IHN1cHBvcnQgdGhlIGl0ZXJhYmxlIHBhcmFtIFNldCBjb25zdHJ1Y3RvclxuICAgICAgICBjb25zdCBzdHlsZXMgPSBuZXcgU2V0PEVsZW1lbnQ+KCk7XG4gICAgICAgIEFycmF5LmZyb20oY29udGVudC5xdWVyeVNlbGVjdG9yQWxsKCdzdHlsZScpKS5mb3JFYWNoKChzOiBFbGVtZW50KSA9PiB7XG4gICAgICAgICAgc3R5bGVzLmFkZChzKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJlbW92ZU5vZGVzRnJvbVRlbXBsYXRlKHRlbXBsYXRlLCBzdHlsZXMpO1xuICAgICAgfSk7XG4gICAgfVxuICB9KTtcbn07XG5cbmNvbnN0IHNoYWR5UmVuZGVyU2V0ID0gbmV3IFNldDxzdHJpbmc+KCk7XG5cbi8qKlxuICogRm9yIHRoZSBnaXZlbiBzY29wZSBuYW1lLCBlbnN1cmVzIHRoYXQgU2hhZHlDU1Mgc3R5bGUgc2NvcGluZyBpcyBwZXJmb3JtZWQuXG4gKiBUaGlzIGlzIGRvbmUganVzdCBvbmNlIHBlciBzY29wZSBuYW1lIHNvIHRoZSBmcmFnbWVudCBhbmQgdGVtcGxhdGUgY2Fubm90XG4gKiBiZSBtb2RpZmllZC5cbiAqICgxKSBleHRyYWN0cyBzdHlsZXMgZnJvbSB0aGUgcmVuZGVyZWQgZnJhZ21lbnQgYW5kIGhhbmRzIHRoZW0gdG8gU2hhZHlDU1NcbiAqIHRvIGJlIHNjb3BlZCBhbmQgYXBwZW5kZWQgdG8gdGhlIGRvY3VtZW50XG4gKiAoMikgcmVtb3ZlcyBzdHlsZSBlbGVtZW50cyBmcm9tIGFsbCBsaXQtaHRtbCBUZW1wbGF0ZXMgZm9yIHRoaXMgc2NvcGUgbmFtZS5cbiAqXG4gKiBOb3RlLCA8c3R5bGU+IGVsZW1lbnRzIGNhbiBvbmx5IGJlIHBsYWNlZCBpbnRvIHRlbXBsYXRlcyBmb3IgdGhlXG4gKiBpbml0aWFsIHJlbmRlcmluZyBvZiB0aGUgc2NvcGUuIElmIDxzdHlsZT4gZWxlbWVudHMgYXJlIGluY2x1ZGVkIGluIHRlbXBsYXRlc1xuICogZHluYW1pY2FsbHkgcmVuZGVyZWQgdG8gdGhlIHNjb3BlIChhZnRlciB0aGUgZmlyc3Qgc2NvcGUgcmVuZGVyKSwgdGhleSB3aWxsXG4gKiBub3QgYmUgc2NvcGVkIGFuZCB0aGUgPHN0eWxlPiB3aWxsIGJlIGxlZnQgaW4gdGhlIHRlbXBsYXRlIGFuZCByZW5kZXJlZFxuICogb3V0cHV0LlxuICovXG5jb25zdCBwcmVwYXJlVGVtcGxhdGVTdHlsZXMgPVxuICAgIChyZW5kZXJlZERPTTogRG9jdW1lbnRGcmFnbWVudCwgdGVtcGxhdGU6IFRlbXBsYXRlLCBzY29wZU5hbWU6IHN0cmluZykgPT4ge1xuICAgICAgc2hhZHlSZW5kZXJTZXQuYWRkKHNjb3BlTmFtZSk7XG4gICAgICAvLyBNb3ZlIHN0eWxlcyBvdXQgb2YgcmVuZGVyZWQgRE9NIGFuZCBzdG9yZS5cbiAgICAgIGNvbnN0IHN0eWxlcyA9IHJlbmRlcmVkRE9NLnF1ZXJ5U2VsZWN0b3JBbGwoJ3N0eWxlJyk7XG4gICAgICAvLyBJZiB0aGVyZSBhcmUgbm8gc3R5bGVzLCBza2lwIHVubmVjZXNzYXJ5IHdvcmtcbiAgICAgIGlmIChzdHlsZXMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgIC8vIEVuc3VyZSBwcmVwYXJlVGVtcGxhdGVTdHlsZXMgaXMgY2FsbGVkIHRvIHN1cHBvcnQgYWRkaW5nXG4gICAgICAgIC8vIHN0eWxlcyB2aWEgYHByZXBhcmVBZG9wdGVkQ3NzVGV4dGAgc2luY2UgdGhhdCByZXF1aXJlcyB0aGF0XG4gICAgICAgIC8vIGBwcmVwYXJlVGVtcGxhdGVTdHlsZXNgIGlzIGNhbGxlZC5cbiAgICAgICAgd2luZG93LlNoYWR5Q1NTIS5wcmVwYXJlVGVtcGxhdGVTdHlsZXModGVtcGxhdGUuZWxlbWVudCwgc2NvcGVOYW1lKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgY29uc3QgY29uZGVuc2VkU3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzdHlsZScpO1xuICAgICAgLy8gQ29sbGVjdCBzdHlsZXMgaW50byBhIHNpbmdsZSBzdHlsZS4gVGhpcyBoZWxwcyB1cyBtYWtlIHN1cmUgU2hhZHlDU1NcbiAgICAgIC8vIG1hbmlwdWxhdGlvbnMgd2lsbCBub3QgcHJldmVudCB1cyBmcm9tIGJlaW5nIGFibGUgdG8gZml4IHVwIHRlbXBsYXRlXG4gICAgICAvLyBwYXJ0IGluZGljZXMuXG4gICAgICAvLyBOT1RFOiBjb2xsZWN0aW5nIHN0eWxlcyBpcyBpbmVmZmljaWVudCBmb3IgYnJvd3NlcnMgYnV0IFNoYWR5Q1NTXG4gICAgICAvLyBjdXJyZW50bHkgZG9lcyB0aGlzIGFueXdheS4gV2hlbiBpdCBkb2VzIG5vdCwgdGhpcyBzaG91bGQgYmUgY2hhbmdlZC5cbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3R5bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHN0eWxlID0gc3R5bGVzW2ldO1xuICAgICAgICBzdHlsZS5wYXJlbnROb2RlIS5yZW1vdmVDaGlsZChzdHlsZSk7XG4gICAgICAgIGNvbmRlbnNlZFN0eWxlLnRleHRDb250ZW50ISArPSBzdHlsZS50ZXh0Q29udGVudDtcbiAgICAgIH1cbiAgICAgIC8vIFJlbW92ZSBzdHlsZXMgZnJvbSBuZXN0ZWQgdGVtcGxhdGVzIGluIHRoaXMgc2NvcGUuXG4gICAgICByZW1vdmVTdHlsZXNGcm9tTGl0VGVtcGxhdGVzKHNjb3BlTmFtZSk7XG4gICAgICAvLyBBbmQgdGhlbiBwdXQgdGhlIGNvbmRlbnNlZCBzdHlsZSBpbnRvIHRoZSBcInJvb3RcIiB0ZW1wbGF0ZSBwYXNzZWQgaW4gYXNcbiAgICAgIC8vIGB0ZW1wbGF0ZWAuXG4gICAgICBpbnNlcnROb2RlSW50b1RlbXBsYXRlKFxuICAgICAgICAgIHRlbXBsYXRlLCBjb25kZW5zZWRTdHlsZSwgdGVtcGxhdGUuZWxlbWVudC5jb250ZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgLy8gTm90ZSwgaXQncyBpbXBvcnRhbnQgdGhhdCBTaGFkeUNTUyBnZXRzIHRoZSB0ZW1wbGF0ZSB0aGF0IGBsaXQtaHRtbGBcbiAgICAgIC8vIHdpbGwgYWN0dWFsbHkgcmVuZGVyIHNvIHRoYXQgaXQgY2FuIHVwZGF0ZSB0aGUgc3R5bGUgaW5zaWRlIHdoZW5cbiAgICAgIC8vIG5lZWRlZCAoZS5nLiBAYXBwbHkgbmF0aXZlIFNoYWRvdyBET00gY2FzZSkuXG4gICAgICB3aW5kb3cuU2hhZHlDU1MhLnByZXBhcmVUZW1wbGF0ZVN0eWxlcyh0ZW1wbGF0ZS5lbGVtZW50LCBzY29wZU5hbWUpO1xuICAgICAgaWYgKHdpbmRvdy5TaGFkeUNTUyEubmF0aXZlU2hhZG93KSB7XG4gICAgICAgIC8vIFdoZW4gaW4gbmF0aXZlIFNoYWRvdyBET00sIHJlLWFkZCBzdHlsaW5nIHRvIHJlbmRlcmVkIGNvbnRlbnQgdXNpbmdcbiAgICAgICAgLy8gdGhlIHN0eWxlIFNoYWR5Q1NTIHByb2R1Y2VkLlxuICAgICAgICBjb25zdCBzdHlsZSA9IHRlbXBsYXRlLmVsZW1lbnQuY29udGVudC5xdWVyeVNlbGVjdG9yKCdzdHlsZScpITtcbiAgICAgICAgcmVuZGVyZWRET00uaW5zZXJ0QmVmb3JlKHN0eWxlLmNsb25lTm9kZSh0cnVlKSwgcmVuZGVyZWRET00uZmlyc3RDaGlsZCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBXaGVuIG5vdCBpbiBuYXRpdmUgU2hhZG93IERPTSwgYXQgdGhpcyBwb2ludCBTaGFkeUNTUyB3aWxsIGhhdmVcbiAgICAgICAgLy8gcmVtb3ZlZCB0aGUgc3R5bGUgZnJvbSB0aGUgbGl0IHRlbXBsYXRlIGFuZCBwYXJ0cyB3aWxsIGJlIGJyb2tlbiBhcyBhXG4gICAgICAgIC8vIHJlc3VsdC4gVG8gZml4IHRoaXMsIHdlIHB1dCBiYWNrIHRoZSBzdHlsZSBub2RlIFNoYWR5Q1NTIHJlbW92ZWRcbiAgICAgICAgLy8gYW5kIHRoZW4gdGVsbCBsaXQgdG8gcmVtb3ZlIHRoYXQgbm9kZSBmcm9tIHRoZSB0ZW1wbGF0ZS5cbiAgICAgICAgLy8gTk9URSwgU2hhZHlDU1MgY3JlYXRlcyBpdHMgb3duIHN0eWxlIHNvIHdlIGNhbiBzYWZlbHkgYWRkL3JlbW92ZVxuICAgICAgICAvLyBgY29uZGVuc2VkU3R5bGVgIGhlcmUuXG4gICAgICAgIHRlbXBsYXRlLmVsZW1lbnQuY29udGVudC5pbnNlcnRCZWZvcmUoXG4gICAgICAgICAgICBjb25kZW5zZWRTdHlsZSwgdGVtcGxhdGUuZWxlbWVudC5jb250ZW50LmZpcnN0Q2hpbGQpO1xuICAgICAgICBjb25zdCByZW1vdmVzID0gbmV3IFNldCgpO1xuICAgICAgICByZW1vdmVzLmFkZChjb25kZW5zZWRTdHlsZSk7XG4gICAgICAgIHJlbW92ZU5vZGVzRnJvbVRlbXBsYXRlKHRlbXBsYXRlLCByZW1vdmVzKTtcbiAgICAgIH1cbiAgICB9O1xuXG5leHBvcnQgaW50ZXJmYWNlIFNoYWR5UmVuZGVyT3B0aW9ucyBleHRlbmRzIFBhcnRpYWw8UmVuZGVyT3B0aW9ucz4ge1xuICBzY29wZU5hbWU6IHN0cmluZztcbn1cblxuLyoqXG4gKiBFeHRlbnNpb24gdG8gdGhlIHN0YW5kYXJkIGByZW5kZXJgIG1ldGhvZCB3aGljaCBzdXBwb3J0cyByZW5kZXJpbmdcbiAqIHRvIFNoYWRvd1Jvb3RzIHdoZW4gdGhlIFNoYWR5RE9NIChodHRwczovL2dpdGh1Yi5jb20vd2ViY29tcG9uZW50cy9zaGFkeWRvbSlcbiAqIGFuZCBTaGFkeUNTUyAoaHR0cHM6Ly9naXRodWIuY29tL3dlYmNvbXBvbmVudHMvc2hhZHljc3MpIHBvbHlmaWxscyBhcmUgdXNlZFxuICogb3Igd2hlbiB0aGUgd2ViY29tcG9uZW50c2pzXG4gKiAoaHR0cHM6Ly9naXRodWIuY29tL3dlYmNvbXBvbmVudHMvd2ViY29tcG9uZW50c2pzKSBwb2x5ZmlsbCBpcyB1c2VkLlxuICpcbiAqIEFkZHMgYSBgc2NvcGVOYW1lYCBvcHRpb24gd2hpY2ggaXMgdXNlZCB0byBzY29wZSBlbGVtZW50IERPTSBhbmQgc3R5bGVzaGVldHNcbiAqIHdoZW4gbmF0aXZlIFNoYWRvd0RPTSBpcyB1bmF2YWlsYWJsZS4gVGhlIGBzY29wZU5hbWVgIHdpbGwgYmUgYWRkZWQgdG9cbiAqIHRoZSBjbGFzcyBhdHRyaWJ1dGUgb2YgYWxsIHJlbmRlcmVkIERPTS4gSW4gYWRkaXRpb24sIGFueSBzdHlsZSBlbGVtZW50cyB3aWxsXG4gKiBiZSBhdXRvbWF0aWNhbGx5IHJlLXdyaXR0ZW4gd2l0aCB0aGlzIGBzY29wZU5hbWVgIHNlbGVjdG9yIGFuZCBtb3ZlZCBvdXRcbiAqIG9mIHRoZSByZW5kZXJlZCBET00gYW5kIGludG8gdGhlIGRvY3VtZW50IGA8aGVhZD5gLlxuICpcbiAqIEl0IGlzIGNvbW1vbiB0byB1c2UgdGhpcyByZW5kZXIgbWV0aG9kIGluIGNvbmp1bmN0aW9uIHdpdGggYSBjdXN0b20gZWxlbWVudFxuICogd2hpY2ggcmVuZGVycyBhIHNoYWRvd1Jvb3QuIFdoZW4gdGhpcyBpcyBkb25lLCB0eXBpY2FsbHkgdGhlIGVsZW1lbnQnc1xuICogYGxvY2FsTmFtZWAgc2hvdWxkIGJlIHVzZWQgYXMgdGhlIGBzY29wZU5hbWVgLlxuICpcbiAqIEluIGFkZGl0aW9uIHRvIERPTSBzY29waW5nLCBTaGFkeUNTUyBhbHNvIHN1cHBvcnRzIGEgYmFzaWMgc2hpbSBmb3IgY3NzXG4gKiBjdXN0b20gcHJvcGVydGllcyAobmVlZGVkIG9ubHkgb24gb2xkZXIgYnJvd3NlcnMgbGlrZSBJRTExKSBhbmQgYSBzaGltIGZvclxuICogYSBkZXByZWNhdGVkIGZlYXR1cmUgY2FsbGVkIGBAYXBwbHlgIHRoYXQgc3VwcG9ydHMgYXBwbHlpbmcgYSBzZXQgb2YgY3NzXG4gKiBjdXN0b20gcHJvcGVydGllcyB0byBhIGdpdmVuIGxvY2F0aW9uLlxuICpcbiAqIFVzYWdlIGNvbnNpZGVyYXRpb25zOlxuICpcbiAqICogUGFydCB2YWx1ZXMgaW4gYDxzdHlsZT5gIGVsZW1lbnRzIGFyZSBvbmx5IGFwcGxpZWQgdGhlIGZpcnN0IHRpbWUgYSBnaXZlblxuICogYHNjb3BlTmFtZWAgcmVuZGVycy4gU3Vic2VxdWVudCBjaGFuZ2VzIHRvIHBhcnRzIGluIHN0eWxlIGVsZW1lbnRzIHdpbGwgaGF2ZVxuICogbm8gZWZmZWN0LiBCZWNhdXNlIG9mIHRoaXMsIHBhcnRzIGluIHN0eWxlIGVsZW1lbnRzIHNob3VsZCBvbmx5IGJlIHVzZWQgZm9yXG4gKiB2YWx1ZXMgdGhhdCB3aWxsIG5ldmVyIGNoYW5nZSwgZm9yIGV4YW1wbGUgcGFydHMgdGhhdCBzZXQgc2NvcGUtd2lkZSB0aGVtZVxuICogdmFsdWVzIG9yIHBhcnRzIHdoaWNoIHJlbmRlciBzaGFyZWQgc3R5bGUgZWxlbWVudHMuXG4gKlxuICogKiBOb3RlLCBkdWUgdG8gYSBsaW1pdGF0aW9uIG9mIHRoZSBTaGFkeURPTSBwb2x5ZmlsbCwgcmVuZGVyaW5nIGluIGFcbiAqIGN1c3RvbSBlbGVtZW50J3MgYGNvbnN0cnVjdG9yYCBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkIHJlbmRlcmluZyBzaG91bGRcbiAqIGVpdGhlciBkb25lIGFzeW5jaHJvbm91c2x5LCBmb3IgZXhhbXBsZSBhdCBtaWNyb3Rhc2sgdGltaW5nIChmb3IgZXhhbXBsZVxuICogYFByb21pc2UucmVzb2x2ZSgpYCksIG9yIGJlIGRlZmVycmVkIHVudGlsIHRoZSBmaXJzdCB0aW1lIHRoZSBlbGVtZW50J3NcbiAqIGBjb25uZWN0ZWRDYWxsYmFja2AgcnVucy5cbiAqXG4gKiBVc2FnZSBjb25zaWRlcmF0aW9ucyB3aGVuIHVzaW5nIHNoaW1tZWQgY3VzdG9tIHByb3BlcnRpZXMgb3IgYEBhcHBseWA6XG4gKlxuICogKiBXaGVuZXZlciBhbnkgZHluYW1pYyBjaGFuZ2VzIGFyZSBtYWRlIHdoaWNoIGFmZmVjdFxuICogY3NzIGN1c3RvbSBwcm9wZXJ0aWVzLCBgU2hhZHlDU1Muc3R5bGVFbGVtZW50KGVsZW1lbnQpYCBtdXN0IGJlIGNhbGxlZFxuICogdG8gdXBkYXRlIHRoZSBlbGVtZW50LiBUaGVyZSBhcmUgdHdvIGNhc2VzIHdoZW4gdGhpcyBpcyBuZWVkZWQ6XG4gKiAoMSkgdGhlIGVsZW1lbnQgaXMgY29ubmVjdGVkIHRvIGEgbmV3IHBhcmVudCwgKDIpIGEgY2xhc3MgaXMgYWRkZWQgdG8gdGhlXG4gKiBlbGVtZW50IHRoYXQgY2F1c2VzIGl0IHRvIG1hdGNoIGRpZmZlcmVudCBjdXN0b20gcHJvcGVydGllcy5cbiAqIFRvIGFkZHJlc3MgdGhlIGZpcnN0IGNhc2Ugd2hlbiByZW5kZXJpbmcgYSBjdXN0b20gZWxlbWVudCwgYHN0eWxlRWxlbWVudGBcbiAqIHNob3VsZCBiZSBjYWxsZWQgaW4gdGhlIGVsZW1lbnQncyBgY29ubmVjdGVkQ2FsbGJhY2tgLlxuICpcbiAqICogU2hpbW1lZCBjdXN0b20gcHJvcGVydGllcyBtYXkgb25seSBiZSBkZWZpbmVkIGVpdGhlciBmb3IgYW4gZW50aXJlXG4gKiBzaGFkb3dSb290IChmb3IgZXhhbXBsZSwgaW4gYSBgOmhvc3RgIHJ1bGUpIG9yIHZpYSBhIHJ1bGUgdGhhdCBkaXJlY3RseVxuICogbWF0Y2hlcyBhbiBlbGVtZW50IHdpdGggYSBzaGFkb3dSb290LiBJbiBvdGhlciB3b3JkcywgaW5zdGVhZCBvZiBmbG93aW5nIGZyb21cbiAqIHBhcmVudCB0byBjaGlsZCBhcyBkbyBuYXRpdmUgY3NzIGN1c3RvbSBwcm9wZXJ0aWVzLCBzaGltbWVkIGN1c3RvbSBwcm9wZXJ0aWVzXG4gKiBmbG93IG9ubHkgZnJvbSBzaGFkb3dSb290cyB0byBuZXN0ZWQgc2hhZG93Um9vdHMuXG4gKlxuICogKiBXaGVuIHVzaW5nIGBAYXBwbHlgIG1peGluZyBjc3Mgc2hvcnRoYW5kIHByb3BlcnR5IG5hbWVzIHdpdGhcbiAqIG5vbi1zaG9ydGhhbmQgbmFtZXMgKGZvciBleGFtcGxlIGBib3JkZXJgIGFuZCBgYm9yZGVyLXdpZHRoYCkgaXMgbm90XG4gKiBzdXBwb3J0ZWQuXG4gKi9cbmV4cG9ydCBjb25zdCByZW5kZXIgPVxuICAgIChyZXN1bHQ6IFRlbXBsYXRlUmVzdWx0LFxuICAgICBjb250YWluZXI6IEVsZW1lbnR8RG9jdW1lbnRGcmFnbWVudCxcbiAgICAgb3B0aW9uczogU2hhZHlSZW5kZXJPcHRpb25zKSA9PiB7XG4gICAgICBjb25zdCBzY29wZU5hbWUgPSBvcHRpb25zLnNjb3BlTmFtZTtcbiAgICAgIGNvbnN0IGhhc1JlbmRlcmVkID0gcGFydHMuaGFzKGNvbnRhaW5lcik7XG4gICAgICBjb25zdCBuZWVkc1Njb3BpbmcgPSBjb250YWluZXIgaW5zdGFuY2VvZiBTaGFkb3dSb290ICYmXG4gICAgICAgICAgY29tcGF0aWJsZVNoYWR5Q1NTVmVyc2lvbiAmJiByZXN1bHQgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlc3VsdDtcbiAgICAgIC8vIEhhbmRsZSBmaXJzdCByZW5kZXIgdG8gYSBzY29wZSBzcGVjaWFsbHkuLi5cbiAgICAgIGNvbnN0IGZpcnN0U2NvcGVSZW5kZXIgPSBuZWVkc1Njb3BpbmcgJiYgIXNoYWR5UmVuZGVyU2V0LmhhcyhzY29wZU5hbWUpO1xuICAgICAgLy8gT24gZmlyc3Qgc2NvcGUgcmVuZGVyLCByZW5kZXIgaW50byBhIGZyYWdtZW50OyB0aGlzIGNhbm5vdCBiZSBhIHNpbmdsZVxuICAgICAgLy8gZnJhZ21lbnQgdGhhdCBpcyByZXVzZWQgc2luY2UgbmVzdGVkIHJlbmRlcnMgY2FuIG9jY3VyIHN5bmNocm9ub3VzbHkuXG4gICAgICBjb25zdCByZW5kZXJDb250YWluZXIgPVxuICAgICAgICAgIGZpcnN0U2NvcGVSZW5kZXIgPyBkb2N1bWVudC5jcmVhdGVEb2N1bWVudEZyYWdtZW50KCkgOiBjb250YWluZXI7XG4gICAgICBsaXRSZW5kZXIoXG4gICAgICAgICAgcmVzdWx0LFxuICAgICAgICAgIHJlbmRlckNvbnRhaW5lcixcbiAgICAgICAgICB7dGVtcGxhdGVGYWN0b3J5OiBzaGFkeVRlbXBsYXRlRmFjdG9yeShzY29wZU5hbWUpLCAuLi5vcHRpb25zfSBhc1xuICAgICAgICAgICAgICBSZW5kZXJPcHRpb25zKTtcbiAgICAgIC8vIFdoZW4gcGVyZm9ybWluZyBmaXJzdCBzY29wZSByZW5kZXIsXG4gICAgICAvLyAoMSkgV2UndmUgcmVuZGVyZWQgaW50byBhIGZyYWdtZW50IHNvIHRoYXQgdGhlcmUncyBhIGNoYW5jZSB0b1xuICAgICAgLy8gYHByZXBhcmVUZW1wbGF0ZVN0eWxlc2AgYmVmb3JlIHN1Yi1lbGVtZW50cyBoaXQgdGhlIERPTVxuICAgICAgLy8gKHdoaWNoIG1pZ2h0IGNhdXNlIHRoZW0gdG8gcmVuZGVyIGJhc2VkIG9uIGEgY29tbW9uIHBhdHRlcm4gb2ZcbiAgICAgIC8vIHJlbmRlcmluZyBpbiBhIGN1c3RvbSBlbGVtZW50J3MgYGNvbm5lY3RlZENhbGxiYWNrYCk7XG4gICAgICAvLyAoMikgU2NvcGUgdGhlIHRlbXBsYXRlIHdpdGggU2hhZHlDU1Mgb25lIHRpbWUgb25seSBmb3IgdGhpcyBzY29wZS5cbiAgICAgIC8vICgzKSBSZW5kZXIgdGhlIGZyYWdtZW50IGludG8gdGhlIGNvbnRhaW5lciBhbmQgbWFrZSBzdXJlIHRoZVxuICAgICAgLy8gY29udGFpbmVyIGtub3dzIGl0cyBgcGFydGAgaXMgdGhlIG9uZSB3ZSBqdXN0IHJlbmRlcmVkLiBUaGlzIGVuc3VyZXNcbiAgICAgIC8vIERPTSB3aWxsIGJlIHJlLXVzZWQgb24gc3Vic2VxdWVudCByZW5kZXJzLlxuICAgICAgaWYgKGZpcnN0U2NvcGVSZW5kZXIpIHtcbiAgICAgICAgY29uc3QgcGFydCA9IHBhcnRzLmdldChyZW5kZXJDb250YWluZXIpITtcbiAgICAgICAgcGFydHMuZGVsZXRlKHJlbmRlckNvbnRhaW5lcik7XG4gICAgICAgIGlmIChwYXJ0LnZhbHVlIGluc3RhbmNlb2YgVGVtcGxhdGVJbnN0YW5jZSkge1xuICAgICAgICAgIHByZXBhcmVUZW1wbGF0ZVN0eWxlcyhcbiAgICAgICAgICAgICAgcmVuZGVyQ29udGFpbmVyIGFzIERvY3VtZW50RnJhZ21lbnQsXG4gICAgICAgICAgICAgIHBhcnQudmFsdWUudGVtcGxhdGUsXG4gICAgICAgICAgICAgIHNjb3BlTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgcmVtb3ZlTm9kZXMoY29udGFpbmVyLCBjb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChyZW5kZXJDb250YWluZXIpO1xuICAgICAgICBwYXJ0cy5zZXQoY29udGFpbmVyLCBwYXJ0KTtcbiAgICAgIH1cbiAgICAgIC8vIEFmdGVyIGVsZW1lbnRzIGhhdmUgaGl0IHRoZSBET00sIHVwZGF0ZSBzdHlsaW5nIGlmIHRoaXMgaXMgdGhlXG4gICAgICAvLyBpbml0aWFsIHJlbmRlciB0byB0aGlzIGNvbnRhaW5lci5cbiAgICAgIC8vIFRoaXMgaXMgbmVlZGVkIHdoZW5ldmVyIGR5bmFtaWMgY2hhbmdlcyBhcmUgbWFkZSBzbyBpdCB3b3VsZCBiZVxuICAgICAgLy8gc2FmZXN0IHRvIGRvIGV2ZXJ5IHJlbmRlcjsgaG93ZXZlciwgdGhpcyB3b3VsZCByZWdyZXNzIHBlcmZvcm1hbmNlXG4gICAgICAvLyBzbyB3ZSBsZWF2ZSBpdCB1cCB0byB0aGUgdXNlciB0byBjYWxsIGBTaGFkeUNTU1Muc3R5bGVFbGVtZW50YFxuICAgICAgLy8gZm9yIGR5bmFtaWMgY2hhbmdlcy5cbiAgICAgIGlmICghaGFzUmVuZGVyZWQgJiYgbmVlZHNTY29waW5nKSB7XG4gICAgICAgIHdpbmRvdy5TaGFkeUNTUyEuc3R5bGVFbGVtZW50KChjb250YWluZXIgYXMgU2hhZG93Um9vdCkuaG9zdCk7XG4gICAgICB9XG4gICAgfTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuLyoqXG4gKiBXaGVuIHVzaW5nIENsb3N1cmUgQ29tcGlsZXIsIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkocHJvcGVydHksIG9iamVjdCkgaXNcbiAqIHJlcGxhY2VkIGF0IGNvbXBpbGUgdGltZSBieSB0aGUgbXVuZ2VkIG5hbWUgZm9yIG9iamVjdFtwcm9wZXJ0eV0uIFdlIGNhbm5vdFxuICogYWxpYXMgdGhpcyBmdW5jdGlvbiwgc28gd2UgaGF2ZSB0byB1c2UgYSBzbWFsbCBzaGltIHRoYXQgaGFzIHRoZSBzYW1lXG4gKiBiZWhhdmlvciB3aGVuIG5vdCBjb21waWxpbmcuXG4gKi9cbndpbmRvdy5KU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5ID1cbiAgICA8UCBleHRlbmRzIFByb3BlcnR5S2V5Pihwcm9wOiBQLCBfb2JqOiB1bmtub3duKTogUCA9PiBwcm9wO1xuXG5kZWNsYXJlIGdsb2JhbCB7XG4gIHZhciBKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5OiA8UCBleHRlbmRzIFByb3BlcnR5S2V5PihcbiAgICAgIHByb3A6IFAsIF9vYmo6IHVua25vd24pID0+IFA7XG5cbiAgaW50ZXJmYWNlIFdpbmRvdyB7XG4gICAgSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eTogdHlwZW9mIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHk7XG4gIH1cbn1cblxuLyoqXG4gKiBDb252ZXJ0cyBwcm9wZXJ0eSB2YWx1ZXMgdG8gYW5kIGZyb20gYXR0cmlidXRlIHZhbHVlcy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBDb21wbGV4QXR0cmlidXRlQ29udmVydGVyPFR5cGUgPSB1bmtub3duLCBUeXBlSGludCA9IHVua25vd24+IHtcbiAgLyoqXG4gICAqIEZ1bmN0aW9uIGNhbGxlZCB0byBjb252ZXJ0IGFuIGF0dHJpYnV0ZSB2YWx1ZSB0byBhIHByb3BlcnR5XG4gICAqIHZhbHVlLlxuICAgKi9cbiAgZnJvbUF0dHJpYnV0ZT8odmFsdWU6IHN0cmluZ3xudWxsLCB0eXBlPzogVHlwZUhpbnQpOiBUeXBlO1xuXG4gIC8qKlxuICAgKiBGdW5jdGlvbiBjYWxsZWQgdG8gY29udmVydCBhIHByb3BlcnR5IHZhbHVlIHRvIGFuIGF0dHJpYnV0ZVxuICAgKiB2YWx1ZS5cbiAgICpcbiAgICogSXQgcmV0dXJucyB1bmtub3duIGluc3RlYWQgb2Ygc3RyaW5nLCB0byBiZSBjb21wYXRpYmxlIHdpdGhcbiAgICogaHR0cHM6Ly9naXRodWIuY29tL1dJQ0cvdHJ1c3RlZC10eXBlcyAoYW5kIHNpbWlsYXIgZWZmb3J0cykuXG4gICAqL1xuICB0b0F0dHJpYnV0ZT8odmFsdWU6IFR5cGUsIHR5cGU/OiBUeXBlSGludCk6IHVua25vd247XG59XG5cbnR5cGUgQXR0cmlidXRlQ29udmVydGVyPFR5cGUgPSB1bmtub3duLCBUeXBlSGludCA9IHVua25vd24+ID1cbiAgICBDb21wbGV4QXR0cmlidXRlQ29udmVydGVyPFR5cGU+fCgodmFsdWU6IHN0cmluZywgdHlwZT86IFR5cGVIaW50KSA9PiBUeXBlKTtcblxuLyoqXG4gKiBEZWZpbmVzIG9wdGlvbnMgZm9yIGEgcHJvcGVydHkgYWNjZXNzb3IuXG4gKi9cbmV4cG9ydCBpbnRlcmZhY2UgUHJvcGVydHlEZWNsYXJhdGlvbjxUeXBlID0gdW5rbm93biwgVHlwZUhpbnQgPSB1bmtub3duPiB7XG4gIC8qKlxuICAgKiBJbmRpY2F0ZXMgaG93IGFuZCB3aGV0aGVyIHRoZSBwcm9wZXJ0eSBiZWNvbWVzIGFuIG9ic2VydmVkIGF0dHJpYnV0ZS5cbiAgICogSWYgdGhlIHZhbHVlIGlzIGBmYWxzZWAsIHRoZSBwcm9wZXJ0eSBpcyBub3QgYWRkZWQgdG8gYG9ic2VydmVkQXR0cmlidXRlc2AuXG4gICAqIElmIHRydWUgb3IgYWJzZW50LCB0aGUgbG93ZXJjYXNlZCBwcm9wZXJ0eSBuYW1lIGlzIG9ic2VydmVkIChlLmcuIGBmb29CYXJgXG4gICAqIGJlY29tZXMgYGZvb2JhcmApLiBJZiBhIHN0cmluZywgdGhlIHN0cmluZyB2YWx1ZSBpcyBvYnNlcnZlZCAoZS5nXG4gICAqIGBhdHRyaWJ1dGU6ICdmb28tYmFyJ2ApLlxuICAgKi9cbiAgcmVhZG9ubHkgYXR0cmlidXRlPzogYm9vbGVhbnxzdHJpbmc7XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyB0aGUgdHlwZSBvZiB0aGUgcHJvcGVydHkuIFRoaXMgaXMgdXNlZCBvbmx5IGFzIGEgaGludCBmb3IgdGhlXG4gICAqIGBjb252ZXJ0ZXJgIHRvIGRldGVybWluZSBob3cgdG8gY29udmVydCB0aGUgYXR0cmlidXRlXG4gICAqIHRvL2Zyb20gYSBwcm9wZXJ0eS5cbiAgICovXG4gIHJlYWRvbmx5IHR5cGU/OiBUeXBlSGludDtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIGhvdyB0byBjb252ZXJ0IHRoZSBhdHRyaWJ1dGUgdG8vZnJvbSBhIHByb3BlcnR5LiBJZiB0aGlzIHZhbHVlXG4gICAqIGlzIGEgZnVuY3Rpb24sIGl0IGlzIHVzZWQgdG8gY29udmVydCB0aGUgYXR0cmlidXRlIHZhbHVlIGEgdGhlIHByb3BlcnR5XG4gICAqIHZhbHVlLiBJZiBpdCdzIGFuIG9iamVjdCwgaXQgY2FuIGhhdmUga2V5cyBmb3IgYGZyb21BdHRyaWJ1dGVgIGFuZFxuICAgKiBgdG9BdHRyaWJ1dGVgLiBJZiBubyBgdG9BdHRyaWJ1dGVgIGZ1bmN0aW9uIGlzIHByb3ZpZGVkIGFuZFxuICAgKiBgcmVmbGVjdGAgaXMgc2V0IHRvIGB0cnVlYCwgdGhlIHByb3BlcnR5IHZhbHVlIGlzIHNldCBkaXJlY3RseSB0byB0aGVcbiAgICogYXR0cmlidXRlLiBBIGRlZmF1bHQgYGNvbnZlcnRlcmAgaXMgdXNlZCBpZiBub25lIGlzIHByb3ZpZGVkOyBpdCBzdXBwb3J0c1xuICAgKiBgQm9vbGVhbmAsIGBTdHJpbmdgLCBgTnVtYmVyYCwgYE9iamVjdGAsIGFuZCBgQXJyYXlgLiBOb3RlLFxuICAgKiB3aGVuIGEgcHJvcGVydHkgY2hhbmdlcyBhbmQgdGhlIGNvbnZlcnRlciBpcyB1c2VkIHRvIHVwZGF0ZSB0aGUgYXR0cmlidXRlLFxuICAgKiB0aGUgcHJvcGVydHkgaXMgbmV2ZXIgdXBkYXRlZCBhZ2FpbiBhcyBhIHJlc3VsdCBvZiB0aGUgYXR0cmlidXRlIGNoYW5naW5nLFxuICAgKiBhbmQgdmljZSB2ZXJzYS5cbiAgICovXG4gIHJlYWRvbmx5IGNvbnZlcnRlcj86IEF0dHJpYnV0ZUNvbnZlcnRlcjxUeXBlLCBUeXBlSGludD47XG5cbiAgLyoqXG4gICAqIEluZGljYXRlcyBpZiB0aGUgcHJvcGVydHkgc2hvdWxkIHJlZmxlY3QgdG8gYW4gYXR0cmlidXRlLlxuICAgKiBJZiBgdHJ1ZWAsIHdoZW4gdGhlIHByb3BlcnR5IGlzIHNldCwgdGhlIGF0dHJpYnV0ZSBpcyBzZXQgdXNpbmcgdGhlXG4gICAqIGF0dHJpYnV0ZSBuYW1lIGRldGVybWluZWQgYWNjb3JkaW5nIHRvIHRoZSBydWxlcyBmb3IgdGhlIGBhdHRyaWJ1dGVgXG4gICAqIHByb3BlcnR5IG9wdGlvbiBhbmQgdGhlIHZhbHVlIG9mIHRoZSBwcm9wZXJ0eSBjb252ZXJ0ZWQgdXNpbmcgdGhlIHJ1bGVzXG4gICAqIGZyb20gdGhlIGBjb252ZXJ0ZXJgIHByb3BlcnR5IG9wdGlvbi5cbiAgICovXG4gIHJlYWRvbmx5IHJlZmxlY3Q/OiBib29sZWFuO1xuXG4gIC8qKlxuICAgKiBBIGZ1bmN0aW9uIHRoYXQgaW5kaWNhdGVzIGlmIGEgcHJvcGVydHkgc2hvdWxkIGJlIGNvbnNpZGVyZWQgY2hhbmdlZCB3aGVuXG4gICAqIGl0IGlzIHNldC4gVGhlIGZ1bmN0aW9uIHNob3VsZCB0YWtlIHRoZSBgbmV3VmFsdWVgIGFuZCBgb2xkVmFsdWVgIGFuZFxuICAgKiByZXR1cm4gYHRydWVgIGlmIGFuIHVwZGF0ZSBzaG91bGQgYmUgcmVxdWVzdGVkLlxuICAgKi9cbiAgaGFzQ2hhbmdlZD8odmFsdWU6IFR5cGUsIG9sZFZhbHVlOiBUeXBlKTogYm9vbGVhbjtcblxuICAvKipcbiAgICogSW5kaWNhdGVzIHdoZXRoZXIgYW4gYWNjZXNzb3Igd2lsbCBiZSBjcmVhdGVkIGZvciB0aGlzIHByb3BlcnR5LiBCeVxuICAgKiBkZWZhdWx0LCBhbiBhY2Nlc3NvciB3aWxsIGJlIGdlbmVyYXRlZCBmb3IgdGhpcyBwcm9wZXJ0eSB0aGF0IHJlcXVlc3RzIGFuXG4gICAqIHVwZGF0ZSB3aGVuIHNldC4gSWYgdGhpcyBmbGFnIGlzIGB0cnVlYCwgbm8gYWNjZXNzb3Igd2lsbCBiZSBjcmVhdGVkLCBhbmRcbiAgICogaXQgd2lsbCBiZSB0aGUgdXNlcidzIHJlc3BvbnNpYmlsaXR5IHRvIGNhbGxcbiAgICogYHRoaXMucmVxdWVzdFVwZGF0ZShwcm9wZXJ0eU5hbWUsIG9sZFZhbHVlKWAgdG8gcmVxdWVzdCBhbiB1cGRhdGUgd2hlblxuICAgKiB0aGUgcHJvcGVydHkgY2hhbmdlcy5cbiAgICovXG4gIHJlYWRvbmx5IG5vQWNjZXNzb3I/OiBib29sZWFuO1xufVxuXG4vKipcbiAqIE1hcCBvZiBwcm9wZXJ0aWVzIHRvIFByb3BlcnR5RGVjbGFyYXRpb24gb3B0aW9ucy4gRm9yIGVhY2ggcHJvcGVydHkgYW5cbiAqIGFjY2Vzc29yIGlzIG1hZGUsIGFuZCB0aGUgcHJvcGVydHkgaXMgcHJvY2Vzc2VkIGFjY29yZGluZyB0byB0aGVcbiAqIFByb3BlcnR5RGVjbGFyYXRpb24gb3B0aW9ucy5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQcm9wZXJ0eURlY2xhcmF0aW9ucyB7XG4gIHJlYWRvbmx5IFtrZXk6IHN0cmluZ106IFByb3BlcnR5RGVjbGFyYXRpb247XG59XG5cbnR5cGUgUHJvcGVydHlEZWNsYXJhdGlvbk1hcCA9IE1hcDxQcm9wZXJ0eUtleSwgUHJvcGVydHlEZWNsYXJhdGlvbj47XG5cbnR5cGUgQXR0cmlidXRlTWFwID0gTWFwPHN0cmluZywgUHJvcGVydHlLZXk+O1xuXG5leHBvcnQgdHlwZSBQcm9wZXJ0eVZhbHVlcyA9IE1hcDxQcm9wZXJ0eUtleSwgdW5rbm93bj47XG5cbmV4cG9ydCBjb25zdCBkZWZhdWx0Q29udmVydGVyOiBDb21wbGV4QXR0cmlidXRlQ29udmVydGVyID0ge1xuXG4gIHRvQXR0cmlidXRlKHZhbHVlOiB1bmtub3duLCB0eXBlPzogdW5rbm93bik6IHVua25vd24ge1xuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgY2FzZSBCb29sZWFuOlxuICAgICAgICByZXR1cm4gdmFsdWUgPyAnJyA6IG51bGw7XG4gICAgICBjYXNlIE9iamVjdDpcbiAgICAgIGNhc2UgQXJyYXk6XG4gICAgICAgIC8vIGlmIHRoZSB2YWx1ZSBpcyBgbnVsbGAgb3IgYHVuZGVmaW5lZGAgcGFzcyB0aGlzIHRocm91Z2hcbiAgICAgICAgLy8gdG8gYWxsb3cgcmVtb3Zpbmcvbm8gY2hhbmdlIGJlaGF2aW9yLlxuICAgICAgICByZXR1cm4gdmFsdWUgPT0gbnVsbCA/IHZhbHVlIDogSlNPTi5zdHJpbmdpZnkodmFsdWUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG5cbiAgZnJvbUF0dHJpYnV0ZSh2YWx1ZTogc3RyaW5nfG51bGwsIHR5cGU/OiB1bmtub3duKSB7XG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlIEJvb2xlYW46XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gbnVsbDtcbiAgICAgIGNhc2UgTnVtYmVyOlxuICAgICAgICByZXR1cm4gdmFsdWUgPT09IG51bGwgPyBudWxsIDogTnVtYmVyKHZhbHVlKTtcbiAgICAgIGNhc2UgT2JqZWN0OlxuICAgICAgY2FzZSBBcnJheTpcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2UodmFsdWUhKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG5cbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgSGFzQ2hhbmdlZCB7XG4gICh2YWx1ZTogdW5rbm93biwgb2xkOiB1bmtub3duKTogYm9vbGVhbjtcbn1cblxuLyoqXG4gKiBDaGFuZ2UgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRydWUgaWYgYHZhbHVlYCBpcyBkaWZmZXJlbnQgZnJvbSBgb2xkVmFsdWVgLlxuICogVGhpcyBtZXRob2QgaXMgdXNlZCBhcyB0aGUgZGVmYXVsdCBmb3IgYSBwcm9wZXJ0eSdzIGBoYXNDaGFuZ2VkYCBmdW5jdGlvbi5cbiAqL1xuZXhwb3J0IGNvbnN0IG5vdEVxdWFsOiBIYXNDaGFuZ2VkID0gKHZhbHVlOiB1bmtub3duLCBvbGQ6IHVua25vd24pOiBib29sZWFuID0+IHtcbiAgLy8gVGhpcyBlbnN1cmVzIChvbGQ9PU5hTiwgdmFsdWU9PU5hTikgYWx3YXlzIHJldHVybnMgZmFsc2VcbiAgcmV0dXJuIG9sZCAhPT0gdmFsdWUgJiYgKG9sZCA9PT0gb2xkIHx8IHZhbHVlID09PSB2YWx1ZSk7XG59O1xuXG5jb25zdCBkZWZhdWx0UHJvcGVydHlEZWNsYXJhdGlvbjogUHJvcGVydHlEZWNsYXJhdGlvbiA9IHtcbiAgYXR0cmlidXRlOiB0cnVlLFxuICB0eXBlOiBTdHJpbmcsXG4gIGNvbnZlcnRlcjogZGVmYXVsdENvbnZlcnRlcixcbiAgcmVmbGVjdDogZmFsc2UsXG4gIGhhc0NoYW5nZWQ6IG5vdEVxdWFsXG59O1xuXG5jb25zdCBtaWNyb3Rhc2tQcm9taXNlID0gUHJvbWlzZS5yZXNvbHZlKHRydWUpO1xuXG5jb25zdCBTVEFURV9IQVNfVVBEQVRFRCA9IDE7XG5jb25zdCBTVEFURV9VUERBVEVfUkVRVUVTVEVEID0gMSA8PCAyO1xuY29uc3QgU1RBVEVfSVNfUkVGTEVDVElOR19UT19BVFRSSUJVVEUgPSAxIDw8IDM7XG5jb25zdCBTVEFURV9JU19SRUZMRUNUSU5HX1RPX1BST1BFUlRZID0gMSA8PCA0O1xuY29uc3QgU1RBVEVfSEFTX0NPTk5FQ1RFRCA9IDEgPDwgNTtcbnR5cGUgVXBkYXRlU3RhdGUgPSB0eXBlb2YgU1RBVEVfSEFTX1VQREFURUR8dHlwZW9mIFNUQVRFX1VQREFURV9SRVFVRVNURUR8XG4gICAgdHlwZW9mIFNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fQVRUUklCVVRFfFxuICAgIHR5cGVvZiBTVEFURV9JU19SRUZMRUNUSU5HX1RPX1BST1BFUlRZfHR5cGVvZiBTVEFURV9IQVNfQ09OTkVDVEVEO1xuXG4vKipcbiAqIEJhc2UgZWxlbWVudCBjbGFzcyB3aGljaCBtYW5hZ2VzIGVsZW1lbnQgcHJvcGVydGllcyBhbmQgYXR0cmlidXRlcy4gV2hlblxuICogcHJvcGVydGllcyBjaGFuZ2UsIHRoZSBgdXBkYXRlYCBtZXRob2QgaXMgYXN5bmNocm9ub3VzbHkgY2FsbGVkLiBUaGlzIG1ldGhvZFxuICogc2hvdWxkIGJlIHN1cHBsaWVkIGJ5IHN1YmNsYXNzZXJzIHRvIHJlbmRlciB1cGRhdGVzIGFzIGRlc2lyZWQuXG4gKi9cbmV4cG9ydCBhYnN0cmFjdCBjbGFzcyBVcGRhdGluZ0VsZW1lbnQgZXh0ZW5kcyBIVE1MRWxlbWVudCB7XG4gIC8qXG4gICAqIER1ZSB0byBjbG9zdXJlIGNvbXBpbGVyIEVTNiBjb21waWxhdGlvbiBidWdzLCBAbm9jb2xsYXBzZSBpcyByZXF1aXJlZCBvblxuICAgKiBhbGwgc3RhdGljIG1ldGhvZHMgYW5kIHByb3BlcnRpZXMgd2l0aCBpbml0aWFsaXplcnMuICBSZWZlcmVuY2U6XG4gICAqIC0gaHR0cHM6Ly9naXRodWIuY29tL2dvb2dsZS9jbG9zdXJlLWNvbXBpbGVyL2lzc3Vlcy8xNzc2XG4gICAqL1xuXG4gIC8qKlxuICAgKiBNYXBzIGF0dHJpYnV0ZSBuYW1lcyB0byBwcm9wZXJ0aWVzOyBmb3IgZXhhbXBsZSBgZm9vYmFyYCBhdHRyaWJ1dGUgdG9cbiAgICogYGZvb0JhcmAgcHJvcGVydHkuIENyZWF0ZWQgbGF6aWx5IG9uIHVzZXIgc3ViY2xhc3NlcyB3aGVuIGZpbmFsaXppbmcgdGhlXG4gICAqIGNsYXNzLlxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgX2F0dHJpYnV0ZVRvUHJvcGVydHlNYXA6IEF0dHJpYnV0ZU1hcDtcblxuICAvKipcbiAgICogTWFya3MgY2xhc3MgYXMgaGF2aW5nIGZpbmlzaGVkIGNyZWF0aW5nIHByb3BlcnRpZXMuXG4gICAqL1xuICBwcm90ZWN0ZWQgc3RhdGljIGZpbmFsaXplZCA9IHRydWU7XG5cbiAgLyoqXG4gICAqIE1lbW9pemVkIGxpc3Qgb2YgYWxsIGNsYXNzIHByb3BlcnRpZXMsIGluY2x1ZGluZyBhbnkgc3VwZXJjbGFzcyBwcm9wZXJ0aWVzLlxuICAgKiBDcmVhdGVkIGxhemlseSBvbiB1c2VyIHN1YmNsYXNzZXMgd2hlbiBmaW5hbGl6aW5nIHRoZSBjbGFzcy5cbiAgICovXG4gIHByaXZhdGUgc3RhdGljIF9jbGFzc1Byb3BlcnRpZXM/OiBQcm9wZXJ0eURlY2xhcmF0aW9uTWFwO1xuXG4gIC8qKlxuICAgKiBVc2VyLXN1cHBsaWVkIG9iamVjdCB0aGF0IG1hcHMgcHJvcGVydHkgbmFtZXMgdG8gYFByb3BlcnR5RGVjbGFyYXRpb25gXG4gICAqIG9iamVjdHMgY29udGFpbmluZyBvcHRpb25zIGZvciBjb25maWd1cmluZyB0aGUgcHJvcGVydHkuXG4gICAqL1xuICBzdGF0aWMgcHJvcGVydGllczogUHJvcGVydHlEZWNsYXJhdGlvbnM7XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBsaXN0IG9mIGF0dHJpYnV0ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcmVnaXN0ZXJlZCBwcm9wZXJ0aWVzLlxuICAgKiBAbm9jb2xsYXBzZVxuICAgKi9cbiAgc3RhdGljIGdldCBvYnNlcnZlZEF0dHJpYnV0ZXMoKSB7XG4gICAgLy8gbm90ZTogcGlnZ3kgYmFja2luZyBvbiB0aGlzIHRvIGVuc3VyZSB3ZSdyZSBmaW5hbGl6ZWQuXG4gICAgdGhpcy5maW5hbGl6ZSgpO1xuICAgIGNvbnN0IGF0dHJpYnV0ZXM6IHN0cmluZ1tdID0gW107XG4gICAgLy8gVXNlIGZvckVhY2ggc28gdGhpcyB3b3JrcyBldmVuIGlmIGZvci9vZiBsb29wcyBhcmUgY29tcGlsZWQgdG8gZm9yIGxvb3BzXG4gICAgLy8gZXhwZWN0aW5nIGFycmF5c1xuICAgIHRoaXMuX2NsYXNzUHJvcGVydGllcyEuZm9yRWFjaCgodiwgcCkgPT4ge1xuICAgICAgY29uc3QgYXR0ciA9IHRoaXMuX2F0dHJpYnV0ZU5hbWVGb3JQcm9wZXJ0eShwLCB2KTtcbiAgICAgIGlmIChhdHRyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGhpcy5fYXR0cmlidXRlVG9Qcm9wZXJ0eU1hcC5zZXQoYXR0ciwgcCk7XG4gICAgICAgIGF0dHJpYnV0ZXMucHVzaChhdHRyKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gYXR0cmlidXRlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBFbnN1cmVzIHRoZSBwcml2YXRlIGBfY2xhc3NQcm9wZXJ0aWVzYCBwcm9wZXJ0eSBtZXRhZGF0YSBpcyBjcmVhdGVkLlxuICAgKiBJbiBhZGRpdGlvbiB0byBgZmluYWxpemVgIHRoaXMgaXMgYWxzbyBjYWxsZWQgaW4gYGNyZWF0ZVByb3BlcnR5YCB0b1xuICAgKiBlbnN1cmUgdGhlIGBAcHJvcGVydHlgIGRlY29yYXRvciBjYW4gYWRkIHByb3BlcnR5IG1ldGFkYXRhLlxuICAgKi9cbiAgLyoqIEBub2NvbGxhcHNlICovXG4gIHByaXZhdGUgc3RhdGljIF9lbnN1cmVDbGFzc1Byb3BlcnRpZXMoKSB7XG4gICAgLy8gZW5zdXJlIHByaXZhdGUgc3RvcmFnZSBmb3IgcHJvcGVydHkgZGVjbGFyYXRpb25zLlxuICAgIGlmICghdGhpcy5oYXNPd25Qcm9wZXJ0eShcbiAgICAgICAgICAgIEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ19jbGFzc1Byb3BlcnRpZXMnLCB0aGlzKSkpIHtcbiAgICAgIHRoaXMuX2NsYXNzUHJvcGVydGllcyA9IG5ldyBNYXAoKTtcbiAgICAgIC8vIE5PVEU6IFdvcmthcm91bmQgSUUxMSBub3Qgc3VwcG9ydGluZyBNYXAgY29uc3RydWN0b3IgYXJndW1lbnQuXG4gICAgICBjb25zdCBzdXBlclByb3BlcnRpZXM6IFByb3BlcnR5RGVjbGFyYXRpb25NYXAgPVxuICAgICAgICAgIE9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKS5fY2xhc3NQcm9wZXJ0aWVzO1xuICAgICAgaWYgKHN1cGVyUHJvcGVydGllcyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHN1cGVyUHJvcGVydGllcy5mb3JFYWNoKFxuICAgICAgICAgICAgKHY6IFByb3BlcnR5RGVjbGFyYXRpb24sIGs6IFByb3BlcnR5S2V5KSA9PlxuICAgICAgICAgICAgICAgIHRoaXMuX2NsYXNzUHJvcGVydGllcyEuc2V0KGssIHYpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyBhIHByb3BlcnR5IGFjY2Vzc29yIG9uIHRoZSBlbGVtZW50IHByb3RvdHlwZSBpZiBvbmUgZG9lcyBub3QgZXhpc3QuXG4gICAqIFRoZSBwcm9wZXJ0eSBzZXR0ZXIgY2FsbHMgdGhlIHByb3BlcnR5J3MgYGhhc0NoYW5nZWRgIHByb3BlcnR5IG9wdGlvblxuICAgKiBvciB1c2VzIGEgc3RyaWN0IGlkZW50aXR5IGNoZWNrIHRvIGRldGVybWluZSB3aGV0aGVyIG9yIG5vdCB0byByZXF1ZXN0XG4gICAqIGFuIHVwZGF0ZS5cbiAgICogQG5vY29sbGFwc2VcbiAgICovXG4gIHN0YXRpYyBjcmVhdGVQcm9wZXJ0eShcbiAgICAgIG5hbWU6IFByb3BlcnR5S2V5LFxuICAgICAgb3B0aW9uczogUHJvcGVydHlEZWNsYXJhdGlvbiA9IGRlZmF1bHRQcm9wZXJ0eURlY2xhcmF0aW9uKSB7XG4gICAgLy8gTm90ZSwgc2luY2UgdGhpcyBjYW4gYmUgY2FsbGVkIGJ5IHRoZSBgQHByb3BlcnR5YCBkZWNvcmF0b3Igd2hpY2hcbiAgICAvLyBpcyBjYWxsZWQgYmVmb3JlIGBmaW5hbGl6ZWAsIHdlIGVuc3VyZSBzdG9yYWdlIGV4aXN0cyBmb3IgcHJvcGVydHlcbiAgICAvLyBtZXRhZGF0YS5cbiAgICB0aGlzLl9lbnN1cmVDbGFzc1Byb3BlcnRpZXMoKTtcbiAgICB0aGlzLl9jbGFzc1Byb3BlcnRpZXMhLnNldChuYW1lLCBvcHRpb25zKTtcbiAgICAvLyBEbyBub3QgZ2VuZXJhdGUgYW4gYWNjZXNzb3IgaWYgdGhlIHByb3RvdHlwZSBhbHJlYWR5IGhhcyBvbmUsIHNpbmNlXG4gICAgLy8gaXQgd291bGQgYmUgbG9zdCBvdGhlcndpc2UgYW5kIHRoYXQgd291bGQgbmV2ZXIgYmUgdGhlIHVzZXIncyBpbnRlbnRpb247XG4gICAgLy8gSW5zdGVhZCwgd2UgZXhwZWN0IHVzZXJzIHRvIGNhbGwgYHJlcXVlc3RVcGRhdGVgIHRoZW1zZWx2ZXMgZnJvbVxuICAgIC8vIHVzZXItZGVmaW5lZCBhY2Nlc3NvcnMuIE5vdGUgdGhhdCBpZiB0aGUgc3VwZXIgaGFzIGFuIGFjY2Vzc29yIHdlIHdpbGxcbiAgICAvLyBzdGlsbCBvdmVyd3JpdGUgaXRcbiAgICBpZiAob3B0aW9ucy5ub0FjY2Vzc29yIHx8IHRoaXMucHJvdG90eXBlLmhhc093blByb3BlcnR5KG5hbWUpKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGtleSA9IHR5cGVvZiBuYW1lID09PSAnc3ltYm9sJyA/IFN5bWJvbCgpIDogYF9fJHtuYW1lfWA7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMucHJvdG90eXBlLCBuYW1lLCB7XG4gICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IG5vIHN5bWJvbCBpbiBpbmRleFxuICAgICAgZ2V0KCk6IGFueSB7XG4gICAgICAgIHJldHVybiB0aGlzW2tleV07XG4gICAgICB9LFxuICAgICAgc2V0KHRoaXM6IFVwZGF0aW5nRWxlbWVudCwgdmFsdWU6IHVua25vd24pIHtcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueSBubyBzeW1ib2wgaW4gaW5kZXhcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSAodGhpcyBhcyBhbnkpW25hbWVdO1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IG5vIHN5bWJvbCBpbiBpbmRleFxuICAgICAgICAodGhpcyBhcyBhbnkpW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgdGhpcy5fcmVxdWVzdFVwZGF0ZShuYW1lLCBvbGRWYWx1ZSk7XG4gICAgICB9LFxuICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgcHJvcGVydHkgYWNjZXNzb3JzIGZvciByZWdpc3RlcmVkIHByb3BlcnRpZXMgYW5kIGVuc3VyZXNcbiAgICogYW55IHN1cGVyY2xhc3NlcyBhcmUgYWxzbyBmaW5hbGl6ZWQuXG4gICAqIEBub2NvbGxhcHNlXG4gICAqL1xuICBwcm90ZWN0ZWQgc3RhdGljIGZpbmFsaXplKCkge1xuICAgIGlmICh0aGlzLmhhc093blByb3BlcnR5KEpTQ29tcGlsZXJfcmVuYW1lUHJvcGVydHkoJ2ZpbmFsaXplZCcsIHRoaXMpKSAmJlxuICAgICAgICB0aGlzLmZpbmFsaXplZCkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICAvLyBmaW5hbGl6ZSBhbnkgc3VwZXJjbGFzc2VzXG4gICAgY29uc3Qgc3VwZXJDdG9yID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpO1xuICAgIGlmICh0eXBlb2Ygc3VwZXJDdG9yLmZpbmFsaXplID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBzdXBlckN0b3IuZmluYWxpemUoKTtcbiAgICB9XG4gICAgdGhpcy5maW5hbGl6ZWQgPSB0cnVlO1xuICAgIHRoaXMuX2Vuc3VyZUNsYXNzUHJvcGVydGllcygpO1xuICAgIC8vIGluaXRpYWxpemUgTWFwIHBvcHVsYXRlZCBpbiBvYnNlcnZlZEF0dHJpYnV0ZXNcbiAgICB0aGlzLl9hdHRyaWJ1dGVUb1Byb3BlcnR5TWFwID0gbmV3IE1hcCgpO1xuICAgIC8vIG1ha2UgYW55IHByb3BlcnRpZXNcbiAgICAvLyBOb3RlLCBvbmx5IHByb2Nlc3MgXCJvd25cIiBwcm9wZXJ0aWVzIHNpbmNlIHRoaXMgZWxlbWVudCB3aWxsIGluaGVyaXRcbiAgICAvLyBhbnkgcHJvcGVydGllcyBkZWZpbmVkIG9uIHRoZSBzdXBlckNsYXNzLCBhbmQgZmluYWxpemF0aW9uIGVuc3VyZXNcbiAgICAvLyB0aGUgZW50aXJlIHByb3RvdHlwZSBjaGFpbiBpcyBmaW5hbGl6ZWQuXG4gICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkoSlNDb21waWxlcl9yZW5hbWVQcm9wZXJ0eSgncHJvcGVydGllcycsIHRoaXMpKSkge1xuICAgICAgY29uc3QgcHJvcHMgPSB0aGlzLnByb3BlcnRpZXM7XG4gICAgICAvLyBzdXBwb3J0IHN5bWJvbHMgaW4gcHJvcGVydGllcyAoSUUxMSBkb2VzIG5vdCBzdXBwb3J0IHRoaXMpXG4gICAgICBjb25zdCBwcm9wS2V5cyA9IFtcbiAgICAgICAgLi4uT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMocHJvcHMpLFxuICAgICAgICAuLi4odHlwZW9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPT09ICdmdW5jdGlvbicpID9cbiAgICAgICAgICAgIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMocHJvcHMpIDpcbiAgICAgICAgICAgIFtdXG4gICAgICBdO1xuICAgICAgLy8gVGhpcyBmb3Ivb2YgaXMgb2sgYmVjYXVzZSBwcm9wS2V5cyBpcyBhbiBhcnJheVxuICAgICAgZm9yIChjb25zdCBwIG9mIHByb3BLZXlzKSB7XG4gICAgICAgIC8vIG5vdGUsIHVzZSBvZiBgYW55YCBpcyBkdWUgdG8gVHlwZVNyaXB0IGxhY2sgb2Ygc3VwcG9ydCBmb3Igc3ltYm9sIGluXG4gICAgICAgIC8vIGluZGV4IHR5cGVzXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgbm8gc3ltYm9sIGluIGluZGV4XG4gICAgICAgIHRoaXMuY3JlYXRlUHJvcGVydHkocCwgKHByb3BzIGFzIGFueSlbcF0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBuYW1lIGZvciB0aGUgZ2l2ZW4gYXR0cmlidXRlIGBuYW1lYC5cbiAgICogQG5vY29sbGFwc2VcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIF9hdHRyaWJ1dGVOYW1lRm9yUHJvcGVydHkoXG4gICAgICBuYW1lOiBQcm9wZXJ0eUtleSwgb3B0aW9uczogUHJvcGVydHlEZWNsYXJhdGlvbikge1xuICAgIGNvbnN0IGF0dHJpYnV0ZSA9IG9wdGlvbnMuYXR0cmlidXRlO1xuICAgIHJldHVybiBhdHRyaWJ1dGUgPT09IGZhbHNlID9cbiAgICAgICAgdW5kZWZpbmVkIDpcbiAgICAgICAgKHR5cGVvZiBhdHRyaWJ1dGUgPT09ICdzdHJpbmcnID9cbiAgICAgICAgICAgICBhdHRyaWJ1dGUgOlxuICAgICAgICAgICAgICh0eXBlb2YgbmFtZSA9PT0gJ3N0cmluZycgPyBuYW1lLnRvTG93ZXJDYXNlKCkgOiB1bmRlZmluZWQpKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRydWUgaWYgYSBwcm9wZXJ0eSBzaG91bGQgcmVxdWVzdCBhbiB1cGRhdGUuXG4gICAqIENhbGxlZCB3aGVuIGEgcHJvcGVydHkgdmFsdWUgaXMgc2V0IGFuZCB1c2VzIHRoZSBgaGFzQ2hhbmdlZGBcbiAgICogb3B0aW9uIGZvciB0aGUgcHJvcGVydHkgaWYgcHJlc2VudCBvciBhIHN0cmljdCBpZGVudGl0eSBjaGVjay5cbiAgICogQG5vY29sbGFwc2VcbiAgICovXG4gIHByaXZhdGUgc3RhdGljIF92YWx1ZUhhc0NoYW5nZWQoXG4gICAgICB2YWx1ZTogdW5rbm93biwgb2xkOiB1bmtub3duLCBoYXNDaGFuZ2VkOiBIYXNDaGFuZ2VkID0gbm90RXF1YWwpIHtcbiAgICByZXR1cm4gaGFzQ2hhbmdlZCh2YWx1ZSwgb2xkKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZSBmb3IgdGhlIGdpdmVuIGF0dHJpYnV0ZSB2YWx1ZS5cbiAgICogQ2FsbGVkIHZpYSB0aGUgYGF0dHJpYnV0ZUNoYW5nZWRDYWxsYmFja2AgYW5kIHVzZXMgdGhlIHByb3BlcnR5J3NcbiAgICogYGNvbnZlcnRlcmAgb3IgYGNvbnZlcnRlci5mcm9tQXR0cmlidXRlYCBwcm9wZXJ0eSBvcHRpb24uXG4gICAqIEBub2NvbGxhcHNlXG4gICAqL1xuICBwcml2YXRlIHN0YXRpYyBfcHJvcGVydHlWYWx1ZUZyb21BdHRyaWJ1dGUoXG4gICAgICB2YWx1ZTogc3RyaW5nfG51bGwsIG9wdGlvbnM6IFByb3BlcnR5RGVjbGFyYXRpb24pIHtcbiAgICBjb25zdCB0eXBlID0gb3B0aW9ucy50eXBlO1xuICAgIGNvbnN0IGNvbnZlcnRlciA9IG9wdGlvbnMuY29udmVydGVyIHx8IGRlZmF1bHRDb252ZXJ0ZXI7XG4gICAgY29uc3QgZnJvbUF0dHJpYnV0ZSA9XG4gICAgICAgICh0eXBlb2YgY29udmVydGVyID09PSAnZnVuY3Rpb24nID8gY29udmVydGVyIDogY29udmVydGVyLmZyb21BdHRyaWJ1dGUpO1xuICAgIHJldHVybiBmcm9tQXR0cmlidXRlID8gZnJvbUF0dHJpYnV0ZSh2YWx1ZSwgdHlwZSkgOiB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBhdHRyaWJ1dGUgdmFsdWUgZm9yIHRoZSBnaXZlbiBwcm9wZXJ0eSB2YWx1ZS4gSWYgdGhpc1xuICAgKiByZXR1cm5zIHVuZGVmaW5lZCwgdGhlIHByb3BlcnR5IHdpbGwgKm5vdCogYmUgcmVmbGVjdGVkIHRvIGFuIGF0dHJpYnV0ZS5cbiAgICogSWYgdGhpcyByZXR1cm5zIG51bGwsIHRoZSBhdHRyaWJ1dGUgd2lsbCBiZSByZW1vdmVkLCBvdGhlcndpc2UgdGhlXG4gICAqIGF0dHJpYnV0ZSB3aWxsIGJlIHNldCB0byB0aGUgdmFsdWUuXG4gICAqIFRoaXMgdXNlcyB0aGUgcHJvcGVydHkncyBgcmVmbGVjdGAgYW5kIGB0eXBlLnRvQXR0cmlidXRlYCBwcm9wZXJ0eSBvcHRpb25zLlxuICAgKiBAbm9jb2xsYXBzZVxuICAgKi9cbiAgcHJpdmF0ZSBzdGF0aWMgX3Byb3BlcnR5VmFsdWVUb0F0dHJpYnV0ZShcbiAgICAgIHZhbHVlOiB1bmtub3duLCBvcHRpb25zOiBQcm9wZXJ0eURlY2xhcmF0aW9uKSB7XG4gICAgaWYgKG9wdGlvbnMucmVmbGVjdCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IHR5cGUgPSBvcHRpb25zLnR5cGU7XG4gICAgY29uc3QgY29udmVydGVyID0gb3B0aW9ucy5jb252ZXJ0ZXI7XG4gICAgY29uc3QgdG9BdHRyaWJ1dGUgPVxuICAgICAgICBjb252ZXJ0ZXIgJiYgKGNvbnZlcnRlciBhcyBDb21wbGV4QXR0cmlidXRlQ29udmVydGVyKS50b0F0dHJpYnV0ZSB8fFxuICAgICAgICBkZWZhdWx0Q29udmVydGVyLnRvQXR0cmlidXRlO1xuICAgIHJldHVybiB0b0F0dHJpYnV0ZSEodmFsdWUsIHR5cGUpO1xuICB9XG5cbiAgcHJpdmF0ZSBfdXBkYXRlU3RhdGU6IFVwZGF0ZVN0YXRlID0gMDtcbiAgcHJpdmF0ZSBfaW5zdGFuY2VQcm9wZXJ0aWVzOiBQcm9wZXJ0eVZhbHVlc3x1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG4gIHByaXZhdGUgX3VwZGF0ZVByb21pc2U6IFByb21pc2U8dW5rbm93bj4gPSBtaWNyb3Rhc2tQcm9taXNlO1xuICBwcml2YXRlIF9oYXNDb25uZWN0ZWRSZXNvbHZlcjogKCgpID0+IHZvaWQpfHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAvKipcbiAgICogTWFwIHdpdGgga2V5cyBmb3IgYW55IHByb3BlcnRpZXMgdGhhdCBoYXZlIGNoYW5nZWQgc2luY2UgdGhlIGxhc3RcbiAgICogdXBkYXRlIGN5Y2xlIHdpdGggcHJldmlvdXMgdmFsdWVzLlxuICAgKi9cbiAgcHJpdmF0ZSBfY2hhbmdlZFByb3BlcnRpZXM6IFByb3BlcnR5VmFsdWVzID0gbmV3IE1hcCgpO1xuXG4gIC8qKlxuICAgKiBNYXAgd2l0aCBrZXlzIG9mIHByb3BlcnRpZXMgdGhhdCBzaG91bGQgYmUgcmVmbGVjdGVkIHdoZW4gdXBkYXRlZC5cbiAgICovXG4gIHByaXZhdGUgX3JlZmxlY3RpbmdQcm9wZXJ0aWVzOiBNYXA8UHJvcGVydHlLZXksIFByb3BlcnR5RGVjbGFyYXRpb24+fFxuICAgICAgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5pbml0aWFsaXplKCk7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgZWxlbWVudCBpbml0aWFsaXphdGlvbi4gQnkgZGVmYXVsdCBjYXB0dXJlcyBhbnkgcHJlLXNldCB2YWx1ZXMgZm9yXG4gICAqIHJlZ2lzdGVyZWQgcHJvcGVydGllcy5cbiAgICovXG4gIHByb3RlY3RlZCBpbml0aWFsaXplKCkge1xuICAgIHRoaXMuX3NhdmVJbnN0YW5jZVByb3BlcnRpZXMoKTtcbiAgICAvLyBlbnN1cmVzIGZpcnN0IHVwZGF0ZSB3aWxsIGJlIGNhdWdodCBieSBhbiBlYXJseSBhY2Nlc3Mgb2YgYHVwZGF0ZUNvbXBsZXRlYFxuICAgIHRoaXMuX3JlcXVlc3RVcGRhdGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGaXhlcyBhbnkgcHJvcGVydGllcyBzZXQgb24gdGhlIGluc3RhbmNlIGJlZm9yZSB1cGdyYWRlIHRpbWUuXG4gICAqIE90aGVyd2lzZSB0aGVzZSB3b3VsZCBzaGFkb3cgdGhlIGFjY2Vzc29yIGFuZCBicmVhayB0aGVzZSBwcm9wZXJ0aWVzLlxuICAgKiBUaGUgcHJvcGVydGllcyBhcmUgc3RvcmVkIGluIGEgTWFwIHdoaWNoIGlzIHBsYXllZCBiYWNrIGFmdGVyIHRoZVxuICAgKiBjb25zdHJ1Y3RvciBydW5zLiBOb3RlLCBvbiB2ZXJ5IG9sZCB2ZXJzaW9ucyBvZiBTYWZhcmkgKDw9OSkgb3IgQ2hyb21lXG4gICAqICg8PTQxKSwgcHJvcGVydGllcyBjcmVhdGVkIGZvciBuYXRpdmUgcGxhdGZvcm0gcHJvcGVydGllcyBsaWtlIChgaWRgIG9yXG4gICAqIGBuYW1lYCkgbWF5IG5vdCBoYXZlIGRlZmF1bHQgdmFsdWVzIHNldCBpbiB0aGUgZWxlbWVudCBjb25zdHJ1Y3Rvci4gT25cbiAgICogdGhlc2UgYnJvd3NlcnMgbmF0aXZlIHByb3BlcnRpZXMgYXBwZWFyIG9uIGluc3RhbmNlcyBhbmQgdGhlcmVmb3JlIHRoZWlyXG4gICAqIGRlZmF1bHQgdmFsdWUgd2lsbCBvdmVyd3JpdGUgYW55IGVsZW1lbnQgZGVmYXVsdCAoZS5nLiBpZiB0aGUgZWxlbWVudCBzZXRzXG4gICAqIHRoaXMuaWQgPSAnaWQnIGluIHRoZSBjb25zdHJ1Y3RvciwgdGhlICdpZCcgd2lsbCBiZWNvbWUgJycgc2luY2UgdGhpcyBpc1xuICAgKiB0aGUgbmF0aXZlIHBsYXRmb3JtIGRlZmF1bHQpLlxuICAgKi9cbiAgcHJpdmF0ZSBfc2F2ZUluc3RhbmNlUHJvcGVydGllcygpIHtcbiAgICAvLyBVc2UgZm9yRWFjaCBzbyB0aGlzIHdvcmtzIGV2ZW4gaWYgZm9yL29mIGxvb3BzIGFyZSBjb21waWxlZCB0byBmb3IgbG9vcHNcbiAgICAvLyBleHBlY3RpbmcgYXJyYXlzXG4gICAgKHRoaXMuY29uc3RydWN0b3IgYXMgdHlwZW9mIFVwZGF0aW5nRWxlbWVudClcbiAgICAgICAgLl9jbGFzc1Byb3BlcnRpZXMhLmZvckVhY2goKF92LCBwKSA9PiB7XG4gICAgICAgICAgaWYgKHRoaXMuaGFzT3duUHJvcGVydHkocCkpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpc1twIGFzIGtleW9mIHRoaXNdO1xuICAgICAgICAgICAgZGVsZXRlIHRoaXNbcCBhcyBrZXlvZiB0aGlzXTtcbiAgICAgICAgICAgIGlmICghdGhpcy5faW5zdGFuY2VQcm9wZXJ0aWVzKSB7XG4gICAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlUHJvcGVydGllcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuX2luc3RhbmNlUHJvcGVydGllcy5zZXQocCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogQXBwbGllcyBwcmV2aW91c2x5IHNhdmVkIGluc3RhbmNlIHByb3BlcnRpZXMuXG4gICAqL1xuICBwcml2YXRlIF9hcHBseUluc3RhbmNlUHJvcGVydGllcygpIHtcbiAgICAvLyBVc2UgZm9yRWFjaCBzbyB0aGlzIHdvcmtzIGV2ZW4gaWYgZm9yL29mIGxvb3BzIGFyZSBjb21waWxlZCB0byBmb3IgbG9vcHNcbiAgICAvLyBleHBlY3RpbmcgYXJyYXlzXG4gICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgIHRoaXMuX2luc3RhbmNlUHJvcGVydGllcyEuZm9yRWFjaCgodiwgcCkgPT4gKHRoaXMgYXMgYW55KVtwXSA9IHYpO1xuICAgIHRoaXMuX2luc3RhbmNlUHJvcGVydGllcyA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGNvbm5lY3RlZENhbGxiYWNrKCkge1xuICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgfCBTVEFURV9IQVNfQ09OTkVDVEVEO1xuICAgIC8vIEVuc3VyZSBmaXJzdCBjb25uZWN0aW9uIGNvbXBsZXRlcyBhbiB1cGRhdGUuIFVwZGF0ZXMgY2Fubm90IGNvbXBsZXRlIGJlZm9yZVxuICAgIC8vIGNvbm5lY3Rpb24gYW5kIGlmIG9uZSBpcyBwZW5kaW5nIGNvbm5lY3Rpb24gdGhlIGBfaGFzQ29ubmVjdGlvblJlc29sdmVyYFxuICAgIC8vIHdpbGwgZXhpc3QuIElmIHNvLCByZXNvbHZlIGl0IHRvIGNvbXBsZXRlIHRoZSB1cGRhdGUsIG90aGVyd2lzZVxuICAgIC8vIHJlcXVlc3RVcGRhdGUuXG4gICAgaWYgKHRoaXMuX2hhc0Nvbm5lY3RlZFJlc29sdmVyKSB7XG4gICAgICB0aGlzLl9oYXNDb25uZWN0ZWRSZXNvbHZlcigpO1xuICAgICAgdGhpcy5faGFzQ29ubmVjdGVkUmVzb2x2ZXIgPSB1bmRlZmluZWQ7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEFsbG93cyBmb3IgYHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKClgIGluIGV4dGVuc2lvbnMgd2hpbGVcbiAgICogcmVzZXJ2aW5nIHRoZSBwb3NzaWJpbGl0eSBvZiBtYWtpbmcgbm9uLWJyZWFraW5nIGZlYXR1cmUgYWRkaXRpb25zXG4gICAqIHdoZW4gZGlzY29ubmVjdGluZyBhdCBzb21lIHBvaW50IGluIHRoZSBmdXR1cmUuXG4gICAqL1xuICBkaXNjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgfVxuXG4gIC8qKlxuICAgKiBTeW5jaHJvbml6ZXMgcHJvcGVydHkgdmFsdWVzIHdoZW4gYXR0cmlidXRlcyBjaGFuZ2UuXG4gICAqL1xuICBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2sobmFtZTogc3RyaW5nLCBvbGQ6IHN0cmluZ3xudWxsLCB2YWx1ZTogc3RyaW5nfG51bGwpIHtcbiAgICBpZiAob2xkICE9PSB2YWx1ZSkge1xuICAgICAgdGhpcy5fYXR0cmlidXRlVG9Qcm9wZXJ0eShuYW1lLCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBfcHJvcGVydHlUb0F0dHJpYnV0ZShcbiAgICAgIG5hbWU6IFByb3BlcnR5S2V5LCB2YWx1ZTogdW5rbm93bixcbiAgICAgIG9wdGlvbnM6IFByb3BlcnR5RGVjbGFyYXRpb24gPSBkZWZhdWx0UHJvcGVydHlEZWNsYXJhdGlvbikge1xuICAgIGNvbnN0IGN0b3IgPSAodGhpcy5jb25zdHJ1Y3RvciBhcyB0eXBlb2YgVXBkYXRpbmdFbGVtZW50KTtcbiAgICBjb25zdCBhdHRyID0gY3Rvci5fYXR0cmlidXRlTmFtZUZvclByb3BlcnR5KG5hbWUsIG9wdGlvbnMpO1xuICAgIGlmIChhdHRyICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGNvbnN0IGF0dHJWYWx1ZSA9IGN0b3IuX3Byb3BlcnR5VmFsdWVUb0F0dHJpYnV0ZSh2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICAvLyBhbiB1bmRlZmluZWQgdmFsdWUgZG9lcyBub3QgY2hhbmdlIHRoZSBhdHRyaWJ1dGUuXG4gICAgICBpZiAoYXR0clZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgLy8gVHJhY2sgaWYgdGhlIHByb3BlcnR5IGlzIGJlaW5nIHJlZmxlY3RlZCB0byBhdm9pZFxuICAgICAgLy8gc2V0dGluZyB0aGUgcHJvcGVydHkgYWdhaW4gdmlhIGBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2tgLiBOb3RlOlxuICAgICAgLy8gMS4gdGhpcyB0YWtlcyBhZHZhbnRhZ2Ugb2YgdGhlIGZhY3QgdGhhdCB0aGUgY2FsbGJhY2sgaXMgc3luY2hyb25vdXMuXG4gICAgICAvLyAyLiB3aWxsIGJlaGF2ZSBpbmNvcnJlY3RseSBpZiBtdWx0aXBsZSBhdHRyaWJ1dGVzIGFyZSBpbiB0aGUgcmVhY3Rpb25cbiAgICAgIC8vIHN0YWNrIGF0IHRpbWUgb2YgY2FsbGluZy4gSG93ZXZlciwgc2luY2Ugd2UgcHJvY2VzcyBhdHRyaWJ1dGVzXG4gICAgICAvLyBpbiBgdXBkYXRlYCB0aGlzIHNob3VsZCBub3QgYmUgcG9zc2libGUgKG9yIGFuIGV4dHJlbWUgY29ybmVyIGNhc2VcbiAgICAgIC8vIHRoYXQgd2UnZCBsaWtlIHRvIGRpc2NvdmVyKS5cbiAgICAgIC8vIG1hcmsgc3RhdGUgcmVmbGVjdGluZ1xuICAgICAgdGhpcy5fdXBkYXRlU3RhdGUgPSB0aGlzLl91cGRhdGVTdGF0ZSB8IFNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fQVRUUklCVVRFO1xuICAgICAgaWYgKGF0dHJWYWx1ZSA9PSBudWxsKSB7XG4gICAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUoYXR0ciwgYXR0clZhbHVlIGFzIHN0cmluZyk7XG4gICAgICB9XG4gICAgICAvLyBtYXJrIHN0YXRlIG5vdCByZWZsZWN0aW5nXG4gICAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IHRoaXMuX3VwZGF0ZVN0YXRlICYgflNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fQVRUUklCVVRFO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2F0dHJpYnV0ZVRvUHJvcGVydHkobmFtZTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nfG51bGwpIHtcbiAgICAvLyBVc2UgdHJhY2tpbmcgaW5mbyB0byBhdm9pZCBkZXNlcmlhbGl6aW5nIGF0dHJpYnV0ZSB2YWx1ZSBpZiBpdCB3YXNcbiAgICAvLyBqdXN0IHNldCBmcm9tIGEgcHJvcGVydHkgc2V0dGVyLlxuICAgIGlmICh0aGlzLl91cGRhdGVTdGF0ZSAmIFNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fQVRUUklCVVRFKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGN0b3IgPSAodGhpcy5jb25zdHJ1Y3RvciBhcyB0eXBlb2YgVXBkYXRpbmdFbGVtZW50KTtcbiAgICBjb25zdCBwcm9wTmFtZSA9IGN0b3IuX2F0dHJpYnV0ZVRvUHJvcGVydHlNYXAuZ2V0KG5hbWUpO1xuICAgIGlmIChwcm9wTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBjb25zdCBvcHRpb25zID1cbiAgICAgICAgICBjdG9yLl9jbGFzc1Byb3BlcnRpZXMhLmdldChwcm9wTmFtZSkgfHwgZGVmYXVsdFByb3BlcnR5RGVjbGFyYXRpb247XG4gICAgICAvLyBtYXJrIHN0YXRlIHJlZmxlY3RpbmdcbiAgICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgfCBTVEFURV9JU19SRUZMRUNUSU5HX1RPX1BST1BFUlRZO1xuICAgICAgdGhpc1twcm9wTmFtZSBhcyBrZXlvZiB0aGlzXSA9XG4gICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgICAgICAgIGN0b3IuX3Byb3BlcnR5VmFsdWVGcm9tQXR0cmlidXRlKHZhbHVlLCBvcHRpb25zKSBhcyBhbnk7XG4gICAgICAvLyBtYXJrIHN0YXRlIG5vdCByZWZsZWN0aW5nXG4gICAgICB0aGlzLl91cGRhdGVTdGF0ZSA9IHRoaXMuX3VwZGF0ZVN0YXRlICYgflNUQVRFX0lTX1JFRkxFQ1RJTkdfVE9fUFJPUEVSVFk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFRoaXMgcHJpdmF0ZSB2ZXJzaW9uIG9mIGByZXF1ZXN0VXBkYXRlYCBkb2VzIG5vdCBhY2Nlc3Mgb3IgcmV0dXJuIHRoZVxuICAgKiBgdXBkYXRlQ29tcGxldGVgIHByb21pc2UuIFRoaXMgcHJvbWlzZSBjYW4gYmUgb3ZlcnJpZGRlbiBhbmQgaXMgdGhlcmVmb3JlXG4gICAqIG5vdCBmcmVlIHRvIGFjY2Vzcy5cbiAgICovXG4gIHByaXZhdGUgX3JlcXVlc3RVcGRhdGUobmFtZT86IFByb3BlcnR5S2V5LCBvbGRWYWx1ZT86IHVua25vd24pIHtcbiAgICBsZXQgc2hvdWxkUmVxdWVzdFVwZGF0ZSA9IHRydWU7XG4gICAgLy8gSWYgd2UgaGF2ZSBhIHByb3BlcnR5IGtleSwgcGVyZm9ybSBwcm9wZXJ0eSB1cGRhdGUgc3RlcHMuXG4gICAgaWYgKG5hbWUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY29uc3QgY3RvciA9IHRoaXMuY29uc3RydWN0b3IgYXMgdHlwZW9mIFVwZGF0aW5nRWxlbWVudDtcbiAgICAgIGNvbnN0IG9wdGlvbnMgPVxuICAgICAgICAgIGN0b3IuX2NsYXNzUHJvcGVydGllcyEuZ2V0KG5hbWUpIHx8IGRlZmF1bHRQcm9wZXJ0eURlY2xhcmF0aW9uO1xuICAgICAgaWYgKGN0b3IuX3ZhbHVlSGFzQ2hhbmdlZChcbiAgICAgICAgICAgICAgdGhpc1tuYW1lIGFzIGtleW9mIHRoaXNdLCBvbGRWYWx1ZSwgb3B0aW9ucy5oYXNDaGFuZ2VkKSkge1xuICAgICAgICBpZiAoIXRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzLmhhcyhuYW1lKSkge1xuICAgICAgICAgIHRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzLnNldChuYW1lLCBvbGRWYWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gQWRkIHRvIHJlZmxlY3RpbmcgcHJvcGVydGllcyBzZXQuXG4gICAgICAgIC8vIE5vdGUsIGl0J3MgaW1wb3J0YW50IHRoYXQgZXZlcnkgY2hhbmdlIGhhcyBhIGNoYW5jZSB0byBhZGQgdGhlXG4gICAgICAgIC8vIHByb3BlcnR5IHRvIGBfcmVmbGVjdGluZ1Byb3BlcnRpZXNgLiBUaGlzIGVuc3VyZXMgc2V0dGluZ1xuICAgICAgICAvLyBhdHRyaWJ1dGUgKyBwcm9wZXJ0eSByZWZsZWN0cyBjb3JyZWN0bHkuXG4gICAgICAgIGlmIChvcHRpb25zLnJlZmxlY3QgPT09IHRydWUgJiZcbiAgICAgICAgICAgICEodGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9JU19SRUZMRUNUSU5HX1RPX1BST1BFUlRZKSkge1xuICAgICAgICAgIGlmICh0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aGlzLl9yZWZsZWN0aW5nUHJvcGVydGllcyA9IG5ldyBNYXAoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMuc2V0KG5hbWUsIG9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBBYm9ydCB0aGUgcmVxdWVzdCBpZiB0aGUgcHJvcGVydHkgc2hvdWxkIG5vdCBiZSBjb25zaWRlcmVkIGNoYW5nZWQuXG4gICAgICAgIHNob3VsZFJlcXVlc3RVcGRhdGUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKCF0aGlzLl9oYXNSZXF1ZXN0ZWRVcGRhdGUgJiYgc2hvdWxkUmVxdWVzdFVwZGF0ZSkge1xuICAgICAgdGhpcy5fZW5xdWV1ZVVwZGF0ZSgpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBSZXF1ZXN0cyBhbiB1cGRhdGUgd2hpY2ggaXMgcHJvY2Vzc2VkIGFzeW5jaHJvbm91c2x5LiBUaGlzIHNob3VsZFxuICAgKiBiZSBjYWxsZWQgd2hlbiBhbiBlbGVtZW50IHNob3VsZCB1cGRhdGUgYmFzZWQgb24gc29tZSBzdGF0ZSBub3QgdHJpZ2dlcmVkXG4gICAqIGJ5IHNldHRpbmcgYSBwcm9wZXJ0eS4gSW4gdGhpcyBjYXNlLCBwYXNzIG5vIGFyZ3VtZW50cy4gSXQgc2hvdWxkIGFsc28gYmVcbiAgICogY2FsbGVkIHdoZW4gbWFudWFsbHkgaW1wbGVtZW50aW5nIGEgcHJvcGVydHkgc2V0dGVyLiBJbiB0aGlzIGNhc2UsIHBhc3MgdGhlXG4gICAqIHByb3BlcnR5IGBuYW1lYCBhbmQgYG9sZFZhbHVlYCB0byBlbnN1cmUgdGhhdCBhbnkgY29uZmlndXJlZCBwcm9wZXJ0eVxuICAgKiBvcHRpb25zIGFyZSBob25vcmVkLiBSZXR1cm5zIHRoZSBgdXBkYXRlQ29tcGxldGVgIFByb21pc2Ugd2hpY2ggaXMgcmVzb2x2ZWRcbiAgICogd2hlbiB0aGUgdXBkYXRlIGNvbXBsZXRlcy5cbiAgICpcbiAgICogQHBhcmFtIG5hbWUge1Byb3BlcnR5S2V5fSAob3B0aW9uYWwpIG5hbWUgb2YgcmVxdWVzdGluZyBwcm9wZXJ0eVxuICAgKiBAcGFyYW0gb2xkVmFsdWUge2FueX0gKG9wdGlvbmFsKSBvbGQgdmFsdWUgb2YgcmVxdWVzdGluZyBwcm9wZXJ0eVxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gQSBQcm9taXNlIHRoYXQgaXMgcmVzb2x2ZWQgd2hlbiB0aGUgdXBkYXRlIGNvbXBsZXRlcy5cbiAgICovXG4gIHJlcXVlc3RVcGRhdGUobmFtZT86IFByb3BlcnR5S2V5LCBvbGRWYWx1ZT86IHVua25vd24pIHtcbiAgICB0aGlzLl9yZXF1ZXN0VXBkYXRlKG5hbWUsIG9sZFZhbHVlKTtcbiAgICByZXR1cm4gdGhpcy51cGRhdGVDb21wbGV0ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHVwIHRoZSBlbGVtZW50IHRvIGFzeW5jaHJvbm91c2x5IHVwZGF0ZS5cbiAgICovXG4gIHByaXZhdGUgYXN5bmMgX2VucXVldWVVcGRhdGUoKSB7XG4gICAgLy8gTWFyayBzdGF0ZSB1cGRhdGluZy4uLlxuICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgfCBTVEFURV9VUERBVEVfUkVRVUVTVEVEO1xuICAgIGxldCByZXNvbHZlITogKHI6IGJvb2xlYW4pID0+IHZvaWQ7XG4gICAgbGV0IHJlamVjdCE6IChlOiBFcnJvcikgPT4gdm9pZDtcbiAgICBjb25zdCBwcmV2aW91c1VwZGF0ZVByb21pc2UgPSB0aGlzLl91cGRhdGVQcm9taXNlO1xuICAgIHRoaXMuX3VwZGF0ZVByb21pc2UgPSBuZXcgUHJvbWlzZSgocmVzLCByZWopID0+IHtcbiAgICAgIHJlc29sdmUgPSByZXM7XG4gICAgICByZWplY3QgPSByZWo7XG4gICAgfSk7XG4gICAgdHJ5IHtcbiAgICAgIC8vIEVuc3VyZSBhbnkgcHJldmlvdXMgdXBkYXRlIGhhcyByZXNvbHZlZCBiZWZvcmUgdXBkYXRpbmcuXG4gICAgICAvLyBUaGlzIGBhd2FpdGAgYWxzbyBlbnN1cmVzIHRoYXQgcHJvcGVydHkgY2hhbmdlcyBhcmUgYmF0Y2hlZC5cbiAgICAgIGF3YWl0IHByZXZpb3VzVXBkYXRlUHJvbWlzZTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBJZ25vcmUgYW55IHByZXZpb3VzIGVycm9ycy4gV2Ugb25seSBjYXJlIHRoYXQgdGhlIHByZXZpb3VzIGN5Y2xlIGlzXG4gICAgICAvLyBkb25lLiBBbnkgZXJyb3Igc2hvdWxkIGhhdmUgYmVlbiBoYW5kbGVkIGluIHRoZSBwcmV2aW91cyB1cGRhdGUuXG4gICAgfVxuICAgIC8vIE1ha2Ugc3VyZSB0aGUgZWxlbWVudCBoYXMgY29ubmVjdGVkIGJlZm9yZSB1cGRhdGluZy5cbiAgICBpZiAoIXRoaXMuX2hhc0Nvbm5lY3RlZCkge1xuICAgICAgYXdhaXQgbmV3IFByb21pc2UoKHJlcykgPT4gdGhpcy5faGFzQ29ubmVjdGVkUmVzb2x2ZXIgPSByZXMpO1xuICAgIH1cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gdGhpcy5wZXJmb3JtVXBkYXRlKCk7XG4gICAgICAvLyBJZiBgcGVyZm9ybVVwZGF0ZWAgcmV0dXJucyBhIFByb21pc2UsIHdlIGF3YWl0IGl0LiBUaGlzIGlzIGRvbmUgdG9cbiAgICAgIC8vIGVuYWJsZSBjb29yZGluYXRpbmcgdXBkYXRlcyB3aXRoIGEgc2NoZWR1bGVyLiBOb3RlLCB0aGUgcmVzdWx0IGlzXG4gICAgICAvLyBjaGVja2VkIHRvIGF2b2lkIGRlbGF5aW5nIGFuIGFkZGl0aW9uYWwgbWljcm90YXNrIHVubGVzcyB3ZSBuZWVkIHRvLlxuICAgICAgaWYgKHJlc3VsdCAhPSBudWxsKSB7XG4gICAgICAgIGF3YWl0IHJlc3VsdDtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICByZWplY3QoZSk7XG4gICAgfVxuICAgIHJlc29sdmUoIXRoaXMuX2hhc1JlcXVlc3RlZFVwZGF0ZSk7XG4gIH1cblxuICBwcml2YXRlIGdldCBfaGFzQ29ubmVjdGVkKCkge1xuICAgIHJldHVybiAodGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9IQVNfQ09OTkVDVEVEKTtcbiAgfVxuXG4gIHByaXZhdGUgZ2V0IF9oYXNSZXF1ZXN0ZWRVcGRhdGUoKSB7XG4gICAgcmV0dXJuICh0aGlzLl91cGRhdGVTdGF0ZSAmIFNUQVRFX1VQREFURV9SRVFVRVNURUQpO1xuICB9XG5cbiAgcHJvdGVjdGVkIGdldCBoYXNVcGRhdGVkKCkge1xuICAgIHJldHVybiAodGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9IQVNfVVBEQVRFRCk7XG4gIH1cblxuICAvKipcbiAgICogUGVyZm9ybXMgYW4gZWxlbWVudCB1cGRhdGUuIE5vdGUsIGlmIGFuIGV4Y2VwdGlvbiBpcyB0aHJvd24gZHVyaW5nIHRoZVxuICAgKiB1cGRhdGUsIGBmaXJzdFVwZGF0ZWRgIGFuZCBgdXBkYXRlZGAgd2lsbCBub3QgYmUgY2FsbGVkLlxuICAgKlxuICAgKiBZb3UgY2FuIG92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIGNoYW5nZSB0aGUgdGltaW5nIG9mIHVwZGF0ZXMuIElmIHRoaXNcbiAgICogbWV0aG9kIGlzIG92ZXJyaWRkZW4sIGBzdXBlci5wZXJmb3JtVXBkYXRlKClgIG11c3QgYmUgY2FsbGVkLlxuICAgKlxuICAgKiBGb3IgaW5zdGFuY2UsIHRvIHNjaGVkdWxlIHVwZGF0ZXMgdG8gb2NjdXIganVzdCBiZWZvcmUgdGhlIG5leHQgZnJhbWU6XG4gICAqXG4gICAqIGBgYFxuICAgKiBwcm90ZWN0ZWQgYXN5bmMgcGVyZm9ybVVwZGF0ZSgpOiBQcm9taXNlPHVua25vd24+IHtcbiAgICogICBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKCgpID0+IHJlc29sdmUoKSkpO1xuICAgKiAgIHN1cGVyLnBlcmZvcm1VcGRhdGUoKTtcbiAgICogfVxuICAgKiBgYGBcbiAgICovXG4gIHByb3RlY3RlZCBwZXJmb3JtVXBkYXRlKCk6IHZvaWR8UHJvbWlzZTx1bmtub3duPiB7XG4gICAgLy8gTWl4aW4gaW5zdGFuY2UgcHJvcGVydGllcyBvbmNlLCBpZiB0aGV5IGV4aXN0LlxuICAgIGlmICh0aGlzLl9pbnN0YW5jZVByb3BlcnRpZXMpIHtcbiAgICAgIHRoaXMuX2FwcGx5SW5zdGFuY2VQcm9wZXJ0aWVzKCk7XG4gICAgfVxuICAgIGxldCBzaG91bGRVcGRhdGUgPSBmYWxzZTtcbiAgICBjb25zdCBjaGFuZ2VkUHJvcGVydGllcyA9IHRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzO1xuICAgIHRyeSB7XG4gICAgICBzaG91bGRVcGRhdGUgPSB0aGlzLnNob3VsZFVwZGF0ZShjaGFuZ2VkUHJvcGVydGllcyk7XG4gICAgICBpZiAoc2hvdWxkVXBkYXRlKSB7XG4gICAgICAgIHRoaXMudXBkYXRlKGNoYW5nZWRQcm9wZXJ0aWVzKTtcbiAgICAgIH1cbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICAvLyBQcmV2ZW50IGBmaXJzdFVwZGF0ZWRgIGFuZCBgdXBkYXRlZGAgZnJvbSBydW5uaW5nIHdoZW4gdGhlcmUncyBhblxuICAgICAgLy8gdXBkYXRlIGV4Y2VwdGlvbi5cbiAgICAgIHNob3VsZFVwZGF0ZSA9IGZhbHNlO1xuICAgICAgdGhyb3cgZTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgLy8gRW5zdXJlIGVsZW1lbnQgY2FuIGFjY2VwdCBhZGRpdGlvbmFsIHVwZGF0ZXMgYWZ0ZXIgYW4gZXhjZXB0aW9uLlxuICAgICAgdGhpcy5fbWFya1VwZGF0ZWQoKTtcbiAgICB9XG4gICAgaWYgKHNob3VsZFVwZGF0ZSkge1xuICAgICAgaWYgKCEodGhpcy5fdXBkYXRlU3RhdGUgJiBTVEFURV9IQVNfVVBEQVRFRCkpIHtcbiAgICAgICAgdGhpcy5fdXBkYXRlU3RhdGUgPSB0aGlzLl91cGRhdGVTdGF0ZSB8IFNUQVRFX0hBU19VUERBVEVEO1xuICAgICAgICB0aGlzLmZpcnN0VXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcyk7XG4gICAgICB9XG4gICAgICB0aGlzLnVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXMpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX21hcmtVcGRhdGVkKCkge1xuICAgIHRoaXMuX2NoYW5nZWRQcm9wZXJ0aWVzID0gbmV3IE1hcCgpO1xuICAgIHRoaXMuX3VwZGF0ZVN0YXRlID0gdGhpcy5fdXBkYXRlU3RhdGUgJiB+U1RBVEVfVVBEQVRFX1JFUVVFU1RFRDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIGEgUHJvbWlzZSB0aGF0IHJlc29sdmVzIHdoZW4gdGhlIGVsZW1lbnQgaGFzIGNvbXBsZXRlZCB1cGRhdGluZy5cbiAgICogVGhlIFByb21pc2UgdmFsdWUgaXMgYSBib29sZWFuIHRoYXQgaXMgYHRydWVgIGlmIHRoZSBlbGVtZW50IGNvbXBsZXRlZCB0aGVcbiAgICogdXBkYXRlIHdpdGhvdXQgdHJpZ2dlcmluZyBhbm90aGVyIHVwZGF0ZS4gVGhlIFByb21pc2UgcmVzdWx0IGlzIGBmYWxzZWAgaWZcbiAgICogYSBwcm9wZXJ0eSB3YXMgc2V0IGluc2lkZSBgdXBkYXRlZCgpYC4gSWYgdGhlIFByb21pc2UgaXMgcmVqZWN0ZWQsIGFuXG4gICAqIGV4Y2VwdGlvbiB3YXMgdGhyb3duIGR1cmluZyB0aGUgdXBkYXRlLiBUaGlzIGdldHRlciBjYW4gYmUgaW1wbGVtZW50ZWQgdG9cbiAgICogYXdhaXQgYWRkaXRpb25hbCBzdGF0ZS4gRm9yIGV4YW1wbGUsIGl0IGlzIHNvbWV0aW1lcyB1c2VmdWwgdG8gYXdhaXQgYVxuICAgKiByZW5kZXJlZCBlbGVtZW50IGJlZm9yZSBmdWxmaWxsaW5nIHRoaXMgUHJvbWlzZS4gVG8gZG8gdGhpcywgZmlyc3QgYXdhaXRcbiAgICogYHN1cGVyLnVwZGF0ZUNvbXBsZXRlYCB0aGVuIGFueSBzdWJzZXF1ZW50IHN0YXRlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7UHJvbWlzZX0gVGhlIFByb21pc2UgcmV0dXJucyBhIGJvb2xlYW4gdGhhdCBpbmRpY2F0ZXMgaWYgdGhlXG4gICAqIHVwZGF0ZSByZXNvbHZlZCB3aXRob3V0IHRyaWdnZXJpbmcgYW5vdGhlciB1cGRhdGUuXG4gICAqL1xuICBnZXQgdXBkYXRlQ29tcGxldGUoKSB7XG4gICAgcmV0dXJuIHRoaXMuX3VwZGF0ZVByb21pc2U7XG4gIH1cblxuICAvKipcbiAgICogQ29udHJvbHMgd2hldGhlciBvciBub3QgYHVwZGF0ZWAgc2hvdWxkIGJlIGNhbGxlZCB3aGVuIHRoZSBlbGVtZW50IHJlcXVlc3RzXG4gICAqIGFuIHVwZGF0ZS4gQnkgZGVmYXVsdCwgdGhpcyBtZXRob2QgYWx3YXlzIHJldHVybnMgYHRydWVgLCBidXQgdGhpcyBjYW4gYmVcbiAgICogY3VzdG9taXplZCB0byBjb250cm9sIHdoZW4gdG8gdXBkYXRlLlxuICAgKlxuICAgKiAqIEBwYXJhbSBfY2hhbmdlZFByb3BlcnRpZXMgTWFwIG9mIGNoYW5nZWQgcHJvcGVydGllcyB3aXRoIG9sZCB2YWx1ZXNcbiAgICovXG4gIHByb3RlY3RlZCBzaG91bGRVcGRhdGUoX2NoYW5nZWRQcm9wZXJ0aWVzOiBQcm9wZXJ0eVZhbHVlcyk6IGJvb2xlYW4ge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGVsZW1lbnQuIFRoaXMgbWV0aG9kIHJlZmxlY3RzIHByb3BlcnR5IHZhbHVlcyB0byBhdHRyaWJ1dGVzLlxuICAgKiBJdCBjYW4gYmUgb3ZlcnJpZGRlbiB0byByZW5kZXIgYW5kIGtlZXAgdXBkYXRlZCBlbGVtZW50IERPTS5cbiAgICogU2V0dGluZyBwcm9wZXJ0aWVzIGluc2lkZSB0aGlzIG1ldGhvZCB3aWxsICpub3QqIHRyaWdnZXJcbiAgICogYW5vdGhlciB1cGRhdGUuXG4gICAqXG4gICAqICogQHBhcmFtIF9jaGFuZ2VkUHJvcGVydGllcyBNYXAgb2YgY2hhbmdlZCBwcm9wZXJ0aWVzIHdpdGggb2xkIHZhbHVlc1xuICAgKi9cbiAgcHJvdGVjdGVkIHVwZGF0ZShfY2hhbmdlZFByb3BlcnRpZXM6IFByb3BlcnR5VmFsdWVzKSB7XG4gICAgaWYgKHRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMuc2l6ZSA+IDApIHtcbiAgICAgIC8vIFVzZSBmb3JFYWNoIHNvIHRoaXMgd29ya3MgZXZlbiBpZiBmb3Ivb2YgbG9vcHMgYXJlIGNvbXBpbGVkIHRvIGZvclxuICAgICAgLy8gbG9vcHMgZXhwZWN0aW5nIGFycmF5c1xuICAgICAgdGhpcy5fcmVmbGVjdGluZ1Byb3BlcnRpZXMuZm9yRWFjaChcbiAgICAgICAgICAodiwgaykgPT4gdGhpcy5fcHJvcGVydHlUb0F0dHJpYnV0ZShrLCB0aGlzW2sgYXMga2V5b2YgdGhpc10sIHYpKTtcbiAgICAgIHRoaXMuX3JlZmxlY3RpbmdQcm9wZXJ0aWVzID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBJbnZva2VkIHdoZW5ldmVyIHRoZSBlbGVtZW50IGlzIHVwZGF0ZWQuIEltcGxlbWVudCB0byBwZXJmb3JtXG4gICAqIHBvc3QtdXBkYXRpbmcgdGFza3MgdmlhIERPTSBBUElzLCBmb3IgZXhhbXBsZSwgZm9jdXNpbmcgYW4gZWxlbWVudC5cbiAgICpcbiAgICogU2V0dGluZyBwcm9wZXJ0aWVzIGluc2lkZSB0aGlzIG1ldGhvZCB3aWxsIHRyaWdnZXIgdGhlIGVsZW1lbnQgdG8gdXBkYXRlXG4gICAqIGFnYWluIGFmdGVyIHRoaXMgdXBkYXRlIGN5Y2xlIGNvbXBsZXRlcy5cbiAgICpcbiAgICogKiBAcGFyYW0gX2NoYW5nZWRQcm9wZXJ0aWVzIE1hcCBvZiBjaGFuZ2VkIHByb3BlcnRpZXMgd2l0aCBvbGQgdmFsdWVzXG4gICAqL1xuICBwcm90ZWN0ZWQgdXBkYXRlZChfY2hhbmdlZFByb3BlcnRpZXM6IFByb3BlcnR5VmFsdWVzKSB7XG4gIH1cblxuICAvKipcbiAgICogSW52b2tlZCB3aGVuIHRoZSBlbGVtZW50IGlzIGZpcnN0IHVwZGF0ZWQuIEltcGxlbWVudCB0byBwZXJmb3JtIG9uZSB0aW1lXG4gICAqIHdvcmsgb24gdGhlIGVsZW1lbnQgYWZ0ZXIgdXBkYXRlLlxuICAgKlxuICAgKiBTZXR0aW5nIHByb3BlcnRpZXMgaW5zaWRlIHRoaXMgbWV0aG9kIHdpbGwgdHJpZ2dlciB0aGUgZWxlbWVudCB0byB1cGRhdGVcbiAgICogYWdhaW4gYWZ0ZXIgdGhpcyB1cGRhdGUgY3ljbGUgY29tcGxldGVzLlxuICAgKlxuICAgKiAqIEBwYXJhbSBfY2hhbmdlZFByb3BlcnRpZXMgTWFwIG9mIGNoYW5nZWQgcHJvcGVydGllcyB3aXRoIG9sZCB2YWx1ZXNcbiAgICovXG4gIHByb3RlY3RlZCBmaXJzdFVwZGF0ZWQoX2NoYW5nZWRQcm9wZXJ0aWVzOiBQcm9wZXJ0eVZhbHVlcykge1xuICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5cbmltcG9ydCB7TGl0RWxlbWVudH0gZnJvbSAnLi4vbGl0LWVsZW1lbnQuanMnO1xuXG5pbXBvcnQge1Byb3BlcnR5RGVjbGFyYXRpb24sIFVwZGF0aW5nRWxlbWVudH0gZnJvbSAnLi91cGRhdGluZy1lbGVtZW50LmpzJztcblxuZXhwb3J0IHR5cGUgQ29uc3RydWN0b3I8VD4gPSB7XG4gIG5ldyAoLi4uYXJnczogdW5rbm93bltdKTogVFxufTtcblxuLy8gRnJvbSB0aGUgVEMzOSBEZWNvcmF0b3JzIHByb3Bvc2FsXG5pbnRlcmZhY2UgQ2xhc3NEZXNjcmlwdG9yIHtcbiAga2luZDogJ2NsYXNzJztcbiAgZWxlbWVudHM6IENsYXNzRWxlbWVudFtdO1xuICBmaW5pc2hlcj86IDxUPihjbGF6ejogQ29uc3RydWN0b3I8VD4pID0+IHVuZGVmaW5lZCB8IENvbnN0cnVjdG9yPFQ+O1xufVxuXG4vLyBGcm9tIHRoZSBUQzM5IERlY29yYXRvcnMgcHJvcG9zYWxcbmludGVyZmFjZSBDbGFzc0VsZW1lbnQge1xuICBraW5kOiAnZmllbGQnfCdtZXRob2QnO1xuICBrZXk6IFByb3BlcnR5S2V5O1xuICBwbGFjZW1lbnQ6ICdzdGF0aWMnfCdwcm90b3R5cGUnfCdvd24nO1xuICBpbml0aWFsaXplcj86IEZ1bmN0aW9uO1xuICBleHRyYXM/OiBDbGFzc0VsZW1lbnRbXTtcbiAgZmluaXNoZXI/OiA8VD4oY2xheno6IENvbnN0cnVjdG9yPFQ+KSA9PiB1bmRlZmluZWQgfCBDb25zdHJ1Y3RvcjxUPjtcbiAgZGVzY3JpcHRvcj86IFByb3BlcnR5RGVzY3JpcHRvcjtcbn1cblxuY29uc3QgbGVnYWN5Q3VzdG9tRWxlbWVudCA9XG4gICAgKHRhZ05hbWU6IHN0cmluZywgY2xheno6IENvbnN0cnVjdG9yPEhUTUxFbGVtZW50PikgPT4ge1xuICAgICAgd2luZG93LmN1c3RvbUVsZW1lbnRzLmRlZmluZSh0YWdOYW1lLCBjbGF6eik7XG4gICAgICAvLyBDYXN0IGFzIGFueSBiZWNhdXNlIFRTIGRvZXNuJ3QgcmVjb2duaXplIHRoZSByZXR1cm4gdHlwZSBhcyBiZWluZyBhXG4gICAgICAvLyBzdWJ0eXBlIG9mIHRoZSBkZWNvcmF0ZWQgY2xhc3Mgd2hlbiBjbGF6eiBpcyB0eXBlZCBhc1xuICAgICAgLy8gYENvbnN0cnVjdG9yPEhUTUxFbGVtZW50PmAgZm9yIHNvbWUgcmVhc29uLlxuICAgICAgLy8gYENvbnN0cnVjdG9yPEhUTUxFbGVtZW50PmAgaXMgaGVscGZ1bCB0byBtYWtlIHN1cmUgdGhlIGRlY29yYXRvciBpc1xuICAgICAgLy8gYXBwbGllZCB0byBlbGVtZW50cyBob3dldmVyLlxuICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgICAgcmV0dXJuIGNsYXp6IGFzIGFueTtcbiAgICB9O1xuXG5jb25zdCBzdGFuZGFyZEN1c3RvbUVsZW1lbnQgPVxuICAgICh0YWdOYW1lOiBzdHJpbmcsIGRlc2NyaXB0b3I6IENsYXNzRGVzY3JpcHRvcikgPT4ge1xuICAgICAgY29uc3Qge2tpbmQsIGVsZW1lbnRzfSA9IGRlc2NyaXB0b3I7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBraW5kLFxuICAgICAgICBlbGVtZW50cyxcbiAgICAgICAgLy8gVGhpcyBjYWxsYmFjayBpcyBjYWxsZWQgb25jZSB0aGUgY2xhc3MgaXMgb3RoZXJ3aXNlIGZ1bGx5IGRlZmluZWRcbiAgICAgICAgZmluaXNoZXIoY2xheno6IENvbnN0cnVjdG9yPEhUTUxFbGVtZW50Pikge1xuICAgICAgICAgIHdpbmRvdy5jdXN0b21FbGVtZW50cy5kZWZpbmUodGFnTmFtZSwgY2xhenopO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH07XG5cbi8qKlxuICogQ2xhc3MgZGVjb3JhdG9yIGZhY3RvcnkgdGhhdCBkZWZpbmVzIHRoZSBkZWNvcmF0ZWQgY2xhc3MgYXMgYSBjdXN0b20gZWxlbWVudC5cbiAqXG4gKiBAcGFyYW0gdGFnTmFtZSB0aGUgbmFtZSBvZiB0aGUgY3VzdG9tIGVsZW1lbnQgdG8gZGVmaW5lXG4gKi9cbmV4cG9ydCBjb25zdCBjdXN0b21FbGVtZW50ID0gKHRhZ05hbWU6IHN0cmluZykgPT5cbiAgICAoY2xhc3NPckRlc2NyaXB0b3I6IENvbnN0cnVjdG9yPEhUTUxFbGVtZW50PnxDbGFzc0Rlc2NyaXB0b3IpID0+XG4gICAgICAgICh0eXBlb2YgY2xhc3NPckRlc2NyaXB0b3IgPT09ICdmdW5jdGlvbicpID9cbiAgICBsZWdhY3lDdXN0b21FbGVtZW50KHRhZ05hbWUsIGNsYXNzT3JEZXNjcmlwdG9yKSA6XG4gICAgc3RhbmRhcmRDdXN0b21FbGVtZW50KHRhZ05hbWUsIGNsYXNzT3JEZXNjcmlwdG9yKTtcblxuY29uc3Qgc3RhbmRhcmRQcm9wZXJ0eSA9XG4gICAgKG9wdGlvbnM6IFByb3BlcnR5RGVjbGFyYXRpb24sIGVsZW1lbnQ6IENsYXNzRWxlbWVudCkgPT4ge1xuICAgICAgLy8gV2hlbiBkZWNvcmF0aW5nIGFuIGFjY2Vzc29yLCBwYXNzIGl0IHRocm91Z2ggYW5kIGFkZCBwcm9wZXJ0eSBtZXRhZGF0YS5cbiAgICAgIC8vIE5vdGUsIHRoZSBgaGFzT3duUHJvcGVydHlgIGNoZWNrIGluIGBjcmVhdGVQcm9wZXJ0eWAgZW5zdXJlcyB3ZSBkb24ndFxuICAgICAgLy8gc3RvbXAgb3ZlciB0aGUgdXNlcidzIGFjY2Vzc29yLlxuICAgICAgaWYgKGVsZW1lbnQua2luZCA9PT0gJ21ldGhvZCcgJiYgZWxlbWVudC5kZXNjcmlwdG9yICYmXG4gICAgICAgICAgISgndmFsdWUnIGluIGVsZW1lbnQuZGVzY3JpcHRvcikpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAuLi5lbGVtZW50LFxuICAgICAgICAgIGZpbmlzaGVyKGNsYXp6OiB0eXBlb2YgVXBkYXRpbmdFbGVtZW50KSB7XG4gICAgICAgICAgICBjbGF6ei5jcmVhdGVQcm9wZXJ0eShlbGVtZW50LmtleSwgb3B0aW9ucyk7XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gY3JlYXRlUHJvcGVydHkoKSB0YWtlcyBjYXJlIG9mIGRlZmluaW5nIHRoZSBwcm9wZXJ0eSwgYnV0IHdlIHN0aWxsXG4gICAgICAgIC8vIG11c3QgcmV0dXJuIHNvbWUga2luZCBvZiBkZXNjcmlwdG9yLCBzbyByZXR1cm4gYSBkZXNjcmlwdG9yIGZvciBhblxuICAgICAgICAvLyB1bnVzZWQgcHJvdG90eXBlIGZpZWxkLiBUaGUgZmluaXNoZXIgY2FsbHMgY3JlYXRlUHJvcGVydHkoKS5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBraW5kOiAnZmllbGQnLFxuICAgICAgICAgIGtleTogU3ltYm9sKCksXG4gICAgICAgICAgcGxhY2VtZW50OiAnb3duJyxcbiAgICAgICAgICBkZXNjcmlwdG9yOiB7fSxcbiAgICAgICAgICAvLyBXaGVuIEBiYWJlbC9wbHVnaW4tcHJvcG9zYWwtZGVjb3JhdG9ycyBpbXBsZW1lbnRzIGluaXRpYWxpemVycyxcbiAgICAgICAgICAvLyBkbyB0aGlzIGluc3RlYWQgb2YgdGhlIGluaXRpYWxpemVyIGJlbG93LiBTZWU6XG4gICAgICAgICAgLy8gaHR0cHM6Ly9naXRodWIuY29tL2JhYmVsL2JhYmVsL2lzc3Vlcy85MjYwIGV4dHJhczogW1xuICAgICAgICAgIC8vICAge1xuICAgICAgICAgIC8vICAgICBraW5kOiAnaW5pdGlhbGl6ZXInLFxuICAgICAgICAgIC8vICAgICBwbGFjZW1lbnQ6ICdvd24nLFxuICAgICAgICAgIC8vICAgICBpbml0aWFsaXplcjogZGVzY3JpcHRvci5pbml0aWFsaXplcixcbiAgICAgICAgICAvLyAgIH1cbiAgICAgICAgICAvLyBdLFxuICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgZGVjb3JhdG9yXG4gICAgICAgICAgaW5pdGlhbGl6ZXIodGhpczogYW55KSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mIGVsZW1lbnQuaW5pdGlhbGl6ZXIgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgICAgdGhpc1tlbGVtZW50LmtleV0gPSBlbGVtZW50LmluaXRpYWxpemVyLmNhbGwodGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSxcbiAgICAgICAgICBmaW5pc2hlcihjbGF6ejogdHlwZW9mIFVwZGF0aW5nRWxlbWVudCkge1xuICAgICAgICAgICAgY2xhenouY3JlYXRlUHJvcGVydHkoZWxlbWVudC5rZXksIG9wdGlvbnMpO1xuICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICAgIH1cbiAgICB9O1xuXG5jb25zdCBsZWdhY3lQcm9wZXJ0eSA9XG4gICAgKG9wdGlvbnM6IFByb3BlcnR5RGVjbGFyYXRpb24sIHByb3RvOiBPYmplY3QsIG5hbWU6IFByb3BlcnR5S2V5KSA9PiB7XG4gICAgICAocHJvdG8uY29uc3RydWN0b3IgYXMgdHlwZW9mIFVwZGF0aW5nRWxlbWVudClcbiAgICAgICAgICAuY3JlYXRlUHJvcGVydHkobmFtZSwgb3B0aW9ucyk7XG4gICAgfTtcblxuLyoqXG4gKiBBIHByb3BlcnR5IGRlY29yYXRvciB3aGljaCBjcmVhdGVzIGEgTGl0RWxlbWVudCBwcm9wZXJ0eSB3aGljaCByZWZsZWN0cyBhXG4gKiBjb3JyZXNwb25kaW5nIGF0dHJpYnV0ZSB2YWx1ZS4gQSBgUHJvcGVydHlEZWNsYXJhdGlvbmAgbWF5IG9wdGlvbmFsbHkgYmVcbiAqIHN1cHBsaWVkIHRvIGNvbmZpZ3VyZSBwcm9wZXJ0eSBmZWF0dXJlcy5cbiAqXG4gKiBARXhwb3J0RGVjb3JhdGVkSXRlbXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByb3BlcnR5KG9wdGlvbnM/OiBQcm9wZXJ0eURlY2xhcmF0aW9uKSB7XG4gIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgZGVjb3JhdG9yXG4gIHJldHVybiAocHJvdG9PckRlc2NyaXB0b3I6IE9iamVjdHxDbGFzc0VsZW1lbnQsIG5hbWU/OiBQcm9wZXJ0eUtleSk6IGFueSA9PlxuICAgICAgICAgICAgIChuYW1lICE9PSB1bmRlZmluZWQpID9cbiAgICAgIGxlZ2FjeVByb3BlcnR5KG9wdGlvbnMhLCBwcm90b09yRGVzY3JpcHRvciBhcyBPYmplY3QsIG5hbWUpIDpcbiAgICAgIHN0YW5kYXJkUHJvcGVydHkob3B0aW9ucyEsIHByb3RvT3JEZXNjcmlwdG9yIGFzIENsYXNzRWxlbWVudCk7XG59XG5cbi8qKlxuICogQSBwcm9wZXJ0eSBkZWNvcmF0b3IgdGhhdCBjb252ZXJ0cyBhIGNsYXNzIHByb3BlcnR5IGludG8gYSBnZXR0ZXIgdGhhdFxuICogZXhlY3V0ZXMgYSBxdWVyeVNlbGVjdG9yIG9uIHRoZSBlbGVtZW50J3MgcmVuZGVyUm9vdC5cbiAqXG4gKiBARXhwb3J0RGVjb3JhdGVkSXRlbXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5KHNlbGVjdG9yOiBzdHJpbmcpIHtcbiAgcmV0dXJuIChwcm90b09yRGVzY3JpcHRvcjogT2JqZWN0fENsYXNzRWxlbWVudCxcbiAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IGRlY29yYXRvclxuICAgICAgICAgIG5hbWU/OiBQcm9wZXJ0eUtleSk6IGFueSA9PiB7XG4gICAgY29uc3QgZGVzY3JpcHRvciA9IHtcbiAgICAgIGdldCh0aGlzOiBMaXRFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlclJvb3QucXVlcnlTZWxlY3RvcihzZWxlY3Rvcik7XG4gICAgICB9LFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB9O1xuICAgIHJldHVybiAobmFtZSAhPT0gdW5kZWZpbmVkKSA/XG4gICAgICAgIGxlZ2FjeVF1ZXJ5KGRlc2NyaXB0b3IsIHByb3RvT3JEZXNjcmlwdG9yIGFzIE9iamVjdCwgbmFtZSkgOlxuICAgICAgICBzdGFuZGFyZFF1ZXJ5KGRlc2NyaXB0b3IsIHByb3RvT3JEZXNjcmlwdG9yIGFzIENsYXNzRWxlbWVudCk7XG4gIH07XG59XG5cbi8qKlxuICogQSBwcm9wZXJ0eSBkZWNvcmF0b3IgdGhhdCBjb252ZXJ0cyBhIGNsYXNzIHByb3BlcnR5IGludG8gYSBnZXR0ZXJcbiAqIHRoYXQgZXhlY3V0ZXMgYSBxdWVyeVNlbGVjdG9yQWxsIG9uIHRoZSBlbGVtZW50J3MgcmVuZGVyUm9vdC5cbiAqXG4gKiBARXhwb3J0RGVjb3JhdGVkSXRlbXNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHF1ZXJ5QWxsKHNlbGVjdG9yOiBzdHJpbmcpIHtcbiAgcmV0dXJuIChwcm90b09yRGVzY3JpcHRvcjogT2JqZWN0fENsYXNzRWxlbWVudCxcbiAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55IGRlY29yYXRvclxuICAgICAgICAgIG5hbWU/OiBQcm9wZXJ0eUtleSk6IGFueSA9PiB7XG4gICAgY29uc3QgZGVzY3JpcHRvciA9IHtcbiAgICAgIGdldCh0aGlzOiBMaXRFbGVtZW50KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlclJvb3QucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICB9LFxuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB9O1xuICAgIHJldHVybiAobmFtZSAhPT0gdW5kZWZpbmVkKSA/XG4gICAgICAgIGxlZ2FjeVF1ZXJ5KGRlc2NyaXB0b3IsIHByb3RvT3JEZXNjcmlwdG9yIGFzIE9iamVjdCwgbmFtZSkgOlxuICAgICAgICBzdGFuZGFyZFF1ZXJ5KGRlc2NyaXB0b3IsIHByb3RvT3JEZXNjcmlwdG9yIGFzIENsYXNzRWxlbWVudCk7XG4gIH07XG59XG5cbmNvbnN0IGxlZ2FjeVF1ZXJ5ID1cbiAgICAoZGVzY3JpcHRvcjogUHJvcGVydHlEZXNjcmlwdG9yLCBwcm90bzogT2JqZWN0LCBuYW1lOiBQcm9wZXJ0eUtleSkgPT4ge1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvLCBuYW1lLCBkZXNjcmlwdG9yKTtcbiAgICB9O1xuXG5jb25zdCBzdGFuZGFyZFF1ZXJ5ID0gKGRlc2NyaXB0b3I6IFByb3BlcnR5RGVzY3JpcHRvciwgZWxlbWVudDogQ2xhc3NFbGVtZW50KSA9PlxuICAgICh7XG4gICAgICBraW5kOiAnbWV0aG9kJyxcbiAgICAgIHBsYWNlbWVudDogJ3Byb3RvdHlwZScsXG4gICAgICBrZXk6IGVsZW1lbnQua2V5LFxuICAgICAgZGVzY3JpcHRvcixcbiAgICB9KTtcblxuY29uc3Qgc3RhbmRhcmRFdmVudE9wdGlvbnMgPVxuICAgIChvcHRpb25zOiBBZGRFdmVudExpc3RlbmVyT3B0aW9ucywgZWxlbWVudDogQ2xhc3NFbGVtZW50KSA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5lbGVtZW50LFxuICAgICAgICBmaW5pc2hlcihjbGF6ejogdHlwZW9mIFVwZGF0aW5nRWxlbWVudCkge1xuICAgICAgICAgIE9iamVjdC5hc3NpZ24oXG4gICAgICAgICAgICAgIGNsYXp6LnByb3RvdHlwZVtlbGVtZW50LmtleSBhcyBrZXlvZiBVcGRhdGluZ0VsZW1lbnRdLCBvcHRpb25zKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICB9O1xuXG5jb25zdCBsZWdhY3lFdmVudE9wdGlvbnMgPVxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgbGVnYWN5IGRlY29yYXRvclxuICAgIChvcHRpb25zOiBBZGRFdmVudExpc3RlbmVyT3B0aW9ucywgcHJvdG86IGFueSwgbmFtZTogUHJvcGVydHlLZXkpID0+IHtcbiAgICAgIE9iamVjdC5hc3NpZ24ocHJvdG9bbmFtZV0sIG9wdGlvbnMpO1xuICAgIH07XG5cbi8qKlxuICogQWRkcyBldmVudCBsaXN0ZW5lciBvcHRpb25zIHRvIGEgbWV0aG9kIHVzZWQgYXMgYW4gZXZlbnQgbGlzdGVuZXIgaW4gYVxuICogbGl0LWh0bWwgdGVtcGxhdGUuXG4gKlxuICogQHBhcmFtIG9wdGlvbnMgQW4gb2JqZWN0IHRoYXQgc3BlY2lmaXMgZXZlbnQgbGlzdGVuZXIgb3B0aW9ucyBhcyBhY2NlcHRlZCBieVxuICogYEV2ZW50VGFyZ2V0I2FkZEV2ZW50TGlzdGVuZXJgIGFuZCBgRXZlbnRUYXJnZXQjcmVtb3ZlRXZlbnRMaXN0ZW5lcmAuXG4gKlxuICogQ3VycmVudCBicm93c2VycyBzdXBwb3J0IHRoZSBgY2FwdHVyZWAsIGBwYXNzaXZlYCwgYW5kIGBvbmNlYCBvcHRpb25zLiBTZWU6XG4gKiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvRXZlbnRUYXJnZXQvYWRkRXZlbnRMaXN0ZW5lciNQYXJhbWV0ZXJzXG4gKlxuICogQGV4YW1wbGVcbiAqXG4gKiAgICAgY2xhc3MgTXlFbGVtZW50IHtcbiAqXG4gKiAgICAgICBjbGlja2VkID0gZmFsc2U7XG4gKlxuICogICAgICAgcmVuZGVyKCkge1xuICogICAgICAgICByZXR1cm4gaHRtbGA8ZGl2IEBjbGljaz0ke3RoaXMuX29uQ2xpY2t9YD48YnV0dG9uPjwvYnV0dG9uPjwvZGl2PmA7XG4gKiAgICAgICB9XG4gKlxuICogICAgICAgQGV2ZW50T3B0aW9ucyh7Y2FwdHVyZTogdHJ1ZX0pXG4gKiAgICAgICBfb25DbGljayhlKSB7XG4gKiAgICAgICAgIHRoaXMuY2xpY2tlZCA9IHRydWU7XG4gKiAgICAgICB9XG4gKiAgICAgfVxuICovXG5leHBvcnQgY29uc3QgZXZlbnRPcHRpb25zID0gKG9wdGlvbnM6IEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zKSA9PlxuICAgIC8vIFJldHVybiB2YWx1ZSB0eXBlZCBhcyBhbnkgdG8gcHJldmVudCBUeXBlU2NyaXB0IGZyb20gY29tcGxhaW5pbmcgdGhhdFxuICAgIC8vIHN0YW5kYXJkIGRlY29yYXRvciBmdW5jdGlvbiBzaWduYXR1cmUgZG9lcyBub3QgbWF0Y2ggVHlwZVNjcmlwdCBkZWNvcmF0b3JcbiAgICAvLyBzaWduYXR1cmVcbiAgICAvLyBUT0RPKGtzY2hhYWYpOiB1bmNsZWFyIHdoeSBpdCB3YXMgb25seSBmYWlsaW5nIG9uIHRoaXMgZGVjb3JhdG9yIGFuZCBub3RcbiAgICAvLyB0aGUgb3RoZXJzXG4gICAgKChwcm90b09yRGVzY3JpcHRvcjogT2JqZWN0fENsYXNzRWxlbWVudCwgbmFtZT86IHN0cmluZykgPT5cbiAgICAgICAgIChuYW1lICE9PSB1bmRlZmluZWQpID9cbiAgICAgICAgIGxlZ2FjeUV2ZW50T3B0aW9ucyhvcHRpb25zLCBwcm90b09yRGVzY3JpcHRvciBhcyBPYmplY3QsIG5hbWUpIDpcbiAgICAgICAgIHN0YW5kYXJkRXZlbnRPcHRpb25zKG9wdGlvbnMsIHByb3RvT3JEZXNjcmlwdG9yIGFzIENsYXNzRWxlbWVudCkpIGFzXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnkgZGVjb3JhdG9yXG4gICAgICAgIGFueTtcbiIsIi8qKlxuQGxpY2Vuc2VcbkNvcHlyaWdodCAoYykgMjAxOSBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbmh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dCBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG5odHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHQgVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlXG5mb3VuZCBhdCBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dCBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhc1xucGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc28gc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudFxuZm91bmQgYXQgaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4qL1xuXG5leHBvcnQgY29uc3Qgc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzID1cbiAgICAoJ2Fkb3B0ZWRTdHlsZVNoZWV0cycgaW4gRG9jdW1lbnQucHJvdG90eXBlKSAmJlxuICAgICgncmVwbGFjZScgaW4gQ1NTU3R5bGVTaGVldC5wcm90b3R5cGUpO1xuXG5jb25zdCBjb25zdHJ1Y3Rpb25Ub2tlbiA9IFN5bWJvbCgpO1xuXG5leHBvcnQgY2xhc3MgQ1NTUmVzdWx0IHtcbiAgX3N0eWxlU2hlZXQ/OiBDU1NTdHlsZVNoZWV0fG51bGw7XG5cbiAgcmVhZG9ubHkgY3NzVGV4dDogc3RyaW5nO1xuXG4gIGNvbnN0cnVjdG9yKGNzc1RleHQ6IHN0cmluZywgc2FmZVRva2VuOiBzeW1ib2wpIHtcbiAgICBpZiAoc2FmZVRva2VuICE9PSBjb25zdHJ1Y3Rpb25Ub2tlbikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICdDU1NSZXN1bHQgaXMgbm90IGNvbnN0cnVjdGFibGUuIFVzZSBgdW5zYWZlQ1NTYCBvciBgY3NzYCBpbnN0ZWFkLicpO1xuICAgIH1cbiAgICB0aGlzLmNzc1RleHQgPSBjc3NUZXh0O1xuICB9XG5cbiAgLy8gTm90ZSwgdGhpcyBpcyBhIGdldHRlciBzbyB0aGF0IGl0J3MgbGF6eS4gSW4gcHJhY3RpY2UsIHRoaXMgbWVhbnNcbiAgLy8gc3R5bGVzaGVldHMgYXJlIG5vdCBjcmVhdGVkIHVudGlsIHRoZSBmaXJzdCBlbGVtZW50IGluc3RhbmNlIGlzIG1hZGUuXG4gIGdldCBzdHlsZVNoZWV0KCk6IENTU1N0eWxlU2hlZXR8bnVsbCB7XG4gICAgaWYgKHRoaXMuX3N0eWxlU2hlZXQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgLy8gTm90ZSwgaWYgYGFkb3B0ZWRTdHlsZVNoZWV0c2AgaXMgc3VwcG9ydGVkIHRoZW4gd2UgYXNzdW1lIENTU1N0eWxlU2hlZXRcbiAgICAgIC8vIGlzIGNvbnN0cnVjdGFibGUuXG4gICAgICBpZiAoc3VwcG9ydHNBZG9wdGluZ1N0eWxlU2hlZXRzKSB7XG4gICAgICAgIHRoaXMuX3N0eWxlU2hlZXQgPSBuZXcgQ1NTU3R5bGVTaGVldCgpO1xuICAgICAgICB0aGlzLl9zdHlsZVNoZWV0LnJlcGxhY2VTeW5jKHRoaXMuY3NzVGV4dCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLl9zdHlsZVNoZWV0ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuX3N0eWxlU2hlZXQ7XG4gIH1cblxuICB0b1N0cmluZygpOiBzdHJpbmcge1xuICAgIHJldHVybiB0aGlzLmNzc1RleHQ7XG4gIH1cbn1cblxuLyoqXG4gKiBXcmFwIGEgdmFsdWUgZm9yIGludGVycG9sYXRpb24gaW4gYSBjc3MgdGFnZ2VkIHRlbXBsYXRlIGxpdGVyYWwuXG4gKlxuICogVGhpcyBpcyB1bnNhZmUgYmVjYXVzZSB1bnRydXN0ZWQgQ1NTIHRleHQgY2FuIGJlIHVzZWQgdG8gcGhvbmUgaG9tZVxuICogb3IgZXhmaWx0cmF0ZSBkYXRhIHRvIGFuIGF0dGFja2VyIGNvbnRyb2xsZWQgc2l0ZS4gVGFrZSBjYXJlIHRvIG9ubHkgdXNlXG4gKiB0aGlzIHdpdGggdHJ1c3RlZCBpbnB1dC5cbiAqL1xuZXhwb3J0IGNvbnN0IHVuc2FmZUNTUyA9ICh2YWx1ZTogdW5rbm93bikgPT4ge1xuICByZXR1cm4gbmV3IENTU1Jlc3VsdChTdHJpbmcodmFsdWUpLCBjb25zdHJ1Y3Rpb25Ub2tlbik7XG59O1xuXG5jb25zdCB0ZXh0RnJvbUNTU1Jlc3VsdCA9ICh2YWx1ZTogQ1NTUmVzdWx0KSA9PiB7XG4gIGlmICh2YWx1ZSBpbnN0YW5jZW9mIENTU1Jlc3VsdCkge1xuICAgIHJldHVybiB2YWx1ZS5jc3NUZXh0O1xuICB9IGVsc2Uge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYFZhbHVlIHBhc3NlZCB0byAnY3NzJyBmdW5jdGlvbiBtdXN0IGJlIGEgJ2NzcycgZnVuY3Rpb24gcmVzdWx0OiAke1xuICAgICAgICAgICAgdmFsdWV9LiBVc2UgJ3Vuc2FmZUNTUycgdG8gcGFzcyBub24tbGl0ZXJhbCB2YWx1ZXMsIGJ1dFxuICAgICAgICAgICAgdGFrZSBjYXJlIHRvIGVuc3VyZSBwYWdlIHNlY3VyaXR5LmApO1xuICB9XG59O1xuXG4vKipcbiAqIFRlbXBsYXRlIHRhZyB3aGljaCB3aGljaCBjYW4gYmUgdXNlZCB3aXRoIExpdEVsZW1lbnQncyBgc3R5bGVgIHByb3BlcnR5IHRvXG4gKiBzZXQgZWxlbWVudCBzdHlsZXMuIEZvciBzZWN1cml0eSByZWFzb25zLCBvbmx5IGxpdGVyYWwgc3RyaW5nIHZhbHVlcyBtYXkgYmVcbiAqIHVzZWQuIFRvIGluY29ycG9yYXRlIG5vbi1saXRlcmFsIHZhbHVlcyBgdW5zYWZlQ1NTYCBtYXkgYmUgdXNlZCBpbnNpZGUgYVxuICogdGVtcGxhdGUgc3RyaW5nIHBhcnQuXG4gKi9cbmV4cG9ydCBjb25zdCBjc3MgPSAoc3RyaW5nczogVGVtcGxhdGVTdHJpbmdzQXJyYXksIC4uLnZhbHVlczogQ1NTUmVzdWx0W10pID0+IHtcbiAgY29uc3QgY3NzVGV4dCA9IHZhbHVlcy5yZWR1Y2UoXG4gICAgICAoYWNjLCB2LCBpZHgpID0+IGFjYyArIHRleHRGcm9tQ1NTUmVzdWx0KHYpICsgc3RyaW5nc1tpZHggKyAxXSxcbiAgICAgIHN0cmluZ3NbMF0pO1xuICByZXR1cm4gbmV3IENTU1Jlc3VsdChjc3NUZXh0LCBjb25zdHJ1Y3Rpb25Ub2tlbik7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuaW1wb3J0IHtUZW1wbGF0ZVJlc3VsdH0gZnJvbSAnbGl0LWh0bWwnO1xuaW1wb3J0IHtyZW5kZXJ9IGZyb20gJ2xpdC1odG1sL2xpYi9zaGFkeS1yZW5kZXIuanMnO1xuXG5pbXBvcnQge1Byb3BlcnR5VmFsdWVzLCBVcGRhdGluZ0VsZW1lbnR9IGZyb20gJy4vbGliL3VwZGF0aW5nLWVsZW1lbnQuanMnO1xuXG5leHBvcnQgKiBmcm9tICcuL2xpYi91cGRhdGluZy1lbGVtZW50LmpzJztcbmV4cG9ydCAqIGZyb20gJy4vbGliL2RlY29yYXRvcnMuanMnO1xuZXhwb3J0IHtodG1sLCBzdmcsIFRlbXBsYXRlUmVzdWx0LCBTVkdUZW1wbGF0ZVJlc3VsdH0gZnJvbSAnbGl0LWh0bWwvbGl0LWh0bWwuanMnO1xuaW1wb3J0IHtzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMsIENTU1Jlc3VsdH0gZnJvbSAnLi9saWIvY3NzLXRhZy5qcyc7XG5leHBvcnQgKiBmcm9tICcuL2xpYi9jc3MtdGFnLmpzJztcblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICBsaXRFbGVtZW50VmVyc2lvbnM6IHN0cmluZ1tdO1xuICB9XG59XG5cbi8vIElNUE9SVEFOVDogZG8gbm90IGNoYW5nZSB0aGUgcHJvcGVydHkgbmFtZSBvciB0aGUgYXNzaWdubWVudCBleHByZXNzaW9uLlxuLy8gVGhpcyBsaW5lIHdpbGwgYmUgdXNlZCBpbiByZWdleGVzIHRvIHNlYXJjaCBmb3IgTGl0RWxlbWVudCB1c2FnZS5cbi8vIFRPRE8oanVzdGluZmFnbmFuaSk6IGluamVjdCB2ZXJzaW9uIG51bWJlciBhdCBidWlsZCB0aW1lXG4od2luZG93WydsaXRFbGVtZW50VmVyc2lvbnMnXSB8fCAod2luZG93WydsaXRFbGVtZW50VmVyc2lvbnMnXSA9IFtdKSlcbiAgICAucHVzaCgnMi4wLjEnKTtcblxuZXhwb3J0IGludGVyZmFjZSBDU1NSZXN1bHRBcnJheSBleHRlbmRzIEFycmF5PENTU1Jlc3VsdHxDU1NSZXN1bHRBcnJheT4ge31cblxuLyoqXG4gKiBNaW5pbWFsIGltcGxlbWVudGF0aW9uIG9mIEFycmF5LnByb3RvdHlwZS5mbGF0XG4gKiBAcGFyYW0gYXJyIHRoZSBhcnJheSB0byBmbGF0dGVuXG4gKiBAcGFyYW0gcmVzdWx0IHRoZSBhY2N1bWxhdGVkIHJlc3VsdFxuICovXG5mdW5jdGlvbiBhcnJheUZsYXQoXG4gICAgc3R5bGVzOiBDU1NSZXN1bHRBcnJheSwgcmVzdWx0OiBDU1NSZXN1bHRbXSA9IFtdKTogQ1NTUmVzdWx0W10ge1xuICBmb3IgKGxldCBpID0gMCwgbGVuZ3RoID0gc3R5bGVzLmxlbmd0aDsgaSA8IGxlbmd0aDsgaSsrKSB7XG4gICAgY29uc3QgdmFsdWUgPSBzdHlsZXNbaV07XG4gICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICBhcnJheUZsYXQodmFsdWUsIHJlc3VsdCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJlc3VsdC5wdXNoKHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqIERlZXBseSBmbGF0dGVucyBzdHlsZXMgYXJyYXkuIFVzZXMgbmF0aXZlIGZsYXQgaWYgYXZhaWxhYmxlLiAqL1xuY29uc3QgZmxhdHRlblN0eWxlcyA9IChzdHlsZXM6IENTU1Jlc3VsdEFycmF5KTogQ1NTUmVzdWx0W10gPT5cbiAgICBzdHlsZXMuZmxhdCA/IHN0eWxlcy5mbGF0KEluZmluaXR5KSA6IGFycmF5RmxhdChzdHlsZXMpO1xuXG5leHBvcnQgY2xhc3MgTGl0RWxlbWVudCBleHRlbmRzIFVwZGF0aW5nRWxlbWVudCB7XG4gIC8qKlxuICAgKiBFbnN1cmUgdGhpcyBjbGFzcyBpcyBtYXJrZWQgYXMgYGZpbmFsaXplZGAgYXMgYW4gb3B0aW1pemF0aW9uIGVuc3VyaW5nXG4gICAqIGl0IHdpbGwgbm90IG5lZWRsZXNzbHkgdHJ5IHRvIGBmaW5hbGl6ZWAuXG4gICAqL1xuICBwcm90ZWN0ZWQgc3RhdGljIGZpbmFsaXplZCA9IHRydWU7XG5cbiAgLyoqXG4gICAqIFJlbmRlciBtZXRob2QgdXNlZCB0byByZW5kZXIgdGhlIGxpdC1odG1sIFRlbXBsYXRlUmVzdWx0IHRvIHRoZSBlbGVtZW50J3NcbiAgICogRE9NLlxuICAgKiBAcGFyYW0ge1RlbXBsYXRlUmVzdWx0fSBUZW1wbGF0ZSB0byByZW5kZXIuXG4gICAqIEBwYXJhbSB7RWxlbWVudHxEb2N1bWVudEZyYWdtZW50fSBOb2RlIGludG8gd2hpY2ggdG8gcmVuZGVyLlxuICAgKiBAcGFyYW0ge1N0cmluZ30gRWxlbWVudCBuYW1lLlxuICAgKiBAbm9jb2xsYXBzZVxuICAgKi9cbiAgc3RhdGljIHJlbmRlciA9IHJlbmRlcjtcblxuICAvKipcbiAgICogQXJyYXkgb2Ygc3R5bGVzIHRvIGFwcGx5IHRvIHRoZSBlbGVtZW50LiBUaGUgc3R5bGVzIHNob3VsZCBiZSBkZWZpbmVkXG4gICAqIHVzaW5nIHRoZSBgY3NzYCB0YWcgZnVuY3Rpb24uXG4gICAqL1xuICBzdGF0aWMgc3R5bGVzPzogQ1NTUmVzdWx0fENTU1Jlc3VsdEFycmF5O1xuXG4gIHByaXZhdGUgc3RhdGljIF9zdHlsZXM6IENTU1Jlc3VsdFtdfHVuZGVmaW5lZDtcblxuICAvKiogQG5vY29sbGFwc2UgKi9cbiAgcHJvdGVjdGVkIHN0YXRpYyBmaW5hbGl6ZSgpIHtcbiAgICBzdXBlci5maW5hbGl6ZSgpO1xuICAgIC8vIFByZXBhcmUgc3R5bGluZyB0aGF0IGlzIHN0YW1wZWQgYXQgZmlyc3QgcmVuZGVyIHRpbWUuIFN0eWxpbmdcbiAgICAvLyBpcyBidWlsdCBmcm9tIHVzZXIgcHJvdmlkZWQgYHN0eWxlc2Agb3IgaXMgaW5oZXJpdGVkIGZyb20gdGhlIHN1cGVyY2xhc3MuXG4gICAgdGhpcy5fc3R5bGVzID1cbiAgICAgICAgdGhpcy5oYXNPd25Qcm9wZXJ0eShKU0NvbXBpbGVyX3JlbmFtZVByb3BlcnR5KCdzdHlsZXMnLCB0aGlzKSkgP1xuICAgICAgICB0aGlzLl9nZXRVbmlxdWVTdHlsZXMoKSA6XG4gICAgICAgIHRoaXMuX3N0eWxlcyB8fCBbXTtcbiAgfVxuXG4gIC8qKiBAbm9jb2xsYXBzZSAqL1xuICBwcml2YXRlIHN0YXRpYyBfZ2V0VW5pcXVlU3R5bGVzKCk6IENTU1Jlc3VsdFtdIHtcbiAgICAvLyBUYWtlIGNhcmUgbm90IHRvIGNhbGwgYHRoaXMuc3R5bGVzYCBtdWx0aXBsZSB0aW1lcyBzaW5jZSB0aGlzIGdlbmVyYXRlc1xuICAgIC8vIG5ldyBDU1NSZXN1bHRzIGVhY2ggdGltZS5cbiAgICAvLyBUT0RPKHNvcnZlbGwpOiBTaW5jZSB3ZSBkbyBub3QgY2FjaGUgQ1NTUmVzdWx0cyBieSBpbnB1dCwgYW55XG4gICAgLy8gc2hhcmVkIHN0eWxlcyB3aWxsIGdlbmVyYXRlIG5ldyBzdHlsZXNoZWV0IG9iamVjdHMsIHdoaWNoIGlzIHdhc3RlZnVsLlxuICAgIC8vIFRoaXMgc2hvdWxkIGJlIGFkZHJlc3NlZCB3aGVuIGEgYnJvd3NlciBzaGlwcyBjb25zdHJ1Y3RhYmxlXG4gICAgLy8gc3R5bGVzaGVldHMuXG4gICAgY29uc3QgdXNlclN0eWxlcyA9IHRoaXMuc3R5bGVzO1xuICAgIGNvbnN0IHN0eWxlczogQ1NTUmVzdWx0W10gPSBbXTtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh1c2VyU3R5bGVzKSkge1xuICAgICAgY29uc3QgZmxhdFN0eWxlcyA9IGZsYXR0ZW5TdHlsZXModXNlclN0eWxlcyk7XG4gICAgICAvLyBBcyBhIHBlcmZvcm1hbmNlIG9wdGltaXphdGlvbiB0byBhdm9pZCBkdXBsaWNhdGVkIHN0eWxpbmcgdGhhdCBjYW5cbiAgICAgIC8vIG9jY3VyIGVzcGVjaWFsbHkgd2hlbiBjb21wb3NpbmcgdmlhIHN1YmNsYXNzaW5nLCBkZS1kdXBsaWNhdGUgc3R5bGVzXG4gICAgICAvLyBwcmVzZXJ2aW5nIHRoZSBsYXN0IGl0ZW0gaW4gdGhlIGxpc3QuIFRoZSBsYXN0IGl0ZW0gaXMga2VwdCB0b1xuICAgICAgLy8gdHJ5IHRvIHByZXNlcnZlIGNhc2NhZGUgb3JkZXIgd2l0aCB0aGUgYXNzdW1wdGlvbiB0aGF0IGl0J3MgbW9zdFxuICAgICAgLy8gaW1wb3J0YW50IHRoYXQgbGFzdCBhZGRlZCBzdHlsZXMgb3ZlcnJpZGUgcHJldmlvdXMgc3R5bGVzLlxuICAgICAgY29uc3Qgc3R5bGVTZXQgPSBmbGF0U3R5bGVzLnJlZHVjZVJpZ2h0KChzZXQsIHMpID0+IHtcbiAgICAgICAgc2V0LmFkZChzKTtcbiAgICAgICAgLy8gb24gSUUgc2V0LmFkZCBkb2VzIG5vdCByZXR1cm4gdGhlIHNldC5cbiAgICAgICAgcmV0dXJuIHNldDtcbiAgICAgIH0sIG5ldyBTZXQ8Q1NTUmVzdWx0PigpKTtcbiAgICAgIC8vIEFycmF5LmZyb20gZG9lcyBub3Qgd29yayBvbiBTZXQgaW4gSUVcbiAgICAgIHN0eWxlU2V0LmZvckVhY2goKHYpID0+IHN0eWxlcy51bnNoaWZ0KHYpKTtcbiAgICB9IGVsc2UgaWYgKHVzZXJTdHlsZXMpIHtcbiAgICAgIHN0eWxlcy5wdXNoKHVzZXJTdHlsZXMpO1xuICAgIH1cbiAgICByZXR1cm4gc3R5bGVzO1xuICB9XG5cbiAgcHJpdmF0ZSBfbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzPzogYm9vbGVhbjtcblxuICAvKipcbiAgICogTm9kZSBvciBTaGFkb3dSb290IGludG8gd2hpY2ggZWxlbWVudCBET00gc2hvdWxkIGJlIHJlbmRlcmVkLiBEZWZhdWx0c1xuICAgKiB0byBhbiBvcGVuIHNoYWRvd1Jvb3QuXG4gICAqL1xuICByZWFkb25seSByZW5kZXJSb290ITogRWxlbWVudHxEb2N1bWVudEZyYWdtZW50O1xuXG4gIC8qKlxuICAgKiBQZXJmb3JtcyBlbGVtZW50IGluaXRpYWxpemF0aW9uLiBCeSBkZWZhdWx0IHRoaXMgY2FsbHMgYGNyZWF0ZVJlbmRlclJvb3RgXG4gICAqIHRvIGNyZWF0ZSB0aGUgZWxlbWVudCBgcmVuZGVyUm9vdGAgbm9kZSBhbmQgY2FwdHVyZXMgYW55IHByZS1zZXQgdmFsdWVzIGZvclxuICAgKiByZWdpc3RlcmVkIHByb3BlcnRpZXMuXG4gICAqL1xuICBwcm90ZWN0ZWQgaW5pdGlhbGl6ZSgpIHtcbiAgICBzdXBlci5pbml0aWFsaXplKCk7XG4gICAgKHRoaXMgYXMge3JlbmRlclJvb3Q6IEVsZW1lbnQgfCBEb2N1bWVudEZyYWdtZW50fSkucmVuZGVyUm9vdCA9XG4gICAgICAgIHRoaXMuY3JlYXRlUmVuZGVyUm9vdCgpO1xuICAgIC8vIE5vdGUsIGlmIHJlbmRlclJvb3QgaXMgbm90IGEgc2hhZG93Um9vdCwgc3R5bGVzIHdvdWxkL2NvdWxkIGFwcGx5IHRvIHRoZVxuICAgIC8vIGVsZW1lbnQncyBnZXRSb290Tm9kZSgpLiBXaGlsZSB0aGlzIGNvdWxkIGJlIGRvbmUsIHdlJ3JlIGNob29zaW5nIG5vdCB0b1xuICAgIC8vIHN1cHBvcnQgdGhpcyBub3cgc2luY2UgaXQgd291bGQgcmVxdWlyZSBkaWZmZXJlbnQgbG9naWMgYXJvdW5kIGRlLWR1cGluZy5cbiAgICBpZiAod2luZG93LlNoYWRvd1Jvb3QgJiYgdGhpcy5yZW5kZXJSb290IGluc3RhbmNlb2Ygd2luZG93LlNoYWRvd1Jvb3QpIHtcbiAgICAgIHRoaXMuYWRvcHRTdHlsZXMoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogUmV0dXJucyB0aGUgbm9kZSBpbnRvIHdoaWNoIHRoZSBlbGVtZW50IHNob3VsZCByZW5kZXIgYW5kIGJ5IGRlZmF1bHRcbiAgICogY3JlYXRlcyBhbmQgcmV0dXJucyBhbiBvcGVuIHNoYWRvd1Jvb3QuIEltcGxlbWVudCB0byBjdXN0b21pemUgd2hlcmUgdGhlXG4gICAqIGVsZW1lbnQncyBET00gaXMgcmVuZGVyZWQuIEZvciBleGFtcGxlLCB0byByZW5kZXIgaW50byB0aGUgZWxlbWVudCdzXG4gICAqIGNoaWxkTm9kZXMsIHJldHVybiBgdGhpc2AuXG4gICAqIEByZXR1cm5zIHtFbGVtZW50fERvY3VtZW50RnJhZ21lbnR9IFJldHVybnMgYSBub2RlIGludG8gd2hpY2ggdG8gcmVuZGVyLlxuICAgKi9cbiAgcHJvdGVjdGVkIGNyZWF0ZVJlbmRlclJvb3QoKTogRWxlbWVudHxTaGFkb3dSb290IHtcbiAgICByZXR1cm4gdGhpcy5hdHRhY2hTaGFkb3coe21vZGU6ICdvcGVuJ30pO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGxpZXMgc3R5bGluZyB0byB0aGUgZWxlbWVudCBzaGFkb3dSb290IHVzaW5nIHRoZSBgc3RhdGljIGdldCBzdHlsZXNgXG4gICAqIHByb3BlcnR5LiBTdHlsaW5nIHdpbGwgYXBwbHkgdXNpbmcgYHNoYWRvd1Jvb3QuYWRvcHRlZFN0eWxlU2hlZXRzYCB3aGVyZVxuICAgKiBhdmFpbGFibGUgYW5kIHdpbGwgZmFsbGJhY2sgb3RoZXJ3aXNlLiBXaGVuIFNoYWRvdyBET00gaXMgcG9seWZpbGxlZCxcbiAgICogU2hhZHlDU1Mgc2NvcGVzIHN0eWxlcyBhbmQgYWRkcyB0aGVtIHRvIHRoZSBkb2N1bWVudC4gV2hlbiBTaGFkb3cgRE9NXG4gICAqIGlzIGF2YWlsYWJsZSBidXQgYGFkb3B0ZWRTdHlsZVNoZWV0c2AgaXMgbm90LCBzdHlsZXMgYXJlIGFwcGVuZGVkIHRvIHRoZVxuICAgKiBlbmQgb2YgdGhlIGBzaGFkb3dSb290YCB0byBbbWltaWMgc3BlY1xuICAgKiBiZWhhdmlvcl0oaHR0cHM6Ly93aWNnLmdpdGh1Yi5pby9jb25zdHJ1Y3Qtc3R5bGVzaGVldHMvI3VzaW5nLWNvbnN0cnVjdGVkLXN0eWxlc2hlZXRzKS5cbiAgICovXG4gIHByb3RlY3RlZCBhZG9wdFN0eWxlcygpIHtcbiAgICBjb25zdCBzdHlsZXMgPSAodGhpcy5jb25zdHJ1Y3RvciBhcyB0eXBlb2YgTGl0RWxlbWVudCkuX3N0eWxlcyE7XG4gICAgaWYgKHN0eWxlcy5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgLy8gVGhlcmUgYXJlIHRocmVlIHNlcGFyYXRlIGNhc2VzIGhlcmUgYmFzZWQgb24gU2hhZG93IERPTSBzdXBwb3J0LlxuICAgIC8vICgxKSBzaGFkb3dSb290IHBvbHlmaWxsZWQ6IHVzZSBTaGFkeUNTU1xuICAgIC8vICgyKSBzaGFkb3dSb290LmFkb3B0ZWRTdHlsZVNoZWV0cyBhdmFpbGFibGU6IHVzZSBpdC5cbiAgICAvLyAoMykgc2hhZG93Um9vdC5hZG9wdGVkU3R5bGVTaGVldHMgcG9seWZpbGxlZDogYXBwZW5kIHN0eWxlcyBhZnRlclxuICAgIC8vIHJlbmRlcmluZ1xuICAgIGlmICh3aW5kb3cuU2hhZHlDU1MgIT09IHVuZGVmaW5lZCAmJiAhd2luZG93LlNoYWR5Q1NTLm5hdGl2ZVNoYWRvdykge1xuICAgICAgd2luZG93LlNoYWR5Q1NTLlNjb3BpbmdTaGltLnByZXBhcmVBZG9wdGVkQ3NzVGV4dChcbiAgICAgICAgICBzdHlsZXMubWFwKChzKSA9PiBzLmNzc1RleHQpLCB0aGlzLmxvY2FsTmFtZSk7XG4gICAgfSBlbHNlIGlmIChzdXBwb3J0c0Fkb3B0aW5nU3R5bGVTaGVldHMpIHtcbiAgICAgICh0aGlzLnJlbmRlclJvb3QgYXMgU2hhZG93Um9vdCkuYWRvcHRlZFN0eWxlU2hlZXRzID1cbiAgICAgICAgICBzdHlsZXMubWFwKChzKSA9PiBzLnN0eWxlU2hlZXQhKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gVGhpcyBtdXN0IGJlIGRvbmUgYWZ0ZXIgcmVuZGVyaW5nIHNvIHRoZSBhY3R1YWwgc3R5bGUgaW5zZXJ0aW9uIGlzIGRvbmVcbiAgICAgIC8vIGluIGB1cGRhdGVgLlxuICAgICAgdGhpcy5fbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBjb25uZWN0ZWRDYWxsYmFjaygpIHtcbiAgICBzdXBlci5jb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgIC8vIE5vdGUsIGZpcnN0IHVwZGF0ZS9yZW5kZXIgaGFuZGxlcyBzdHlsZUVsZW1lbnQgc28gd2Ugb25seSBjYWxsIHRoaXMgaWZcbiAgICAvLyBjb25uZWN0ZWQgYWZ0ZXIgZmlyc3QgdXBkYXRlLlxuICAgIGlmICh0aGlzLmhhc1VwZGF0ZWQgJiYgd2luZG93LlNoYWR5Q1NTICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHdpbmRvdy5TaGFkeUNTUy5zdHlsZUVsZW1lbnQodGhpcyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFVwZGF0ZXMgdGhlIGVsZW1lbnQuIFRoaXMgbWV0aG9kIHJlZmxlY3RzIHByb3BlcnR5IHZhbHVlcyB0byBhdHRyaWJ1dGVzXG4gICAqIGFuZCBjYWxscyBgcmVuZGVyYCB0byByZW5kZXIgRE9NIHZpYSBsaXQtaHRtbC4gU2V0dGluZyBwcm9wZXJ0aWVzIGluc2lkZVxuICAgKiB0aGlzIG1ldGhvZCB3aWxsICpub3QqIHRyaWdnZXIgYW5vdGhlciB1cGRhdGUuXG4gICAqICogQHBhcmFtIF9jaGFuZ2VkUHJvcGVydGllcyBNYXAgb2YgY2hhbmdlZCBwcm9wZXJ0aWVzIHdpdGggb2xkIHZhbHVlc1xuICAgKi9cbiAgcHJvdGVjdGVkIHVwZGF0ZShjaGFuZ2VkUHJvcGVydGllczogUHJvcGVydHlWYWx1ZXMpIHtcbiAgICBzdXBlci51cGRhdGUoY2hhbmdlZFByb3BlcnRpZXMpO1xuICAgIGNvbnN0IHRlbXBsYXRlUmVzdWx0ID0gdGhpcy5yZW5kZXIoKSBhcyB1bmtub3duO1xuICAgIGlmICh0ZW1wbGF0ZVJlc3VsdCBpbnN0YW5jZW9mIFRlbXBsYXRlUmVzdWx0KSB7XG4gICAgICAodGhpcy5jb25zdHJ1Y3RvciBhcyB0eXBlb2YgTGl0RWxlbWVudClcbiAgICAgICAgICAucmVuZGVyKFxuICAgICAgICAgICAgICB0ZW1wbGF0ZVJlc3VsdCxcbiAgICAgICAgICAgICAgdGhpcy5yZW5kZXJSb290LFxuICAgICAgICAgICAgICB7c2NvcGVOYW1lOiB0aGlzLmxvY2FsTmFtZSwgZXZlbnRDb250ZXh0OiB0aGlzfSk7XG4gICAgfVxuICAgIC8vIFdoZW4gbmF0aXZlIFNoYWRvdyBET00gaXMgdXNlZCBidXQgYWRvcHRlZFN0eWxlcyBhcmUgbm90IHN1cHBvcnRlZCxcbiAgICAvLyBpbnNlcnQgc3R5bGluZyBhZnRlciByZW5kZXJpbmcgdG8gZW5zdXJlIGFkb3B0ZWRTdHlsZXMgaGF2ZSBoaWdoZXN0XG4gICAgLy8gcHJpb3JpdHkuXG4gICAgaWYgKHRoaXMuX25lZWRzU2hpbUFkb3B0ZWRTdHlsZVNoZWV0cykge1xuICAgICAgdGhpcy5fbmVlZHNTaGltQWRvcHRlZFN0eWxlU2hlZXRzID0gZmFsc2U7XG4gICAgICAodGhpcy5jb25zdHJ1Y3RvciBhcyB0eXBlb2YgTGl0RWxlbWVudCkuX3N0eWxlcyEuZm9yRWFjaCgocykgPT4ge1xuICAgICAgICBjb25zdCBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3N0eWxlJyk7XG4gICAgICAgIHN0eWxlLnRleHRDb250ZW50ID0gcy5jc3NUZXh0O1xuICAgICAgICB0aGlzLnJlbmRlclJvb3QuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEludm9rZWQgb24gZWFjaCB1cGRhdGUgdG8gcGVyZm9ybSByZW5kZXJpbmcgdGFza3MuIFRoaXMgbWV0aG9kIG11c3QgcmV0dXJuXG4gICAqIGEgbGl0LWh0bWwgVGVtcGxhdGVSZXN1bHQuIFNldHRpbmcgcHJvcGVydGllcyBpbnNpZGUgdGhpcyBtZXRob2Qgd2lsbCAqbm90KlxuICAgKiB0cmlnZ2VyIHRoZSBlbGVtZW50IHRvIHVwZGF0ZS5cbiAgICovXG4gIHByb3RlY3RlZCByZW5kZXIoKTogVGVtcGxhdGVSZXN1bHR8dm9pZCB7XG4gIH1cbn1cbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuLyoqXG4gKiBAbW9kdWxlIGxpdC1odG1sXG4gKi9cblxuaW1wb3J0IHtUZW1wbGF0ZVJlc3VsdH0gZnJvbSAnLi90ZW1wbGF0ZS1yZXN1bHQuanMnO1xuXG4vKipcbiAqIEFuIGV4cHJlc3Npb24gbWFya2VyIHdpdGggZW1iZWRkZWQgdW5pcXVlIGtleSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aFxuICogcG9zc2libGUgdGV4dCBpbiB0ZW1wbGF0ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBtYXJrZXIgPSBge3tsaXQtJHtTdHJpbmcoTWF0aC5yYW5kb20oKSkuc2xpY2UoMil9fX1gO1xuXG4vKipcbiAqIEFuIGV4cHJlc3Npb24gbWFya2VyIHVzZWQgdGV4dC1wb3NpdGlvbnMsIG11bHRpLWJpbmRpbmcgYXR0cmlidXRlcywgYW5kXG4gKiBhdHRyaWJ1dGVzIHdpdGggbWFya3VwLWxpa2UgdGV4dCB2YWx1ZXMuXG4gKi9cbmV4cG9ydCBjb25zdCBub2RlTWFya2VyID0gYDwhLS0ke21hcmtlcn0tLT5gO1xuXG5leHBvcnQgY29uc3QgbWFya2VyUmVnZXggPSBuZXcgUmVnRXhwKGAke21hcmtlcn18JHtub2RlTWFya2VyfWApO1xuXG4vKipcbiAqIFN1ZmZpeCBhcHBlbmRlZCB0byBhbGwgYm91bmQgYXR0cmlidXRlIG5hbWVzLlxuICovXG5leHBvcnQgY29uc3QgYm91bmRBdHRyaWJ1dGVTdWZmaXggPSAnJGxpdCQnO1xuXG4vKipcbiAqIEFuIHVwZGF0ZWFibGUgVGVtcGxhdGUgdGhhdCB0cmFja3MgdGhlIGxvY2F0aW9uIG9mIGR5bmFtaWMgcGFydHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZSB7XG4gIHBhcnRzOiBUZW1wbGF0ZVBhcnRbXSA9IFtdO1xuICBlbGVtZW50OiBIVE1MVGVtcGxhdGVFbGVtZW50O1xuXG4gIGNvbnN0cnVjdG9yKHJlc3VsdDogVGVtcGxhdGVSZXN1bHQsIGVsZW1lbnQ6IEhUTUxUZW1wbGF0ZUVsZW1lbnQpIHtcbiAgICB0aGlzLmVsZW1lbnQgPSBlbGVtZW50O1xuICAgIGxldCBpbmRleCA9IC0xO1xuICAgIGxldCBwYXJ0SW5kZXggPSAwO1xuICAgIGNvbnN0IG5vZGVzVG9SZW1vdmU6IE5vZGVbXSA9IFtdO1xuICAgIGNvbnN0IF9wcmVwYXJlVGVtcGxhdGUgPSAodGVtcGxhdGU6IEhUTUxUZW1wbGF0ZUVsZW1lbnQpID0+IHtcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSB0ZW1wbGF0ZS5jb250ZW50O1xuICAgICAgLy8gRWRnZSBuZWVkcyBhbGwgNCBwYXJhbWV0ZXJzIHByZXNlbnQ7IElFMTEgbmVlZHMgM3JkIHBhcmFtZXRlciB0byBiZVxuICAgICAgLy8gbnVsbFxuICAgICAgY29uc3Qgd2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihcbiAgICAgICAgICBjb250ZW50LFxuICAgICAgICAgIDEzMyAvKiBOb2RlRmlsdGVyLlNIT1dfe0VMRU1FTlR8Q09NTUVOVHxURVhUfSAqLyxcbiAgICAgICAgICBudWxsLFxuICAgICAgICAgIGZhbHNlKTtcbiAgICAgIC8vIEtlZXBzIHRyYWNrIG9mIHRoZSBsYXN0IGluZGV4IGFzc29jaWF0ZWQgd2l0aCBhIHBhcnQuIFdlIHRyeSB0byBkZWxldGVcbiAgICAgIC8vIHVubmVjZXNzYXJ5IG5vZGVzLCBidXQgd2UgbmV2ZXIgd2FudCB0byBhc3NvY2lhdGUgdHdvIGRpZmZlcmVudCBwYXJ0c1xuICAgICAgLy8gdG8gdGhlIHNhbWUgaW5kZXguIFRoZXkgbXVzdCBoYXZlIGEgY29uc3RhbnQgbm9kZSBiZXR3ZWVuLlxuICAgICAgbGV0IGxhc3RQYXJ0SW5kZXggPSAwO1xuICAgICAgd2hpbGUgKHdhbGtlci5uZXh0Tm9kZSgpKSB7XG4gICAgICAgIGluZGV4Kys7XG4gICAgICAgIGNvbnN0IG5vZGUgPSB3YWxrZXIuY3VycmVudE5vZGUgYXMgRWxlbWVudCB8IENvbW1lbnQgfCBUZXh0O1xuICAgICAgICBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMSAvKiBOb2RlLkVMRU1FTlRfTk9ERSAqLykge1xuICAgICAgICAgIGlmICgobm9kZSBhcyBFbGVtZW50KS5oYXNBdHRyaWJ1dGVzKCkpIHtcbiAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZXMgPSAobm9kZSBhcyBFbGVtZW50KS5hdHRyaWJ1dGVzO1xuICAgICAgICAgICAgLy8gUGVyXG4gICAgICAgICAgICAvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9BUEkvTmFtZWROb2RlTWFwLFxuICAgICAgICAgICAgLy8gYXR0cmlidXRlcyBhcmUgbm90IGd1YXJhbnRlZWQgdG8gYmUgcmV0dXJuZWQgaW4gZG9jdW1lbnQgb3JkZXIuXG4gICAgICAgICAgICAvLyBJbiBwYXJ0aWN1bGFyLCBFZGdlL0lFIGNhbiByZXR1cm4gdGhlbSBvdXQgb2Ygb3JkZXIsIHNvIHdlIGNhbm5vdFxuICAgICAgICAgICAgLy8gYXNzdW1lIGEgY29ycmVzcG9uZGFuY2UgYmV0d2VlbiBwYXJ0IGluZGV4IGFuZCBhdHRyaWJ1dGUgaW5kZXguXG4gICAgICAgICAgICBsZXQgY291bnQgPSAwO1xuICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBhdHRyaWJ1dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgIGlmIChhdHRyaWJ1dGVzW2ldLnZhbHVlLmluZGV4T2YobWFya2VyKSA+PSAwKSB7XG4gICAgICAgICAgICAgICAgY291bnQrKztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgd2hpbGUgKGNvdW50LS0gPiAwKSB7XG4gICAgICAgICAgICAgIC8vIEdldCB0aGUgdGVtcGxhdGUgbGl0ZXJhbCBzZWN0aW9uIGxlYWRpbmcgdXAgdG8gdGhlIGZpcnN0XG4gICAgICAgICAgICAgIC8vIGV4cHJlc3Npb24gaW4gdGhpcyBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAgY29uc3Qgc3RyaW5nRm9yUGFydCA9IHJlc3VsdC5zdHJpbmdzW3BhcnRJbmRleF07XG4gICAgICAgICAgICAgIC8vIEZpbmQgdGhlIGF0dHJpYnV0ZSBuYW1lXG4gICAgICAgICAgICAgIGNvbnN0IG5hbWUgPSBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4LmV4ZWMoc3RyaW5nRm9yUGFydCkhWzJdO1xuICAgICAgICAgICAgICAvLyBGaW5kIHRoZSBjb3JyZXNwb25kaW5nIGF0dHJpYnV0ZVxuICAgICAgICAgICAgICAvLyBBbGwgYm91bmQgYXR0cmlidXRlcyBoYXZlIGhhZCBhIHN1ZmZpeCBhZGRlZCBpblxuICAgICAgICAgICAgICAvLyBUZW1wbGF0ZVJlc3VsdCNnZXRIVE1MIHRvIG9wdCBvdXQgb2Ygc3BlY2lhbCBhdHRyaWJ1dGVcbiAgICAgICAgICAgICAgLy8gaGFuZGxpbmcuIFRvIGxvb2sgdXAgdGhlIGF0dHJpYnV0ZSB2YWx1ZSB3ZSBhbHNvIG5lZWQgdG8gYWRkXG4gICAgICAgICAgICAgIC8vIHRoZSBzdWZmaXguXG4gICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZUxvb2t1cE5hbWUgPVxuICAgICAgICAgICAgICAgICAgbmFtZS50b0xvd2VyQ2FzZSgpICsgYm91bmRBdHRyaWJ1dGVTdWZmaXg7XG4gICAgICAgICAgICAgIGNvbnN0IGF0dHJpYnV0ZVZhbHVlID1cbiAgICAgICAgICAgICAgICAgIChub2RlIGFzIEVsZW1lbnQpLmdldEF0dHJpYnV0ZShhdHRyaWJ1dGVMb29rdXBOYW1lKSE7XG4gICAgICAgICAgICAgIGNvbnN0IHN0cmluZ3MgPSBhdHRyaWJ1dGVWYWx1ZS5zcGxpdChtYXJrZXJSZWdleCk7XG4gICAgICAgICAgICAgIHRoaXMucGFydHMucHVzaCh7dHlwZTogJ2F0dHJpYnV0ZScsIGluZGV4LCBuYW1lLCBzdHJpbmdzfSk7XG4gICAgICAgICAgICAgIChub2RlIGFzIEVsZW1lbnQpLnJlbW92ZUF0dHJpYnV0ZShhdHRyaWJ1dGVMb29rdXBOYW1lKTtcbiAgICAgICAgICAgICAgcGFydEluZGV4ICs9IHN0cmluZ3MubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKChub2RlIGFzIEVsZW1lbnQpLnRhZ05hbWUgPT09ICdURU1QTEFURScpIHtcbiAgICAgICAgICAgIF9wcmVwYXJlVGVtcGxhdGUobm9kZSBhcyBIVE1MVGVtcGxhdGVFbGVtZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gMyAvKiBOb2RlLlRFWFRfTk9ERSAqLykge1xuICAgICAgICAgIGNvbnN0IGRhdGEgPSAobm9kZSBhcyBUZXh0KS5kYXRhITtcbiAgICAgICAgICBpZiAoZGF0YS5pbmRleE9mKG1hcmtlcikgPj0gMCkge1xuICAgICAgICAgICAgY29uc3QgcGFyZW50ID0gbm9kZS5wYXJlbnROb2RlITtcbiAgICAgICAgICAgIGNvbnN0IHN0cmluZ3MgPSBkYXRhLnNwbGl0KG1hcmtlclJlZ2V4KTtcbiAgICAgICAgICAgIGNvbnN0IGxhc3RJbmRleCA9IHN0cmluZ3MubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgIC8vIEdlbmVyYXRlIGEgbmV3IHRleHQgbm9kZSBmb3IgZWFjaCBsaXRlcmFsIHNlY3Rpb25cbiAgICAgICAgICAgIC8vIFRoZXNlIG5vZGVzIGFyZSBhbHNvIHVzZWQgYXMgdGhlIG1hcmtlcnMgZm9yIG5vZGUgcGFydHNcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGFzdEluZGV4OyBpKyspIHtcbiAgICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShcbiAgICAgICAgICAgICAgICAgIChzdHJpbmdzW2ldID09PSAnJykgPyBjcmVhdGVNYXJrZXIoKSA6XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoc3RyaW5nc1tpXSksXG4gICAgICAgICAgICAgICAgICBub2RlKTtcbiAgICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHt0eXBlOiAnbm9kZScsIGluZGV4OiArK2luZGV4fSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBJZiB0aGVyZSdzIG5vIHRleHQsIHdlIG11c3QgaW5zZXJ0IGEgY29tbWVudCB0byBtYXJrIG91ciBwbGFjZS5cbiAgICAgICAgICAgIC8vIEVsc2UsIHdlIGNhbiB0cnVzdCBpdCB3aWxsIHN0aWNrIGFyb3VuZCBhZnRlciBjbG9uaW5nLlxuICAgICAgICAgICAgaWYgKHN0cmluZ3NbbGFzdEluZGV4XSA9PT0gJycpIHtcbiAgICAgICAgICAgICAgcGFyZW50Lmluc2VydEJlZm9yZShjcmVhdGVNYXJrZXIoKSwgbm9kZSk7XG4gICAgICAgICAgICAgIG5vZGVzVG9SZW1vdmUucHVzaChub2RlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIChub2RlIGFzIFRleHQpLmRhdGEgPSBzdHJpbmdzW2xhc3RJbmRleF07XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBXZSBoYXZlIGEgcGFydCBmb3IgZWFjaCBtYXRjaCBmb3VuZFxuICAgICAgICAgICAgcGFydEluZGV4ICs9IGxhc3RJbmRleDtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCAvKiBOb2RlLkNPTU1FTlRfTk9ERSAqLykge1xuICAgICAgICAgIGlmICgobm9kZSBhcyBDb21tZW50KS5kYXRhID09PSBtYXJrZXIpIHtcbiAgICAgICAgICAgIGNvbnN0IHBhcmVudCA9IG5vZGUucGFyZW50Tm9kZSE7XG4gICAgICAgICAgICAvLyBBZGQgYSBuZXcgbWFya2VyIG5vZGUgdG8gYmUgdGhlIHN0YXJ0Tm9kZSBvZiB0aGUgUGFydCBpZiBhbnkgb2ZcbiAgICAgICAgICAgIC8vIHRoZSBmb2xsb3dpbmcgYXJlIHRydWU6XG4gICAgICAgICAgICAvLyAgKiBXZSBkb24ndCBoYXZlIGEgcHJldmlvdXNTaWJsaW5nXG4gICAgICAgICAgICAvLyAgKiBUaGUgcHJldmlvdXNTaWJsaW5nIGlzIGFscmVhZHkgdGhlIHN0YXJ0IG9mIGEgcHJldmlvdXMgcGFydFxuICAgICAgICAgICAgaWYgKG5vZGUucHJldmlvdXNTaWJsaW5nID09PSBudWxsIHx8IGluZGV4ID09PSBsYXN0UGFydEluZGV4KSB7XG4gICAgICAgICAgICAgIGluZGV4Kys7XG4gICAgICAgICAgICAgIHBhcmVudC5pbnNlcnRCZWZvcmUoY3JlYXRlTWFya2VyKCksIG5vZGUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdFBhcnRJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgdGhpcy5wYXJ0cy5wdXNoKHt0eXBlOiAnbm9kZScsIGluZGV4fSk7XG4gICAgICAgICAgICAvLyBJZiB3ZSBkb24ndCBoYXZlIGEgbmV4dFNpYmxpbmcsIGtlZXAgdGhpcyBub2RlIHNvIHdlIGhhdmUgYW4gZW5kLlxuICAgICAgICAgICAgLy8gRWxzZSwgd2UgY2FuIHJlbW92ZSBpdCB0byBzYXZlIGZ1dHVyZSBjb3N0cy5cbiAgICAgICAgICAgIGlmIChub2RlLm5leHRTaWJsaW5nID09PSBudWxsKSB7XG4gICAgICAgICAgICAgIChub2RlIGFzIENvbW1lbnQpLmRhdGEgPSAnJztcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIG5vZGVzVG9SZW1vdmUucHVzaChub2RlKTtcbiAgICAgICAgICAgICAgaW5kZXgtLTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHBhcnRJbmRleCsrO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBsZXQgaSA9IC0xO1xuICAgICAgICAgICAgd2hpbGUgKChpID0gKG5vZGUgYXMgQ29tbWVudCkuZGF0YSEuaW5kZXhPZihtYXJrZXIsIGkgKyAxKSkgIT09XG4gICAgICAgICAgICAgICAgICAgLTEpIHtcbiAgICAgICAgICAgICAgLy8gQ29tbWVudCBub2RlIGhhcyBhIGJpbmRpbmcgbWFya2VyIGluc2lkZSwgbWFrZSBhbiBpbmFjdGl2ZSBwYXJ0XG4gICAgICAgICAgICAgIC8vIFRoZSBiaW5kaW5nIHdvbid0IHdvcmssIGJ1dCBzdWJzZXF1ZW50IGJpbmRpbmdzIHdpbGxcbiAgICAgICAgICAgICAgLy8gVE9ETyAoanVzdGluZmFnbmFuaSk6IGNvbnNpZGVyIHdoZXRoZXIgaXQncyBldmVuIHdvcnRoIGl0IHRvXG4gICAgICAgICAgICAgIC8vIG1ha2UgYmluZGluZ3MgaW4gY29tbWVudHMgd29ya1xuICAgICAgICAgICAgICB0aGlzLnBhcnRzLnB1c2goe3R5cGU6ICdub2RlJywgaW5kZXg6IC0xfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJlcGFyZVRlbXBsYXRlKGVsZW1lbnQpO1xuICAgIC8vIFJlbW92ZSB0ZXh0IGJpbmRpbmcgbm9kZXMgYWZ0ZXIgdGhlIHdhbGsgdG8gbm90IGRpc3R1cmIgdGhlIFRyZWVXYWxrZXJcbiAgICBmb3IgKGNvbnN0IG4gb2Ygbm9kZXNUb1JlbW92ZSkge1xuICAgICAgbi5wYXJlbnROb2RlIS5yZW1vdmVDaGlsZChuKTtcbiAgICB9XG4gIH1cbn1cblxuLyoqXG4gKiBBIHBsYWNlaG9sZGVyIGZvciBhIGR5bmFtaWMgZXhwcmVzc2lvbiBpbiBhbiBIVE1MIHRlbXBsYXRlLlxuICpcbiAqIFRoZXJlIGFyZSB0d28gYnVpbHQtaW4gcGFydCB0eXBlczogQXR0cmlidXRlUGFydCBhbmQgTm9kZVBhcnQuIE5vZGVQYXJ0c1xuICogYWx3YXlzIHJlcHJlc2VudCBhIHNpbmdsZSBkeW5hbWljIGV4cHJlc3Npb24sIHdoaWxlIEF0dHJpYnV0ZVBhcnRzIG1heVxuICogcmVwcmVzZW50IGFzIG1hbnkgZXhwcmVzc2lvbnMgYXJlIGNvbnRhaW5lZCBpbiB0aGUgYXR0cmlidXRlLlxuICpcbiAqIEEgVGVtcGxhdGUncyBwYXJ0cyBhcmUgbXV0YWJsZSwgc28gcGFydHMgY2FuIGJlIHJlcGxhY2VkIG9yIG1vZGlmaWVkXG4gKiAocG9zc2libHkgdG8gaW1wbGVtZW50IGRpZmZlcmVudCB0ZW1wbGF0ZSBzZW1hbnRpY3MpLiBUaGUgY29udHJhY3QgaXMgdGhhdFxuICogcGFydHMgY2FuIG9ubHkgYmUgcmVwbGFjZWQsIG5vdCByZW1vdmVkLCBhZGRlZCBvciByZW9yZGVyZWQsIGFuZCBwYXJ0cyBtdXN0XG4gKiBhbHdheXMgY29uc3VtZSB0aGUgY29ycmVjdCBudW1iZXIgb2YgdmFsdWVzIGluIHRoZWlyIGB1cGRhdGUoKWAgbWV0aG9kLlxuICpcbiAqIFRPRE8oanVzdGluZmFnbmFuaSk6IFRoYXQgcmVxdWlyZW1lbnQgaXMgYSBsaXR0bGUgZnJhZ2lsZS4gQVxuICogVGVtcGxhdGVJbnN0YW5jZSBjb3VsZCBpbnN0ZWFkIGJlIG1vcmUgY2FyZWZ1bCBhYm91dCB3aGljaCB2YWx1ZXMgaXQgZ2l2ZXNcbiAqIHRvIFBhcnQudXBkYXRlKCkuXG4gKi9cbmV4cG9ydCB0eXBlIFRlbXBsYXRlUGFydCA9IHtcbiAgdHlwZTogJ25vZGUnLFxuICBpbmRleDogbnVtYmVyXG59fHt0eXBlOiAnYXR0cmlidXRlJywgaW5kZXg6IG51bWJlciwgbmFtZTogc3RyaW5nLCBzdHJpbmdzOiBzdHJpbmdbXX07XG5cbmV4cG9ydCBjb25zdCBpc1RlbXBsYXRlUGFydEFjdGl2ZSA9IChwYXJ0OiBUZW1wbGF0ZVBhcnQpID0+IHBhcnQuaW5kZXggIT09IC0xO1xuXG4vLyBBbGxvd3MgYGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJycpYCB0byBiZSByZW5hbWVkIGZvciBhXG4vLyBzbWFsbCBtYW51YWwgc2l6ZS1zYXZpbmdzLlxuZXhwb3J0IGNvbnN0IGNyZWF0ZU1hcmtlciA9ICgpID0+IGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQoJycpO1xuXG4vKipcbiAqIFRoaXMgcmVnZXggZXh0cmFjdHMgdGhlIGF0dHJpYnV0ZSBuYW1lIHByZWNlZGluZyBhbiBhdHRyaWJ1dGUtcG9zaXRpb25cbiAqIGV4cHJlc3Npb24uIEl0IGRvZXMgdGhpcyBieSBtYXRjaGluZyB0aGUgc3ludGF4IGFsbG93ZWQgZm9yIGF0dHJpYnV0ZXNcbiAqIGFnYWluc3QgdGhlIHN0cmluZyBsaXRlcmFsIGRpcmVjdGx5IHByZWNlZGluZyB0aGUgZXhwcmVzc2lvbiwgYXNzdW1pbmcgdGhhdFxuICogdGhlIGV4cHJlc3Npb24gaXMgaW4gYW4gYXR0cmlidXRlLXZhbHVlIHBvc2l0aW9uLlxuICpcbiAqIFNlZSBhdHRyaWJ1dGVzIGluIHRoZSBIVE1MIHNwZWM6XG4gKiBodHRwczovL3d3dy53My5vcmcvVFIvaHRtbDUvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0wXG4gKlxuICogXCJcXDAtXFx4MUZcXHg3Ri1cXHg5RlwiIGFyZSBVbmljb2RlIGNvbnRyb2wgY2hhcmFjdGVyc1xuICpcbiAqIFwiIFxceDA5XFx4MGFcXHgwY1xceDBkXCIgYXJlIEhUTUwgc3BhY2UgY2hhcmFjdGVyczpcbiAqIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9pbmZyYXN0cnVjdHVyZS5odG1sI3NwYWNlLWNoYXJhY3RlclxuICpcbiAqIFNvIGFuIGF0dHJpYnV0ZSBpczpcbiAqICAqIFRoZSBuYW1lOiBhbnkgY2hhcmFjdGVyIGV4Y2VwdCBhIGNvbnRyb2wgY2hhcmFjdGVyLCBzcGFjZSBjaGFyYWN0ZXIsICgnKSxcbiAqICAgIChcIiksIFwiPlwiLCBcIj1cIiwgb3IgXCIvXCJcbiAqICAqIEZvbGxvd2VkIGJ5IHplcm8gb3IgbW9yZSBzcGFjZSBjaGFyYWN0ZXJzXG4gKiAgKiBGb2xsb3dlZCBieSBcIj1cIlxuICogICogRm9sbG93ZWQgYnkgemVybyBvciBtb3JlIHNwYWNlIGNoYXJhY3RlcnNcbiAqICAqIEZvbGxvd2VkIGJ5OlxuICogICAgKiBBbnkgY2hhcmFjdGVyIGV4Y2VwdCBzcGFjZSwgKCcpLCAoXCIpLCBcIjxcIiwgXCI+XCIsIFwiPVwiLCAoYCksIG9yXG4gKiAgICAqIChcIikgdGhlbiBhbnkgbm9uLShcIiksIG9yXG4gKiAgICAqICgnKSB0aGVuIGFueSBub24tKCcpXG4gKi9cbmV4cG9ydCBjb25zdCBsYXN0QXR0cmlidXRlTmFtZVJlZ2V4ID1cbiAgICAvKFsgXFx4MDlcXHgwYVxceDBjXFx4MGRdKShbXlxcMC1cXHgxRlxceDdGLVxceDlGIFxceDA5XFx4MGFcXHgwY1xceDBkXCInPj0vXSspKFsgXFx4MDlcXHgwYVxceDBjXFx4MGRdKj1bIFxceDA5XFx4MGFcXHgwY1xceDBkXSooPzpbXiBcXHgwOVxceDBhXFx4MGNcXHgwZFwiJ2A8Pj1dKnxcIlteXCJdKnwnW14nXSopKSQvO1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG4vKipcbiAqIEBtb2R1bGUgbGl0LWh0bWxcbiAqL1xuXG5pbXBvcnQge2lzRGlyZWN0aXZlfSBmcm9tICcuL2RpcmVjdGl2ZS5qcyc7XG5pbXBvcnQge3JlbW92ZU5vZGVzfSBmcm9tICcuL2RvbS5qcyc7XG5pbXBvcnQge25vQ2hhbmdlLCBub3RoaW5nLCBQYXJ0fSBmcm9tICcuL3BhcnQuanMnO1xuaW1wb3J0IHtSZW5kZXJPcHRpb25zfSBmcm9tICcuL3JlbmRlci1vcHRpb25zLmpzJztcbmltcG9ydCB7VGVtcGxhdGVJbnN0YW5jZX0gZnJvbSAnLi90ZW1wbGF0ZS1pbnN0YW5jZS5qcyc7XG5pbXBvcnQge1RlbXBsYXRlUmVzdWx0fSBmcm9tICcuL3RlbXBsYXRlLXJlc3VsdC5qcyc7XG5pbXBvcnQge2NyZWF0ZU1hcmtlcn0gZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXR5cGVvZi1vcGVyYXRvclxuZXhwb3J0IHR5cGUgUHJpbWl0aXZlID0gbnVsbHx1bmRlZmluZWR8Ym9vbGVhbnxudW1iZXJ8c3RyaW5nfFN5bWJvbHxiaWdpbnQ7XG5leHBvcnQgY29uc3QgaXNQcmltaXRpdmUgPSAodmFsdWU6IHVua25vd24pOiB2YWx1ZSBpcyBQcmltaXRpdmUgPT4ge1xuICByZXR1cm4gKFxuICAgICAgdmFsdWUgPT09IG51bGwgfHxcbiAgICAgICEodHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyB8fCB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbicpKTtcbn07XG5cbi8qKlxuICogU2V0cyBhdHRyaWJ1dGUgdmFsdWVzIGZvciBBdHRyaWJ1dGVQYXJ0cywgc28gdGhhdCB0aGUgdmFsdWUgaXMgb25seSBzZXQgb25jZVxuICogZXZlbiBpZiB0aGVyZSBhcmUgbXVsdGlwbGUgcGFydHMgZm9yIGFuIGF0dHJpYnV0ZS5cbiAqL1xuZXhwb3J0IGNsYXNzIEF0dHJpYnV0ZUNvbW1pdHRlciB7XG4gIGVsZW1lbnQ6IEVsZW1lbnQ7XG4gIG5hbWU6IHN0cmluZztcbiAgc3RyaW5nczogc3RyaW5nW107XG4gIHBhcnRzOiBBdHRyaWJ1dGVQYXJ0W107XG4gIGRpcnR5ID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50LCBuYW1lOiBzdHJpbmcsIHN0cmluZ3M6IHN0cmluZ1tdKSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuc3RyaW5ncyA9IHN0cmluZ3M7XG4gICAgdGhpcy5wYXJ0cyA9IFtdO1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3RyaW5ncy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIHRoaXMucGFydHNbaV0gPSB0aGlzLl9jcmVhdGVQYXJ0KCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBzaW5nbGUgcGFydC4gT3ZlcnJpZGUgdGhpcyB0byBjcmVhdGUgYSBkaWZmZXJudCB0eXBlIG9mIHBhcnQuXG4gICAqL1xuICBwcm90ZWN0ZWQgX2NyZWF0ZVBhcnQoKTogQXR0cmlidXRlUGFydCB7XG4gICAgcmV0dXJuIG5ldyBBdHRyaWJ1dGVQYXJ0KHRoaXMpO1xuICB9XG5cbiAgcHJvdGVjdGVkIF9nZXRWYWx1ZSgpOiB1bmtub3duIHtcbiAgICBjb25zdCBzdHJpbmdzID0gdGhpcy5zdHJpbmdzO1xuICAgIGNvbnN0IGwgPSBzdHJpbmdzLmxlbmd0aCAtIDE7XG4gICAgbGV0IHRleHQgPSAnJztcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICB0ZXh0ICs9IHN0cmluZ3NbaV07XG4gICAgICBjb25zdCBwYXJ0ID0gdGhpcy5wYXJ0c1tpXTtcbiAgICAgIGlmIChwYXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgY29uc3QgdiA9IHBhcnQudmFsdWU7XG4gICAgICAgIGlmICh2ICE9IG51bGwgJiZcbiAgICAgICAgICAgIChBcnJheS5pc0FycmF5KHYpIHx8XG4gICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWFueVxuICAgICAgICAgICAgIHR5cGVvZiB2ICE9PSAnc3RyaW5nJyAmJiAodiBhcyBhbnkpW1N5bWJvbC5pdGVyYXRvcl0pKSB7XG4gICAgICAgICAgZm9yIChjb25zdCB0IG9mIHYgYXMgSXRlcmFibGU8dW5rbm93bj4pIHtcbiAgICAgICAgICAgIHRleHQgKz0gdHlwZW9mIHQgPT09ICdzdHJpbmcnID8gdCA6IFN0cmluZyh0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdGV4dCArPSB0eXBlb2YgdiA9PT0gJ3N0cmluZycgPyB2IDogU3RyaW5nKHYpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGV4dCArPSBzdHJpbmdzW2xdO1xuICAgIHJldHVybiB0ZXh0O1xuICB9XG5cbiAgY29tbWl0KCk6IHZvaWQge1xuICAgIGlmICh0aGlzLmRpcnR5KSB7XG4gICAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSwgdGhpcy5fZ2V0VmFsdWUoKSBhcyBzdHJpbmcpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgY2xhc3MgQXR0cmlidXRlUGFydCBpbXBsZW1lbnRzIFBhcnQge1xuICBjb21taXR0ZXI6IEF0dHJpYnV0ZUNvbW1pdHRlcjtcbiAgdmFsdWU6IHVua25vd24gPSB1bmRlZmluZWQ7XG5cbiAgY29uc3RydWN0b3IoY29taXR0ZXI6IEF0dHJpYnV0ZUNvbW1pdHRlcikge1xuICAgIHRoaXMuY29tbWl0dGVyID0gY29taXR0ZXI7XG4gIH1cblxuICBzZXRWYWx1ZSh2YWx1ZTogdW5rbm93bik6IHZvaWQge1xuICAgIGlmICh2YWx1ZSAhPT0gbm9DaGFuZ2UgJiYgKCFpc1ByaW1pdGl2ZSh2YWx1ZSkgfHwgdmFsdWUgIT09IHRoaXMudmFsdWUpKSB7XG4gICAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgICAvLyBJZiB0aGUgdmFsdWUgaXMgYSBub3QgYSBkaXJlY3RpdmUsIGRpcnR5IHRoZSBjb21taXR0ZXIgc28gdGhhdCBpdCdsbFxuICAgICAgLy8gY2FsbCBzZXRBdHRyaWJ1dGUuIElmIHRoZSB2YWx1ZSBpcyBhIGRpcmVjdGl2ZSwgaXQnbGwgZGlydHkgdGhlXG4gICAgICAvLyBjb21taXR0ZXIgaWYgaXQgY2FsbHMgc2V0VmFsdWUoKS5cbiAgICAgIGlmICghaXNEaXJlY3RpdmUodmFsdWUpKSB7XG4gICAgICAgIHRoaXMuY29tbWl0dGVyLmRpcnR5ID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBjb21taXQoKSB7XG4gICAgd2hpbGUgKGlzRGlyZWN0aXZlKHRoaXMudmFsdWUpKSB7XG4gICAgICBjb25zdCBkaXJlY3RpdmUgPSB0aGlzLnZhbHVlO1xuICAgICAgdGhpcy52YWx1ZSA9IG5vQ2hhbmdlO1xuICAgICAgZGlyZWN0aXZlKHRoaXMpO1xuICAgIH1cbiAgICBpZiAodGhpcy52YWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdGhpcy5jb21taXR0ZXIuY29tbWl0KCk7XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIE5vZGVQYXJ0IGltcGxlbWVudHMgUGFydCB7XG4gIG9wdGlvbnM6IFJlbmRlck9wdGlvbnM7XG4gIHN0YXJ0Tm9kZSE6IE5vZGU7XG4gIGVuZE5vZGUhOiBOb2RlO1xuICB2YWx1ZTogdW5rbm93biA9IHVuZGVmaW5lZDtcbiAgX3BlbmRpbmdWYWx1ZTogdW5rbm93biA9IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3RvcihvcHRpb25zOiBSZW5kZXJPcHRpb25zKSB7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIC8qKlxuICAgKiBJbnNlcnRzIHRoaXMgcGFydCBpbnRvIGEgY29udGFpbmVyLlxuICAgKlxuICAgKiBUaGlzIHBhcnQgbXVzdCBiZSBlbXB0eSwgYXMgaXRzIGNvbnRlbnRzIGFyZSBub3QgYXV0b21hdGljYWxseSBtb3ZlZC5cbiAgICovXG4gIGFwcGVuZEludG8oY29udGFpbmVyOiBOb2RlKSB7XG4gICAgdGhpcy5zdGFydE5vZGUgPSBjb250YWluZXIuYXBwZW5kQ2hpbGQoY3JlYXRlTWFya2VyKCkpO1xuICAgIHRoaXMuZW5kTm9kZSA9IGNvbnRhaW5lci5hcHBlbmRDaGlsZChjcmVhdGVNYXJrZXIoKSk7XG4gIH1cblxuICAvKipcbiAgICogSW5zZXJ0cyB0aGlzIHBhcnQgYmV0d2VlbiBgcmVmYCBhbmQgYHJlZmAncyBuZXh0IHNpYmxpbmcuIEJvdGggYHJlZmAgYW5kXG4gICAqIGl0cyBuZXh0IHNpYmxpbmcgbXVzdCBiZSBzdGF0aWMsIHVuY2hhbmdpbmcgbm9kZXMgc3VjaCBhcyB0aG9zZSB0aGF0IGFwcGVhclxuICAgKiBpbiBhIGxpdGVyYWwgc2VjdGlvbiBvZiBhIHRlbXBsYXRlLlxuICAgKlxuICAgKiBUaGlzIHBhcnQgbXVzdCBiZSBlbXB0eSwgYXMgaXRzIGNvbnRlbnRzIGFyZSBub3QgYXV0b21hdGljYWxseSBtb3ZlZC5cbiAgICovXG4gIGluc2VydEFmdGVyTm9kZShyZWY6IE5vZGUpIHtcbiAgICB0aGlzLnN0YXJ0Tm9kZSA9IHJlZjtcbiAgICB0aGlzLmVuZE5vZGUgPSByZWYubmV4dFNpYmxpbmchO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgdGhpcyBwYXJ0IGludG8gYSBwYXJlbnQgcGFydC5cbiAgICpcbiAgICogVGhpcyBwYXJ0IG11c3QgYmUgZW1wdHksIGFzIGl0cyBjb250ZW50cyBhcmUgbm90IGF1dG9tYXRpY2FsbHkgbW92ZWQuXG4gICAqL1xuICBhcHBlbmRJbnRvUGFydChwYXJ0OiBOb2RlUGFydCkge1xuICAgIHBhcnQuX2luc2VydCh0aGlzLnN0YXJ0Tm9kZSA9IGNyZWF0ZU1hcmtlcigpKTtcbiAgICBwYXJ0Ll9pbnNlcnQodGhpcy5lbmROb2RlID0gY3JlYXRlTWFya2VyKCkpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgdGhpcyBwYXJ0IGFmdGVyIGByZWZgXG4gICAqXG4gICAqIFRoaXMgcGFydCBtdXN0IGJlIGVtcHR5LCBhcyBpdHMgY29udGVudHMgYXJlIG5vdCBhdXRvbWF0aWNhbGx5IG1vdmVkLlxuICAgKi9cbiAgaW5zZXJ0QWZ0ZXJQYXJ0KHJlZjogTm9kZVBhcnQpIHtcbiAgICByZWYuX2luc2VydCh0aGlzLnN0YXJ0Tm9kZSA9IGNyZWF0ZU1hcmtlcigpKTtcbiAgICB0aGlzLmVuZE5vZGUgPSByZWYuZW5kTm9kZTtcbiAgICByZWYuZW5kTm9kZSA9IHRoaXMuc3RhcnROb2RlO1xuICB9XG5cbiAgc2V0VmFsdWUodmFsdWU6IHVua25vd24pOiB2b2lkIHtcbiAgICB0aGlzLl9wZW5kaW5nVmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIGNvbW1pdCgpIHtcbiAgICB3aGlsZSAoaXNEaXJlY3RpdmUodGhpcy5fcGVuZGluZ1ZhbHVlKSkge1xuICAgICAgY29uc3QgZGlyZWN0aXZlID0gdGhpcy5fcGVuZGluZ1ZhbHVlO1xuICAgICAgdGhpcy5fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2U7XG4gICAgICBkaXJlY3RpdmUodGhpcyk7XG4gICAgfVxuICAgIGNvbnN0IHZhbHVlID0gdGhpcy5fcGVuZGluZ1ZhbHVlO1xuICAgIGlmICh2YWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKGlzUHJpbWl0aXZlKHZhbHVlKSkge1xuICAgICAgaWYgKHZhbHVlICE9PSB0aGlzLnZhbHVlKSB7XG4gICAgICAgIHRoaXMuX2NvbW1pdFRleHQodmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZVJlc3VsdCkge1xuICAgICAgdGhpcy5fY29tbWl0VGVtcGxhdGVSZXN1bHQodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAodmFsdWUgaW5zdGFuY2VvZiBOb2RlKSB7XG4gICAgICB0aGlzLl9jb21taXROb2RlKHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKFxuICAgICAgICBBcnJheS5pc0FycmF5KHZhbHVlKSB8fFxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gICAgICAgICh2YWx1ZSBhcyBhbnkpW1N5bWJvbC5pdGVyYXRvcl0pIHtcbiAgICAgIHRoaXMuX2NvbW1pdEl0ZXJhYmxlKHZhbHVlIGFzIEl0ZXJhYmxlPHVua25vd24+KTtcbiAgICB9IGVsc2UgaWYgKHZhbHVlID09PSBub3RoaW5nKSB7XG4gICAgICB0aGlzLnZhbHVlID0gbm90aGluZztcbiAgICAgIHRoaXMuY2xlYXIoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gRmFsbGJhY2ssIHdpbGwgcmVuZGVyIHRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb25cbiAgICAgIHRoaXMuX2NvbW1pdFRleHQodmFsdWUpO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgX2luc2VydChub2RlOiBOb2RlKSB7XG4gICAgdGhpcy5lbmROb2RlLnBhcmVudE5vZGUhLmluc2VydEJlZm9yZShub2RlLCB0aGlzLmVuZE5vZGUpO1xuICB9XG5cbiAgcHJpdmF0ZSBfY29tbWl0Tm9kZSh2YWx1ZTogTm9kZSk6IHZvaWQge1xuICAgIGlmICh0aGlzLnZhbHVlID09PSB2YWx1ZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB0aGlzLmNsZWFyKCk7XG4gICAgdGhpcy5faW5zZXJ0KHZhbHVlKTtcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBwcml2YXRlIF9jb21taXRUZXh0KHZhbHVlOiB1bmtub3duKTogdm9pZCB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuc3RhcnROb2RlLm5leHRTaWJsaW5nITtcbiAgICB2YWx1ZSA9IHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlO1xuICAgIGlmIChub2RlID09PSB0aGlzLmVuZE5vZGUucHJldmlvdXNTaWJsaW5nICYmXG4gICAgICAgIG5vZGUubm9kZVR5cGUgPT09IDMgLyogTm9kZS5URVhUX05PREUgKi8pIHtcbiAgICAgIC8vIElmIHdlIG9ubHkgaGF2ZSBhIHNpbmdsZSB0ZXh0IG5vZGUgYmV0d2VlbiB0aGUgbWFya2Vycywgd2UgY2FuIGp1c3RcbiAgICAgIC8vIHNldCBpdHMgdmFsdWUsIHJhdGhlciB0aGFuIHJlcGxhY2luZyBpdC5cbiAgICAgIC8vIFRPRE8oanVzdGluZmFnbmFuaSk6IENhbiB3ZSBqdXN0IGNoZWNrIGlmIHRoaXMudmFsdWUgaXMgcHJpbWl0aXZlP1xuICAgICAgKG5vZGUgYXMgVGV4dCkuZGF0YSA9IHZhbHVlIGFzIHN0cmluZztcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5fY29tbWl0Tm9kZShkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShcbiAgICAgICAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gdmFsdWUgOiBTdHJpbmcodmFsdWUpKSk7XG4gICAgfVxuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgfVxuXG4gIHByaXZhdGUgX2NvbW1pdFRlbXBsYXRlUmVzdWx0KHZhbHVlOiBUZW1wbGF0ZVJlc3VsdCk6IHZvaWQge1xuICAgIGNvbnN0IHRlbXBsYXRlID0gdGhpcy5vcHRpb25zLnRlbXBsYXRlRmFjdG9yeSh2YWx1ZSk7XG4gICAgaWYgKHRoaXMudmFsdWUgaW5zdGFuY2VvZiBUZW1wbGF0ZUluc3RhbmNlICYmXG4gICAgICAgIHRoaXMudmFsdWUudGVtcGxhdGUgPT09IHRlbXBsYXRlKSB7XG4gICAgICB0aGlzLnZhbHVlLnVwZGF0ZSh2YWx1ZS52YWx1ZXMpO1xuICAgIH0gZWxzZSB7XG4gICAgICAvLyBNYWtlIHN1cmUgd2UgcHJvcGFnYXRlIHRoZSB0ZW1wbGF0ZSBwcm9jZXNzb3IgZnJvbSB0aGUgVGVtcGxhdGVSZXN1bHRcbiAgICAgIC8vIHNvIHRoYXQgd2UgdXNlIGl0cyBzeW50YXggZXh0ZW5zaW9uLCBldGMuIFRoZSB0ZW1wbGF0ZSBmYWN0b3J5IGNvbWVzXG4gICAgICAvLyBmcm9tIHRoZSByZW5kZXIgZnVuY3Rpb24gb3B0aW9ucyBzbyB0aGF0IGl0IGNhbiBjb250cm9sIHRlbXBsYXRlXG4gICAgICAvLyBjYWNoaW5nIGFuZCBwcmVwcm9jZXNzaW5nLlxuICAgICAgY29uc3QgaW5zdGFuY2UgPVxuICAgICAgICAgIG5ldyBUZW1wbGF0ZUluc3RhbmNlKHRlbXBsYXRlLCB2YWx1ZS5wcm9jZXNzb3IsIHRoaXMub3B0aW9ucyk7XG4gICAgICBjb25zdCBmcmFnbWVudCA9IGluc3RhbmNlLl9jbG9uZSgpO1xuICAgICAgaW5zdGFuY2UudXBkYXRlKHZhbHVlLnZhbHVlcyk7XG4gICAgICB0aGlzLl9jb21taXROb2RlKGZyYWdtZW50KTtcbiAgICAgIHRoaXMudmFsdWUgPSBpbnN0YW5jZTtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIF9jb21taXRJdGVyYWJsZSh2YWx1ZTogSXRlcmFibGU8dW5rbm93bj4pOiB2b2lkIHtcbiAgICAvLyBGb3IgYW4gSXRlcmFibGUsIHdlIGNyZWF0ZSBhIG5ldyBJbnN0YW5jZVBhcnQgcGVyIGl0ZW0sIHRoZW4gc2V0IGl0c1xuICAgIC8vIHZhbHVlIHRvIHRoZSBpdGVtLiBUaGlzIGlzIGEgbGl0dGxlIGJpdCBvZiBvdmVyaGVhZCBmb3IgZXZlcnkgaXRlbSBpblxuICAgIC8vIGFuIEl0ZXJhYmxlLCBidXQgaXQgbGV0cyB1cyByZWN1cnNlIGVhc2lseSBhbmQgZWZmaWNpZW50bHkgdXBkYXRlIEFycmF5c1xuICAgIC8vIG9mIFRlbXBsYXRlUmVzdWx0cyB0aGF0IHdpbGwgYmUgY29tbW9ubHkgcmV0dXJuZWQgZnJvbSBleHByZXNzaW9ucyBsaWtlOlxuICAgIC8vIGFycmF5Lm1hcCgoaSkgPT4gaHRtbGAke2l9YCksIGJ5IHJldXNpbmcgZXhpc3RpbmcgVGVtcGxhdGVJbnN0YW5jZXMuXG5cbiAgICAvLyBJZiBfdmFsdWUgaXMgYW4gYXJyYXksIHRoZW4gdGhlIHByZXZpb3VzIHJlbmRlciB3YXMgb2YgYW5cbiAgICAvLyBpdGVyYWJsZSBhbmQgX3ZhbHVlIHdpbGwgY29udGFpbiB0aGUgTm9kZVBhcnRzIGZyb20gdGhlIHByZXZpb3VzXG4gICAgLy8gcmVuZGVyLiBJZiBfdmFsdWUgaXMgbm90IGFuIGFycmF5LCBjbGVhciB0aGlzIHBhcnQgYW5kIG1ha2UgYSBuZXdcbiAgICAvLyBhcnJheSBmb3IgTm9kZVBhcnRzLlxuICAgIGlmICghQXJyYXkuaXNBcnJheSh0aGlzLnZhbHVlKSkge1xuICAgICAgdGhpcy52YWx1ZSA9IFtdO1xuICAgICAgdGhpcy5jbGVhcigpO1xuICAgIH1cblxuICAgIC8vIExldHMgdXMga2VlcCB0cmFjayBvZiBob3cgbWFueSBpdGVtcyB3ZSBzdGFtcGVkIHNvIHdlIGNhbiBjbGVhciBsZWZ0b3ZlclxuICAgIC8vIGl0ZW1zIGZyb20gYSBwcmV2aW91cyByZW5kZXJcbiAgICBjb25zdCBpdGVtUGFydHMgPSB0aGlzLnZhbHVlIGFzIE5vZGVQYXJ0W107XG4gICAgbGV0IHBhcnRJbmRleCA9IDA7XG4gICAgbGV0IGl0ZW1QYXJ0OiBOb2RlUGFydHx1bmRlZmluZWQ7XG5cbiAgICBmb3IgKGNvbnN0IGl0ZW0gb2YgdmFsdWUpIHtcbiAgICAgIC8vIFRyeSB0byByZXVzZSBhbiBleGlzdGluZyBwYXJ0XG4gICAgICBpdGVtUGFydCA9IGl0ZW1QYXJ0c1twYXJ0SW5kZXhdO1xuXG4gICAgICAvLyBJZiBubyBleGlzdGluZyBwYXJ0LCBjcmVhdGUgYSBuZXcgb25lXG4gICAgICBpZiAoaXRlbVBhcnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpdGVtUGFydCA9IG5ldyBOb2RlUGFydCh0aGlzLm9wdGlvbnMpO1xuICAgICAgICBpdGVtUGFydHMucHVzaChpdGVtUGFydCk7XG4gICAgICAgIGlmIChwYXJ0SW5kZXggPT09IDApIHtcbiAgICAgICAgICBpdGVtUGFydC5hcHBlbmRJbnRvUGFydCh0aGlzKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtUGFydC5pbnNlcnRBZnRlclBhcnQoaXRlbVBhcnRzW3BhcnRJbmRleCAtIDFdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaXRlbVBhcnQuc2V0VmFsdWUoaXRlbSk7XG4gICAgICBpdGVtUGFydC5jb21taXQoKTtcbiAgICAgIHBhcnRJbmRleCsrO1xuICAgIH1cblxuICAgIGlmIChwYXJ0SW5kZXggPCBpdGVtUGFydHMubGVuZ3RoKSB7XG4gICAgICAvLyBUcnVuY2F0ZSB0aGUgcGFydHMgYXJyYXkgc28gX3ZhbHVlIHJlZmxlY3RzIHRoZSBjdXJyZW50IHN0YXRlXG4gICAgICBpdGVtUGFydHMubGVuZ3RoID0gcGFydEluZGV4O1xuICAgICAgdGhpcy5jbGVhcihpdGVtUGFydCAmJiBpdGVtUGFydCEuZW5kTm9kZSk7XG4gICAgfVxuICB9XG5cbiAgY2xlYXIoc3RhcnROb2RlOiBOb2RlID0gdGhpcy5zdGFydE5vZGUpIHtcbiAgICByZW1vdmVOb2RlcyhcbiAgICAgICAgdGhpcy5zdGFydE5vZGUucGFyZW50Tm9kZSEsIHN0YXJ0Tm9kZS5uZXh0U2libGluZyEsIHRoaXMuZW5kTm9kZSk7XG4gIH1cbn1cblxuLyoqXG4gKiBJbXBsZW1lbnRzIGEgYm9vbGVhbiBhdHRyaWJ1dGUsIHJvdWdobHkgYXMgZGVmaW5lZCBpbiB0aGUgSFRNTFxuICogc3BlY2lmaWNhdGlvbi5cbiAqXG4gKiBJZiB0aGUgdmFsdWUgaXMgdHJ1dGh5LCB0aGVuIHRoZSBhdHRyaWJ1dGUgaXMgcHJlc2VudCB3aXRoIGEgdmFsdWUgb2ZcbiAqICcnLiBJZiB0aGUgdmFsdWUgaXMgZmFsc2V5LCB0aGUgYXR0cmlidXRlIGlzIHJlbW92ZWQuXG4gKi9cbmV4cG9ydCBjbGFzcyBCb29sZWFuQXR0cmlidXRlUGFydCBpbXBsZW1lbnRzIFBhcnQge1xuICBlbGVtZW50OiBFbGVtZW50O1xuICBuYW1lOiBzdHJpbmc7XG4gIHN0cmluZ3M6IHN0cmluZ1tdO1xuICB2YWx1ZTogdW5rbm93biA9IHVuZGVmaW5lZDtcbiAgX3BlbmRpbmdWYWx1ZTogdW5rbm93biA9IHVuZGVmaW5lZDtcblxuICBjb25zdHJ1Y3RvcihlbGVtZW50OiBFbGVtZW50LCBuYW1lOiBzdHJpbmcsIHN0cmluZ3M6IHN0cmluZ1tdKSB7XG4gICAgaWYgKHN0cmluZ3MubGVuZ3RoICE9PSAyIHx8IHN0cmluZ3NbMF0gIT09ICcnIHx8IHN0cmluZ3NbMV0gIT09ICcnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgICAgJ0Jvb2xlYW4gYXR0cmlidXRlcyBjYW4gb25seSBjb250YWluIGEgc2luZ2xlIGV4cHJlc3Npb24nKTtcbiAgICB9XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLm5hbWUgPSBuYW1lO1xuICAgIHRoaXMuc3RyaW5ncyA9IHN0cmluZ3M7XG4gIH1cblxuICBzZXRWYWx1ZSh2YWx1ZTogdW5rbm93bik6IHZvaWQge1xuICAgIHRoaXMuX3BlbmRpbmdWYWx1ZSA9IHZhbHVlO1xuICB9XG5cbiAgY29tbWl0KCkge1xuICAgIHdoaWxlIChpc0RpcmVjdGl2ZSh0aGlzLl9wZW5kaW5nVmFsdWUpKSB7XG4gICAgICBjb25zdCBkaXJlY3RpdmUgPSB0aGlzLl9wZW5kaW5nVmFsdWU7XG4gICAgICB0aGlzLl9wZW5kaW5nVmFsdWUgPSBub0NoYW5nZTtcbiAgICAgIGRpcmVjdGl2ZSh0aGlzKTtcbiAgICB9XG4gICAgaWYgKHRoaXMuX3BlbmRpbmdWYWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSAhIXRoaXMuX3BlbmRpbmdWYWx1ZTtcbiAgICBpZiAodGhpcy52YWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICB0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKHRoaXMubmFtZSwgJycpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm5hbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XG4gICAgdGhpcy5fcGVuZGluZ1ZhbHVlID0gbm9DaGFuZ2U7XG4gIH1cbn1cblxuLyoqXG4gKiBTZXRzIGF0dHJpYnV0ZSB2YWx1ZXMgZm9yIFByb3BlcnR5UGFydHMsIHNvIHRoYXQgdGhlIHZhbHVlIGlzIG9ubHkgc2V0IG9uY2VcbiAqIGV2ZW4gaWYgdGhlcmUgYXJlIG11bHRpcGxlIHBhcnRzIGZvciBhIHByb3BlcnR5LlxuICpcbiAqIElmIGFuIGV4cHJlc3Npb24gY29udHJvbHMgdGhlIHdob2xlIHByb3BlcnR5IHZhbHVlLCB0aGVuIHRoZSB2YWx1ZSBpcyBzaW1wbHlcbiAqIGFzc2lnbmVkIHRvIHRoZSBwcm9wZXJ0eSB1bmRlciBjb250cm9sLiBJZiB0aGVyZSBhcmUgc3RyaW5nIGxpdGVyYWxzIG9yXG4gKiBtdWx0aXBsZSBleHByZXNzaW9ucywgdGhlbiB0aGUgc3RyaW5ncyBhcmUgZXhwcmVzc2lvbnMgYXJlIGludGVycG9sYXRlZCBpbnRvXG4gKiBhIHN0cmluZyBmaXJzdC5cbiAqL1xuZXhwb3J0IGNsYXNzIFByb3BlcnR5Q29tbWl0dGVyIGV4dGVuZHMgQXR0cmlidXRlQ29tbWl0dGVyIHtcbiAgc2luZ2xlOiBib29sZWFuO1xuXG4gIGNvbnN0cnVjdG9yKGVsZW1lbnQ6IEVsZW1lbnQsIG5hbWU6IHN0cmluZywgc3RyaW5nczogc3RyaW5nW10pIHtcbiAgICBzdXBlcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzKTtcbiAgICB0aGlzLnNpbmdsZSA9XG4gICAgICAgIChzdHJpbmdzLmxlbmd0aCA9PT0gMiAmJiBzdHJpbmdzWzBdID09PSAnJyAmJiBzdHJpbmdzWzFdID09PSAnJyk7XG4gIH1cblxuICBwcm90ZWN0ZWQgX2NyZWF0ZVBhcnQoKTogUHJvcGVydHlQYXJ0IHtcbiAgICByZXR1cm4gbmV3IFByb3BlcnR5UGFydCh0aGlzKTtcbiAgfVxuXG4gIF9nZXRWYWx1ZSgpIHtcbiAgICBpZiAodGhpcy5zaW5nbGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnBhcnRzWzBdLnZhbHVlO1xuICAgIH1cbiAgICByZXR1cm4gc3VwZXIuX2dldFZhbHVlKCk7XG4gIH1cblxuICBjb21taXQoKTogdm9pZCB7XG4gICAgaWYgKHRoaXMuZGlydHkpIHtcbiAgICAgIHRoaXMuZGlydHkgPSBmYWxzZTtcbiAgICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbiAgICAgICh0aGlzLmVsZW1lbnQgYXMgYW55KVt0aGlzLm5hbWVdID0gdGhpcy5fZ2V0VmFsdWUoKTtcbiAgICB9XG4gIH1cbn1cblxuZXhwb3J0IGNsYXNzIFByb3BlcnR5UGFydCBleHRlbmRzIEF0dHJpYnV0ZVBhcnQge31cblxuLy8gRGV0ZWN0IGV2ZW50IGxpc3RlbmVyIG9wdGlvbnMgc3VwcG9ydC4gSWYgdGhlIGBjYXB0dXJlYCBwcm9wZXJ0eSBpcyByZWFkXG4vLyBmcm9tIHRoZSBvcHRpb25zIG9iamVjdCwgdGhlbiBvcHRpb25zIGFyZSBzdXBwb3J0ZWQuIElmIG5vdCwgdGhlbiB0aGUgdGhyaWRcbi8vIGFyZ3VtZW50IHRvIGFkZC9yZW1vdmVFdmVudExpc3RlbmVyIGlzIGludGVycHJldGVkIGFzIHRoZSBib29sZWFuIGNhcHR1cmVcbi8vIHZhbHVlIHNvIHdlIHNob3VsZCBvbmx5IHBhc3MgdGhlIGBjYXB0dXJlYCBwcm9wZXJ0eS5cbmxldCBldmVudE9wdGlvbnNTdXBwb3J0ZWQgPSBmYWxzZTtcblxudHJ5IHtcbiAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICBnZXQgY2FwdHVyZSgpIHtcbiAgICAgIGV2ZW50T3B0aW9uc1N1cHBvcnRlZCA9IHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCd0ZXN0Jywgb3B0aW9ucyBhcyBhbnksIG9wdGlvbnMpO1xuICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG4gIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKCd0ZXN0Jywgb3B0aW9ucyBhcyBhbnksIG9wdGlvbnMpO1xufSBjYXRjaCAoX2UpIHtcbn1cblxuXG50eXBlIEV2ZW50SGFuZGxlcldpdGhPcHRpb25zID1cbiAgICBFdmVudExpc3RlbmVyT3JFdmVudExpc3RlbmVyT2JqZWN0JlBhcnRpYWw8QWRkRXZlbnRMaXN0ZW5lck9wdGlvbnM+O1xuZXhwb3J0IGNsYXNzIEV2ZW50UGFydCBpbXBsZW1lbnRzIFBhcnQge1xuICBlbGVtZW50OiBFbGVtZW50O1xuICBldmVudE5hbWU6IHN0cmluZztcbiAgZXZlbnRDb250ZXh0PzogRXZlbnRUYXJnZXQ7XG4gIHZhbHVlOiB1bmRlZmluZWR8RXZlbnRIYW5kbGVyV2l0aE9wdGlvbnMgPSB1bmRlZmluZWQ7XG4gIF9vcHRpb25zPzogQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnM7XG4gIF9wZW5kaW5nVmFsdWU6IHVuZGVmaW5lZHxFdmVudEhhbmRsZXJXaXRoT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgX2JvdW5kSGFuZGxlRXZlbnQ6IChldmVudDogRXZlbnQpID0+IHZvaWQ7XG5cbiAgY29uc3RydWN0b3IoZWxlbWVudDogRWxlbWVudCwgZXZlbnROYW1lOiBzdHJpbmcsIGV2ZW50Q29udGV4dD86IEV2ZW50VGFyZ2V0KSB7XG4gICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICB0aGlzLmV2ZW50TmFtZSA9IGV2ZW50TmFtZTtcbiAgICB0aGlzLmV2ZW50Q29udGV4dCA9IGV2ZW50Q29udGV4dDtcbiAgICB0aGlzLl9ib3VuZEhhbmRsZUV2ZW50ID0gKGUpID0+IHRoaXMuaGFuZGxlRXZlbnQoZSk7XG4gIH1cblxuICBzZXRWYWx1ZSh2YWx1ZTogdW5kZWZpbmVkfEV2ZW50SGFuZGxlcldpdGhPcHRpb25zKTogdm9pZCB7XG4gICAgdGhpcy5fcGVuZGluZ1ZhbHVlID0gdmFsdWU7XG4gIH1cblxuICBjb21taXQoKSB7XG4gICAgd2hpbGUgKGlzRGlyZWN0aXZlKHRoaXMuX3BlbmRpbmdWYWx1ZSkpIHtcbiAgICAgIGNvbnN0IGRpcmVjdGl2ZSA9IHRoaXMuX3BlbmRpbmdWYWx1ZTtcbiAgICAgIHRoaXMuX3BlbmRpbmdWYWx1ZSA9IG5vQ2hhbmdlIGFzIEV2ZW50SGFuZGxlcldpdGhPcHRpb25zO1xuICAgICAgZGlyZWN0aXZlKHRoaXMpO1xuICAgIH1cbiAgICBpZiAodGhpcy5fcGVuZGluZ1ZhbHVlID09PSBub0NoYW5nZSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGNvbnN0IG5ld0xpc3RlbmVyID0gdGhpcy5fcGVuZGluZ1ZhbHVlO1xuICAgIGNvbnN0IG9sZExpc3RlbmVyID0gdGhpcy52YWx1ZTtcbiAgICBjb25zdCBzaG91bGRSZW1vdmVMaXN0ZW5lciA9IG5ld0xpc3RlbmVyID09IG51bGwgfHxcbiAgICAgICAgb2xkTGlzdGVuZXIgIT0gbnVsbCAmJlxuICAgICAgICAgICAgKG5ld0xpc3RlbmVyLmNhcHR1cmUgIT09IG9sZExpc3RlbmVyLmNhcHR1cmUgfHxcbiAgICAgICAgICAgICBuZXdMaXN0ZW5lci5vbmNlICE9PSBvbGRMaXN0ZW5lci5vbmNlIHx8XG4gICAgICAgICAgICAgbmV3TGlzdGVuZXIucGFzc2l2ZSAhPT0gb2xkTGlzdGVuZXIucGFzc2l2ZSk7XG4gICAgY29uc3Qgc2hvdWxkQWRkTGlzdGVuZXIgPVxuICAgICAgICBuZXdMaXN0ZW5lciAhPSBudWxsICYmIChvbGRMaXN0ZW5lciA9PSBudWxsIHx8IHNob3VsZFJlbW92ZUxpc3RlbmVyKTtcblxuICAgIGlmIChzaG91bGRSZW1vdmVMaXN0ZW5lcikge1xuICAgICAgdGhpcy5lbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXG4gICAgICAgICAgdGhpcy5ldmVudE5hbWUsIHRoaXMuX2JvdW5kSGFuZGxlRXZlbnQsIHRoaXMuX29wdGlvbnMpO1xuICAgIH1cbiAgICBpZiAoc2hvdWxkQWRkTGlzdGVuZXIpIHtcbiAgICAgIHRoaXMuX29wdGlvbnMgPSBnZXRPcHRpb25zKG5ld0xpc3RlbmVyKTtcbiAgICAgIHRoaXMuZWxlbWVudC5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgIHRoaXMuZXZlbnROYW1lLCB0aGlzLl9ib3VuZEhhbmRsZUV2ZW50LCB0aGlzLl9vcHRpb25zKTtcbiAgICB9XG4gICAgdGhpcy52YWx1ZSA9IG5ld0xpc3RlbmVyO1xuICAgIHRoaXMuX3BlbmRpbmdWYWx1ZSA9IG5vQ2hhbmdlIGFzIEV2ZW50SGFuZGxlcldpdGhPcHRpb25zO1xuICB9XG5cbiAgaGFuZGxlRXZlbnQoZXZlbnQ6IEV2ZW50KSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLnZhbHVlID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aGlzLnZhbHVlLmNhbGwodGhpcy5ldmVudENvbnRleHQgfHwgdGhpcy5lbGVtZW50LCBldmVudCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICh0aGlzLnZhbHVlIGFzIEV2ZW50TGlzdGVuZXJPYmplY3QpLmhhbmRsZUV2ZW50KGV2ZW50KTtcbiAgICB9XG4gIH1cbn1cblxuLy8gV2UgY29weSBvcHRpb25zIGJlY2F1c2Ugb2YgdGhlIGluY29uc2lzdGVudCBiZWhhdmlvciBvZiBicm93c2VycyB3aGVuIHJlYWRpbmdcbi8vIHRoZSB0aGlyZCBhcmd1bWVudCBvZiBhZGQvcmVtb3ZlRXZlbnRMaXN0ZW5lci4gSUUxMSBkb2Vzbid0IHN1cHBvcnQgb3B0aW9uc1xuLy8gYXQgYWxsLiBDaHJvbWUgNDEgb25seSByZWFkcyBgY2FwdHVyZWAgaWYgdGhlIGFyZ3VtZW50IGlzIGFuIG9iamVjdC5cbmNvbnN0IGdldE9wdGlvbnMgPSAobzogQWRkRXZlbnRMaXN0ZW5lck9wdGlvbnN8dW5kZWZpbmVkKSA9PiBvICYmXG4gICAgKGV2ZW50T3B0aW9uc1N1cHBvcnRlZCA/XG4gICAgICAgICB7Y2FwdHVyZTogby5jYXB0dXJlLCBwYXNzaXZlOiBvLnBhc3NpdmUsIG9uY2U6IG8ub25jZX0gOlxuICAgICAgICAgby5jYXB0dXJlIGFzIEFkZEV2ZW50TGlzdGVuZXJPcHRpb25zKTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxOCBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuLyoqXG4gKiBAbW9kdWxlIGxpdC1odG1sXG4gKi9cblxuLyoqXG4gKiBUaGUgUGFydCBpbnRlcmZhY2UgcmVwcmVzZW50cyBhIGR5bmFtaWMgcGFydCBvZiBhIHRlbXBsYXRlIGluc3RhbmNlIHJlbmRlcmVkXG4gKiBieSBsaXQtaHRtbC5cbiAqL1xuZXhwb3J0IGludGVyZmFjZSBQYXJ0IHtcbiAgdmFsdWU6IHVua25vd247XG5cbiAgLyoqXG4gICAqIFNldHMgdGhlIGN1cnJlbnQgcGFydCB2YWx1ZSwgYnV0IGRvZXMgbm90IHdyaXRlIGl0IHRvIHRoZSBET00uXG4gICAqIEBwYXJhbSB2YWx1ZSBUaGUgdmFsdWUgdGhhdCB3aWxsIGJlIGNvbW1pdHRlZC5cbiAgICovXG4gIHNldFZhbHVlKHZhbHVlOiB1bmtub3duKTogdm9pZDtcblxuICAvKipcbiAgICogQ29tbWl0cyB0aGUgY3VycmVudCBwYXJ0IHZhbHVlLCBjYXVzZSBpdCB0byBhY3R1YWxseSBiZSB3cml0dGVuIHRvIHRoZSBET00uXG4gICAqL1xuICBjb21taXQoKTogdm9pZDtcbn1cblxuLyoqXG4gKiBBIHNlbnRpbmVsIHZhbHVlIHRoYXQgc2lnbmFscyB0aGF0IGEgdmFsdWUgd2FzIGhhbmRsZWQgYnkgYSBkaXJlY3RpdmUgYW5kXG4gKiBzaG91bGQgbm90IGJlIHdyaXR0ZW4gdG8gdGhlIERPTS5cbiAqL1xuZXhwb3J0IGNvbnN0IG5vQ2hhbmdlOiBvYmplY3QgPSB7fTtcblxuLyoqXG4gKiBBIHNlbnRpbmVsIHZhbHVlIHRoYXQgc2lnbmFscyBhIE5vZGVQYXJ0IHRvIGZ1bGx5IGNsZWFyIGl0cyBjb250ZW50LlxuICovXG5leHBvcnQgY29uc3Qgbm90aGluZyA9IHt9O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG4vKipcbiAqIEBtb2R1bGUgbGl0LWh0bWxcbiAqL1xuXG5pbXBvcnQge1BhcnR9IGZyb20gJy4vcGFydC5qcyc7XG5pbXBvcnQge0F0dHJpYnV0ZUNvbW1pdHRlciwgQm9vbGVhbkF0dHJpYnV0ZVBhcnQsIEV2ZW50UGFydCwgTm9kZVBhcnQsIFByb3BlcnR5Q29tbWl0dGVyfSBmcm9tICcuL3BhcnRzLmpzJztcbmltcG9ydCB7UmVuZGVyT3B0aW9uc30gZnJvbSAnLi9yZW5kZXItb3B0aW9ucy5qcyc7XG5pbXBvcnQge1RlbXBsYXRlUHJvY2Vzc29yfSBmcm9tICcuL3RlbXBsYXRlLXByb2Nlc3Nvci5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBQYXJ0cyB3aGVuIGEgdGVtcGxhdGUgaXMgaW5zdGFudGlhdGVkLlxuICovXG5leHBvcnQgY2xhc3MgRGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yIGltcGxlbWVudHMgVGVtcGxhdGVQcm9jZXNzb3Ige1xuICAvKipcbiAgICogQ3JlYXRlIHBhcnRzIGZvciBhbiBhdHRyaWJ1dGUtcG9zaXRpb24gYmluZGluZywgZ2l2ZW4gdGhlIGV2ZW50LCBhdHRyaWJ1dGVcbiAgICogbmFtZSwgYW5kIHN0cmluZyBsaXRlcmFscy5cbiAgICpcbiAgICogQHBhcmFtIGVsZW1lbnQgVGhlIGVsZW1lbnQgY29udGFpbmluZyB0aGUgYmluZGluZ1xuICAgKiBAcGFyYW0gbmFtZSAgVGhlIGF0dHJpYnV0ZSBuYW1lXG4gICAqIEBwYXJhbSBzdHJpbmdzIFRoZSBzdHJpbmcgbGl0ZXJhbHMuIFRoZXJlIGFyZSBhbHdheXMgYXQgbGVhc3QgdHdvIHN0cmluZ3MsXG4gICAqICAgZXZlbnQgZm9yIGZ1bGx5LWNvbnRyb2xsZWQgYmluZGluZ3Mgd2l0aCBhIHNpbmdsZSBleHByZXNzaW9uLlxuICAgKi9cbiAgaGFuZGxlQXR0cmlidXRlRXhwcmVzc2lvbnMoXG4gICAgICBlbGVtZW50OiBFbGVtZW50LCBuYW1lOiBzdHJpbmcsIHN0cmluZ3M6IHN0cmluZ1tdLFxuICAgICAgb3B0aW9uczogUmVuZGVyT3B0aW9ucyk6IFBhcnRbXSB7XG4gICAgY29uc3QgcHJlZml4ID0gbmFtZVswXTtcbiAgICBpZiAocHJlZml4ID09PSAnLicpIHtcbiAgICAgIGNvbnN0IGNvbWl0dGVyID0gbmV3IFByb3BlcnR5Q29tbWl0dGVyKGVsZW1lbnQsIG5hbWUuc2xpY2UoMSksIHN0cmluZ3MpO1xuICAgICAgcmV0dXJuIGNvbWl0dGVyLnBhcnRzO1xuICAgIH1cbiAgICBpZiAocHJlZml4ID09PSAnQCcpIHtcbiAgICAgIHJldHVybiBbbmV3IEV2ZW50UGFydChlbGVtZW50LCBuYW1lLnNsaWNlKDEpLCBvcHRpb25zLmV2ZW50Q29udGV4dCldO1xuICAgIH1cbiAgICBpZiAocHJlZml4ID09PSAnPycpIHtcbiAgICAgIHJldHVybiBbbmV3IEJvb2xlYW5BdHRyaWJ1dGVQYXJ0KGVsZW1lbnQsIG5hbWUuc2xpY2UoMSksIHN0cmluZ3MpXTtcbiAgICB9XG4gICAgY29uc3QgY29taXR0ZXIgPSBuZXcgQXR0cmlidXRlQ29tbWl0dGVyKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MpO1xuICAgIHJldHVybiBjb21pdHRlci5wYXJ0cztcbiAgfVxuICAvKipcbiAgICogQ3JlYXRlIHBhcnRzIGZvciBhIHRleHQtcG9zaXRpb24gYmluZGluZy5cbiAgICogQHBhcmFtIHRlbXBsYXRlRmFjdG9yeVxuICAgKi9cbiAgaGFuZGxlVGV4dEV4cHJlc3Npb24ob3B0aW9uczogUmVuZGVyT3B0aW9ucykge1xuICAgIHJldHVybiBuZXcgTm9kZVBhcnQob3B0aW9ucyk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3NvciA9IG5ldyBEZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IoKTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuLyoqXG4gKlxuICogTWFpbiBsaXQtaHRtbCBtb2R1bGUuXG4gKlxuICogTWFpbiBleHBvcnRzOlxuICpcbiAqIC0gIFtbaHRtbF1dXG4gKiAtICBbW3N2Z11dXG4gKiAtICBbW3JlbmRlcl1dXG4gKlxuICogQG1vZHVsZSBsaXQtaHRtbFxuICogQHByZWZlcnJlZFxuICovXG5cbi8qKlxuICogRG8gbm90IHJlbW92ZSB0aGlzIGNvbW1lbnQ7IGl0IGtlZXBzIHR5cGVkb2MgZnJvbSBtaXNwbGFjaW5nIHRoZSBtb2R1bGVcbiAqIGRvY3MuXG4gKi9cbmltcG9ydCB7ZGVmYXVsdFRlbXBsYXRlUHJvY2Vzc29yfSBmcm9tICcuL2xpYi9kZWZhdWx0LXRlbXBsYXRlLXByb2Nlc3Nvci5qcyc7XG5pbXBvcnQge1NWR1RlbXBsYXRlUmVzdWx0LCBUZW1wbGF0ZVJlc3VsdH0gZnJvbSAnLi9saWIvdGVtcGxhdGUtcmVzdWx0LmpzJztcblxuZXhwb3J0IHtEZWZhdWx0VGVtcGxhdGVQcm9jZXNzb3IsIGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3Nvcn0gZnJvbSAnLi9saWIvZGVmYXVsdC10ZW1wbGF0ZS1wcm9jZXNzb3IuanMnO1xuZXhwb3J0IHtkaXJlY3RpdmUsIERpcmVjdGl2ZUZuLCBpc0RpcmVjdGl2ZX0gZnJvbSAnLi9saWIvZGlyZWN0aXZlLmpzJztcbi8vIFRPRE8oanVzdGluZmFnbmFuaSk6IHJlbW92ZSBsaW5lIHdoZW4gd2UgZ2V0IE5vZGVQYXJ0IG1vdmluZyBtZXRob2RzXG5leHBvcnQge3JlbW92ZU5vZGVzLCByZXBhcmVudE5vZGVzfSBmcm9tICcuL2xpYi9kb20uanMnO1xuZXhwb3J0IHtub0NoYW5nZSwgbm90aGluZywgUGFydH0gZnJvbSAnLi9saWIvcGFydC5qcyc7XG5leHBvcnQge0F0dHJpYnV0ZUNvbW1pdHRlciwgQXR0cmlidXRlUGFydCwgQm9vbGVhbkF0dHJpYnV0ZVBhcnQsIEV2ZW50UGFydCwgaXNQcmltaXRpdmUsIE5vZGVQYXJ0LCBQcm9wZXJ0eUNvbW1pdHRlciwgUHJvcGVydHlQYXJ0fSBmcm9tICcuL2xpYi9wYXJ0cy5qcyc7XG5leHBvcnQge1JlbmRlck9wdGlvbnN9IGZyb20gJy4vbGliL3JlbmRlci1vcHRpb25zLmpzJztcbmV4cG9ydCB7cGFydHMsIHJlbmRlcn0gZnJvbSAnLi9saWIvcmVuZGVyLmpzJztcbmV4cG9ydCB7dGVtcGxhdGVDYWNoZXMsIHRlbXBsYXRlRmFjdG9yeX0gZnJvbSAnLi9saWIvdGVtcGxhdGUtZmFjdG9yeS5qcyc7XG5leHBvcnQge1RlbXBsYXRlSW5zdGFuY2V9IGZyb20gJy4vbGliL3RlbXBsYXRlLWluc3RhbmNlLmpzJztcbmV4cG9ydCB7VGVtcGxhdGVQcm9jZXNzb3J9IGZyb20gJy4vbGliL3RlbXBsYXRlLXByb2Nlc3Nvci5qcyc7XG5leHBvcnQge1NWR1RlbXBsYXRlUmVzdWx0LCBUZW1wbGF0ZVJlc3VsdH0gZnJvbSAnLi9saWIvdGVtcGxhdGUtcmVzdWx0LmpzJztcbmV4cG9ydCB7Y3JlYXRlTWFya2VyLCBpc1RlbXBsYXRlUGFydEFjdGl2ZSwgVGVtcGxhdGV9IGZyb20gJy4vbGliL3RlbXBsYXRlLmpzJztcblxuZGVjbGFyZSBnbG9iYWwge1xuICBpbnRlcmZhY2UgV2luZG93IHtcbiAgICBsaXRIdG1sVmVyc2lvbnM6IHN0cmluZ1tdO1xuICB9XG59XG5cbi8vIElNUE9SVEFOVDogZG8gbm90IGNoYW5nZSB0aGUgcHJvcGVydHkgbmFtZSBvciB0aGUgYXNzaWdubWVudCBleHByZXNzaW9uLlxuLy8gVGhpcyBsaW5lIHdpbGwgYmUgdXNlZCBpbiByZWdleGVzIHRvIHNlYXJjaCBmb3IgbGl0LWh0bWwgdXNhZ2UuXG4vLyBUT0RPKGp1c3RpbmZhZ25hbmkpOiBpbmplY3QgdmVyc2lvbiBudW1iZXIgYXQgYnVpbGQgdGltZVxuKHdpbmRvd1snbGl0SHRtbFZlcnNpb25zJ10gfHwgKHdpbmRvd1snbGl0SHRtbFZlcnNpb25zJ10gPSBbXSkpLnB1c2goJzEuMC4wJyk7XG5cbi8qKlxuICogSW50ZXJwcmV0cyBhIHRlbXBsYXRlIGxpdGVyYWwgYXMgYW4gSFRNTCB0ZW1wbGF0ZSB0aGF0IGNhbiBlZmZpY2llbnRseVxuICogcmVuZGVyIHRvIGFuZCB1cGRhdGUgYSBjb250YWluZXIuXG4gKi9cbmV4cG9ydCBjb25zdCBodG1sID0gKHN0cmluZ3M6IFRlbXBsYXRlU3RyaW5nc0FycmF5LCAuLi52YWx1ZXM6IHVua25vd25bXSkgPT5cbiAgICBuZXcgVGVtcGxhdGVSZXN1bHQoc3RyaW5ncywgdmFsdWVzLCAnaHRtbCcsIGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3Nvcik7XG5cbi8qKlxuICogSW50ZXJwcmV0cyBhIHRlbXBsYXRlIGxpdGVyYWwgYXMgYW4gU1ZHIHRlbXBsYXRlIHRoYXQgY2FuIGVmZmljaWVudGx5XG4gKiByZW5kZXIgdG8gYW5kIHVwZGF0ZSBhIGNvbnRhaW5lci5cbiAqL1xuZXhwb3J0IGNvbnN0IHN2ZyA9IChzdHJpbmdzOiBUZW1wbGF0ZVN0cmluZ3NBcnJheSwgLi4udmFsdWVzOiB1bmtub3duW10pID0+XG4gICAgbmV3IFNWR1RlbXBsYXRlUmVzdWx0KHN0cmluZ3MsIHZhbHVlcywgJ3N2ZycsIGRlZmF1bHRUZW1wbGF0ZVByb2Nlc3Nvcik7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5cbi8qKlxuICogQG1vZHVsZSBsaXQtaHRtbFxuICovXG5cbmludGVyZmFjZSBNYXliZVBvbHlmaWxsZWRDZSBleHRlbmRzIEN1c3RvbUVsZW1lbnRSZWdpc3RyeSB7XG4gIHBvbHlmaWxsV3JhcEZsdXNoQ2FsbGJhY2s/OiBvYmplY3Q7XG59XG5cbi8qKlxuICogVHJ1ZSBpZiB0aGUgY3VzdG9tIGVsZW1lbnRzIHBvbHlmaWxsIGlzIGluIHVzZS5cbiAqL1xuZXhwb3J0IGNvbnN0IGlzQ0VQb2x5ZmlsbCA9IHdpbmRvdy5jdXN0b21FbGVtZW50cyAhPT0gdW5kZWZpbmVkICYmXG4gICAgKHdpbmRvdy5jdXN0b21FbGVtZW50cyBhcyBNYXliZVBvbHlmaWxsZWRDZSkucG9seWZpbGxXcmFwRmx1c2hDYWxsYmFjayAhPT1cbiAgICAgICAgdW5kZWZpbmVkO1xuXG4vKipcbiAqIFJlcGFyZW50cyBub2Rlcywgc3RhcnRpbmcgZnJvbSBgc3RhcnROb2RlYCAoaW5jbHVzaXZlKSB0byBgZW5kTm9kZWBcbiAqIChleGNsdXNpdmUpLCBpbnRvIGFub3RoZXIgY29udGFpbmVyIChjb3VsZCBiZSB0aGUgc2FtZSBjb250YWluZXIpLCBiZWZvcmVcbiAqIGBiZWZvcmVOb2RlYC4gSWYgYGJlZm9yZU5vZGVgIGlzIG51bGwsIGl0IGFwcGVuZHMgdGhlIG5vZGVzIHRvIHRoZVxuICogY29udGFpbmVyLlxuICovXG5leHBvcnQgY29uc3QgcmVwYXJlbnROb2RlcyA9XG4gICAgKGNvbnRhaW5lcjogTm9kZSxcbiAgICAgc3RhcnQ6IE5vZGV8bnVsbCxcbiAgICAgZW5kOiBOb2RlfG51bGwgPSBudWxsLFxuICAgICBiZWZvcmU6IE5vZGV8bnVsbCA9IG51bGwpOiB2b2lkID0+IHtcbiAgICAgIGxldCBub2RlID0gc3RhcnQ7XG4gICAgICB3aGlsZSAobm9kZSAhPT0gZW5kKSB7XG4gICAgICAgIGNvbnN0IG4gPSBub2RlIS5uZXh0U2libGluZztcbiAgICAgICAgY29udGFpbmVyLmluc2VydEJlZm9yZShub2RlISwgYmVmb3JlIGFzIE5vZGUpO1xuICAgICAgICBub2RlID0gbjtcbiAgICAgIH1cbiAgICB9O1xuXG4vKipcbiAqIFJlbW92ZXMgbm9kZXMsIHN0YXJ0aW5nIGZyb20gYHN0YXJ0Tm9kZWAgKGluY2x1c2l2ZSkgdG8gYGVuZE5vZGVgXG4gKiAoZXhjbHVzaXZlKSwgZnJvbSBgY29udGFpbmVyYC5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlbW92ZU5vZGVzID1cbiAgICAoY29udGFpbmVyOiBOb2RlLCBzdGFydE5vZGU6IE5vZGV8bnVsbCwgZW5kTm9kZTogTm9kZXxudWxsID0gbnVsbCk6XG4gICAgICAgIHZvaWQgPT4ge1xuICAgICAgICAgIGxldCBub2RlID0gc3RhcnROb2RlO1xuICAgICAgICAgIHdoaWxlIChub2RlICE9PSBlbmROb2RlKSB7XG4gICAgICAgICAgICBjb25zdCBuID0gbm9kZSEubmV4dFNpYmxpbmc7XG4gICAgICAgICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQobm9kZSEpO1xuICAgICAgICAgICAgbm9kZSA9IG47XG4gICAgICAgICAgfVxuICAgICAgICB9O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG4vKipcbiAqIEBtb2R1bGUgbGl0LWh0bWxcbiAqL1xuXG5pbXBvcnQge3JlcGFyZW50Tm9kZXN9IGZyb20gJy4vZG9tLmpzJztcbmltcG9ydCB7VGVtcGxhdGVQcm9jZXNzb3J9IGZyb20gJy4vdGVtcGxhdGUtcHJvY2Vzc29yLmpzJztcbmltcG9ydCB7Ym91bmRBdHRyaWJ1dGVTdWZmaXgsIGxhc3RBdHRyaWJ1dGVOYW1lUmVnZXgsIG1hcmtlciwgbm9kZU1hcmtlcn0gZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG5cbi8qKlxuICogVGhlIHJldHVybiB0eXBlIG9mIGBodG1sYCwgd2hpY2ggaG9sZHMgYSBUZW1wbGF0ZSBhbmQgdGhlIHZhbHVlcyBmcm9tXG4gKiBpbnRlcnBvbGF0ZWQgZXhwcmVzc2lvbnMuXG4gKi9cbmV4cG9ydCBjbGFzcyBUZW1wbGF0ZVJlc3VsdCB7XG4gIHN0cmluZ3M6IFRlbXBsYXRlU3RyaW5nc0FycmF5O1xuICB2YWx1ZXM6IHVua25vd25bXTtcbiAgdHlwZTogc3RyaW5nO1xuICBwcm9jZXNzb3I6IFRlbXBsYXRlUHJvY2Vzc29yO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgICAgc3RyaW5nczogVGVtcGxhdGVTdHJpbmdzQXJyYXksIHZhbHVlczogdW5rbm93bltdLCB0eXBlOiBzdHJpbmcsXG4gICAgICBwcm9jZXNzb3I6IFRlbXBsYXRlUHJvY2Vzc29yKSB7XG4gICAgdGhpcy5zdHJpbmdzID0gc3RyaW5ncztcbiAgICB0aGlzLnZhbHVlcyA9IHZhbHVlcztcbiAgICB0aGlzLnR5cGUgPSB0eXBlO1xuICAgIHRoaXMucHJvY2Vzc29yID0gcHJvY2Vzc29yO1xuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybnMgYSBzdHJpbmcgb2YgSFRNTCB1c2VkIHRvIGNyZWF0ZSBhIGA8dGVtcGxhdGU+YCBlbGVtZW50LlxuICAgKi9cbiAgZ2V0SFRNTCgpOiBzdHJpbmcge1xuICAgIGNvbnN0IGVuZEluZGV4ID0gdGhpcy5zdHJpbmdzLmxlbmd0aCAtIDE7XG4gICAgbGV0IGh0bWwgPSAnJztcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVuZEluZGV4OyBpKyspIHtcbiAgICAgIGNvbnN0IHMgPSB0aGlzLnN0cmluZ3NbaV07XG4gICAgICAvLyBUaGlzIGV4ZWMoKSBjYWxsIGRvZXMgdHdvIHRoaW5nczpcbiAgICAgIC8vIDEpIEFwcGVuZHMgYSBzdWZmaXggdG8gdGhlIGJvdW5kIGF0dHJpYnV0ZSBuYW1lIHRvIG9wdCBvdXQgb2Ygc3BlY2lhbFxuICAgICAgLy8gYXR0cmlidXRlIHZhbHVlIHBhcnNpbmcgdGhhdCBJRTExIGFuZCBFZGdlIGRvLCBsaWtlIGZvciBzdHlsZSBhbmRcbiAgICAgIC8vIG1hbnkgU1ZHIGF0dHJpYnV0ZXMuIFRoZSBUZW1wbGF0ZSBjbGFzcyBhbHNvIGFwcGVuZHMgdGhlIHNhbWUgc3VmZml4XG4gICAgICAvLyB3aGVuIGxvb2tpbmcgdXAgYXR0cmlidXRlcyB0byBjcmVhdGUgUGFydHMuXG4gICAgICAvLyAyKSBBZGRzIGFuIHVucXVvdGVkLWF0dHJpYnV0ZS1zYWZlIG1hcmtlciBmb3IgdGhlIGZpcnN0IGV4cHJlc3Npb24gaW5cbiAgICAgIC8vIGFuIGF0dHJpYnV0ZS4gU3Vic2VxdWVudCBhdHRyaWJ1dGUgZXhwcmVzc2lvbnMgd2lsbCB1c2Ugbm9kZSBtYXJrZXJzLFxuICAgICAgLy8gYW5kIHRoaXMgaXMgc2FmZSBzaW5jZSBhdHRyaWJ1dGVzIHdpdGggbXVsdGlwbGUgZXhwcmVzc2lvbnMgYXJlXG4gICAgICAvLyBndWFyYW50ZWVkIHRvIGJlIHF1b3RlZC5cbiAgICAgIGNvbnN0IG1hdGNoID0gbGFzdEF0dHJpYnV0ZU5hbWVSZWdleC5leGVjKHMpO1xuICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgIC8vIFdlJ3JlIHN0YXJ0aW5nIGEgbmV3IGJvdW5kIGF0dHJpYnV0ZS5cbiAgICAgICAgLy8gQWRkIHRoZSBzYWZlIGF0dHJpYnV0ZSBzdWZmaXgsIGFuZCB1c2UgdW5xdW90ZWQtYXR0cmlidXRlLXNhZmVcbiAgICAgICAgLy8gbWFya2VyLlxuICAgICAgICBodG1sICs9IHMuc3Vic3RyKDAsIG1hdGNoLmluZGV4KSArIG1hdGNoWzFdICsgbWF0Y2hbMl0gK1xuICAgICAgICAgICAgYm91bmRBdHRyaWJ1dGVTdWZmaXggKyBtYXRjaFszXSArIG1hcmtlcjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFdlJ3JlIGVpdGhlciBpbiBhIGJvdW5kIG5vZGUsIG9yIHRyYWlsaW5nIGJvdW5kIGF0dHJpYnV0ZS5cbiAgICAgICAgLy8gRWl0aGVyIHdheSwgbm9kZU1hcmtlciBpcyBzYWZlIHRvIHVzZS5cbiAgICAgICAgaHRtbCArPSBzICsgbm9kZU1hcmtlcjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGh0bWwgKyB0aGlzLnN0cmluZ3NbZW5kSW5kZXhdO1xuICB9XG5cbiAgZ2V0VGVtcGxhdGVFbGVtZW50KCk6IEhUTUxUZW1wbGF0ZUVsZW1lbnQge1xuICAgIGNvbnN0IHRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgndGVtcGxhdGUnKTtcbiAgICB0ZW1wbGF0ZS5pbm5lckhUTUwgPSB0aGlzLmdldEhUTUwoKTtcbiAgICByZXR1cm4gdGVtcGxhdGU7XG4gIH1cbn1cblxuLyoqXG4gKiBBIFRlbXBsYXRlUmVzdWx0IGZvciBTVkcgZnJhZ21lbnRzLlxuICpcbiAqIFRoaXMgY2xhc3Mgd3JhcHMgSFRNbCBpbiBhbiBgPHN2Zz5gIHRhZyBpbiBvcmRlciB0byBwYXJzZSBpdHMgY29udGVudHMgaW4gdGhlXG4gKiBTVkcgbmFtZXNwYWNlLCB0aGVuIG1vZGlmaWVzIHRoZSB0ZW1wbGF0ZSB0byByZW1vdmUgdGhlIGA8c3ZnPmAgdGFnIHNvIHRoYXRcbiAqIGNsb25lcyBvbmx5IGNvbnRhaW5lciB0aGUgb3JpZ2luYWwgZnJhZ21lbnQuXG4gKi9cbmV4cG9ydCBjbGFzcyBTVkdUZW1wbGF0ZVJlc3VsdCBleHRlbmRzIFRlbXBsYXRlUmVzdWx0IHtcbiAgZ2V0SFRNTCgpOiBzdHJpbmcge1xuICAgIHJldHVybiBgPHN2Zz4ke3N1cGVyLmdldEhUTUwoKX08L3N2Zz5gO1xuICB9XG5cbiAgZ2V0VGVtcGxhdGVFbGVtZW50KCk6IEhUTUxUZW1wbGF0ZUVsZW1lbnQge1xuICAgIGNvbnN0IHRlbXBsYXRlID0gc3VwZXIuZ2V0VGVtcGxhdGVFbGVtZW50KCk7XG4gICAgY29uc3QgY29udGVudCA9IHRlbXBsYXRlLmNvbnRlbnQ7XG4gICAgY29uc3Qgc3ZnRWxlbWVudCA9IGNvbnRlbnQuZmlyc3RDaGlsZCE7XG4gICAgY29udGVudC5yZW1vdmVDaGlsZChzdmdFbGVtZW50KTtcbiAgICByZXBhcmVudE5vZGVzKGNvbnRlbnQsIHN2Z0VsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9XG59XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTcgVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5cbi8qKlxuICogQG1vZHVsZSBsaXQtaHRtbFxuICovXG5cbmltcG9ydCB7VGVtcGxhdGVSZXN1bHR9IGZyb20gJy4vdGVtcGxhdGUtcmVzdWx0LmpzJztcbmltcG9ydCB7bWFya2VyLCBUZW1wbGF0ZX0gZnJvbSAnLi90ZW1wbGF0ZS5qcyc7XG5cbi8qKlxuICogQSBmdW5jdGlvbiB0eXBlIHRoYXQgY3JlYXRlcyBhIFRlbXBsYXRlIGZyb20gYSBUZW1wbGF0ZVJlc3VsdC5cbiAqXG4gKiBUaGlzIGlzIGEgaG9vayBpbnRvIHRoZSB0ZW1wbGF0ZS1jcmVhdGlvbiBwcm9jZXNzIGZvciByZW5kZXJpbmcgdGhhdFxuICogcmVxdWlyZXMgc29tZSBtb2RpZmljYXRpb24gb2YgdGVtcGxhdGVzIGJlZm9yZSB0aGV5J3JlIHVzZWQsIGxpa2UgU2hhZHlDU1MsXG4gKiB3aGljaCBtdXN0IGFkZCBjbGFzc2VzIHRvIGVsZW1lbnRzIGFuZCByZW1vdmUgc3R5bGVzLlxuICpcbiAqIFRlbXBsYXRlcyBzaG91bGQgYmUgY2FjaGVkIGFzIGFnZ3Jlc3NpdmVseSBhcyBwb3NzaWJsZSwgc28gdGhhdCBtYW55XG4gKiBUZW1wbGF0ZVJlc3VsdHMgcHJvZHVjZWQgZnJvbSB0aGUgc2FtZSBleHByZXNzaW9uIG9ubHkgZG8gdGhlIHdvcmsgb2ZcbiAqIGNyZWF0aW5nIHRoZSBUZW1wbGF0ZSB0aGUgZmlyc3QgdGltZS5cbiAqXG4gKiBUZW1wbGF0ZXMgYXJlIHVzdWFsbHkgY2FjaGVkIGJ5IFRlbXBsYXRlUmVzdWx0LnN0cmluZ3MgYW5kXG4gKiBUZW1wbGF0ZVJlc3VsdC50eXBlLCBidXQgbWF5IGJlIGNhY2hlZCBieSBvdGhlciBrZXlzIGlmIHRoaXMgZnVuY3Rpb25cbiAqIG1vZGlmaWVzIHRoZSB0ZW1wbGF0ZS5cbiAqXG4gKiBOb3RlIHRoYXQgY3VycmVudGx5IFRlbXBsYXRlRmFjdG9yaWVzIG11c3Qgbm90IGFkZCwgcmVtb3ZlLCBvciByZW9yZGVyXG4gKiBleHByZXNzaW9ucywgYmVjYXVzZSB0aGVyZSBpcyBubyB3YXkgdG8gZGVzY3JpYmUgc3VjaCBhIG1vZGlmaWNhdGlvblxuICogdG8gcmVuZGVyKCkgc28gdGhhdCB2YWx1ZXMgYXJlIGludGVycG9sYXRlZCB0byB0aGUgY29ycmVjdCBwbGFjZSBpbiB0aGVcbiAqIHRlbXBsYXRlIGluc3RhbmNlcy5cbiAqL1xuZXhwb3J0IHR5cGUgVGVtcGxhdGVGYWN0b3J5ID0gKHJlc3VsdDogVGVtcGxhdGVSZXN1bHQpID0+IFRlbXBsYXRlO1xuXG4vKipcbiAqIFRoZSBkZWZhdWx0IFRlbXBsYXRlRmFjdG9yeSB3aGljaCBjYWNoZXMgVGVtcGxhdGVzIGtleWVkIG9uXG4gKiByZXN1bHQudHlwZSBhbmQgcmVzdWx0LnN0cmluZ3MuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB0ZW1wbGF0ZUZhY3RvcnkocmVzdWx0OiBUZW1wbGF0ZVJlc3VsdCkge1xuICBsZXQgdGVtcGxhdGVDYWNoZSA9IHRlbXBsYXRlQ2FjaGVzLmdldChyZXN1bHQudHlwZSk7XG4gIGlmICh0ZW1wbGF0ZUNhY2hlID09PSB1bmRlZmluZWQpIHtcbiAgICB0ZW1wbGF0ZUNhY2hlID0ge1xuICAgICAgc3RyaW5nc0FycmF5OiBuZXcgV2Vha01hcDxUZW1wbGF0ZVN0cmluZ3NBcnJheSwgVGVtcGxhdGU+KCksXG4gICAgICBrZXlTdHJpbmc6IG5ldyBNYXA8c3RyaW5nLCBUZW1wbGF0ZT4oKVxuICAgIH07XG4gICAgdGVtcGxhdGVDYWNoZXMuc2V0KHJlc3VsdC50eXBlLCB0ZW1wbGF0ZUNhY2hlKTtcbiAgfVxuXG4gIGxldCB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FjaGUuc3RyaW5nc0FycmF5LmdldChyZXN1bHQuc3RyaW5ncyk7XG4gIGlmICh0ZW1wbGF0ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9XG5cbiAgLy8gSWYgdGhlIFRlbXBsYXRlU3RyaW5nc0FycmF5IGlzIG5ldywgZ2VuZXJhdGUgYSBrZXkgZnJvbSB0aGUgc3RyaW5nc1xuICAvLyBUaGlzIGtleSBpcyBzaGFyZWQgYmV0d2VlbiBhbGwgdGVtcGxhdGVzIHdpdGggaWRlbnRpY2FsIGNvbnRlbnRcbiAgY29uc3Qga2V5ID0gcmVzdWx0LnN0cmluZ3Muam9pbihtYXJrZXIpO1xuXG4gIC8vIENoZWNrIGlmIHdlIGFscmVhZHkgaGF2ZSBhIFRlbXBsYXRlIGZvciB0aGlzIGtleVxuICB0ZW1wbGF0ZSA9IHRlbXBsYXRlQ2FjaGUua2V5U3RyaW5nLmdldChrZXkpO1xuICBpZiAodGVtcGxhdGUgPT09IHVuZGVmaW5lZCkge1xuICAgIC8vIElmIHdlIGhhdmUgbm90IHNlZW4gdGhpcyBrZXkgYmVmb3JlLCBjcmVhdGUgYSBuZXcgVGVtcGxhdGVcbiAgICB0ZW1wbGF0ZSA9IG5ldyBUZW1wbGF0ZShyZXN1bHQsIHJlc3VsdC5nZXRUZW1wbGF0ZUVsZW1lbnQoKSk7XG4gICAgLy8gQ2FjaGUgdGhlIFRlbXBsYXRlIGZvciB0aGlzIGtleVxuICAgIHRlbXBsYXRlQ2FjaGUua2V5U3RyaW5nLnNldChrZXksIHRlbXBsYXRlKTtcbiAgfVxuXG4gIC8vIENhY2hlIGFsbCBmdXR1cmUgcXVlcmllcyBmb3IgdGhpcyBUZW1wbGF0ZVN0cmluZ3NBcnJheVxuICB0ZW1wbGF0ZUNhY2hlLnN0cmluZ3NBcnJheS5zZXQocmVzdWx0LnN0cmluZ3MsIHRlbXBsYXRlKTtcbiAgcmV0dXJuIHRlbXBsYXRlO1xufVxuXG4vKipcbiAqIFRoZSBmaXJzdCBhcmd1bWVudCB0byBKUyB0ZW1wbGF0ZSB0YWdzIHJldGFpbiBpZGVudGl0eSBhY3Jvc3MgbXVsdGlwbGVcbiAqIGNhbGxzIHRvIGEgdGFnIGZvciB0aGUgc2FtZSBsaXRlcmFsLCBzbyB3ZSBjYW4gY2FjaGUgd29yayBkb25lIHBlciBsaXRlcmFsXG4gKiBpbiBhIE1hcC5cbiAqXG4gKiBTYWZhcmkgY3VycmVudGx5IGhhcyBhIGJ1ZyB3aGljaCBvY2Nhc2lvbmFsbHkgYnJlYWtzIHRoaXMgYmVoYXZpb3VyLCBzbyB3ZVxuICogbmVlZCB0byBjYWNoZSB0aGUgVGVtcGxhdGUgYXQgdHdvIGxldmVscy4gV2UgZmlyc3QgY2FjaGUgdGhlXG4gKiBUZW1wbGF0ZVN0cmluZ3NBcnJheSwgYW5kIGlmIHRoYXQgZmFpbHMsIHdlIGNhY2hlIGEga2V5IGNvbnN0cnVjdGVkIGJ5XG4gKiBqb2luaW5nIHRoZSBzdHJpbmdzIGFycmF5LlxuICovXG5leHBvcnQgdHlwZSB0ZW1wbGF0ZUNhY2hlID0ge1xuICBzdHJpbmdzQXJyYXk6IFdlYWtNYXA8VGVtcGxhdGVTdHJpbmdzQXJyYXksIFRlbXBsYXRlPjtcbiAga2V5U3RyaW5nOiBNYXA8c3RyaW5nLCBUZW1wbGF0ZT47XG59O1xuXG5leHBvcnQgY29uc3QgdGVtcGxhdGVDYWNoZXMgPSBuZXcgTWFwPHN0cmluZywgdGVtcGxhdGVDYWNoZT4oKTtcbiIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAoYykgMjAxNyBUaGUgUG9seW1lciBQcm9qZWN0IEF1dGhvcnMuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG4gKiBUaGlzIGNvZGUgbWF5IG9ubHkgYmUgdXNlZCB1bmRlciB0aGUgQlNEIHN0eWxlIGxpY2Vuc2UgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9MSUNFTlNFLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBhdXRob3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0FVVEhPUlMudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGNvbnRyaWJ1dG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9DT05UUklCVVRPUlMudHh0XG4gKiBDb2RlIGRpc3RyaWJ1dGVkIGJ5IEdvb2dsZSBhcyBwYXJ0IG9mIHRoZSBwb2x5bWVyIHByb2plY3QgaXMgYWxzb1xuICogc3ViamVjdCB0byBhbiBhZGRpdGlvbmFsIElQIHJpZ2h0cyBncmFudCBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL1BBVEVOVFMudHh0XG4gKi9cblxuLyoqXG4gKiBAbW9kdWxlIGxpdC1odG1sXG4gKi9cblxuaW1wb3J0IHtQYXJ0fSBmcm9tICcuL3BhcnQuanMnO1xuXG5jb25zdCBkaXJlY3RpdmVzID0gbmV3IFdlYWtNYXA8b2JqZWN0LCB0cnVlPigpO1xuXG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tYW55XG5leHBvcnQgdHlwZSBEaXJlY3RpdmVGYWN0b3J5ID0gKC4uLmFyZ3M6IGFueVtdKSA9PiBvYmplY3Q7XG5cbmV4cG9ydCB0eXBlIERpcmVjdGl2ZUZuID0gKHBhcnQ6IFBhcnQpID0+IHZvaWQ7XG5cbi8qKlxuICogQnJhbmRzIGEgZnVuY3Rpb24gYXMgYSBkaXJlY3RpdmUgc28gdGhhdCBsaXQtaHRtbCB3aWxsIGNhbGwgdGhlIGZ1bmN0aW9uXG4gKiBkdXJpbmcgdGVtcGxhdGUgcmVuZGVyaW5nLCByYXRoZXIgdGhhbiBwYXNzaW5nIGFzIGEgdmFsdWUuXG4gKlxuICogQHBhcmFtIGYgVGhlIGRpcmVjdGl2ZSBmYWN0b3J5IGZ1bmN0aW9uLiBNdXN0IGJlIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGFcbiAqIGZ1bmN0aW9uIG9mIHRoZSBzaWduYXR1cmUgYChwYXJ0OiBQYXJ0KSA9PiB2b2lkYC4gVGhlIHJldHVybmVkIGZ1bmN0aW9uIHdpbGxcbiAqIGJlIGNhbGxlZCB3aXRoIHRoZSBwYXJ0IG9iamVjdFxuICpcbiAqIEBleGFtcGxlXG4gKlxuICogYGBgXG4gKiBpbXBvcnQge2RpcmVjdGl2ZSwgaHRtbH0gZnJvbSAnbGl0LWh0bWwnO1xuICpcbiAqIGNvbnN0IGltbXV0YWJsZSA9IGRpcmVjdGl2ZSgodikgPT4gKHBhcnQpID0+IHtcbiAqICAgaWYgKHBhcnQudmFsdWUgIT09IHYpIHtcbiAqICAgICBwYXJ0LnNldFZhbHVlKHYpXG4gKiAgIH1cbiAqIH0pO1xuICogYGBgXG4gKi9cbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1hbnlcbmV4cG9ydCBjb25zdCBkaXJlY3RpdmUgPSA8RiBleHRlbmRzIERpcmVjdGl2ZUZhY3Rvcnk+KGY6IEYpOiBGID0+XG4gICAgKCguLi5hcmdzOiB1bmtub3duW10pID0+IHtcbiAgICAgIGNvbnN0IGQgPSBmKC4uLmFyZ3MpO1xuICAgICAgZGlyZWN0aXZlcy5zZXQoZCwgdHJ1ZSk7XG4gICAgICByZXR1cm4gZDtcbiAgICB9KSBhcyBGO1xuXG5leHBvcnQgY29uc3QgaXNEaXJlY3RpdmUgPSAobzogdW5rbm93bik6IG8gaXMgRGlyZWN0aXZlRm4gPT4ge1xuICByZXR1cm4gdHlwZW9mIG8gPT09ICdmdW5jdGlvbicgJiYgZGlyZWN0aXZlcy5oYXMobyk7XG59O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG4vKipcbiAqIEBtb2R1bGUgbGl0LWh0bWxcbiAqL1xuXG5pbXBvcnQge3JlbW92ZU5vZGVzfSBmcm9tICcuL2RvbS5qcyc7XG5pbXBvcnQge05vZGVQYXJ0fSBmcm9tICcuL3BhcnRzLmpzJztcbmltcG9ydCB7UmVuZGVyT3B0aW9uc30gZnJvbSAnLi9yZW5kZXItb3B0aW9ucy5qcyc7XG5pbXBvcnQge3RlbXBsYXRlRmFjdG9yeX0gZnJvbSAnLi90ZW1wbGF0ZS1mYWN0b3J5LmpzJztcbmltcG9ydCB7VGVtcGxhdGVSZXN1bHR9IGZyb20gJy4vdGVtcGxhdGUtcmVzdWx0LmpzJztcblxuZXhwb3J0IGNvbnN0IHBhcnRzID0gbmV3IFdlYWtNYXA8Tm9kZSwgTm9kZVBhcnQ+KCk7XG5cbi8qKlxuICogUmVuZGVycyBhIHRlbXBsYXRlIHRvIGEgY29udGFpbmVyLlxuICpcbiAqIFRvIHVwZGF0ZSBhIGNvbnRhaW5lciB3aXRoIG5ldyB2YWx1ZXMsIHJlZXZhbHVhdGUgdGhlIHRlbXBsYXRlIGxpdGVyYWwgYW5kXG4gKiBjYWxsIGByZW5kZXJgIHdpdGggdGhlIG5ldyByZXN1bHQuXG4gKlxuICogQHBhcmFtIHJlc3VsdCBhIFRlbXBsYXRlUmVzdWx0IGNyZWF0ZWQgYnkgZXZhbHVhdGluZyBhIHRlbXBsYXRlIHRhZyBsaWtlXG4gKiAgICAgYGh0bWxgIG9yIGBzdmdgLlxuICogQHBhcmFtIGNvbnRhaW5lciBBIERPTSBwYXJlbnQgdG8gcmVuZGVyIHRvLiBUaGUgZW50aXJlIGNvbnRlbnRzIGFyZSBlaXRoZXJcbiAqICAgICByZXBsYWNlZCwgb3IgZWZmaWNpZW50bHkgdXBkYXRlZCBpZiB0aGUgc2FtZSByZXN1bHQgdHlwZSB3YXMgcHJldmlvdXNcbiAqICAgICByZW5kZXJlZCB0aGVyZS5cbiAqIEBwYXJhbSBvcHRpb25zIFJlbmRlck9wdGlvbnMgZm9yIHRoZSBlbnRpcmUgcmVuZGVyIHRyZWUgcmVuZGVyZWQgdG8gdGhpc1xuICogICAgIGNvbnRhaW5lci4gUmVuZGVyIG9wdGlvbnMgbXVzdCAqbm90KiBjaGFuZ2UgYmV0d2VlbiByZW5kZXJzIHRvIHRoZSBzYW1lXG4gKiAgICAgY29udGFpbmVyLCBhcyB0aG9zZSBjaGFuZ2VzIHdpbGwgbm90IGVmZmVjdCBwcmV2aW91c2x5IHJlbmRlcmVkIERPTS5cbiAqL1xuZXhwb3J0IGNvbnN0IHJlbmRlciA9XG4gICAgKHJlc3VsdDogVGVtcGxhdGVSZXN1bHQsXG4gICAgIGNvbnRhaW5lcjogRWxlbWVudHxEb2N1bWVudEZyYWdtZW50LFxuICAgICBvcHRpb25zPzogUGFydGlhbDxSZW5kZXJPcHRpb25zPikgPT4ge1xuICAgICAgbGV0IHBhcnQgPSBwYXJ0cy5nZXQoY29udGFpbmVyKTtcbiAgICAgIGlmIChwYXJ0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcmVtb3ZlTm9kZXMoY29udGFpbmVyLCBjb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgICAgIHBhcnRzLnNldChjb250YWluZXIsIHBhcnQgPSBuZXcgTm9kZVBhcnQoe1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlRmFjdG9yeSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuLi5vcHRpb25zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9KSk7XG4gICAgICAgIHBhcnQuYXBwZW5kSW50byhjb250YWluZXIpO1xuICAgICAgfVxuICAgICAgcGFydC5zZXRWYWx1ZShyZXN1bHQpO1xuICAgICAgcGFydC5jb21taXQoKTtcbiAgICB9O1xuIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IChjKSAyMDE3IFRoZSBQb2x5bWVyIFByb2plY3QgQXV0aG9ycy4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cbiAqIFRoaXMgY29kZSBtYXkgb25seSBiZSB1c2VkIHVuZGVyIHRoZSBCU0Qgc3R5bGUgbGljZW5zZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0xJQ0VOU0UudHh0XG4gKiBUaGUgY29tcGxldGUgc2V0IG9mIGF1dGhvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQVVUSE9SUy50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgY29udHJpYnV0b3JzIG1heSBiZSBmb3VuZCBhdFxuICogaHR0cDovL3BvbHltZXIuZ2l0aHViLmlvL0NPTlRSSUJVVE9SUy50eHRcbiAqIENvZGUgZGlzdHJpYnV0ZWQgYnkgR29vZ2xlIGFzIHBhcnQgb2YgdGhlIHBvbHltZXIgcHJvamVjdCBpcyBhbHNvXG4gKiBzdWJqZWN0IHRvIGFuIGFkZGl0aW9uYWwgSVAgcmlnaHRzIGdyYW50IGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vUEFURU5UUy50eHRcbiAqL1xuXG4vKipcbiAqIEBtb2R1bGUgbGl0LWh0bWxcbiAqL1xuXG5pbXBvcnQge2lzQ0VQb2x5ZmlsbH0gZnJvbSAnLi9kb20uanMnO1xuaW1wb3J0IHtQYXJ0fSBmcm9tICcuL3BhcnQuanMnO1xuaW1wb3J0IHtSZW5kZXJPcHRpb25zfSBmcm9tICcuL3JlbmRlci1vcHRpb25zLmpzJztcbmltcG9ydCB7VGVtcGxhdGVQcm9jZXNzb3J9IGZyb20gJy4vdGVtcGxhdGUtcHJvY2Vzc29yLmpzJztcbmltcG9ydCB7aXNUZW1wbGF0ZVBhcnRBY3RpdmUsIFRlbXBsYXRlfSBmcm9tICcuL3RlbXBsYXRlLmpzJztcblxuLyoqXG4gKiBBbiBpbnN0YW5jZSBvZiBhIGBUZW1wbGF0ZWAgdGhhdCBjYW4gYmUgYXR0YWNoZWQgdG8gdGhlIERPTSBhbmQgdXBkYXRlZFxuICogd2l0aCBuZXcgdmFsdWVzLlxuICovXG5leHBvcnQgY2xhc3MgVGVtcGxhdGVJbnN0YW5jZSB7XG4gIF9wYXJ0czogQXJyYXk8UGFydHx1bmRlZmluZWQ+ID0gW107XG4gIHByb2Nlc3NvcjogVGVtcGxhdGVQcm9jZXNzb3I7XG4gIG9wdGlvbnM6IFJlbmRlck9wdGlvbnM7XG4gIHRlbXBsYXRlOiBUZW1wbGF0ZTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICAgIHRlbXBsYXRlOiBUZW1wbGF0ZSwgcHJvY2Vzc29yOiBUZW1wbGF0ZVByb2Nlc3NvcixcbiAgICAgIG9wdGlvbnM6IFJlbmRlck9wdGlvbnMpIHtcbiAgICB0aGlzLnRlbXBsYXRlID0gdGVtcGxhdGU7XG4gICAgdGhpcy5wcm9jZXNzb3IgPSBwcm9jZXNzb3I7XG4gICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgfVxuXG4gIHVwZGF0ZSh2YWx1ZXM6IHVua25vd25bXSkge1xuICAgIGxldCBpID0gMDtcbiAgICBmb3IgKGNvbnN0IHBhcnQgb2YgdGhpcy5fcGFydHMpIHtcbiAgICAgIGlmIChwYXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcGFydC5zZXRWYWx1ZSh2YWx1ZXNbaV0pO1xuICAgICAgfVxuICAgICAgaSsrO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IHBhcnQgb2YgdGhpcy5fcGFydHMpIHtcbiAgICAgIGlmIChwYXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgcGFydC5jb21taXQoKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBfY2xvbmUoKTogRG9jdW1lbnRGcmFnbWVudCB7XG4gICAgLy8gV2hlbiB1c2luZyB0aGUgQ3VzdG9tIEVsZW1lbnRzIHBvbHlmaWxsLCBjbG9uZSB0aGUgbm9kZSwgcmF0aGVyIHRoYW5cbiAgICAvLyBpbXBvcnRpbmcgaXQsIHRvIGtlZXAgdGhlIGZyYWdtZW50IGluIHRoZSB0ZW1wbGF0ZSdzIGRvY3VtZW50LiBUaGlzXG4gICAgLy8gbGVhdmVzIHRoZSBmcmFnbWVudCBpbmVydCBzbyBjdXN0b20gZWxlbWVudHMgd29uJ3QgdXBncmFkZSBhbmRcbiAgICAvLyBwb3RlbnRpYWxseSBtb2RpZnkgdGhlaXIgY29udGVudHMgYnkgY3JlYXRpbmcgYSBwb2x5ZmlsbGVkIFNoYWRvd1Jvb3RcbiAgICAvLyB3aGlsZSB3ZSB0cmF2ZXJzZSB0aGUgdHJlZS5cbiAgICBjb25zdCBmcmFnbWVudCA9IGlzQ0VQb2x5ZmlsbCA/XG4gICAgICAgIHRoaXMudGVtcGxhdGUuZWxlbWVudC5jb250ZW50LmNsb25lTm9kZSh0cnVlKSBhcyBEb2N1bWVudEZyYWdtZW50IDpcbiAgICAgICAgZG9jdW1lbnQuaW1wb3J0Tm9kZSh0aGlzLnRlbXBsYXRlLmVsZW1lbnQuY29udGVudCwgdHJ1ZSk7XG5cbiAgICBjb25zdCBwYXJ0cyA9IHRoaXMudGVtcGxhdGUucGFydHM7XG4gICAgbGV0IHBhcnRJbmRleCA9IDA7XG4gICAgbGV0IG5vZGVJbmRleCA9IDA7XG4gICAgY29uc3QgX3ByZXBhcmVJbnN0YW5jZSA9IChmcmFnbWVudDogRG9jdW1lbnRGcmFnbWVudCkgPT4ge1xuICAgICAgLy8gRWRnZSBuZWVkcyBhbGwgNCBwYXJhbWV0ZXJzIHByZXNlbnQ7IElFMTEgbmVlZHMgM3JkIHBhcmFtZXRlciB0byBiZVxuICAgICAgLy8gbnVsbFxuICAgICAgY29uc3Qgd2Fsa2VyID0gZG9jdW1lbnQuY3JlYXRlVHJlZVdhbGtlcihcbiAgICAgICAgICBmcmFnbWVudCxcbiAgICAgICAgICAxMzMgLyogTm9kZUZpbHRlci5TSE9XX3tFTEVNRU5UfENPTU1FTlR8VEVYVH0gKi8sXG4gICAgICAgICAgbnVsbCxcbiAgICAgICAgICBmYWxzZSk7XG4gICAgICBsZXQgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpO1xuICAgICAgLy8gTG9vcCB0aHJvdWdoIGFsbCB0aGUgbm9kZXMgYW5kIHBhcnRzIG9mIGEgdGVtcGxhdGVcbiAgICAgIHdoaWxlIChwYXJ0SW5kZXggPCBwYXJ0cy5sZW5ndGggJiYgbm9kZSAhPT0gbnVsbCkge1xuICAgICAgICBjb25zdCBwYXJ0ID0gcGFydHNbcGFydEluZGV4XTtcbiAgICAgICAgLy8gQ29uc2VjdXRpdmUgUGFydHMgbWF5IGhhdmUgdGhlIHNhbWUgbm9kZSBpbmRleCwgaW4gdGhlIGNhc2Ugb2ZcbiAgICAgICAgLy8gbXVsdGlwbGUgYm91bmQgYXR0cmlidXRlcyBvbiBhbiBlbGVtZW50LiBTbyBlYWNoIGl0ZXJhdGlvbiB3ZSBlaXRoZXJcbiAgICAgICAgLy8gaW5jcmVtZW50IHRoZSBub2RlSW5kZXgsIGlmIHdlIGFyZW4ndCBvbiBhIG5vZGUgd2l0aCBhIHBhcnQsIG9yIHRoZVxuICAgICAgICAvLyBwYXJ0SW5kZXggaWYgd2UgYXJlLiBCeSBub3QgaW5jcmVtZW50aW5nIHRoZSBub2RlSW5kZXggd2hlbiB3ZSBmaW5kIGFcbiAgICAgICAgLy8gcGFydCwgd2UgYWxsb3cgZm9yIHRoZSBuZXh0IHBhcnQgdG8gYmUgYXNzb2NpYXRlZCB3aXRoIHRoZSBjdXJyZW50XG4gICAgICAgIC8vIG5vZGUgaWYgbmVjY2Vzc2FzcnkuXG4gICAgICAgIGlmICghaXNUZW1wbGF0ZVBhcnRBY3RpdmUocGFydCkpIHtcbiAgICAgICAgICB0aGlzLl9wYXJ0cy5wdXNoKHVuZGVmaW5lZCk7XG4gICAgICAgICAgcGFydEluZGV4Kys7XG4gICAgICAgIH0gZWxzZSBpZiAobm9kZUluZGV4ID09PSBwYXJ0LmluZGV4KSB7XG4gICAgICAgICAgaWYgKHBhcnQudHlwZSA9PT0gJ25vZGUnKSB7XG4gICAgICAgICAgICBjb25zdCBwYXJ0ID0gdGhpcy5wcm9jZXNzb3IuaGFuZGxlVGV4dEV4cHJlc3Npb24odGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIHBhcnQuaW5zZXJ0QWZ0ZXJOb2RlKG5vZGUucHJldmlvdXNTaWJsaW5nISk7XG4gICAgICAgICAgICB0aGlzLl9wYXJ0cy5wdXNoKHBhcnQpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl9wYXJ0cy5wdXNoKC4uLnRoaXMucHJvY2Vzc29yLmhhbmRsZUF0dHJpYnV0ZUV4cHJlc3Npb25zKFxuICAgICAgICAgICAgICAgIG5vZGUgYXMgRWxlbWVudCwgcGFydC5uYW1lLCBwYXJ0LnN0cmluZ3MsIHRoaXMub3B0aW9ucykpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBwYXJ0SW5kZXgrKztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBub2RlSW5kZXgrKztcbiAgICAgICAgICBpZiAobm9kZS5ub2RlTmFtZSA9PT0gJ1RFTVBMQVRFJykge1xuICAgICAgICAgICAgX3ByZXBhcmVJbnN0YW5jZSgobm9kZSBhcyBIVE1MVGVtcGxhdGVFbGVtZW50KS5jb250ZW50KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfTtcbiAgICBfcHJlcGFyZUluc3RhbmNlKGZyYWdtZW50KTtcbiAgICBpZiAoaXNDRVBvbHlmaWxsKSB7XG4gICAgICBkb2N1bWVudC5hZG9wdE5vZGUoZnJhZ21lbnQpO1xuICAgICAgY3VzdG9tRWxlbWVudHMudXBncmFkZShmcmFnbWVudCk7XG4gICAgfVxuICAgIHJldHVybiBmcmFnbWVudDtcbiAgfVxufVxuIiwiLypcbkNvcHlyaWdodCAyMDE4IEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbm9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG50aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbk9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCAnLi9ob21lJztcbmltcG9ydCAnLi9jb21wb25lbnQnO1xuaW1wb3J0ICcuL2d1aWRlJztcbiIsIlxudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uY3NzXCIpO1xuXG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcblxudmFyIHRyYW5zZm9ybTtcbnZhciBpbnNlcnRJbnRvO1xuXG5cblxudmFyIG9wdGlvbnMgPSB7XCJobXJcIjp0cnVlfVxuXG5vcHRpb25zLnRyYW5zZm9ybSA9IHRyYW5zZm9ybVxub3B0aW9ucy5pbnNlcnRJbnRvID0gdW5kZWZpbmVkO1xuXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2xpYi9hZGRTdHlsZXMuanNcIikoY29udGVudCwgb3B0aW9ucyk7XG5cbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXG5pZihtb2R1bGUuaG90KSB7XG5cdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21haW4uY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tYWluLmNzc1wiKTtcblxuXHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXG5cdFx0dmFyIGxvY2FscyA9IChmdW5jdGlvbihhLCBiKSB7XG5cdFx0XHR2YXIga2V5LCBpZHggPSAwO1xuXG5cdFx0XHRmb3Ioa2V5IGluIGEpIHtcblx0XHRcdFx0aWYoIWIgfHwgYVtrZXldICE9PSBiW2tleV0pIHJldHVybiBmYWxzZTtcblx0XHRcdFx0aWR4Kys7XG5cdFx0XHR9XG5cblx0XHRcdGZvcihrZXkgaW4gYikgaWR4LS07XG5cblx0XHRcdHJldHVybiBpZHggPT09IDA7XG5cdFx0fShjb250ZW50LmxvY2FscywgbmV3Q29udGVudC5sb2NhbHMpKTtcblxuXHRcdGlmKCFsb2NhbHMpIHRocm93IG5ldyBFcnJvcignQWJvcnRpbmcgQ1NTIEhNUiBkdWUgdG8gY2hhbmdlZCBjc3MtbW9kdWxlcyBsb2NhbHMuJyk7XG5cblx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdH0pO1xuXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCIpKGZhbHNlKTtcbi8vIE1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiLypcXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcXFwiTGljZW5zZVxcXCIpO1xcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XFxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXFxuXFxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFxcXCJBUyBJU1xcXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxcbiovXFxuXFxuOnJvb3QsXFxuYm9keSB7XFxuICAgIHdpZHRoOiAxMDAlO1xcbiAgICBoZWlnaHQ6IDEwMCU7XFxuICAgIG92ZXJmbG93OiBoaWRkZW47XFxuICAgIG1hcmdpbjogMDtcXG59XFxuXCIsIFwiXCJdKTtcblxuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodXNlU291cmNlTWFwKSB7XG4gIHZhciBsaXN0ID0gW107IC8vIHJldHVybiB0aGUgbGlzdCBvZiBtb2R1bGVzIGFzIGNzcyBzdHJpbmdcblxuICBsaXN0LnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIHRoaXMubWFwKGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgICB2YXIgY29udGVudCA9IGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuICdAbWVkaWEgJyArIGl0ZW1bMl0gKyAneycgKyBjb250ZW50ICsgJ30nO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgICB9XG4gICAgfSkuam9pbignJyk7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSkge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsICcnXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGlkID0gdGhpc1tpXVswXTtcblxuICAgICAgaWYgKGlkICE9IG51bGwpIHtcbiAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAoaSA9IDA7IGkgPCBtb2R1bGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IG1vZHVsZXNbaV07IC8vIHNraXAgYWxyZWFkeSBpbXBvcnRlZCBtb2R1bGVcbiAgICAgIC8vIHRoaXMgaW1wbGVtZW50YXRpb24gaXMgbm90IDEwMCUgcGVyZmVjdCBmb3Igd2VpcmQgbWVkaWEgcXVlcnkgY29tYmluYXRpb25zXG4gICAgICAvLyB3aGVuIGEgbW9kdWxlIGlzIGltcG9ydGVkIG11bHRpcGxlIHRpbWVzIHdpdGggZGlmZmVyZW50IG1lZGlhIHF1ZXJpZXMuXG4gICAgICAvLyBJIGhvcGUgdGhpcyB3aWxsIG5ldmVyIG9jY3VyIChIZXkgdGhpcyB3YXkgd2UgaGF2ZSBzbWFsbGVyIGJ1bmRsZXMpXG5cbiAgICAgIGlmIChpdGVtWzBdID09IG51bGwgfHwgIWFscmVhZHlJbXBvcnRlZE1vZHVsZXNbaXRlbVswXV0pIHtcbiAgICAgICAgaWYgKG1lZGlhUXVlcnkgJiYgIWl0ZW1bMl0pIHtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWFRdWVyeTtcbiAgICAgICAgfSBlbHNlIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgICAgaXRlbVsyXSA9ICcoJyArIGl0ZW1bMl0gKyAnKSBhbmQgKCcgKyBtZWRpYVF1ZXJ5ICsgJyknO1xuICAgICAgICB9XG5cbiAgICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07XG5cbmZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSwgdXNlU291cmNlTWFwKSB7XG4gIHZhciBjb250ZW50ID0gaXRlbVsxXSB8fCAnJztcbiAgdmFyIGNzc01hcHBpbmcgPSBpdGVtWzNdO1xuXG4gIGlmICghY3NzTWFwcGluZykge1xuICAgIHJldHVybiBjb250ZW50O1xuICB9XG5cbiAgaWYgKHVzZVNvdXJjZU1hcCAmJiB0eXBlb2YgYnRvYSA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIHZhciBzb3VyY2VNYXBwaW5nID0gdG9Db21tZW50KGNzc01hcHBpbmcpO1xuICAgIHZhciBzb3VyY2VVUkxzID0gY3NzTWFwcGluZy5zb3VyY2VzLm1hcChmdW5jdGlvbiAoc291cmNlKSB7XG4gICAgICByZXR1cm4gJy8qIyBzb3VyY2VVUkw9JyArIGNzc01hcHBpbmcuc291cmNlUm9vdCArIHNvdXJjZSArICcgKi8nO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oJ1xcbicpO1xuICB9XG5cbiAgcmV0dXJuIFtjb250ZW50XS5qb2luKCdcXG4nKTtcbn0gLy8gQWRhcHRlZCBmcm9tIGNvbnZlcnQtc291cmNlLW1hcCAoTUlUKVxuXG5cbmZ1bmN0aW9uIHRvQ29tbWVudChzb3VyY2VNYXApIHtcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHZhciBiYXNlNjQgPSBidG9hKHVuZXNjYXBlKGVuY29kZVVSSUNvbXBvbmVudChKU09OLnN0cmluZ2lmeShzb3VyY2VNYXApKSkpO1xuICB2YXIgZGF0YSA9ICdzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCwnICsgYmFzZTY0O1xuICByZXR1cm4gJy8qIyAnICsgZGF0YSArICcgKi8nO1xufSIsIi8qXG5cdE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG5cdEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG5cbnZhciBzdHlsZXNJbkRvbSA9IHt9O1xuXG52YXJcdG1lbW9pemUgPSBmdW5jdGlvbiAoZm4pIHtcblx0dmFyIG1lbW87XG5cblx0cmV0dXJuIGZ1bmN0aW9uICgpIHtcblx0XHRpZiAodHlwZW9mIG1lbW8gPT09IFwidW5kZWZpbmVkXCIpIG1lbW8gPSBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuXHRcdHJldHVybiBtZW1vO1xuXHR9O1xufTtcblxudmFyIGlzT2xkSUUgPSBtZW1vaXplKGZ1bmN0aW9uICgpIHtcblx0Ly8gVGVzdCBmb3IgSUUgPD0gOSBhcyBwcm9wb3NlZCBieSBCcm93c2VyaGFja3Ncblx0Ly8gQHNlZSBodHRwOi8vYnJvd3NlcmhhY2tzLmNvbS8jaGFjay1lNzFkODY5MmY2NTMzNDE3M2ZlZTcxNWMyMjJjYjgwNVxuXHQvLyBUZXN0cyBmb3IgZXhpc3RlbmNlIG9mIHN0YW5kYXJkIGdsb2JhbHMgaXMgdG8gYWxsb3cgc3R5bGUtbG9hZGVyXG5cdC8vIHRvIG9wZXJhdGUgY29ycmVjdGx5IGludG8gbm9uLXN0YW5kYXJkIGVudmlyb25tZW50c1xuXHQvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93ZWJwYWNrLWNvbnRyaWIvc3R5bGUtbG9hZGVyL2lzc3Vlcy8xNzdcblx0cmV0dXJuIHdpbmRvdyAmJiBkb2N1bWVudCAmJiBkb2N1bWVudC5hbGwgJiYgIXdpbmRvdy5hdG9iO1xufSk7XG5cbnZhciBnZXRUYXJnZXQgPSBmdW5jdGlvbiAodGFyZ2V0LCBwYXJlbnQpIHtcbiAgaWYgKHBhcmVudCl7XG4gICAgcmV0dXJuIHBhcmVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7XG4gIH1cbiAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IodGFyZ2V0KTtcbn07XG5cbnZhciBnZXRFbGVtZW50ID0gKGZ1bmN0aW9uIChmbikge1xuXHR2YXIgbWVtbyA9IHt9O1xuXG5cdHJldHVybiBmdW5jdGlvbih0YXJnZXQsIHBhcmVudCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHBhc3NpbmcgZnVuY3Rpb24gaW4gb3B0aW9ucywgdGhlbiB1c2UgaXQgZm9yIHJlc29sdmUgXCJoZWFkXCIgZWxlbWVudC5cbiAgICAgICAgICAgICAgICAvLyBVc2VmdWwgZm9yIFNoYWRvdyBSb290IHN0eWxlIGkuZVxuICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICAgICAgICAvLyAgIGluc2VydEludG86IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCIjZm9vXCIpLnNoYWRvd1Jvb3QgfVxuICAgICAgICAgICAgICAgIC8vIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHRhcmdldCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRhcmdldCgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIG1lbW9bdGFyZ2V0XSA9PT0gXCJ1bmRlZmluZWRcIikge1xuXHRcdFx0dmFyIHN0eWxlVGFyZ2V0ID0gZ2V0VGFyZ2V0LmNhbGwodGhpcywgdGFyZ2V0LCBwYXJlbnQpO1xuXHRcdFx0Ly8gU3BlY2lhbCBjYXNlIHRvIHJldHVybiBoZWFkIG9mIGlmcmFtZSBpbnN0ZWFkIG9mIGlmcmFtZSBpdHNlbGZcblx0XHRcdGlmICh3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQgJiYgc3R5bGVUYXJnZXQgaW5zdGFuY2VvZiB3aW5kb3cuSFRNTElGcmFtZUVsZW1lbnQpIHtcblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHQvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuXHRcdFx0XHRcdC8vIGR1ZSB0byBjcm9zcy1vcmlnaW4gcmVzdHJpY3Rpb25zXG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcblx0XHRcdFx0fSBjYXRjaChlKSB7XG5cdFx0XHRcdFx0c3R5bGVUYXJnZXQgPSBudWxsO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRtZW1vW3RhcmdldF0gPSBzdHlsZVRhcmdldDtcblx0XHR9XG5cdFx0cmV0dXJuIG1lbW9bdGFyZ2V0XVxuXHR9O1xufSkoKTtcblxudmFyIHNpbmdsZXRvbiA9IG51bGw7XG52YXJcdHNpbmdsZXRvbkNvdW50ZXIgPSAwO1xudmFyXHRzdHlsZXNJbnNlcnRlZEF0VG9wID0gW107XG5cbnZhclx0Zml4VXJscyA9IHJlcXVpcmUoXCIuL3VybHNcIik7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obGlzdCwgb3B0aW9ucykge1xuXHRpZiAodHlwZW9mIERFQlVHICE9PSBcInVuZGVmaW5lZFwiICYmIERFQlVHKSB7XG5cdFx0aWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJvYmplY3RcIikgdGhyb3cgbmV3IEVycm9yKFwiVGhlIHN0eWxlLWxvYWRlciBjYW5ub3QgYmUgdXNlZCBpbiBhIG5vbi1icm93c2VyIGVudmlyb25tZW50XCIpO1xuXHR9XG5cblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cblx0b3B0aW9ucy5hdHRycyA9IHR5cGVvZiBvcHRpb25zLmF0dHJzID09PSBcIm9iamVjdFwiID8gb3B0aW9ucy5hdHRycyA6IHt9O1xuXG5cdC8vIEZvcmNlIHNpbmdsZS10YWcgc29sdXRpb24gb24gSUU2LTksIHdoaWNoIGhhcyBhIGhhcmQgbGltaXQgb24gdGhlICMgb2YgPHN0eWxlPlxuXHQvLyB0YWdzIGl0IHdpbGwgYWxsb3cgb24gYSBwYWdlXG5cdGlmICghb3B0aW9ucy5zaW5nbGV0b24gJiYgdHlwZW9mIG9wdGlvbnMuc2luZ2xldG9uICE9PSBcImJvb2xlYW5cIikgb3B0aW9ucy5zaW5nbGV0b24gPSBpc09sZElFKCk7XG5cblx0Ly8gQnkgZGVmYXVsdCwgYWRkIDxzdHlsZT4gdGFncyB0byB0aGUgPGhlYWQ+IGVsZW1lbnRcbiAgICAgICAgaWYgKCFvcHRpb25zLmluc2VydEludG8pIG9wdGlvbnMuaW5zZXJ0SW50byA9IFwiaGVhZFwiO1xuXG5cdC8vIEJ5IGRlZmF1bHQsIGFkZCA8c3R5bGU+IHRhZ3MgdG8gdGhlIGJvdHRvbSBvZiB0aGUgdGFyZ2V0XG5cdGlmICghb3B0aW9ucy5pbnNlcnRBdCkgb3B0aW9ucy5pbnNlcnRBdCA9IFwiYm90dG9tXCI7XG5cblx0dmFyIHN0eWxlcyA9IGxpc3RUb1N0eWxlcyhsaXN0LCBvcHRpb25zKTtcblxuXHRhZGRTdHlsZXNUb0RvbShzdHlsZXMsIG9wdGlvbnMpO1xuXG5cdHJldHVybiBmdW5jdGlvbiB1cGRhdGUgKG5ld0xpc3QpIHtcblx0XHR2YXIgbWF5UmVtb3ZlID0gW107XG5cblx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN0eWxlcy5sZW5ndGg7IGkrKykge1xuXHRcdFx0dmFyIGl0ZW0gPSBzdHlsZXNbaV07XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdFx0ZG9tU3R5bGUucmVmcy0tO1xuXHRcdFx0bWF5UmVtb3ZlLnB1c2goZG9tU3R5bGUpO1xuXHRcdH1cblxuXHRcdGlmKG5ld0xpc3QpIHtcblx0XHRcdHZhciBuZXdTdHlsZXMgPSBsaXN0VG9TdHlsZXMobmV3TGlzdCwgb3B0aW9ucyk7XG5cdFx0XHRhZGRTdHlsZXNUb0RvbShuZXdTdHlsZXMsIG9wdGlvbnMpO1xuXHRcdH1cblxuXHRcdGZvciAodmFyIGkgPSAwOyBpIDwgbWF5UmVtb3ZlLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHR2YXIgZG9tU3R5bGUgPSBtYXlSZW1vdmVbaV07XG5cblx0XHRcdGlmKGRvbVN0eWxlLnJlZnMgPT09IDApIHtcblx0XHRcdFx0Zm9yICh2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykgZG9tU3R5bGUucGFydHNbal0oKTtcblxuXHRcdFx0XHRkZWxldGUgc3R5bGVzSW5Eb21bZG9tU3R5bGUuaWRdO1xuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn07XG5cbmZ1bmN0aW9uIGFkZFN0eWxlc1RvRG9tIChzdHlsZXMsIG9wdGlvbnMpIHtcblx0Zm9yICh2YXIgaSA9IDA7IGkgPCBzdHlsZXMubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IHN0eWxlc1tpXTtcblx0XHR2YXIgZG9tU3R5bGUgPSBzdHlsZXNJbkRvbVtpdGVtLmlkXTtcblxuXHRcdGlmKGRvbVN0eWxlKSB7XG5cdFx0XHRkb21TdHlsZS5yZWZzKys7XG5cblx0XHRcdGZvcih2YXIgaiA9IDA7IGogPCBkb21TdHlsZS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRkb21TdHlsZS5wYXJ0c1tqXShpdGVtLnBhcnRzW2pdKTtcblx0XHRcdH1cblxuXHRcdFx0Zm9yKDsgaiA8IGl0ZW0ucGFydHMubGVuZ3RoOyBqKyspIHtcblx0XHRcdFx0ZG9tU3R5bGUucGFydHMucHVzaChhZGRTdHlsZShpdGVtLnBhcnRzW2pdLCBvcHRpb25zKSk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHZhciBwYXJ0cyA9IFtdO1xuXG5cdFx0XHRmb3IodmFyIGogPSAwOyBqIDwgaXRlbS5wYXJ0cy5sZW5ndGg7IGorKykge1xuXHRcdFx0XHRwYXJ0cy5wdXNoKGFkZFN0eWxlKGl0ZW0ucGFydHNbal0sIG9wdGlvbnMpKTtcblx0XHRcdH1cblxuXHRcdFx0c3R5bGVzSW5Eb21baXRlbS5pZF0gPSB7aWQ6IGl0ZW0uaWQsIHJlZnM6IDEsIHBhcnRzOiBwYXJ0c307XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGxpc3RUb1N0eWxlcyAobGlzdCwgb3B0aW9ucykge1xuXHR2YXIgc3R5bGVzID0gW107XG5cdHZhciBuZXdTdHlsZXMgPSB7fTtcblxuXHRmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcblx0XHR2YXIgaXRlbSA9IGxpc3RbaV07XG5cdFx0dmFyIGlkID0gb3B0aW9ucy5iYXNlID8gaXRlbVswXSArIG9wdGlvbnMuYmFzZSA6IGl0ZW1bMF07XG5cdFx0dmFyIGNzcyA9IGl0ZW1bMV07XG5cdFx0dmFyIG1lZGlhID0gaXRlbVsyXTtcblx0XHR2YXIgc291cmNlTWFwID0gaXRlbVszXTtcblx0XHR2YXIgcGFydCA9IHtjc3M6IGNzcywgbWVkaWE6IG1lZGlhLCBzb3VyY2VNYXA6IHNvdXJjZU1hcH07XG5cblx0XHRpZighbmV3U3R5bGVzW2lkXSkgc3R5bGVzLnB1c2gobmV3U3R5bGVzW2lkXSA9IHtpZDogaWQsIHBhcnRzOiBbcGFydF19KTtcblx0XHRlbHNlIG5ld1N0eWxlc1tpZF0ucGFydHMucHVzaChwYXJ0KTtcblx0fVxuXG5cdHJldHVybiBzdHlsZXM7XG59XG5cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudCAob3B0aW9ucywgc3R5bGUpIHtcblx0dmFyIHRhcmdldCA9IGdldEVsZW1lbnQob3B0aW9ucy5pbnNlcnRJbnRvKVxuXG5cdGlmICghdGFyZ2V0KSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ291bGRuJ3QgZmluZCBhIHN0eWxlIHRhcmdldC4gVGhpcyBwcm9iYWJseSBtZWFucyB0aGF0IHRoZSB2YWx1ZSBmb3IgdGhlICdpbnNlcnRJbnRvJyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG5cdH1cblxuXHR2YXIgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AgPSBzdHlsZXNJbnNlcnRlZEF0VG9wW3N0eWxlc0luc2VydGVkQXRUb3AubGVuZ3RoIC0gMV07XG5cblx0aWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwidG9wXCIpIHtcblx0XHRpZiAoIWxhc3RTdHlsZUVsZW1lbnRJbnNlcnRlZEF0VG9wKSB7XG5cdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCB0YXJnZXQuZmlyc3RDaGlsZCk7XG5cdFx0fSBlbHNlIGlmIChsYXN0U3R5bGVFbGVtZW50SW5zZXJ0ZWRBdFRvcC5uZXh0U2libGluZykge1xuXHRcdFx0dGFyZ2V0Lmluc2VydEJlZm9yZShzdHlsZSwgbGFzdFN0eWxlRWxlbWVudEluc2VydGVkQXRUb3AubmV4dFNpYmxpbmcpO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHRcdH1cblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnB1c2goc3R5bGUpO1xuXHR9IGVsc2UgaWYgKG9wdGlvbnMuaW5zZXJ0QXQgPT09IFwiYm90dG9tXCIpIHtcblx0XHR0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xuXHR9IGVsc2UgaWYgKHR5cGVvZiBvcHRpb25zLmluc2VydEF0ID09PSBcIm9iamVjdFwiICYmIG9wdGlvbnMuaW5zZXJ0QXQuYmVmb3JlKSB7XG5cdFx0dmFyIG5leHRTaWJsaW5nID0gZ2V0RWxlbWVudChvcHRpb25zLmluc2VydEF0LmJlZm9yZSwgdGFyZ2V0KTtcblx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKHN0eWxlLCBuZXh0U2libGluZyk7XG5cdH0gZWxzZSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiW1N0eWxlIExvYWRlcl1cXG5cXG4gSW52YWxpZCB2YWx1ZSBmb3IgcGFyYW1ldGVyICdpbnNlcnRBdCcgKCdvcHRpb25zLmluc2VydEF0JykgZm91bmQuXFxuIE11c3QgYmUgJ3RvcCcsICdib3R0b20nLCBvciBPYmplY3QuXFxuIChodHRwczovL2dpdGh1Yi5jb20vd2VicGFjay1jb250cmliL3N0eWxlLWxvYWRlciNpbnNlcnRhdClcXG5cIik7XG5cdH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlU3R5bGVFbGVtZW50IChzdHlsZSkge1xuXHRpZiAoc3R5bGUucGFyZW50Tm9kZSA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXHRzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcblxuXHR2YXIgaWR4ID0gc3R5bGVzSW5zZXJ0ZWRBdFRvcC5pbmRleE9mKHN0eWxlKTtcblx0aWYoaWR4ID49IDApIHtcblx0XHRzdHlsZXNJbnNlcnRlZEF0VG9wLnNwbGljZShpZHgsIDEpO1xuXHR9XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVN0eWxlRWxlbWVudCAob3B0aW9ucykge1xuXHR2YXIgc3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblxuXHRpZihvcHRpb25zLmF0dHJzLm5vbmNlID09PSB1bmRlZmluZWQpIHtcblx0XHR2YXIgbm9uY2UgPSBnZXROb25jZSgpO1xuXHRcdGlmIChub25jZSkge1xuXHRcdFx0b3B0aW9ucy5hdHRycy5ub25jZSA9IG5vbmNlO1xuXHRcdH1cblx0fVxuXG5cdGFkZEF0dHJzKHN0eWxlLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIHN0eWxlKTtcblxuXHRyZXR1cm4gc3R5bGU7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZUxpbmtFbGVtZW50IChvcHRpb25zKSB7XG5cdHZhciBsaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImxpbmtcIik7XG5cblx0aWYob3B0aW9ucy5hdHRycy50eXBlID09PSB1bmRlZmluZWQpIHtcblx0XHRvcHRpb25zLmF0dHJzLnR5cGUgPSBcInRleHQvY3NzXCI7XG5cdH1cblx0b3B0aW9ucy5hdHRycy5yZWwgPSBcInN0eWxlc2hlZXRcIjtcblxuXHRhZGRBdHRycyhsaW5rLCBvcHRpb25zLmF0dHJzKTtcblx0aW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMsIGxpbmspO1xuXG5cdHJldHVybiBsaW5rO1xufVxuXG5mdW5jdGlvbiBhZGRBdHRycyAoZWwsIGF0dHJzKSB7XG5cdE9iamVjdC5rZXlzKGF0dHJzKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcblx0XHRlbC5zZXRBdHRyaWJ1dGUoa2V5LCBhdHRyc1trZXldKTtcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGdldE5vbmNlKCkge1xuXHRpZiAodHlwZW9mIF9fd2VicGFja19ub25jZV9fID09PSAndW5kZWZpbmVkJykge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0cmV0dXJuIF9fd2VicGFja19ub25jZV9fO1xufVxuXG5mdW5jdGlvbiBhZGRTdHlsZSAob2JqLCBvcHRpb25zKSB7XG5cdHZhciBzdHlsZSwgdXBkYXRlLCByZW1vdmUsIHJlc3VsdDtcblxuXHQvLyBJZiBhIHRyYW5zZm9ybSBmdW5jdGlvbiB3YXMgZGVmaW5lZCwgcnVuIGl0IG9uIHRoZSBjc3Ncblx0aWYgKG9wdGlvbnMudHJhbnNmb3JtICYmIG9iai5jc3MpIHtcblx0ICAgIHJlc3VsdCA9IHR5cGVvZiBvcHRpb25zLnRyYW5zZm9ybSA9PT0gJ2Z1bmN0aW9uJ1xuXHRcdCA/IG9wdGlvbnMudHJhbnNmb3JtKG9iai5jc3MpIFxuXHRcdCA6IG9wdGlvbnMudHJhbnNmb3JtLmRlZmF1bHQob2JqLmNzcyk7XG5cblx0ICAgIGlmIChyZXN1bHQpIHtcblx0ICAgIFx0Ly8gSWYgdHJhbnNmb3JtIHJldHVybnMgYSB2YWx1ZSwgdXNlIHRoYXQgaW5zdGVhZCBvZiB0aGUgb3JpZ2luYWwgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBydW5uaW5nIHJ1bnRpbWUgdHJhbnNmb3JtYXRpb25zIG9uIHRoZSBjc3MuXG5cdCAgICBcdG9iai5jc3MgPSByZXN1bHQ7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgXHQvLyBJZiB0aGUgdHJhbnNmb3JtIGZ1bmN0aW9uIHJldHVybnMgYSBmYWxzeSB2YWx1ZSwgZG9uJ3QgYWRkIHRoaXMgY3NzLlxuXHQgICAgXHQvLyBUaGlzIGFsbG93cyBjb25kaXRpb25hbCBsb2FkaW5nIG9mIGNzc1xuXHQgICAgXHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdCAgICBcdFx0Ly8gbm9vcFxuXHQgICAgXHR9O1xuXHQgICAgfVxuXHR9XG5cblx0aWYgKG9wdGlvbnMuc2luZ2xldG9uKSB7XG5cdFx0dmFyIHN0eWxlSW5kZXggPSBzaW5nbGV0b25Db3VudGVyKys7XG5cblx0XHRzdHlsZSA9IHNpbmdsZXRvbiB8fCAoc2luZ2xldG9uID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpKTtcblxuXHRcdHVwZGF0ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgZmFsc2UpO1xuXHRcdHJlbW92ZSA9IGFwcGx5VG9TaW5nbGV0b25UYWcuYmluZChudWxsLCBzdHlsZSwgc3R5bGVJbmRleCwgdHJ1ZSk7XG5cblx0fSBlbHNlIGlmIChcblx0XHRvYmouc291cmNlTWFwICYmXG5cdFx0dHlwZW9mIFVSTCA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIFVSTC5jcmVhdGVPYmplY3RVUkwgPT09IFwiZnVuY3Rpb25cIiAmJlxuXHRcdHR5cGVvZiBVUkwucmV2b2tlT2JqZWN0VVJMID09PSBcImZ1bmN0aW9uXCIgJiZcblx0XHR0eXBlb2YgQmxvYiA9PT0gXCJmdW5jdGlvblwiICYmXG5cdFx0dHlwZW9mIGJ0b2EgPT09IFwiZnVuY3Rpb25cIlxuXHQpIHtcblx0XHRzdHlsZSA9IGNyZWF0ZUxpbmtFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IHVwZGF0ZUxpbmsuYmluZChudWxsLCBzdHlsZSwgb3B0aW9ucyk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblxuXHRcdFx0aWYoc3R5bGUuaHJlZikgVVJMLnJldm9rZU9iamVjdFVSTChzdHlsZS5ocmVmKTtcblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdHN0eWxlID0gY3JlYXRlU3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuXHRcdHVwZGF0ZSA9IGFwcGx5VG9UYWcuYmluZChudWxsLCBzdHlsZSk7XG5cdFx0cmVtb3ZlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0cmVtb3ZlU3R5bGVFbGVtZW50KHN0eWxlKTtcblx0XHR9O1xuXHR9XG5cblx0dXBkYXRlKG9iaik7XG5cblx0cmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChuZXdPYmopIHtcblx0XHRpZiAobmV3T2JqKSB7XG5cdFx0XHRpZiAoXG5cdFx0XHRcdG5ld09iai5jc3MgPT09IG9iai5jc3MgJiZcblx0XHRcdFx0bmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiZcblx0XHRcdFx0bmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcFxuXHRcdFx0KSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0dXBkYXRlKG9iaiA9IG5ld09iaik7XG5cdFx0fSBlbHNlIHtcblx0XHRcdHJlbW92ZSgpO1xuXHRcdH1cblx0fTtcbn1cblxudmFyIHJlcGxhY2VUZXh0ID0gKGZ1bmN0aW9uICgpIHtcblx0dmFyIHRleHRTdG9yZSA9IFtdO1xuXG5cdHJldHVybiBmdW5jdGlvbiAoaW5kZXgsIHJlcGxhY2VtZW50KSB7XG5cdFx0dGV4dFN0b3JlW2luZGV4XSA9IHJlcGxhY2VtZW50O1xuXG5cdFx0cmV0dXJuIHRleHRTdG9yZS5maWx0ZXIoQm9vbGVhbikuam9pbignXFxuJyk7XG5cdH07XG59KSgpO1xuXG5mdW5jdGlvbiBhcHBseVRvU2luZ2xldG9uVGFnIChzdHlsZSwgaW5kZXgsIHJlbW92ZSwgb2JqKSB7XG5cdHZhciBjc3MgPSByZW1vdmUgPyBcIlwiIDogb2JqLmNzcztcblxuXHRpZiAoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IHJlcGxhY2VUZXh0KGluZGV4LCBjc3MpO1xuXHR9IGVsc2Uge1xuXHRcdHZhciBjc3NOb2RlID0gZG9jdW1lbnQuY3JlYXRlVGV4dE5vZGUoY3NzKTtcblx0XHR2YXIgY2hpbGROb2RlcyA9IHN0eWxlLmNoaWxkTm9kZXM7XG5cblx0XHRpZiAoY2hpbGROb2Rlc1tpbmRleF0pIHN0eWxlLnJlbW92ZUNoaWxkKGNoaWxkTm9kZXNbaW5kZXhdKTtcblxuXHRcdGlmIChjaGlsZE5vZGVzLmxlbmd0aCkge1xuXHRcdFx0c3R5bGUuaW5zZXJ0QmVmb3JlKGNzc05vZGUsIGNoaWxkTm9kZXNbaW5kZXhdKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0c3R5bGUuYXBwZW5kQ2hpbGQoY3NzTm9kZSk7XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGFwcGx5VG9UYWcgKHN0eWxlLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBtZWRpYSA9IG9iai5tZWRpYTtcblxuXHRpZihtZWRpYSkge1xuXHRcdHN0eWxlLnNldEF0dHJpYnV0ZShcIm1lZGlhXCIsIG1lZGlhKVxuXHR9XG5cblx0aWYoc3R5bGUuc3R5bGVTaGVldCkge1xuXHRcdHN0eWxlLnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcblx0fSBlbHNlIHtcblx0XHR3aGlsZShzdHlsZS5maXJzdENoaWxkKSB7XG5cdFx0XHRzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcblx0XHR9XG5cblx0XHRzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcblx0fVxufVxuXG5mdW5jdGlvbiB1cGRhdGVMaW5rIChsaW5rLCBvcHRpb25zLCBvYmopIHtcblx0dmFyIGNzcyA9IG9iai5jc3M7XG5cdHZhciBzb3VyY2VNYXAgPSBvYmouc291cmNlTWFwO1xuXG5cdC8qXG5cdFx0SWYgY29udmVydFRvQWJzb2x1dGVVcmxzIGlzbid0IGRlZmluZWQsIGJ1dCBzb3VyY2VtYXBzIGFyZSBlbmFibGVkXG5cdFx0YW5kIHRoZXJlIGlzIG5vIHB1YmxpY1BhdGggZGVmaW5lZCB0aGVuIGxldHMgdHVybiBjb252ZXJ0VG9BYnNvbHV0ZVVybHNcblx0XHRvbiBieSBkZWZhdWx0LiAgT3RoZXJ3aXNlIGRlZmF1bHQgdG8gdGhlIGNvbnZlcnRUb0Fic29sdXRlVXJscyBvcHRpb25cblx0XHRkaXJlY3RseVxuXHQqL1xuXHR2YXIgYXV0b0ZpeFVybHMgPSBvcHRpb25zLmNvbnZlcnRUb0Fic29sdXRlVXJscyA9PT0gdW5kZWZpbmVkICYmIHNvdXJjZU1hcDtcblxuXHRpZiAob3B0aW9ucy5jb252ZXJ0VG9BYnNvbHV0ZVVybHMgfHwgYXV0b0ZpeFVybHMpIHtcblx0XHRjc3MgPSBmaXhVcmxzKGNzcyk7XG5cdH1cblxuXHRpZiAoc291cmNlTWFwKSB7XG5cdFx0Ly8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjY2MDM4NzVcblx0XHRjc3MgKz0gXCJcXG4vKiMgc291cmNlTWFwcGluZ1VSTD1kYXRhOmFwcGxpY2F0aW9uL2pzb247YmFzZTY0LFwiICsgYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSArIFwiICovXCI7XG5cdH1cblxuXHR2YXIgYmxvYiA9IG5ldyBCbG9iKFtjc3NdLCB7IHR5cGU6IFwidGV4dC9jc3NcIiB9KTtcblxuXHR2YXIgb2xkU3JjID0gbGluay5ocmVmO1xuXG5cdGxpbmsuaHJlZiA9IFVSTC5jcmVhdGVPYmplY3RVUkwoYmxvYik7XG5cblx0aWYob2xkU3JjKSBVUkwucmV2b2tlT2JqZWN0VVJMKG9sZFNyYyk7XG59XG4iLCJcbi8qKlxuICogV2hlbiBzb3VyY2UgbWFwcyBhcmUgZW5hYmxlZCwgYHN0eWxlLWxvYWRlcmAgdXNlcyBhIGxpbmsgZWxlbWVudCB3aXRoIGEgZGF0YS11cmkgdG9cbiAqIGVtYmVkIHRoZSBjc3Mgb24gdGhlIHBhZ2UuIFRoaXMgYnJlYWtzIGFsbCByZWxhdGl2ZSB1cmxzIGJlY2F1c2Ugbm93IHRoZXkgYXJlIHJlbGF0aXZlIHRvIGFcbiAqIGJ1bmRsZSBpbnN0ZWFkIG9mIHRoZSBjdXJyZW50IHBhZ2UuXG4gKlxuICogT25lIHNvbHV0aW9uIGlzIHRvIG9ubHkgdXNlIGZ1bGwgdXJscywgYnV0IHRoYXQgbWF5IGJlIGltcG9zc2libGUuXG4gKlxuICogSW5zdGVhZCwgdGhpcyBmdW5jdGlvbiBcImZpeGVzXCIgdGhlIHJlbGF0aXZlIHVybHMgdG8gYmUgYWJzb2x1dGUgYWNjb3JkaW5nIHRvIHRoZSBjdXJyZW50IHBhZ2UgbG9jYXRpb24uXG4gKlxuICogQSBydWRpbWVudGFyeSB0ZXN0IHN1aXRlIGlzIGxvY2F0ZWQgYXQgYHRlc3QvZml4VXJscy5qc2AgYW5kIGNhbiBiZSBydW4gdmlhIHRoZSBgbnBtIHRlc3RgIGNvbW1hbmQuXG4gKlxuICovXG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzcykge1xuICAvLyBnZXQgY3VycmVudCBsb2NhdGlvblxuICB2YXIgbG9jYXRpb24gPSB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiICYmIHdpbmRvdy5sb2NhdGlvbjtcblxuICBpZiAoIWxvY2F0aW9uKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiZml4VXJscyByZXF1aXJlcyB3aW5kb3cubG9jYXRpb25cIik7XG4gIH1cblxuXHQvLyBibGFuayBvciBudWxsP1xuXHRpZiAoIWNzcyB8fCB0eXBlb2YgY3NzICE9PSBcInN0cmluZ1wiKSB7XG5cdCAgcmV0dXJuIGNzcztcbiAgfVxuXG4gIHZhciBiYXNlVXJsID0gbG9jYXRpb24ucHJvdG9jb2wgKyBcIi8vXCIgKyBsb2NhdGlvbi5ob3N0O1xuICB2YXIgY3VycmVudERpciA9IGJhc2VVcmwgKyBsb2NhdGlvbi5wYXRobmFtZS5yZXBsYWNlKC9cXC9bXlxcL10qJC8sIFwiL1wiKTtcblxuXHQvLyBjb252ZXJ0IGVhY2ggdXJsKC4uLilcblx0Lypcblx0VGhpcyByZWd1bGFyIGV4cHJlc3Npb24gaXMganVzdCBhIHdheSB0byByZWN1cnNpdmVseSBtYXRjaCBicmFja2V0cyB3aXRoaW5cblx0YSBzdHJpbmcuXG5cblx0IC91cmxcXHMqXFwoICA9IE1hdGNoIG9uIHRoZSB3b3JkIFwidXJsXCIgd2l0aCBhbnkgd2hpdGVzcGFjZSBhZnRlciBpdCBhbmQgdGhlbiBhIHBhcmVuc1xuXHQgICAoICA9IFN0YXJ0IGEgY2FwdHVyaW5nIGdyb3VwXG5cdCAgICAgKD86ICA9IFN0YXJ0IGEgbm9uLWNhcHR1cmluZyBncm91cFxuXHQgICAgICAgICBbXikoXSAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICBcXCggID0gTWF0Y2ggYSBzdGFydCBwYXJlbnRoZXNlc1xuXHQgICAgICAgICAgICAgKD86ICA9IFN0YXJ0IGFub3RoZXIgbm9uLWNhcHR1cmluZyBncm91cHNcblx0ICAgICAgICAgICAgICAgICBbXikoXSsgID0gTWF0Y2ggYW55dGhpbmcgdGhhdCBpc24ndCBhIHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgfCAgPSBPUlxuXHQgICAgICAgICAgICAgICAgIFxcKCAgPSBNYXRjaCBhIHN0YXJ0IHBhcmVudGhlc2VzXG5cdCAgICAgICAgICAgICAgICAgICAgIFteKShdKiAgPSBNYXRjaCBhbnl0aGluZyB0aGF0IGlzbid0IGEgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICAgICBcXCkgID0gTWF0Y2ggYSBlbmQgcGFyZW50aGVzZXNcblx0ICAgICAgICAgICAgICkgID0gRW5kIEdyb3VwXG4gICAgICAgICAgICAgICpcXCkgPSBNYXRjaCBhbnl0aGluZyBhbmQgdGhlbiBhIGNsb3NlIHBhcmVuc1xuICAgICAgICAgICkgID0gQ2xvc2Ugbm9uLWNhcHR1cmluZyBncm91cFxuICAgICAgICAgICogID0gTWF0Y2ggYW55dGhpbmdcbiAgICAgICApICA9IENsb3NlIGNhcHR1cmluZyBncm91cFxuXHQgXFwpICA9IE1hdGNoIGEgY2xvc2UgcGFyZW5zXG5cblx0IC9naSAgPSBHZXQgYWxsIG1hdGNoZXMsIG5vdCB0aGUgZmlyc3QuICBCZSBjYXNlIGluc2Vuc2l0aXZlLlxuXHQgKi9cblx0dmFyIGZpeGVkQ3NzID0gY3NzLnJlcGxhY2UoL3VybFxccypcXCgoKD86W14pKF18XFwoKD86W14pKF0rfFxcKFteKShdKlxcKSkqXFwpKSopXFwpL2dpLCBmdW5jdGlvbihmdWxsTWF0Y2gsIG9yaWdVcmwpIHtcblx0XHQvLyBzdHJpcCBxdW90ZXMgKGlmIHRoZXkgZXhpc3QpXG5cdFx0dmFyIHVucXVvdGVkT3JpZ1VybCA9IG9yaWdVcmxcblx0XHRcdC50cmltKClcblx0XHRcdC5yZXBsYWNlKC9eXCIoLiopXCIkLywgZnVuY3Rpb24obywgJDEpeyByZXR1cm4gJDE7IH0pXG5cdFx0XHQucmVwbGFjZSgvXicoLiopJyQvLCBmdW5jdGlvbihvLCAkMSl7IHJldHVybiAkMTsgfSk7XG5cblx0XHQvLyBhbHJlYWR5IGEgZnVsbCB1cmw/IG5vIGNoYW5nZVxuXHRcdGlmICgvXigjfGRhdGE6fGh0dHA6XFwvXFwvfGh0dHBzOlxcL1xcL3xmaWxlOlxcL1xcL1xcL3xcXHMqJCkvaS50ZXN0KHVucXVvdGVkT3JpZ1VybCkpIHtcblx0XHQgIHJldHVybiBmdWxsTWF0Y2g7XG5cdFx0fVxuXG5cdFx0Ly8gY29udmVydCB0aGUgdXJsIHRvIGEgZnVsbCB1cmxcblx0XHR2YXIgbmV3VXJsO1xuXG5cdFx0aWYgKHVucXVvdGVkT3JpZ1VybC5pbmRleE9mKFwiLy9cIikgPT09IDApIHtcblx0XHQgIFx0Ly9UT0RPOiBzaG91bGQgd2UgYWRkIHByb3RvY29sP1xuXHRcdFx0bmV3VXJsID0gdW5xdW90ZWRPcmlnVXJsO1xuXHRcdH0gZWxzZSBpZiAodW5xdW90ZWRPcmlnVXJsLmluZGV4T2YoXCIvXCIpID09PSAwKSB7XG5cdFx0XHQvLyBwYXRoIHNob3VsZCBiZSByZWxhdGl2ZSB0byB0aGUgYmFzZSB1cmxcblx0XHRcdG5ld1VybCA9IGJhc2VVcmwgKyB1bnF1b3RlZE9yaWdVcmw7IC8vIGFscmVhZHkgc3RhcnRzIHdpdGggJy8nXG5cdFx0fSBlbHNlIHtcblx0XHRcdC8vIHBhdGggc2hvdWxkIGJlIHJlbGF0aXZlIHRvIGN1cnJlbnQgZGlyZWN0b3J5XG5cdFx0XHRuZXdVcmwgPSBjdXJyZW50RGlyICsgdW5xdW90ZWRPcmlnVXJsLnJlcGxhY2UoL15cXC5cXC8vLCBcIlwiKTsgLy8gU3RyaXAgbGVhZGluZyAnLi8nXG5cdFx0fVxuXG5cdFx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCB1cmwoLi4uKVxuXHRcdHJldHVybiBcInVybChcIiArIEpTT04uc3RyaW5naWZ5KG5ld1VybCkgKyBcIilcIjtcblx0fSk7XG5cblx0Ly8gc2VuZCBiYWNrIHRoZSBmaXhlZCBjc3Ncblx0cmV0dXJuIGZpeGVkQ3NzO1xufTtcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmNvbnN0IHN0eWxlcyA9IGNzc2Bcbjpob3N0e2Rpc3BsYXk6aW5saW5lLWJsb2NrO2JvcmRlci1yYWRpdXM6dmFyKC0tc3BlY3RydW0tYmFubmVyLWJvcmRlci1yYWRpdXMpO3BhZGRpbmc6dmFyKC0tc3BlY3RydW0tYmFubmVyLXBhZGRpbmcteSkgdmFyKC0tc3BlY3RydW0tYmFubmVyLXBhZGRpbmcteCk7Zm9udC1zaXplOnZhcigtLXNwZWN0cnVtLWJhbm5lci10ZXh0LXNpemUpO2xpbmUtaGVpZ2h0OnZhcigtLXNwZWN0cnVtLWJhbm5lci10ZXh0LWxpbmUtaGVpZ2h0KTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1iYW5uZXItdGV4dC1jb2xvcil9I2hlYWRlcntmb250LXdlaWdodDo3MDB9Omhvc3QoW2Nvcm5lcl0pe3Bvc2l0aW9uOmFic29sdXRlO3RvcDotMTBweDtyaWdodDotMTBweH06aG9zdChbdHlwZT1pbmZvXSl7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1iYW5uZXItaW5mby1iYWNrZ3JvdW5kLWNvbG9yKX06aG9zdChbdHlwZT13YXJuaW5nXSl7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1iYW5uZXItd2FybmluZy1iYWNrZ3JvdW5kLWNvbG9yKX06aG9zdChbdHlwZT1lcnJvcl0pe2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYmFubmVyLWVycm9yLWJhY2tncm91bmQtY29sb3IpfVxuYDtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlczsiLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHtcbiAgICBodG1sLFxuICAgIExpdEVsZW1lbnQsXG4gICAgcHJvcGVydHksXG4gICAgQ1NTUmVzdWx0QXJyYXksXG4gICAgVGVtcGxhdGVSZXN1bHQsXG59IGZyb20gJ2xpdC1lbGVtZW50JztcblxuaW1wb3J0IGJhbm5lclN0eWxlcyBmcm9tICcuL2Jhbm5lci5jc3MnO1xuXG5leHBvcnQgY2xhc3MgQmFubmVyIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBpcyA9ICdzcC1iYW5uZXInO1xuXG4gICAgQHByb3BlcnR5KHsgcmVmbGVjdDogdHJ1ZSB9KVxuICAgIHB1YmxpYyB0eXBlOiAnaW5mbycgfCAnd2FybmluZycgfCAnZXJyb3InID0gJ2luZm8nO1xuXG4gICAgQHByb3BlcnR5KHsgcmVmbGVjdDogdHJ1ZSwgdHlwZTogQm9vbGVhbiB9KVxuICAgIHB1YmxpYyBjb3JuZXIgPSBmYWxzZTtcblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IHN0eWxlcygpOiBDU1NSZXN1bHRBcnJheSB7XG4gICAgICAgIHJldHVybiBbYmFubmVyU3R5bGVzXTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcmVuZGVyKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICA8ZGl2IGlkPVwiaGVhZGVyXCI+PHNsb3QgbmFtZT1cImhlYWRlclwiPjwvc2xvdD48L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgaWQ9XCJjb250ZW50XCI+PHNsb3QgbmFtZT1cImNvbnRlbnRcIj48L3Nsb3Q+PC9kaXY+XG4gICAgICAgIGA7XG4gICAgfVxufVxuIiwiLypcbkNvcHlyaWdodCAyMDE4IEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbm9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG50aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbk9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5leHBvcnQgKiBmcm9tICcuL2Jhbm5lcic7XG4iLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbmltcG9ydCB7IExpdEVsZW1lbnQsIHByb3BlcnR5IH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuXG4vKipcbiAqIEZvY3VzYWJsZSBiYXNlIGNsYXNzIGhhbmRsZXMgdGFiaW5kZXggc2V0dGluZyBpbnRvIHNoYWRvd2VkIGVsZW1lbnRzIGF1dG9tYXRpY2FsbHkuXG4gKlxuICogVGhpcyBpbXBsZW1lbnRhdGlvbiBpcyBiYXNlZCBoZWF2aWx5IG9uIHRoZSBheWJvbGl0IGRlbGVnYXRlLWZvY3VzLW1peGluIGF0XG4gKiBodHRwczovL2dpdGh1Yi5jb20vd2ViLXBhZGF3YW4vYXlib2xpdC9ibG9iL21hc3Rlci9wYWNrYWdlcy9jb3JlL3NyYy9taXhpbnMvZGVsZWdhdGUtZm9jdXMtbWl4aW4uanNcbiAqL1xuZXhwb3J0IGNsYXNzIEZvY3VzYWJsZSBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgIC8qKlxuICAgICAqIERpc2FibGUgdGhpcyBjb250cm9sLiBJdCB3aWxsIG5vdCByZWNlaXZlIGZvY3VzIG9yIGV2ZW50c1xuICAgICAqL1xuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IEJvb2xlYW4sIHJlZmxlY3Q6IHRydWUgfSlcbiAgICBwdWJsaWMgZGlzYWJsZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFdoZW4gdGhpcyBjb250cm9sIGlzIHJlbmRlcmVkLCBmb2N1cyBpdCBhdXRvbWF0aWNhbGx5XG4gICAgICovXG4gICAgQHByb3BlcnR5KHsgdHlwZTogQm9vbGVhbiB9KVxuICAgIHB1YmxpYyBhdXRvZm9jdXM6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFRoZSB0YWIgaW5kZXggdG8gYXBwbHkgdG8gdGhpcyBjb250cm9sLiBTZWUgZ2VuZXJhbCBkb2N1bWVudGF0aW9uIGFib3V0XG4gICAgICogdGhlIHRhYmluZGV4IEhUTUwgcHJvcGVydHlcbiAgICAgKi9cbiAgICBAcHJvcGVydHkoeyB0eXBlOiBOdW1iZXIsIHJlZmxlY3Q6IHRydWUgfSlcbiAgICBwdWJsaWMgdGFiSW5kZXg6IG51bWJlciA9IDA7XG5cbiAgICBwcml2YXRlIGlzU2hpZnRUYWJiaW5nOiBib29sZWFuID0gZmFsc2U7XG4gICAgcHJpdmF0ZSBuZXdUYWJpbmRleD86IG51bWJlcjtcbiAgICBwcml2YXRlIG9sZFRhYmluZGV4PzogbnVtYmVyO1xuXG4gICAgcHVibGljIGdldCBmb2N1c0VsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ011c3QgaW1wbGVtZW50IGZvY3VzRWxlbWVudCBnZXR0ZXIhJyk7XG4gICAgfVxuXG4gICAgcHVibGljIGZvY3VzKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5mb2N1c0VsZW1lbnQuZm9jdXMoKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgYmx1cigpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5mb2N1c0VsZW1lbnQuYmx1cigpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBmaXJzdFVwZGF0ZWQoKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5oYXNBdHRyaWJ1dGUoJ3RhYmluZGV4JykpIHtcbiAgICAgICAgICAgIHRoaXMudGFiSW5kZXggPSAwO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRoaXMuYXV0b2ZvY3VzKSB7XG4gICAgICAgICAgICB0aGlzLmZvY3VzKCk7XG4gICAgICAgIH1cblxuICAgICAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXIoJ2ZvY3VzaW4nLCAoZXZlbnQpID0+IHtcbiAgICAgICAgICAgIGlmIChldmVudC5jb21wb3NlZFBhdGgoKVswXSA9PT0gdGhpcykge1xuICAgICAgICAgICAgICAgIHRoaXMuaGFuZGxlRm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKCdrZXlkb3duJywgKGV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgIWV2ZW50LmRlZmF1bHRQcmV2ZW50ZWQgJiZcbiAgICAgICAgICAgICAgICBldmVudC5zaGlmdEtleSAmJlxuICAgICAgICAgICAgICAgIGV2ZW50LmtleUNvZGUgPT09IDlcbiAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIHRoaXMuaXNTaGlmdFRhYmJpbmcgPSB0cnVlO1xuICAgICAgICAgICAgICAgIEhUTUxFbGVtZW50LnByb3RvdHlwZS5mb2N1cy5hcHBseSh0aGlzKTtcbiAgICAgICAgICAgICAgICBzZXRUaW1lb3V0KCgpID0+ICh0aGlzLmlzU2hpZnRUYWJiaW5nID0gZmFsc2UpLCAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHVwZGF0ZShjaGFuZ2VkUHJvcGVydGllczogTWFwPHN0cmluZywgYm9vbGVhbj4pOiB2b2lkIHtcbiAgICAgICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygnZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVEaXNhYmxlZENoYW5nZWQodGhpcy5kaXNhYmxlZCwgY2hhbmdlZFByb3BlcnRpZXMuZ2V0KFxuICAgICAgICAgICAgICAgICdkaXNhYmxlZCdcbiAgICAgICAgICAgICkgYXMgYm9vbGVhbik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoY2hhbmdlZFByb3BlcnRpZXMuaGFzKCd0YWJJbmRleCcpKSB7XG4gICAgICAgICAgICAvLyBzYXZlIHZhbHVlIG9mIHRhYmluZGV4LCBhcyBpdCBjYW4gYmUgb3ZlcnJpZGRlbiB0b1xuICAgICAgICAgICAgLy8gdW5kZWZpbmVkIGluIGNhc2UgaWYgdGhlIGVsZW1lbnQgaXMgZGlzYWJsZWRcbiAgICAgICAgICAgIHRoaXMubmV3VGFiaW5kZXggPSB0aGlzLnRhYkluZGV4O1xuICAgICAgICAgICAgdGhpcy5oYW5kbGVUYWJJbmRleENoYW5nZWQodGhpcy50YWJJbmRleCk7XG4gICAgICAgIH1cblxuICAgICAgICBzdXBlci51cGRhdGUoY2hhbmdlZFByb3BlcnRpZXMpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB1cGRhdGVkKFxuICAgICAgICBjaGFuZ2VkUHJvcGVydGllczogTWFwPHN0cmluZywgYm9vbGVhbiB8IG51bWJlciB8IHN0cmluZz5cbiAgICApOiB2b2lkIHtcbiAgICAgICAgc3VwZXIudXBkYXRlZChjaGFuZ2VkUHJvcGVydGllcyk7XG5cbiAgICAgICAgaWYgKGNoYW5nZWRQcm9wZXJ0aWVzLmhhcygnZGlzYWJsZWQnKSkge1xuICAgICAgICAgICAgaWYgKHRoaXMuZm9jdXNFbGVtZW50IGluc3RhbmNlb2YgSFRNTElucHV0RWxlbWVudCkge1xuICAgICAgICAgICAgICAgIHRoaXMuZm9jdXNFbGVtZW50LmRpc2FibGVkID0gdGhpcy5kaXNhYmxlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ibHVyKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoXG4gICAgICAgICAgICBjaGFuZ2VkUHJvcGVydGllcy5oYXMoJ3RhYkluZGV4JykgJiZcbiAgICAgICAgICAgIHRoaXMubmV3VGFiaW5kZXggIT09IHVuZGVmaW5lZFxuICAgICAgICApIHtcbiAgICAgICAgICAgIHRoaXMuZm9jdXNFbGVtZW50LnRhYkluZGV4ID0gdGhpcy5uZXdUYWJpbmRleDtcbiAgICAgICAgICAgIHRoaXMubmV3VGFiaW5kZXggPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZUZvY3VzKCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5pc1NoaWZ0VGFiYmluZykge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5mb2N1c0VsZW1lbnQuZm9jdXMoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZURpc2FibGVkQ2hhbmdlZChcbiAgICAgICAgZGlzYWJsZWQ6IGJvb2xlYW4sXG4gICAgICAgIG9sZERpc2FibGVkOiBib29sZWFuXG4gICAgKTogdm9pZCB7XG4gICAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5vbGRUYWJpbmRleCA9IHRoaXMudGFiSW5kZXg7XG4gICAgICAgICAgICB0aGlzLnRhYkluZGV4ID0gLTE7XG4gICAgICAgICAgICB0aGlzLnNldEF0dHJpYnV0ZSgnYXJpYS1kaXNhYmxlZCcsICd0cnVlJyk7XG4gICAgICAgIH0gZWxzZSBpZiAob2xkRGlzYWJsZWQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9sZFRhYmluZGV4ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRhYkluZGV4ID0gdGhpcy5vbGRUYWJpbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMucmVtb3ZlQXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJyk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcml2YXRlIGhhbmRsZVRhYkluZGV4Q2hhbmdlZCh0YWJpbmRleDogbnVtYmVyKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkICYmIHRhYmluZGV4KSB7XG4gICAgICAgICAgICBpZiAodGhpcy50YWJJbmRleCAhPT0gLTEpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm9sZFRhYmluZGV4ID0gdGhpcy50YWJJbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMudGFiSW5kZXggPSAtMTtcbiAgICAgICAgfVxuICAgIH1cbn1cbiIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBwcm9wZXJ0eSwgaHRtbCwgVGVtcGxhdGVSZXN1bHQgfSBmcm9tICdsaXQtZWxlbWVudCc7XG5pbXBvcnQgeyBGb2N1c2FibGUgfSBmcm9tICcuLi9zaGFyZWQvZm9jdXNhYmxlJztcblxuZXhwb3J0IGNsYXNzIEJ1dHRvbkJhc2UgZXh0ZW5kcyBGb2N1c2FibGUge1xuICAgIC8qKlxuICAgICAqIFN1cHBsaWVzIGFuIGFkZHJlc3MgdGhhdCB0aGUgYnJvd3NlciB3aWxsIG5hdmlnYXRlIHRvIHdoZW4gdGhpcyBidXR0b24gaXNcbiAgICAgKiBjbGlja2VkXG4gICAgICovXG4gICAgQHByb3BlcnR5KClcbiAgICBwdWJsaWMgaHJlZj86IHN0cmluZztcblxuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IEJvb2xlYW4sIHJlZmxlY3Q6IHRydWUsIGF0dHJpYnV0ZTogJ2ljb24tcmlnaHQnIH0pXG4gICAgcHJvdGVjdGVkIGljb25SaWdodCA9IGZhbHNlO1xuXG4gICAgcHJpdmF0ZSBnZXQgaGFzSWNvbigpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5xdWVyeVNlbGVjdG9yKCdbc2xvdD1cImljb25cIl0nKTtcbiAgICB9XG5cbiAgICBwdWJsaWMgZ2V0IGZvY3VzRWxlbWVudCgpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIGlmICh0aGlzLnNoYWRvd1Jvb3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNoYWRvd1Jvb3QucXVlcnlTZWxlY3RvcignI2J1dHRvbicpIGFzIEhUTUxFbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCByZW5kZXJXaXRoSWNvbigpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgICAgIHJldHVybiB0aGlzLmljb25SaWdodFxuICAgICAgICAgICAgPyBodG1sYFxuICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImxhYmVsXCI+PHNsb3Q+PC9zbG90PjwvZGl2PlxuICAgICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImljb25cIj48L3Nsb3Q+XG4gICAgICAgICAgICAgIGBcbiAgICAgICAgICAgIDogaHRtbGBcbiAgICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJpY29uXCI+PC9zbG90PlxuICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cImxhYmVsXCI+PHNsb3Q+PC9zbG90PjwvZGl2PlxuICAgICAgICAgICAgICBgO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCByZW5kZXIoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgICAgICBjb25zdCBidXR0b25Db250ZW50cyA9IGh0bWxgXG4gICAgICAgICAgICAke3RoaXMuaGFzSWNvblxuICAgICAgICAgICAgICAgID8gdGhpcy5yZW5kZXJXaXRoSWNvbigpXG4gICAgICAgICAgICAgICAgOiBodG1sYFxuICAgICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJsYWJlbFwiPjxzbG90Pjwvc2xvdD48L2Rpdj5cbiAgICAgICAgICAgICAgICAgIGB9XG4gICAgICAgIGA7XG4gICAgICAgIHJldHVybiB0aGlzLmhyZWYgJiYgdGhpcy5ocmVmLmxlbmd0aCA+IDBcbiAgICAgICAgICAgID8gaHRtbGBcbiAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIke3RoaXMuaHJlZn1cIiBpZD1cImJ1dHRvblwiPiR7YnV0dG9uQ29udGVudHN9PC9hPlxuICAgICAgICAgICAgICBgXG4gICAgICAgICAgICA6IGh0bWxgXG4gICAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwiYnV0dG9uXCI+JHtidXR0b25Db250ZW50c308L2J1dHRvbj5cbiAgICAgICAgICAgICAgYDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdsaXQtZWxlbWVudCc7XG5jb25zdCBzdHlsZXMgPSBjc3NgXG4jYnV0dG9ue2Rpc3BsYXk6aW5saW5lLWZsZXg7Ym94LXNpemluZzpib3JkZXItYm94O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO292ZXJmbG93OnZpc2libGU7bWFyZ2luOjA7dGV4dC10cmFuc2Zvcm06bm9uZTstd2Via2l0LWZvbnQtc21vb3RoaW5nOmFudGlhbGlhc2VkOy1tb3otb3N4LWZvbnQtc21vb3RoaW5nOmdyYXlzY2FsZTstd2Via2l0LWFwcGVhcmFuY2U6YnV0dG9uO3ZlcnRpY2FsLWFsaWduOnRvcDt0cmFuc2l0aW9uOmJhY2tncm91bmQgdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWFuaW1hdGlvbi1kdXJhdGlvbi0xMDAsLjEzcykgZWFzZS1vdXQsYm9yZGVyLWNvbG9yIHZhcigtLXNwZWN0cnVtLWdsb2JhbC1hbmltYXRpb24tZHVyYXRpb24tMTAwLC4xM3MpIGVhc2Utb3V0LGNvbG9yIHZhcigtLXNwZWN0cnVtLWdsb2JhbC1hbmltYXRpb24tZHVyYXRpb24tMTAwLC4xM3MpIGVhc2Utb3V0LGJveC1zaGFkb3cgdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWFuaW1hdGlvbi1kdXJhdGlvbi0xMDAsLjEzcykgZWFzZS1vdXQ7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Zm9udC1mYW1pbHk6YWRvYmUtY2xlYW4sU291cmNlIFNhbnMgUHJvLC1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFNlZ29lIFVJLFJvYm90byxzYW5zLXNlcmlmO2xpbmUtaGVpZ2h0OjEuMztjdXJzb3I6cG9pbnRlcjtib3JkZXItd2lkdGg6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktYm9yZGVyLXNpemUsMnB4KTtib3JkZXItc3R5bGU6c29saWQ7Ym9yZGVyLXJhZGl1czp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS1ib3JkZXItcmFkaXVzLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0yMDApKTttaW4taGVpZ2h0OnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWhlaWdodCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNDAwKSk7aGVpZ2h0OmF1dG87bWluLXdpZHRoOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LW1pbi13aWR0aCx2YXIoLS1zcGVjdHJ1bS1idXR0b24tY3RhLW1pbi13aWR0aCkpO3BhZGRpbmc6dmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTUwKSBjYWxjKHZhcigtLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LXBhZGRpbmcteCxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0yMDApKSAtIHZhcigtLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWJvcmRlci1zaXplLCAycHgpKTtwYWRkaW5nLWJvdHRvbTpjYWxjKHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS01MCkgKyAuNXB4KTtwYWRkaW5nLXRvcDpjYWxjKHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS01MCkgLSAuNXB4KTtmb250LXNpemU6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktdGV4dC1zaXplLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tZm9udC1zaXplLTE1MCkpO2ZvbnQtd2VpZ2h0OnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LXRleHQtZm9udC13ZWlnaHQsNzAwKX0jYnV0dG9uOmZvY3Vze291dGxpbmU6bm9uZTtib3gtc2hhZG93OjAgMCAwIHZhcigtLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWJvcmRlci1zaXplLWluY3JlYXNlLWtleS1mb2N1cywxcHgpIHZhcigtLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWJvcmRlci1jb2xvci1rZXktZm9jdXMsIzE0NzNlNil9I2J1dHRvbjo6LW1vei1mb2N1cy1pbm5lcntib3JkZXI6MDtib3JkZXItc3R5bGU6bm9uZTtwYWRkaW5nOjA7bWFyZ2luLXRvcDotMnB4O21hcmdpbi1ib3R0b206LTJweH0jYnV0dG9uOi1tb3otZm9jdXNyaW5ne291dGxpbmU6MXB4IGRvdHRlZCBCdXR0b25UZXh0fTpob3N0KFtkaXNhYmxlZF0pICNidXR0b257Y3Vyc29yOmRlZmF1bHR9OjpzbG90dGVkKFtzbG90PWljb25dKXttYXgtaGVpZ2h0OjEwMCU7ZmxleC1zaHJpbms6MH0jYnV0dG9uOmFjdGl2ZSwjYnV0dG9uOmhvdmVye2JveC1zaGFkb3c6bm9uZX1zbG90W25hbWU9aWNvbl0rI2xhYmVse21hcmdpbi1sZWZ0OnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LXRleHQtZ2FwLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0xMDApKX0jbGFiZWwrOjpzbG90dGVkKFtzbG90PWljb25dKXttYXJnaW4tbGVmdDpjYWxjKHZhcigtLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LXRleHQtZ2FwLFxudmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTEwMCkpLzIpfSNsYWJlbHthbGlnbi1zZWxmOmNlbnRlcjtqdXN0aWZ5LXNlbGY6Y2VudGVyO3dpZHRoOjEwMCV9I2xhYmVsOmVtcHR5e2Rpc3BsYXk6bm9uZX0jYnV0dG9uOmFjdGl2ZXtib3gtc2hhZG93Om5vbmV9Omhvc3QoW3ZhcmlhbnQ9Y3RhXSkgI2J1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1jdGEtYmFja2dyb3VuZC1jb2xvciwjMTQ3M2U2KTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLWN0YS1ib3JkZXItY29sb3IsIzE0NzNlNik7Y29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLWN0YS10ZXh0LWNvbG9yLCNmZmYpfTpob3N0KFt2YXJpYW50PWN0YV0pICNidXR0b246aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tY3RhLWJhY2tncm91bmQtY29sb3ItaG92ZXIsIzBkNjZkMCk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1jdGEtYm9yZGVyLWNvbG9yLWhvdmVyLCMwZDY2ZDApO2NvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1jdGEtdGV4dC1jb2xvci1ob3ZlciwjZmZmKX06aG9zdChbdmFyaWFudD1jdGFdKSAjYnV0dG9uOmZvY3Vze2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLWN0YS1iYWNrZ3JvdW5kLWNvbG9yLWtleS1mb2N1cywjMTQ3M2U2KTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLWN0YS1ib3JkZXItY29sb3Ita2V5LWZvY3VzLCMxNDczZTYpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1jdGEtdGV4dC1jb2xvci1rZXktZm9jdXMsI2ZmZil9Omhvc3QoW3ZhcmlhbnQ9Y3RhXSkgI2J1dHRvbjphY3RpdmV7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tY3RhLWJhY2tncm91bmQtY29sb3ItZG93biwjMGQ2NmQwKTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLWN0YS1ib3JkZXItY29sb3ItZG93biwjMGQ2NmQwKTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tY3RhLXRleHQtY29sb3ItZG93biwjZmZmKX06aG9zdChbdmFyaWFudD1jdGFdW2Rpc2FibGVkXSkgI2J1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1jdGEtYmFja2dyb3VuZC1jb2xvci1kaXNhYmxlZCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS0yMDApKTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLWN0YS1ib3JkZXItY29sb3ItZGlzYWJsZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMjAwKSk7Y29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLWN0YS10ZXh0LWNvbG9yLWRpc2FibGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTUwMCkpfTpob3N0KFt2YXJpYW50PXByaW1hcnldKSAjYnV0dG9ue2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktYmFja2dyb3VuZC1jb2xvcix0cmFuc3BhcmVudCk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWJvcmRlci1jb2xvcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS04MDApKTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS10ZXh0LWNvbG9yLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTgwMCkpfTpob3N0KFt2YXJpYW50PXByaW1hcnldKSAjYnV0dG9uOmhvdmVye2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktYmFja2dyb3VuZC1jb2xvci1ob3Zlcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS04MDApKTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktYm9yZGVyLWNvbG9yLWhvdmVyLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTgwMCkpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LXRleHQtY29sb3ItaG92ZXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNTApKX06aG9zdChbdmFyaWFudD1wcmltYXJ5XSkgI2J1dHRvbjpmb2N1c3tiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWJhY2tncm91bmQtY29sb3Ita2V5LWZvY3VzLCMxNDczZTYpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS1ib3JkZXItY29sb3Ita2V5LWZvY3VzLCMxNDczZTYpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LXRleHQtY29sb3Ita2V5LWZvY3VzLCNmZmYpfTpob3N0KFt2YXJpYW50PXByaW1hcnldKSAjYnV0dG9uOmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWJhY2tncm91bmQtY29sb3ItZG93bix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS05MDApKTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktYm9yZGVyLWNvbG9yLWRvd24sdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktOTAwKSk7Y29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktdGV4dC1jb2xvci1kb3duLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTUwKSl9Omhvc3QoW3ZhcmlhbnQ9cHJpbWFyeV1bZGlzYWJsZWRdKSAjYnV0dG9ue2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktYmFja2dyb3VuZC1jb2xvci1kaXNhYmxlZCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS0yMDApKTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktYm9yZGVyLWNvbG9yLWRpc2FibGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTIwMCkpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LXRleHQtY29sb3ItZGlzYWJsZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNTAwKSl9Omhvc3QoW3ZhcmlhbnQ9c2Vjb25kYXJ5XSkgI2J1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktYmFja2dyb3VuZC1jb2xvcix0cmFuc3BhcmVudCk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktYm9yZGVyLWNvbG9yLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTcwMCkpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktdGV4dC1jb2xvcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS03MDApKX06aG9zdChbdmFyaWFudD1zZWNvbmRhcnldKSAjYnV0dG9uOmhvdmVye2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTcwMCkpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LWJvcmRlci1jb2xvci1ob3Zlcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS03MDApKTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LXRleHQtY29sb3ItaG92ZXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNTApKX06aG9zdChbdmFyaWFudD1zZWNvbmRhcnldKSAjYnV0dG9uOmZvY3Vze2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yLWtleS1mb2N1cywjMTQ3M2U2KTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS1ib3JkZXItY29sb3Ita2V5LWZvY3VzLCMxNDczZTYpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktdGV4dC1jb2xvci1rZXktZm9jdXMsI2ZmZil9Omhvc3QoW3ZhcmlhbnQ9c2Vjb25kYXJ5XSkgI2J1dHRvbjphY3RpdmV7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3ItZG93bix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS04MDApKTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS1ib3JkZXItY29sb3ItZG93bix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS04MDApKTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LXRleHQtY29sb3ItZG93bix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS01MCkpfTpob3N0KFt2YXJpYW50PXNlY29uZGFyeV1bZGlzYWJsZWRdKSAjYnV0dG9ue2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yLWRpc2FibGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTIwMCkpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LWJvcmRlci1jb2xvci1kaXNhYmxlZCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS0yMDApKTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LXRleHQtY29sb3ItZGlzYWJsZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNTAwKSl9Omhvc3QoW3ZhcmlhbnQ9bmVnYXRpdmVdKSAjYnV0dG9ue2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctYmFja2dyb3VuZC1jb2xvcix0cmFuc3BhcmVudCk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLWJvcmRlci1jb2xvcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItcmVkLTYwMCkpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLXRleHQtY29sb3IsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXJlZC02MDApKX06aG9zdChbdmFyaWFudD1uZWdhdGl2ZV0pICNidXR0b246aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24td2FybmluZy1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1yZWQtNjAwKSk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLWJvcmRlci1jb2xvci1ob3Zlcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItcmVkLTYwMCkpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLXRleHQtY29sb3ItaG92ZXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNTApKX06aG9zdChbdmFyaWFudD1uZWdhdGl2ZV0pICNidXR0b246Zm9jdXN7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24td2FybmluZy1iYWNrZ3JvdW5kLWNvbG9yLWtleS1mb2N1cywjMTQ3M2U2KTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctYm9yZGVyLWNvbG9yLWtleS1mb2N1cywjMTQ3M2U2KTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24td2FybmluZy10ZXh0LWNvbG9yLWtleS1mb2N1cywjZmZmKX06aG9zdChbdmFyaWFudD1uZWdhdGl2ZV0pICNidXR0b246YWN0aXZle2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctYmFja2dyb3VuZC1jb2xvci1kb3duLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1yZWQtNzAwKSk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLWJvcmRlci1jb2xvci1kb3duLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1yZWQtNzAwKSk7Y29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctdGV4dC1jb2xvci1kb3duLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTUwKSl9Omhvc3QoW3ZhcmlhbnQ9bmVnYXRpdmVdW2Rpc2FibGVkXSkgI2J1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLWJhY2tncm91bmQtY29sb3ItZGlzYWJsZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMjAwKSk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLWJvcmRlci1jb2xvci1kaXNhYmxlZCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS0yMDApKTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24td2FybmluZy10ZXh0LWNvbG9yLWRpc2FibGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTUwMCkpfTpob3N0KFt2YXJpYW50PW92ZXJCYWNrZ3JvdW5kXSkgI2J1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtYmFja2dyb3VuZC1jb2xvcix0cmFuc3BhcmVudCk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtYm9yZGVyLWNvbG9yLCNmZmYpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtdGV4dC1jb2xvciwjZmZmKX06aG9zdChbdmFyaWFudD1vdmVyQmFja2dyb3VuZF0pICNidXR0b246aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tb3Zlci1iYWNrZ3JvdW5kLWJhY2tncm91bmQtY29sb3ItaG92ZXIsI2ZmZik7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtYm9yZGVyLWNvbG9yLWhvdmVyLCNmZmYpO2NvbG9yOmluaGVyaXR9Omhvc3QoW3ZhcmlhbnQ9b3ZlckJhY2tncm91bmRdKSAjYnV0dG9uOmZvY3Vze2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC1iYWNrZ3JvdW5kLWNvbG9yLWtleS1mb2N1cywjZmZmKTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC1ib3JkZXItY29sb3Ita2V5LWZvY3VzLCNmZmYpO2NvbG9yOmluaGVyaXQ7Ym94LXNoYWRvdzowIDAgMCB2YXIoLS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS1ib3JkZXItc2l6ZS1pbmNyZWFzZS1rZXktZm9jdXMsMXB4KSB2YXIoLS1zcGVjdHJ1bS1idXR0b24tb3Zlci1iYWNrZ3JvdW5kLWJvcmRlci1jb2xvci1rZXktZm9jdXMsI2ZmZil9Omhvc3QoW3ZhcmlhbnQ9b3ZlckJhY2tncm91bmRdKSAjYnV0dG9uOmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtYmFja2dyb3VuZC1jb2xvci1kb3duLCNmZmYpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tb3Zlci1iYWNrZ3JvdW5kLWJvcmRlci1jb2xvci1kb3duLCNmZmYpO2NvbG9yOmluaGVyaXQ7Ym94LXNoYWRvdzpub25lfTpob3N0KFt2YXJpYW50PW92ZXJCYWNrZ3JvdW5kXVtkaXNhYmxlZF0pICNidXR0b257YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tb3Zlci1iYWNrZ3JvdW5kLWJhY2tncm91bmQtY29sb3ItZGlzYWJsZWQsaHNsYSgwLDAlLDEwMCUsLjEpKTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC1ib3JkZXItY29sb3ItZGlzYWJsZWQsdHJhbnNwYXJlbnQpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtdGV4dC1jb2xvci1kaXNhYmxlZCxoc2xhKDAsMCUsMTAwJSwuMzUpKX06aG9zdChbdmFyaWFudD1vdmVyQmFja2dyb3VuZF1bcXVpZXRdKSAjYnV0dG9ue2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LW92ZXItYmFja2dyb3VuZC1iYWNrZ3JvdW5kLWNvbG9yLHRyYW5zcGFyZW50KTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LW92ZXItYmFja2dyb3VuZC1ib3JkZXItY29sb3IsdHJhbnNwYXJlbnQpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtdGV4dC1jb2xvciwjZmZmKX06aG9zdChbdmFyaWFudD1vdmVyQmFja2dyb3VuZF1bcXVpZXRdKSAjYnV0dG9uOmhvdmVye2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LW92ZXItYmFja2dyb3VuZC1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyLGhzbGEoMCwwJSwxMDAlLC4xKSk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtYm9yZGVyLWNvbG9yLWhvdmVyLHRyYW5zcGFyZW50KTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLXRleHQtY29sb3ItaG92ZXIsI2ZmZil9Omhvc3QoW3ZhcmlhbnQ9b3ZlckJhY2tncm91bmRdW3F1aWV0XSkgI2J1dHRvbjpmb2N1c3tiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtYmFja2dyb3VuZC1jb2xvci1rZXktZm9jdXMsI2ZmZik7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtYm9yZGVyLWNvbG9yLWtleS1mb2N1cywjZmZmKTtjb2xvcjppbmhlcml0O2JveC1zaGFkb3c6MCAwIDAgdmFyKC0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktYm9yZGVyLXNpemUtaW5jcmVhc2Uta2V5LWZvY3VzLDFweCkgdmFyKC0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LW92ZXItYmFja2dyb3VuZC1ib3JkZXItY29sb3Ita2V5LWZvY3VzLCNmZmYpfTpob3N0KFt2YXJpYW50PW92ZXJCYWNrZ3JvdW5kXVtxdWlldF0pICNidXR0b246YWN0aXZle2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LW92ZXItYmFja2dyb3VuZC1iYWNrZ3JvdW5kLWNvbG9yLWRvd24saHNsYSgwLDAlLDEwMCUsLjE1KSk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtYm9yZGVyLWNvbG9yLWRvd24sdHJhbnNwYXJlbnQpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtdGV4dC1jb2xvci1kb3duLCNmZmYpO2JveC1zaGFkb3c6bm9uZX06aG9zdChbdmFyaWFudD1vdmVyQmFja2dyb3VuZF1bcXVpZXRdW2Rpc2FibGVkXSkgI2J1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtYmFja2dyb3VuZC1jb2xvci1kaXNhYmxlZCx0cmFuc3BhcmVudCk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtYm9yZGVyLWNvbG9yLWRpc2FibGVkLHRyYW5zcGFyZW50KTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLXRleHQtY29sb3ItZGlzYWJsZWQsaHNsYSgwLDAlLDEwMCUsLjE1KSl9Omhvc3QoW3ZhcmlhbnQ9cHJpbWFyeV1bcXVpZXRdKSAjYnV0dG9ue2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktYmFja2dyb3VuZC1jb2xvcix0cmFuc3BhcmVudCk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1wcmltYXJ5LWJvcmRlci1jb2xvcix0cmFuc3BhcmVudCk7Y29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktdGV4dC1jb2xvcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS04MDApKX06aG9zdChbdmFyaWFudD1wcmltYXJ5XVtxdWlldF0pICNidXR0b246aG92ZXJ7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTIwMCkpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1ib3JkZXItY29sb3ItaG92ZXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMjAwKSk7Y29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktdGV4dC1jb2xvci1ob3Zlcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS05MDApKX06aG9zdChbdmFyaWFudD1wcmltYXJ5XVtxdWlldF0pICNidXR0b246Zm9jdXN7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1iYWNrZ3JvdW5kLWNvbG9yLWtleS1mb2N1cywjMTQ3M2U2KTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktYm9yZGVyLWNvbG9yLWtleS1mb2N1cywjMTQ3M2U2KTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS10ZXh0LWNvbG9yLWtleS1mb2N1cywjZmZmKX06aG9zdChbdmFyaWFudD1wcmltYXJ5XVtxdWlldF0pICNidXR0b246YWN0aXZle2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktYmFja2dyb3VuZC1jb2xvci1kb3duLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTMwMCkpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1ib3JkZXItY29sb3ItZG93bix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS0zMDApKTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS10ZXh0LWNvbG9yLWRvd24sdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktOTAwKSl9Omhvc3QoW3ZhcmlhbnQ9cHJpbWFyeV1bcXVpZXRdW2Rpc2FibGVkXSkgI2J1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1wcmltYXJ5LWJhY2tncm91bmQtY29sb3ItZGlzYWJsZWQsdHJhbnNwYXJlbnQpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1ib3JkZXItY29sb3ItZGlzYWJsZWQsdHJhbnNwYXJlbnQpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1wcmltYXJ5LXRleHQtY29sb3ItZGlzYWJsZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNTAwKSl9Omhvc3QoW3ZhcmlhbnQ9c2Vjb25kYXJ5XVtxdWlldF0pICNidXR0b257YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3IsdHJhbnNwYXJlbnQpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWJvcmRlci1jb2xvcix0cmFuc3BhcmVudCk7Y29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS10ZXh0LWNvbG9yLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTcwMCkpfTpob3N0KFt2YXJpYW50PXNlY29uZGFyeV1bcXVpZXRdKSAjYnV0dG9uOmhvdmVye2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTIwMCkpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWJvcmRlci1jb2xvci1ob3Zlcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS0yMDApKTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LXRleHQtY29sb3ItaG92ZXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktODAwKSl9Omhvc3QoW3ZhcmlhbnQ9c2Vjb25kYXJ5XVtxdWlldF0pICNidXR0b246Zm9jdXN7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3Ita2V5LWZvY3VzLCMxNDczZTYpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWJvcmRlci1jb2xvci1rZXktZm9jdXMsIzE0NzNlNik7Y29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS10ZXh0LWNvbG9yLWtleS1mb2N1cywjZmZmKX06aG9zdChbdmFyaWFudD1zZWNvbmRhcnldW3F1aWV0XSkgI2J1dHRvbjphY3RpdmV7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3ItZG93bix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS0zMDApKTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS1ib3JkZXItY29sb3ItZG93bix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS0zMDApKTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LXRleHQtY29sb3ItZG93bix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS04MDApKX06aG9zdChbdmFyaWFudD1zZWNvbmRhcnldW3F1aWV0XVtkaXNhYmxlZF0pICNidXR0b257YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3ItZGlzYWJsZWQsdHJhbnNwYXJlbnQpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWJvcmRlci1jb2xvci1kaXNhYmxlZCx0cmFuc3BhcmVudCk7Y29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS10ZXh0LWNvbG9yLWRpc2FibGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTUwMCkpfTpob3N0KFt2YXJpYW50PW5lZ2F0aXZlXVtxdWlldF0pICNidXR0b257YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy1iYWNrZ3JvdW5kLWNvbG9yLHRyYW5zcGFyZW50KTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXdhcm5pbmctYm9yZGVyLWNvbG9yLHRyYW5zcGFyZW50KTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy10ZXh0LWNvbG9yLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1yZWQtNTAwKSl9Omhvc3QoW3ZhcmlhbnQ9bmVnYXRpdmVdW3F1aWV0XSkgI2J1dHRvbjpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLWJhY2tncm91bmQtY29sb3ItaG92ZXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMjAwKSk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLWJvcmRlci1jb2xvci1ob3Zlcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS0yMDApKTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy10ZXh0LWNvbG9yLWhvdmVyLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1yZWQtNjAwKSl9Omhvc3QoW3ZhcmlhbnQ9bmVnYXRpdmVdW3F1aWV0XSkgI2J1dHRvbjpmb2N1c3tiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLWJhY2tncm91bmQtY29sb3Ita2V5LWZvY3VzLCMxNDczZTYpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy1ib3JkZXItY29sb3Ita2V5LWZvY3VzLCMxNDczZTYpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLXRleHQtY29sb3Ita2V5LWZvY3VzLCNmZmYpfTpob3N0KFt2YXJpYW50PW5lZ2F0aXZlXVtxdWlldF0pICNidXR0b246YWN0aXZle2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXdhcm5pbmctYmFja2dyb3VuZC1jb2xvci1kb3duLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTMwMCkpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy1ib3JkZXItY29sb3ItZG93bix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS0zMDApKTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy10ZXh0LWNvbG9yLWRvd24sdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXJlZC02MDApKX06aG9zdChbdmFyaWFudD1uZWdhdGl2ZV1bcXVpZXRdW2Rpc2FibGVkXSkgI2J1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLWJhY2tncm91bmQtY29sb3ItZGlzYWJsZWQsdHJhbnNwYXJlbnQpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy1ib3JkZXItY29sb3ItZGlzYWJsZWQsdHJhbnNwYXJlbnQpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLXRleHQtY29sb3ItZGlzYWJsZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNTAwKSl9Omhvc3R7ZGlzcGxheTppbmxpbmUtZmxleDtmbGV4LWRpcmVjdGlvbjpyb3d9I2J1dHRvbntkaXNwbGF5OmZsZXg7ZmxleDoxIDEgYXV0bzstd2Via2l0LWFwcGVhcmFuY2U6bm9uZX0jYnV0dG9uOmZvY3VzLDpob3N0KDpmb2N1cyl7b3V0bGluZTpub25lfTpob3N0KFtkaXNhYmxlZF0pe3BvaW50ZXItZXZlbnRzOm5vbmV9c2xvdFtuYW1lPWljb25dOjpzbG90dGVkKHN2Zyl7ZmlsbDpjdXJyZW50Q29sb3I7c3Ryb2tlOmN1cnJlbnRDb2xvcjt3aWR0aDp2YXIoLS1zcGVjdHJ1bS1hbGlhcy13b3JrZmxvdy1pY29uLXNpemUsMThweCk7aGVpZ2h0OnZhcigtLXNwZWN0cnVtLWFsaWFzLXdvcmtmbG93LWljb24tc2l6ZSwxOHB4KX1cbmA7XG5leHBvcnQgZGVmYXVsdCBzdHlsZXM7IiwiLypcbkNvcHlyaWdodCAyMDE4IEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbm9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG50aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbk9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCB7IENTU1Jlc3VsdEFycmF5LCBwcm9wZXJ0eSB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmltcG9ydCB7IEJ1dHRvbkJhc2UgfSBmcm9tICcuL2J1dHRvbi1iYXNlJztcbmltcG9ydCBidXR0b25TdHlsZXMgZnJvbSAnLi9idXR0b24uY3NzJztcblxuLyoqXG4gKiBBIFNwZWN0cnVtIGJ1dHRvbiBjb250cm9sLlxuICogQGVsZW1lbnQgc3AtYnV0dG9uXG4gKi9cbmV4cG9ydCBjbGFzcyBCdXR0b24gZXh0ZW5kcyBCdXR0b25CYXNlIHtcbiAgICAvKipcbiAgICAgKiBUaGUgdmlzdWFsIHZhcmlhbnQgdG8gYXBwbHkgdG8gdGhpcyBidXR0b24uXG4gICAgICovXG4gICAgQHByb3BlcnR5KHsgcmVmbGVjdDogdHJ1ZSB9KVxuICAgIHB1YmxpYyB2YXJpYW50OlxuICAgICAgICB8ICdjdGEnXG4gICAgICAgIHwgJ292ZXJCYWNrZ3JvdW5kJ1xuICAgICAgICB8ICdwcmltYXJ5J1xuICAgICAgICB8ICdzZWNvbmRhcnknXG4gICAgICAgIHwgJ25lZ2F0aXZlJyA9ICdjdGEnO1xuXG4gICAgLyoqXG4gICAgICogVGhlcmUgaXMgYSB3YXJuaW5nIGluIHBsYWNlIGZvciB0aGlzIGNvbnRyb2xcbiAgICAgKi9cbiAgICBAcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiB0cnVlIH0pXG4gICAgcHVibGljIHdhcm5pbmc6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIC8qKlxuICAgICAqIFN0eWxlIHRoaXMgYnV0dG9uIHRvIGJlIGxlc3Mgb2J2aW91c1xuICAgICAqL1xuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IEJvb2xlYW4sIHJlZmxlY3Q6IHRydWUgfSlcbiAgICBwdWJsaWMgcXVpZXQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IHN0eWxlcygpOiBDU1NSZXN1bHRBcnJheSB7XG4gICAgICAgIHJldHVybiBbYnV0dG9uU3R5bGVzXTtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdsaXQtZWxlbWVudCc7XG5jb25zdCBzdHlsZXMgPSBjc3NgXG4jYnV0dG9ue2Rpc3BsYXk6aW5saW5lLWZsZXg7Ym94LXNpemluZzpib3JkZXItYm94O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6Y2VudGVyO292ZXJmbG93OnZpc2libGU7bWFyZ2luOjA7dGV4dC10cmFuc2Zvcm06bm9uZTstd2Via2l0LWZvbnQtc21vb3RoaW5nOmFudGlhbGlhc2VkOy1tb3otb3N4LWZvbnQtc21vb3RoaW5nOmdyYXlzY2FsZTstd2Via2l0LWFwcGVhcmFuY2U6YnV0dG9uO3ZlcnRpY2FsLWFsaWduOnRvcDt0cmFuc2l0aW9uOmJhY2tncm91bmQgdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWFuaW1hdGlvbi1kdXJhdGlvbi0xMDAsLjEzcykgZWFzZS1vdXQsYm9yZGVyLWNvbG9yIHZhcigtLXNwZWN0cnVtLWdsb2JhbC1hbmltYXRpb24tZHVyYXRpb24tMTAwLC4xM3MpIGVhc2Utb3V0LGNvbG9yIHZhcigtLXNwZWN0cnVtLWdsb2JhbC1hbmltYXRpb24tZHVyYXRpb24tMTAwLC4xM3MpIGVhc2Utb3V0LGJveC1zaGFkb3cgdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWFuaW1hdGlvbi1kdXJhdGlvbi0xMDAsLjEzcykgZWFzZS1vdXQ7dGV4dC1kZWNvcmF0aW9uOm5vbmU7Zm9udC1mYW1pbHk6YWRvYmUtY2xlYW4sU291cmNlIFNhbnMgUHJvLC1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFNlZ29lIFVJLFJvYm90byxzYW5zLXNlcmlmO2xpbmUtaGVpZ2h0OjEuMztjdXJzb3I6cG9pbnRlcjtwb3NpdGlvbjpyZWxhdGl2ZTtoZWlnaHQ6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLWhlaWdodCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNDAwKSk7bWluLXdpZHRoOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1taW4td2lkdGgsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTQwMCkpO3BhZGRpbmc6MCBjYWxjKHZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1pY29uLXBhZGRpbmcteCxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS04NSkpIC0gdmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLWJvcmRlci1zaXplLCAxcHgpKTtib3JkZXItcmFkaXVzOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1ib3JkZXItcmFkaXVzLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS01MCkpO2ZvbnQtc2l6ZTp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tdGV4dC1zaXplLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tZm9udC1zaXplLTEwMCkpO2ZvbnQtd2VpZ2h0OnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi10ZXh0LWZvbnQtd2VpZ2h0LDQwMCk7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tYmFja2dyb3VuZC1jb2xvcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS03NSkpO2JvcmRlcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tYm9yZGVyLXNpemUsMXB4KSBzb2xpZCB2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tYm9yZGVyLWNvbG9yLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTMwMCkpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi10ZXh0LWNvbG9yLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTgwMCkpfSNidXR0b246Zm9jdXN7b3V0bGluZTpub25lO2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLWJhY2tncm91bmQtY29sb3Ita2V5LWZvY3VzLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTUwKSk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1ib3JkZXItY29sb3Ita2V5LWZvY3VzLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ibHVlLTQwMCkpO2JveC1zaGFkb3c6MCAwIDAgdmFyKC0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktYm9yZGVyLXNpemUtaW5jcmVhc2Uta2V5LWZvY3VzLDFweCkgdmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLWJvcmRlci1jb2xvci1rZXktZm9jdXMsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWJsdWUtNDAwKSk7Y29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLXRleHQtY29sb3Ita2V5LWZvY3VzLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTkwMCkpfSNidXR0b246Oi1tb3otZm9jdXMtaW5uZXJ7Ym9yZGVyOjA7Ym9yZGVyLXN0eWxlOm5vbmU7cGFkZGluZzowO21hcmdpbi10b3A6LTJweDttYXJnaW4tYm90dG9tOi0ycHh9I2J1dHRvbjotbW96LWZvY3VzcmluZ3tvdXRsaW5lOjFweCBkb3R0ZWQgQnV0dG9uVGV4dH06aG9zdChbZGlzYWJsZWRdKSAjYnV0dG9ue2N1cnNvcjpkZWZhdWx0O2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLWJhY2tncm91bmQtY29sb3ItZGlzYWJsZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMjAwKSk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1ib3JkZXItY29sb3ItZGlzYWJsZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMjAwKSk7Y29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLXRleHQtY29sb3ItZGlzYWJsZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNTAwKSl9LnNwZWN0cnVtLUljb257bWF4LWhlaWdodDoxMDAlO2ZsZXgtc2hyaW5rOjA7Y29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLWljb24tY29sb3IsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNzAwKSl9LnNwZWN0cnVtLUljb24rI2xhYmVse3BhZGRpbmctbGVmdDp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24taWNvbi1wYWRkaW5nLXgsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTg1KSk7cGFkZGluZy1yaWdodDpjYWxjKHZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi10ZXh0LXBhZGRpbmcteCxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0xNTApKSAtIHZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1pY29uLXBhZGRpbmcteCxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS04NSkpKX0uc3BlY3RydW0tSWNvbi0tc2l6ZVM6b25seS1jaGlsZHtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6Y2FsYyg1MCUgLSB2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24taWNvbi1zaXplLFxudmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTIyNSkpLzIpO2xlZnQ6Y2FsYyg1MCUgLSB2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24taWNvbi1zaXplLFxudmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTIyNSkpLzIpfSNsYWJlbDpvbmx5LWNoaWxke3BhZGRpbmc6MCBjYWxjKHZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi10ZXh0LXBhZGRpbmcteCxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0xNTApKSAtIHZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1pY29uLXBhZGRpbmcteCxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS04NSkpKX0jaG9sZC1hZmZvcmRhbmNle3Bvc2l0aW9uOmFic29sdXRlO3JpZ2h0OnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1ob2xkLWljb24tcGFkZGluZy1yaWdodCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNDApKTtib3R0b206dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLWhvbGQtaWNvbi1wYWRkaW5nLWJvdHRvbSx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNDApKTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24taG9sZC1pY29uLWNvbG9yLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTcwMCkpfSNsYWJlbHthbGlnbi1zZWxmOmNlbnRlcjtqdXN0aWZ5LXNlbGY6Y2VudGVyO3dpZHRoOjEwMCU7d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzfSNsYWJlbDplbXB0eXtkaXNwbGF5Om5vbmV9Omhvc3QoW3F1aWV0XSkgI2J1dHRvbntib3JkZXItd2lkdGg6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLXF1aWV0LWJvcmRlci1zaXplLDFweCk7Ym9yZGVyLXJhZGl1czp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tcXVpZXQtYm9yZGVyLXJhZGl1cyx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNTApKTtmb250LXNpemU6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLXF1aWV0LXRleHQtc2l6ZSx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLWZvbnQtc2l6ZS0xMDApKTtmb250LXdlaWdodDp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tcXVpZXQtdGV4dC1mb250LXdlaWdodCw0MDApO2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLXF1aWV0LWJhY2tncm91bmQtY29sb3IsdHJhbnNwYXJlbnQpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tcXVpZXQtYm9yZGVyLWNvbG9yLHRyYW5zcGFyZW50KTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tcXVpZXQtdGV4dC1jb2xvcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS04MDApKX0jYnV0dG9uOmhvdmVye2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLWJhY2tncm91bmQtY29sb3ItaG92ZXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNTApKTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLWJvcmRlci1jb2xvci1ob3Zlcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS00MDApKTtib3gtc2hhZG93Om5vbmU7Y29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLXRleHQtY29sb3ItaG92ZXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktOTAwKSl9I2J1dHRvbjpob3ZlciAuc3BlY3RydW0tSWNvbntjb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24taWNvbi1jb2xvci1ob3Zlcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS05MDApKX0jYnV0dG9uOmhvdmVyICNob2xkLWFmZm9yZGFuY2V7Y29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLWhvbGQtaWNvbi1jb2xvci1ob3Zlcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS05MDApKX0jYnV0dG9uOmZvY3VzIC5zcGVjdHJ1bS1JY29ue2NvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1pY29uLWNvbG9yLWtleS1mb2N1cyx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS05MDApKX0jYnV0dG9uOmZvY3VzICNob2xkLWFmZm9yZGFuY2V7Y29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLWhvbGQtaWNvbi1jb2xvci1rZXktZm9jdXMsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktOTAwKSl9I2J1dHRvbjphY3RpdmV7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tYmFja2dyb3VuZC1jb2xvci1kb3duLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTIwMCkpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tYm9yZGVyLWNvbG9yLWRvd24sdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNDAwKSk7Ym94LXNoYWRvdzpub25lO2NvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi10ZXh0LWNvbG9yLWRvd24sdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktOTAwKSl9I2J1dHRvbjphY3RpdmUgI2hvbGQtYWZmb3JkYW5jZXtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24taG9sZC1pY29uLWNvbG9yLWRvd24sdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktOTAwKSl9Omhvc3QoW2Rpc2FibGVkXSkgI2J1dHRvbiAuc3BlY3RydW0tSWNvbntjb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24taWNvbi1jb2xvci1kaXNhYmxlZCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS00MDApKX06aG9zdChbZGlzYWJsZWRdKSAjYnV0dG9uICNob2xkLWFmZm9yZGFuY2V7Y29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLWhvbGQtaWNvbi1jb2xvci1kaXNhYmxlZCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS00MDApKX06aG9zdChbc2VsZWN0ZWRdKSAjYnV0dG9ue2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMjAwKSk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1ib3JkZXItY29sb3Itc2VsZWN0ZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMzAwKSk7Y29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLXRleHQtY29sb3Itc2VsZWN0ZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktODAwKSl9Omhvc3QoW3NlbGVjdGVkXSkgI2J1dHRvbiAuc3BlY3RydW0tSWNvbntjb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24taWNvbi1jb2xvci1zZWxlY3RlZCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS03MDApKX06aG9zdChbc2VsZWN0ZWRdKSAjYnV0dG9uOmZvY3Vze2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTIwMCkpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1cyx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItYmx1ZS00MDApKTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tdGV4dC1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXMsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktOTAwKSl9Omhvc3QoW3NlbGVjdGVkXSkgI2J1dHRvbjpmb2N1cyAuc3BlY3RydW0tSWNvbntjb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24taWNvbi1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXMsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktOTAwKSl9Omhvc3QoW3NlbGVjdGVkXSkgI2J1dHRvbjpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkLWhvdmVyLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTIwMCkpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWhvdmVyLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTQwMCkpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi10ZXh0LWNvbG9yLXNlbGVjdGVkLWhvdmVyLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTkwMCkpfTpob3N0KFtzZWxlY3RlZF0pICNidXR0b246aG92ZXIgLnNwZWN0cnVtLUljb257Y29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLWljb24tY29sb3Itc2VsZWN0ZWQtaG92ZXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktOTAwKSl9Omhvc3QoW3NlbGVjdGVkXSkgI2J1dHRvbjphY3RpdmV7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tYmFja2dyb3VuZC1jb2xvci1zZWxlY3RlZC1kb3duLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTIwMCkpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWRvd24sdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNDAwKSk7Y29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLXRleHQtY29sb3Itc2VsZWN0ZWQtZG93bix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS05MDApKX06aG9zdChbc2VsZWN0ZWRdKSAjYnV0dG9uOmFjdGl2ZSAuc3BlY3RydW0tSWNvbntjb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24taWNvbi1jb2xvci1zZWxlY3RlZC1kb3duLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTkwMCkpfTpob3N0KFtzZWxlY3RlZF1bZGlzYWJsZWRdKSAjYnV0dG9ue2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMjAwKSk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1ib3JkZXItY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMjAwKSk7Y29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLXRleHQtY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNTAwKSl9Omhvc3QoW3NlbGVjdGVkXVtkaXNhYmxlZF0pICNidXR0b24gLnNwZWN0cnVtLUljb257Y29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLWljb24tY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNDAwKSl9Omhvc3QoW3F1aWV0XSkgI2J1dHRvbjpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1xdWlldC1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyLHRyYW5zcGFyZW50KTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLXF1aWV0LWJvcmRlci1jb2xvci1ob3Zlcix0cmFuc3BhcmVudCk7Y29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLXF1aWV0LXRleHQtY29sb3ItaG92ZXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktOTAwKSk7Ym94LXNoYWRvdzpub25lfTpob3N0KFtxdWlldF0pICNidXR0b246Zm9jdXN7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tcXVpZXQtYmFja2dyb3VuZC1jb2xvci1rZXktZm9jdXMsdHJhbnNwYXJlbnQpO2JveC1zaGFkb3c6MCAwIDAgdmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLXF1aWV0LWJvcmRlci1zaXplLWtleS1mb2N1cywycHgpIHZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1xdWlldC1ib3JkZXItY29sb3Ita2V5LWZvY3VzLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ibHVlLTQwMCkpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tcXVpZXQtYm9yZGVyLWNvbG9yLWtleS1mb2N1cyx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItYmx1ZS00MDApKTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tcXVpZXQtdGV4dC1jb2xvci1rZXktZm9jdXMsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktOTAwKSl9Omhvc3QoW3F1aWV0XSkgI2J1dHRvbjphY3RpdmV7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tcXVpZXQtYmFja2dyb3VuZC1jb2xvci1kb3duLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTMwMCkpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tcXVpZXQtYm9yZGVyLWNvbG9yLWRvd24sdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMzAwKSk7Y29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLXF1aWV0LXRleHQtY29sb3ItZG93bix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS05MDApKTtib3gtc2hhZG93Om5vbmV9Omhvc3QoW3F1aWV0XVtkaXNhYmxlZF0pICNidXR0b257YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tcXVpZXQtYmFja2dyb3VuZC1jb2xvci1kaXNhYmxlZCx0cmFuc3BhcmVudCk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1xdWlldC1ib3JkZXItY29sb3ItZGlzYWJsZWQsdHJhbnNwYXJlbnQpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1xdWlldC10ZXh0LWNvbG9yLWRpc2FibGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTUwMCkpfTpob3N0KFtxdWlldF1bc2VsZWN0ZWRdKSAjYnV0dG9ue2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLXF1aWV0LWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMzAwKSk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1xdWlldC1ib3JkZXItY29sb3Itc2VsZWN0ZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMzAwKSk7Y29sb3I6dmFyKC0tc3BlY3RydW0tYWN0aW9uYnV0dG9uLXF1aWV0LXRleHQtY29sb3Itc2VsZWN0ZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktODAwKSl9Omhvc3QoW3F1aWV0XVtzZWxlY3RlZF0pICNidXR0b246Zm9jdXN7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tcXVpZXQtYmFja2dyb3VuZC1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXMsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMzAwKSk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1xdWlldC1ib3JkZXItY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ibHVlLTQwMCkpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1xdWlldC10ZXh0LWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1cyx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS05MDApKX06aG9zdChbcXVpZXRdW3NlbGVjdGVkXSkgI2J1dHRvbjpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1xdWlldC1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkLWhvdmVyLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTMwMCkpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tcXVpZXQtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWhvdmVyLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTMwMCkpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1xdWlldC10ZXh0LWNvbG9yLXNlbGVjdGVkLWhvdmVyLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTkwMCkpfTpob3N0KFtxdWlldF1bc2VsZWN0ZWRdKSAjYnV0dG9uOmFjdGl2ZXtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1xdWlldC1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkLWRvd24sdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMzAwKSk7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1xdWlldC1ib3JkZXItY29sb3Itc2VsZWN0ZWQtZG93bix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS0zMDApKTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tcXVpZXQtdGV4dC1jb2xvci1zZWxlY3RlZC1kb3duLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTkwMCkpfTpob3N0KFtxdWlldF1bc2VsZWN0ZWRdW2Rpc2FibGVkXSkgI2J1dHRvbntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1xdWlldC1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTIwMCkpO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1hY3Rpb25idXR0b24tcXVpZXQtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTIwMCkpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWFjdGlvbmJ1dHRvbi1xdWlldC10ZXh0LWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTUwMCkpfTpob3N0e2Rpc3BsYXk6aW5saW5lLWZsZXg7ZmxleC1kaXJlY3Rpb246cm93fSNidXR0b257ZGlzcGxheTpmbGV4O2ZsZXg6MSAxIGF1dG87LXdlYmtpdC1hcHBlYXJhbmNlOm5vbmV9I2J1dHRvbjpmb2N1cyw6aG9zdCg6Zm9jdXMpe291dGxpbmU6bm9uZX06aG9zdChbZGlzYWJsZWRdKXtwb2ludGVyLWV2ZW50czpub25lfXNsb3RbbmFtZT1pY29uXTo6c2xvdHRlZChzdmcpe2ZpbGw6Y3VycmVudENvbG9yO3N0cm9rZTpjdXJyZW50Q29sb3I7d2lkdGg6dmFyKC0tc3BlY3RydW0tYWxpYXMtd29ya2Zsb3ctaWNvbi1zaXplLDE4cHgpO2hlaWdodDp2YXIoLS1zcGVjdHJ1bS1hbGlhcy13b3JrZmxvdy1pY29uLXNpemUsMThweCl9XG5gO1xuZXhwb3J0IGRlZmF1bHQgc3R5bGVzOyIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBDU1NSZXN1bHRBcnJheSwgcHJvcGVydHkgfSBmcm9tICdsaXQtZWxlbWVudCc7XG5pbXBvcnQgeyBCdXR0b25CYXNlIH0gZnJvbSAnLi9idXR0b24tYmFzZSc7XG5pbXBvcnQgYnV0dG9uU3R5bGVzIGZyb20gJy4vYWN0aW9uLWJ1dHRvbi5jc3MnO1xuXG5leHBvcnQgY2xhc3MgQWN0aW9uQnV0dG9uIGV4dGVuZHMgQnV0dG9uQmFzZSB7XG4gICAgQHByb3BlcnR5KHsgdHlwZTogQm9vbGVhbiwgcmVmbGVjdDogdHJ1ZSB9KVxuICAgIHB1YmxpYyBxdWlldDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgQHByb3BlcnR5KHsgdHlwZTogQm9vbGVhbiwgcmVmbGVjdDogdHJ1ZSB9KVxuICAgIHB1YmxpYyBzZWxlY3RlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgQHByb3BlcnR5KHsgdHlwZTogQm9vbGVhbiwgcmVmbGVjdDogdHJ1ZSwgYXR0cmlidXRlOiAnaG9sZC1hZmZvcmRhbmNlJyB9KVxuICAgIHB1YmxpYyBob2xkQWZmb3JkYW5jZTogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgc3R5bGVzKCk6IENTU1Jlc3VsdEFycmF5IHtcbiAgICAgICAgcmV0dXJuIFtidXR0b25TdHlsZXNdO1xuICAgIH1cbn1cbiIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuZXhwb3J0ICogZnJvbSAnLi9idXR0b24nO1xuZXhwb3J0ICogZnJvbSAnLi9hY3Rpb24tYnV0dG9uJztcblxuaW1wb3J0IHsgQnV0dG9uIH0gZnJvbSAnLi9idXR0b24nO1xuaW1wb3J0IHsgQWN0aW9uQnV0dG9uIH0gZnJvbSAnLi9hY3Rpb24tYnV0dG9uJztcblxuaWYgKCFjdXN0b21FbGVtZW50cy5nZXQoJ3NwLWFjdGlvbi1idXR0b24nKSkge1xuICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZSgnc3AtYWN0aW9uLWJ1dHRvbicsIEFjdGlvbkJ1dHRvbik7XG59XG5cbmlmICghY3VzdG9tRWxlbWVudHMuZ2V0KCdzcC1idXR0b24nKSkge1xuICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZSgnc3AtYnV0dG9uJywgQnV0dG9uKTtcbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBIVE1MRWxlbWVudFRhZ05hbWVNYXAge1xuICAgICAgICAnc3AtYnV0dG9uJzogQnV0dG9uO1xuICAgICAgICAnc3AtYWN0aW9uLWJ1dHRvbic6IEFjdGlvbkJ1dHRvbjtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdsaXQtZWxlbWVudCc7XG5jb25zdCBzdHlsZXMgPSBjc3NgXG46aG9zdHtwb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmlubGluZS1mbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtib3gtc2l6aW5nOmJvcmRlci1ib3g7bWluLXdpZHRoOnZhcigtLXNwZWN0cnVtLWNhcmQtbWluLXdpZHRoKTtib3JkZXI6dmFyKC0tc3BlY3RydW0tY2FyZC1ib3JkZXItc2l6ZSkgc29saWQgdHJhbnNwYXJlbnQ7Ym9yZGVyLXJhZGl1czp2YXIoLS1zcGVjdHJ1bS1jYXJkLWJvcmRlci1yYWRpdXMpO2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tY2FyZC1iYWNrZ3JvdW5kLWNvbG9yKX06aG9zdCg6Zm9jdXMpe291dGxpbmU6bm9uZX06aG9zdCg6aG92ZXIpe2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1jYXJkLWJvcmRlci1jb2xvci1ob3Zlcil9Omhvc3QoOmZvY3VzKSAuYWN0aW9ucyw6aG9zdCg6Zm9jdXMpIC5xdWljay1hY3Rpb25zLDpob3N0KDpob3ZlcikgLmFjdGlvbnMsOmhvc3QoOmhvdmVyKSAucXVpY2stYWN0aW9ucyw6aG9zdChbc2VsZWN0ZWRdKSAuYWN0aW9ucyw6aG9zdChbc2VsZWN0ZWRdKSAucXVpY2stYWN0aW9uc3t2aXNpYmlsaXR5OnZpc2libGU7b3BhY2l0eToxO3BvaW50ZXItZXZlbnRzOmFsbH06aG9zdCg6Zm9jdXMpLDpob3N0KFtkcm9wLXRhcmdldF0pLDpob3N0KFtzZWxlY3RlZF0pe2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1jYXJkLWJvcmRlci1jb2xvci1rZXktZm9jdXMpO2JveC1zaGFkb3c6MCAwIDAgMXB4IHZhcigtLXNwZWN0cnVtLWNhcmQtYm9yZGVyLWNvbG9yLWtleS1mb2N1cyl9Omhvc3QoW2Ryb3AtdGFyZ2V0XSl7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1hbGlhcy1oaWdobGlnaHQtc2VsZWN0ZWQpfSN0aXRsZXtmb250LXNpemU6dmFyKC0tc3BlY3RydW0tY2FyZC10aXRsZS10ZXh0LXNpemUpO3doaXRlLXNwYWNlOm5vd3JhcDtvdmVyZmxvdzpoaWRkZW47dGV4dC1vdmVyZmxvdzplbGxpcHNpcztwYWRkaW5nLXJpZ2h0OnZhcigtLXNwZWN0cnVtLWNhcmQtdGl0bGUtcGFkZGluZy1yaWdodCk7Y29sb3I6dmFyKC0tc3BlY3RydW0tY2FyZC1xdWlldC10aXRsZS10ZXh0LWNvbG9yKX0jc3VidGl0bGV7Zm9udC1zaXplOnZhcigtLXNwZWN0cnVtLWNhcmQtc3VidGl0bGUtdGV4dC1zaXplKTtsZXR0ZXItc3BhY2luZzp2YXIoLS1zcGVjdHJ1bS1jYXJkLXN1YnRpdGxlLWxldHRlci1zcGFjaW5nKTt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7cGFkZGluZy1yaWdodDp2YXIoLS1zcGVjdHJ1bS1jYXJkLXN1YnRpdGxlLXBhZGRpbmctcmlnaHQpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWNhcmQtcXVpZXQtc3VidGl0bGUtdGV4dC1jb2xvcil9I2hlYWRlcntkaXNwbGF5OmZsZXg7YWxpZ24taXRlbXM6YmFzZWxpbmU7aGVpZ2h0OnZhcigtLXNwZWN0cnVtLWNhcmQtYm9keS1oZWFkZXItaGVpZ2h0KX0jYm9keXtwYWRkaW5nOnZhcigtLXNwZWN0cnVtLWNhcmQtYm9keS1wYWRkaW5nLXRvcCkgdmFyKC0tc3BlY3RydW0tY2FyZC1ib2R5LXBhZGRpbmctcmlnaHQpIHZhcigtLXNwZWN0cnVtLWNhcmQtYm9keS1wYWRkaW5nLWJvdHRvbSkgdmFyKC0tc3BlY3RydW0tY2FyZC1ib2R5LXBhZGRpbmctbGVmdCl9I2JvZHk6bGFzdC1jaGlsZHtib3JkZXItcmFkaXVzOjAgMCB2YXIoLS1zcGVjdHJ1bS1jYXJkLWJvcmRlci1yYWRpdXMpIHZhcigtLXNwZWN0cnVtLWNhcmQtYm9yZGVyLXJhZGl1cyl9I2NvbnRlbnR7ZGlzcGxheTpmbGV4O2hlaWdodDp2YXIoLS1zcGVjdHJ1bS1jYXJkLWJvZHktY29udGVudC1oZWlnaHQpO21hcmdpbi10b3A6dmFyKC0tc3BlY3RydW0tY2FyZC1ib2R5LWNvbnRlbnQtbWFyZ2luLXRvcCl9I2FjdGlvbnN7cmlnaHQ6dmFyKC0tc3BlY3RydW0tY2FyZC1hY3Rpb25zLW1hcmdpbik7dG9wOnZhcigtLXNwZWN0cnVtLWNhcmQtYWN0aW9ucy1tYXJnaW4pfSNhY3Rpb25zLCNxdWljay1hY3Rpb25ze3Bvc2l0aW9uOmFic29sdXRlO2hlaWdodDp2YXIoLS1zcGVjdHJ1bS1xdWlja2FjdGlvbnMtaGVpZ2h0KTt2aXNpYmlsaXR5OmhpZGRlbn0jcXVpY2stYWN0aW9uc3tsZWZ0OnZhcigtLXNwZWN0cnVtLWNhcmQtY2hlY2tib3gtbWFyZ2luKTt0b3A6dmFyKC0tc3BlY3RydW0tY2FyZC1jaGVja2JveC1tYXJnaW4pO3dpZHRoOnZhcigtLXNwZWN0cnVtLXF1aWNrYWN0aW9ucy1oZWlnaHQpfSNxdWljay1hY3Rpb25zIC5zcGVjdHJ1bS1DaGVja2JveHttYXJnaW46MH0jYWN0aW9uLWJ1dHRvbntmbGV4OjE7YWxpZ24tc2VsZjpjZW50ZXI7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpmbGV4LWVuZH1cbmA7XG5leHBvcnQgZGVmYXVsdCBzdHlsZXM7IiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuY29uc3Qgc3R5bGVzID0gY3NzYFxuc2xvdFtuYW1lPWNvdmVyLXBob3RvXTo6c2xvdHRlZCgqKXtoZWlnaHQ6dmFyKC0tc3BlY3RydW0tY2FyZC1jb3ZlcnBob3RvLWhlaWdodCk7Ym94LXNpemluZzpib3JkZXItYm94O2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjtib3JkZXItYm90dG9tLWNvbG9yOnRyYW5zcGFyZW50O2JvcmRlci1yYWRpdXM6Y2FsYyh2YXIoLS1zcGVjdHJ1bS1jYXJkLWJvcmRlci1yYWRpdXMpIC0gMXB4KSBjYWxjKHZhcigtLXNwZWN0cnVtLWNhcmQtYm9yZGVyLXJhZGl1cykgLSAxcHgpIDAgMDtiYWNrZ3JvdW5kLXNpemU6Y292ZXI7YmFja2dyb3VuZC1wb3NpdGlvbjo1MCU7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1jYXJkLWNvdmVycGhvdG8tYmFja2dyb3VuZC1jb2xvcik7Ym9yZGVyLWJvdHRvbTp2YXIoLS1zcGVjdHJ1bS1jYXJkLWNvdmVycGhvdG8tYm9yZGVyLWJvdHRvbS1zaXplKSBzb2xpZCB2YXIoLS1zcGVjdHJ1bS1jYXJkLWNvdmVycGhvdG8tYm9yZGVyLWNvbG9yKX0jZm9vdGVye3BhZGRpbmctdG9wOnZhcigtLXNwZWN0cnVtLWNhcmQtZm9vdGVyLXBhZGRpbmctdG9wKTttYXJnaW4tcmlnaHQ6dmFyKC0tc3BlY3RydW0tY2FyZC1ib2R5LXBhZGRpbmctcmlnaHQpO3BhZGRpbmctYm90dG9tOnZhcigtLXNwZWN0cnVtLWNhcmQtYm9keS1wYWRkaW5nLWJvdHRvbSk7bWFyZ2luLWxlZnQ6dmFyKC0tc3BlY3RydW0tY2FyZC1ib2R5LXBhZGRpbmctbGVmdCk7Ym9yZGVyLXRvcDp2YXIoLS1zcGVjdHJ1bS1jYXJkLWZvb3Rlci1ib3JkZXItdG9wLXNpemUpIHNvbGlkO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1jYXJkLWJvcmRlci1jb2xvcil9XG5gO1xuZXhwb3J0IGRlZmF1bHQgc3R5bGVzOyIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQge1xuICAgIGh0bWwsXG4gICAgTGl0RWxlbWVudCxcbiAgICBwcm9wZXJ0eSxcbiAgICBDU1NSZXN1bHRBcnJheSxcbiAgICBUZW1wbGF0ZVJlc3VsdCxcbn0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuXG5pbXBvcnQgY2FyZEJhc2VTdHlsZXMgZnJvbSAnLi9jYXJkLWJhc2UuY3NzJztcbmltcG9ydCBjYXJkU3R5bGVzIGZyb20gJy4vY2FyZC5jc3MnO1xuXG5leHBvcnQgY2xhc3MgQ2FyZCBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgaXMgPSAnc3AtY2FyZCc7XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldCBzdHlsZXMoKTogQ1NTUmVzdWx0QXJyYXkge1xuICAgICAgICByZXR1cm4gW2NhcmRCYXNlU3R5bGVzLCBjYXJkU3R5bGVzXTtcbiAgICB9XG5cbiAgICBAcHJvcGVydHkoKVxuICAgIHB1YmxpYyB0aXRsZSA9ICcnO1xuXG4gICAgQHByb3BlcnR5KClcbiAgICBwdWJsaWMgc3VidGl0bGUgPSAnJztcblxuICAgIHByb3RlY3RlZCByZW5kZXIoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgICAgIDxzbG90IG5hbWU9XCJjb3Zlci1waG90b1wiPjwvc2xvdD5cbiAgICAgICAgICAgIDxkaXYgaWQ9XCJib2R5XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cImhlYWRlclwiPjxkaXYgaWQ9XCJ0aXRsZVwiPiR7dGhpcy50aXRsZX08L2Rpdj48L2Rpdj5cbiAgICAgICAgICAgICAgICA8ZGl2IGlkPVwiY29udGVudFwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwic3VidGl0bGVcIj4ke3RoaXMuc3VidGl0bGV9PC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgaWQ9XCJmb290ZXJcIj48c2xvdCBuYW1lPVwiZm9vdGVyXCI+PC9zbG90PjwvZGl2PlxuICAgICAgICBgO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmNvbnN0IHN0eWxlcyA9IGNzc2Bcbjpob3N0e3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCU7bWluLXdpZHRoOnZhcigtLXNwZWN0cnVtLWNhcmQtcXVpZXQtbWluLXNpemUpO2JvcmRlci13aWR0aDowO2JvcmRlci1yYWRpdXM6MDtvdmVyZmxvdzp2aXNpYmxlO2JhY2tncm91bmQtY29sb3I6aW5pdGlhbH06aG9zdCw6aG9zdCg6aG92ZXIpe2JvcmRlci1jb2xvcjp0cmFuc3BhcmVudH06aG9zdCg6Zm9jdXMpLDpob3N0KFtkcm9wLXRhcmdldF0pLDpob3N0KFtzZWxlY3RlZF0pe2JvcmRlci1jb2xvcjp0cmFuc3BhcmVudDtib3gtc2hhZG93Om5vbmV9Omhvc3QoW2Ryb3AtdGFyZ2V0XSl7YmFja2dyb3VuZC1jb2xvcjppbml0aWFsfSNzdWJ0aXRsZXtsZXR0ZXItc3BhY2luZzp2YXIoLS1zcGVjdHJ1bS1jYXJkLXN1YnRpdGxlLWxldHRlci1zcGFjaW5nKTt0ZXh0LXRyYW5zZm9ybTp1cHBlcmNhc2U7cGFkZGluZy1yaWdodDp2YXIoLS1zcGVjdHJ1bS1jYXJkLXN1YnRpdGxlLXBhZGRpbmctcmlnaHQpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWNhcmQtcXVpZXQtc3VidGl0bGUtdGV4dC1jb2xvcil9I3N1YnRpdGxlLHNsb3RbbmFtZT1kZXNjcmlwdGlvbl06OnNsb3R0ZWQoKil7Zm9udC1zaXplOnZhcigtLXNwZWN0cnVtLWNhcmQtc3VidGl0bGUtdGV4dC1zaXplKX1zbG90W25hbWU9ZGVzY3JpcHRpb25dOjpzbG90dGVkKCope2NvbG9yOnZhcigtLXNwZWN0cnVtLWNhcmQtZGVzY3JpcHRpb24tdGV4dC1jb2xvcil9I3N1YnRpdGxlK3Nsb3RbbmFtZT1kZXNjcmlwdGlvbl06YmVmb3Jle2NvbnRlbnQ6XCLigKJcIjtwYWRkaW5nLXJpZ2h0OnZhcigtLXNwZWN0cnVtLWNhcmQtc3VidGl0bGUtcGFkZGluZy1yaWdodCl9c2xvdFtuYW1lPXByZXZpZXddOjpzbG90dGVkKCope3dpZHRoOjEwMCU7ZmxleDoxO21pbi1oZWlnaHQ6dmFyKC0tc3BlY3RydW0tY2FyZC1xdWlldC1taW4tc2l6ZSk7cGFkZGluZzp2YXIoLS1zcGVjdHJ1bS1jYXJkLXF1aWV0LXByZXZpZXctcGFkZGluZyk7bWFyZ2luOjAgYXV0bztib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyLXJhZGl1czp2YXIoLS1zcGVjdHJ1bS1jYXJkLXF1aWV0LWJvcmRlci1yYWRpdXMpO3Bvc2l0aW9uOnJlbGF0aXZlO3RyYW5zaXRpb246YmFja2dyb3VuZC1jb2xvciB2YXIoLS1zcGVjdHJ1bS10cmFuc2l0aW9uLXRpbWUpO2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tY2FyZC1xdWlldC1wcmV2aWV3LWJhY2tncm91bmQtY29sb3IpO292ZXJmbG93OmhpZGRlbn1zbG90W25hbWU9cHJldmlld106OnNsb3R0ZWQoKik6YmVmb3Jle2NvbnRlbnQ6XCJcIjtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6MDtsZWZ0OjA7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTtib3gtc2l6aW5nOmJvcmRlci1ib3g7Ym9yZGVyLXJhZGl1czppbmhlcml0O2JvcmRlcjp2YXIoLS1zcGVjdHJ1bS1jYXJkLXF1aWV0LWJvcmRlci1zaXplKSBzb2xpZCB0cmFuc3BhcmVudH0jaGVhZGVye2hlaWdodDp2YXIoLS1zcGVjdHJ1bS1jYXJkLXF1aWV0LWJvZHktaGVhZGVyLWhlaWdodCk7bWFyZ2luLXRvcDp2YXIoLS1zcGVjdHJ1bS1jYXJkLXF1aWV0LWJvZHktaGVhZGVyLW1hcmdpbi10b3ApfSNib2R5e3BhZGRpbmc6MH06aG9zdCg6aG92ZXIpIHNsb3RbbmFtZT1wcmV2aWV3XTo6c2xvdHRlZCgqKXtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWNhcmQtcXVpZXQtcHJldmlldy1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyKX06aG9zdCg6Zm9jdXMpIHNsb3RbbmFtZT1wcmV2aWV3XTo6c2xvdHRlZCgqKSw6aG9zdChbc2VsZWN0ZWRdKSBzbG90W25hbWU9cHJldmlld106OnNsb3R0ZWQoKil7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1jYXJkLXF1aWV0LXByZXZpZXctYmFja2dyb3VuZC1jb2xvcil9Omhvc3QoW2Ryb3AtdGFyZ2V0XSkgc2xvdFtuYW1lPXByZXZpZXddOjpzbG90dGVkKCope3RyYW5zaXRpb246bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLWFsaWFzLWhpZ2hsaWdodC1zZWxlY3RlZCl9Omhvc3QoW2Ryb3AtdGFyZ2V0XSkgc2xvdFtuYW1lPXByZXZpZXddOjpzbG90dGVkKCopOmJlZm9yZXtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tY2FyZC1xdWlldC1ib3JkZXItY29sb3Itc2VsZWN0ZWQpO2JveC1zaGFkb3c6MCAwIDAgMXB4IHZhcigtLXNwZWN0cnVtLWNhcmQtcXVpZXQtYm9yZGVyLWNvbG9yLXNlbGVjdGVkKX06aG9zdChbZHJvcC10YXJnZXRdKSAjZmlsZS1iYWNrZ3JvdW5kLDpob3N0KFtkcm9wLXRhcmdldF0pICNmb2xkZXItYmFja2dyb3VuZHtmaWxsOnZhcigtLXNwZWN0cnVtLWFsaWFzLWhpZ2hsaWdodC1zZWxlY3RlZCl9Omhvc3QoW2Ryb3AtdGFyZ2V0XSkgI2ZpbGUtb3V0bGluZSw6aG9zdChbZHJvcC10YXJnZXRdKSAjZm9sZGVyLW91dGxpbmV7ZmlsbDp2YXIoLS1zcGVjdHJ1bS1jYXJkLXF1aWV0LWJvcmRlci1jb2xvci1zZWxlY3RlZCl9XG5gO1xuZXhwb3J0IGRlZmF1bHQgc3R5bGVzOyIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQge1xuICAgIGh0bWwsXG4gICAgTGl0RWxlbWVudCxcbiAgICBwcm9wZXJ0eSxcbiAgICBDU1NSZXN1bHRBcnJheSxcbiAgICBUZW1wbGF0ZVJlc3VsdCxcbn0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuXG5pbXBvcnQgY2FyZEJhc2VTdHlsZXMgZnJvbSAnLi9jYXJkLWJhc2UuY3NzJztcbmltcG9ydCBjYXJkUXVpZXRTdHlsZXMgZnJvbSAnLi9jYXJkLXF1aWV0LmNzcyc7XG5cbmV4cG9ydCBjbGFzcyBDYXJkUXVpZXQgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgICBwdWJsaWMgc3RhdGljIGlzID0gJ3NwLWNhcmQtcXVpZXQnO1xuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgc3R5bGVzKCk6IENTU1Jlc3VsdEFycmF5IHtcbiAgICAgICAgcmV0dXJuIFtjYXJkQmFzZVN0eWxlcywgY2FyZFF1aWV0U3R5bGVzXTtcbiAgICB9XG5cbiAgICBAcHJvcGVydHkoeyB0eXBlOiBTdHJpbmcgfSlcbiAgICBwdWJsaWMgdGl0bGUgPSAnJztcblxuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IFN0cmluZyB9KVxuICAgIHB1YmxpYyBzdWJ0aXRsZSA9ICcnO1xuXG4gICAgcHJvdGVjdGVkIHJlbmRlcigpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgPHNsb3QgbmFtZT1cInByZXZpZXdcIj48L3Nsb3Q+XG4gICAgICAgICAgICA8ZGl2IGlkPVwiYm9keVwiPlxuICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJoZWFkZXJcIj48ZGl2IGlkPVwidGl0bGVcIj4ke3RoaXMudGl0bGV9PC9kaXY+PC9kaXY+XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cImNvbnRlbnRcIj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBpZD1cInN1YnRpdGxlXCI+JHt0aGlzLnN1YnRpdGxlfTwvZGl2PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuY29uc3Qgc3R5bGVzID0gY3NzYFxuOmhvc3R7bWluLXdpZHRoOjB9c2xvdFtuYW1lPXByZXZpZXddOjpzbG90dGVkKCope3BhZGRpbmc6MDtib3JkZXItcmFkaXVzOjB9XG5gO1xuZXhwb3J0IGRlZmF1bHQgc3R5bGVzOyIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQge1xuICAgIGh0bWwsXG4gICAgTGl0RWxlbWVudCxcbiAgICBwcm9wZXJ0eSxcbiAgICBDU1NSZXN1bHRBcnJheSxcbiAgICBUZW1wbGF0ZVJlc3VsdCxcbn0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuXG5pbXBvcnQgY2FyZEJhc2VTdHlsZXMgZnJvbSAnLi9jYXJkLWJhc2UuY3NzJztcbmltcG9ydCBjYXJkR2FsbGVyeVN0eWxlcyBmcm9tICcuL2NhcmQtZ2FsbGVyeS5jc3MnO1xuaW1wb3J0IGNhcmRRdWlldFN0eWxlcyBmcm9tICcuL2NhcmQtcXVpZXQuY3NzJztcblxuZXhwb3J0IGNsYXNzIENhcmRHYWxsZXJ5IGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gICAgcHVibGljIHN0YXRpYyBpcyA9ICdzcC1jYXJkLWdhbGxlcnknO1xuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgc3R5bGVzKCk6IENTU1Jlc3VsdEFycmF5IHtcbiAgICAgICAgcmV0dXJuIFtjYXJkQmFzZVN0eWxlcywgY2FyZFF1aWV0U3R5bGVzLCBjYXJkR2FsbGVyeVN0eWxlc107XG4gICAgfVxuXG4gICAgQHByb3BlcnR5KClcbiAgICBwdWJsaWMgdGl0bGUgPSAnJztcblxuICAgIEBwcm9wZXJ0eSgpXG4gICAgcHVibGljIHN1YnRpdGxlID0gJyc7XG5cbiAgICBwcm90ZWN0ZWQgcmVuZGVyKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICA8c2xvdCBuYW1lPVwiY292ZXItcGhvdG9cIj48L3Nsb3Q+XG4gICAgICAgICAgICA8c2xvdCBuYW1lPVwicHJldmlld1wiPjwvc2xvdD5cbiAgICAgICAgICAgIDxkaXYgaWQ9XCJib2R5XCI+XG4gICAgICAgICAgICAgICAgPGRpdiBpZD1cImhlYWRlclwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGlkPVwidGl0bGVcIj4ke3RoaXMudGl0bGV9PC9kaXY+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgaWQ9XCJzdWJ0aXRsZVwiPiR7dGhpcy5zdWJ0aXRsZX08L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cImRlc2NyaXB0aW9uXCI+PC9zbG90PlxuICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgfVxufVxuIiwiLypcbkNvcHlyaWdodCAyMDE4IEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbm9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG50aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbk9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5leHBvcnQgKiBmcm9tICcuL2NhcmQnO1xuZXhwb3J0ICogZnJvbSAnLi9jYXJkLXF1aWV0JztcbmV4cG9ydCAqIGZyb20gJy4vY2FyZC1nYWxsZXJ5JztcbiIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBwcm9wZXJ0eSwgaHRtbCwgVGVtcGxhdGVSZXN1bHQsIHF1ZXJ5IH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuaW1wb3J0IHsgRm9jdXNhYmxlIH0gZnJvbSAnLi4vc2hhcmVkL2ZvY3VzYWJsZSc7XG5cbmV4cG9ydCBjbGFzcyBDaGVja2JveEJhc2UgZXh0ZW5kcyBGb2N1c2FibGUge1xuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IEJvb2xlYW4sIHJlZmxlY3Q6IHRydWUgfSlcbiAgICBwdWJsaWMgY2hlY2tlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgQHByb3BlcnR5KHsgdHlwZTogQm9vbGVhbiwgcmVmbGVjdDogdHJ1ZSB9KVxuICAgIHB1YmxpYyBxdWlldDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgQHF1ZXJ5KCcjaW5wdXQnKVxuICAgIHByaXZhdGUgaW5wdXRFbGVtZW50ITogSFRNTElucHV0RWxlbWVudDtcblxuICAgIHB1YmxpYyBnZXQgZm9jdXNFbGVtZW50KCk6IEhUTUxFbGVtZW50IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXRFbGVtZW50O1xuICAgIH1cblxuICAgIHB1YmxpYyBoYW5kbGVDaGFuZ2UoZXZlbnQ6IEV2ZW50KTogdm9pZCB7XG4gICAgICAgIHRoaXMuY2hlY2tlZCA9IHRoaXMuaW5wdXRFbGVtZW50LmNoZWNrZWQ7XG5cbiAgICAgICAgLy8gQ2hhbmdlIGV2ZW50cyBmcm9tIHRoZSBzaGFkb3cgRE9NIGFyZSBub3QgdHJhbnNtaXR0ZWQgaW50b1xuICAgICAgICAvLyB0aGUgcGFyZW50IGxpZ2h0IERPTVxuICAgICAgICBjb25zdCBjaGFuZ2VFdmVudCA9IG5ldyBDdXN0b21FdmVudCgnY2hhbmdlJywge1xuICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgc291cmNlRXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGJ1YmJsZXM6IGV2ZW50LmJ1YmJsZXMsXG4gICAgICAgICAgICBjYW5jZWxhYmxlOiBldmVudC5jYW5jZWxhYmxlLFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGNoYW5nZUV2ZW50KTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcmVuZGVyKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgICAgICBpZD1cImlucHV0XCJcbiAgICAgICAgICAgICAgICB0eXBlPVwiY2hlY2tib3hcIlxuICAgICAgICAgICAgICAgIC5jaGVja2VkPSR7dGhpcy5jaGVja2VkfVxuICAgICAgICAgICAgICAgIEBjaGFuZ2U9JHt0aGlzLmhhbmRsZUNoYW5nZX1cbiAgICAgICAgICAgIC8+XG4gICAgICAgIGA7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuY29uc3Qgc3R5bGVzID0gY3NzYFxuI3Jvb3R7ZGlzcGxheTppbmxpbmUtZmxleDthbGlnbi1pdGVtczpmbGV4LXN0YXJ0O3Bvc2l0aW9uOnJlbGF0aXZlO21pbi1oZWlnaHQ6dmFyKC0tc3BlY3RydW0tY2hlY2tib3gtaGVpZ2h0LHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS00MDApKTttYXgtd2lkdGg6MTAwJTttYXJnaW4tcmlnaHQ6Y2FsYyh2YXIoLS1zcGVjdHJ1bS1jaGVja2JveC1jdXJzb3ItaGl0LXgsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTAwKSkqMik7dmVydGljYWwtYWxpZ246dG9wO2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1jaGVja2JveC1ib3gtYm9yZGVyLWNvbG9yLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTYwMCkpfSNpbnB1dHtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtc2l6ZToxMDAlO2xpbmUtaGVpZ2h0OjEuMTU7bWFyZ2luOjA7b3ZlcmZsb3c6dmlzaWJsZTtib3gtc2l6aW5nOmJvcmRlci1ib3g7cGFkZGluZzowO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6Y2FsYyh2YXIoLS1zcGVjdHJ1bS1jaGVja2JveC1jdXJzb3ItaGl0LXgsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTAwKSkqLTEpO3dpZHRoOmNhbGMoMTAwJSArIHZhcigtLXNwZWN0cnVtLWNoZWNrYm94LWN1cnNvci1oaXQteCxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0xMDApKSoyKTtoZWlnaHQ6MTAwJTtvcGFjaXR5Oi4wMDAxO3otaW5kZXg6MTtjdXJzb3I6cG9pbnRlcn06aG9zdChbZGlzYWJsZWRdKSAjaW5wdXR7Y3Vyc29yOmRlZmF1bHR9I2lucHV0OmNoZWNrZWQrI2JveHtib3JkZXItd2lkdGg6Y2FsYyh2YXIoLS1zcGVjdHJ1bS1jaGVja2JveC1ib3gtc2l6ZSxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0xNzUpKS8yKX0jaW5wdXQ6Y2hlY2tlZCsjYm94ICNjaGVja21hcmt7dHJhbnNmb3JtOnNjYWxlKDEpO29wYWNpdHk6MX06aG9zdChbaW5kZXRlcm1pbmF0ZV0pICNyb290ICNib3gsOmhvc3QoW2luZGV0ZXJtaW5hdGVdKSAjcm9vdCAjaW5wdXQ6Y2hlY2tlZCsjYm94e2JvcmRlci13aWR0aDpjYWxjKHZhcigtLXNwZWN0cnVtLWNoZWNrYm94LWJveC1zaXplLFxudmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTE3NSkpLzIpfTpob3N0KFtpbmRldGVybWluYXRlXSkgI3Jvb3QgI2JveCAjY2hlY2ttYXJrLDpob3N0KFtpbmRldGVybWluYXRlXSkgI3Jvb3QgI2lucHV0OmNoZWNrZWQrI2JveCAjY2hlY2ttYXJre2Rpc3BsYXk6bm9uZX06aG9zdChbaW5kZXRlcm1pbmF0ZV0pICNyb290ICNib3ggI3BhcnRpYWxDaGVja21hcmssOmhvc3QoW2luZGV0ZXJtaW5hdGVdKSAjcm9vdCAjaW5wdXQ6Y2hlY2tlZCsjYm94ICNwYXJ0aWFsQ2hlY2ttYXJre2Rpc3BsYXk6YmxvY2s7dHJhbnNmb3JtOnNjYWxlKDEpO29wYWNpdHk6MX0jbGFiZWx7bWFyZ2luLWxlZnQ6dmFyKC0tc3BlY3RydW0tY2hlY2tib3gtdGV4dC1nYXAsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTEyNSkpO2ZvbnQtc2l6ZTp2YXIoLS1zcGVjdHJ1bS1jaGVja2JveC10ZXh0LXNpemUsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1mb250LXNpemUtMTAwKSk7Zm9udC13ZWlnaHQ6dmFyKC0tc3BlY3RydW0tY2hlY2tib3gtdGV4dC1mb250LXdlaWdodCw0MDApO3RyYW5zaXRpb246Y29sb3IgdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWFuaW1hdGlvbi1kdXJhdGlvbi0xMDAsLjEzcykgZWFzZS1pbi1vdXQ7bWFyZ2luLXRvcDp2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNzUpO2NvbG9yOnZhcigtLXNwZWN0cnVtLWNoZWNrYm94LXRleHQtY29sb3IsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktODAwKSl9I2JveHtwb3NpdGlvbjpyZWxhdGl2ZTtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lkdGg6dmFyKC0tc3BlY3RydW0tY2hlY2tib3gtYm94LXNpemUsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTE3NSkpO2hlaWdodDp2YXIoLS1zcGVjdHJ1bS1jaGVja2JveC1ib3gtc2l6ZSx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTc1KSk7bWFyZ2luOmNhbGMoKHZhcigtLXNwZWN0cnVtLWNoZWNrYm94LWhlaWdodCxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS00MDApKSAtIHZhcigtLXNwZWN0cnVtLWNoZWNrYm94LWJveC1zaXplLFxudmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTE3NSkpKS8yKSAwO2ZsZXgtZ3JvdzowO2ZsZXgtc2hyaW5rOjA7Ym9yZGVyLXJhZGl1czp2YXIoLS1zcGVjdHJ1bS1jaGVja2JveC1ib3gtYm9yZGVyLXJhZGl1cywycHgpO3RyYW5zaXRpb246Ym9yZGVyIHZhcigtLXNwZWN0cnVtLWdsb2JhbC1hbmltYXRpb24tZHVyYXRpb24tMTAwLC4xM3MpIGVhc2UtaW4tb3V0LGJveC1zaGFkb3cgdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWFuaW1hdGlvbi1kdXJhdGlvbi0xMDAsLjEzcykgZWFzZS1pbi1vdXQ7Ym9yZGVyOnZhcigtLXNwZWN0cnVtLWNoZWNrYm94LWJveC1ib3JkZXItc2l6ZSwycHgpIHNvbGlkIHZhcigtLXNwZWN0cnVtLWNoZWNrYm94LWJveC1ib3JkZXItY29sb3IsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNjAwKSk7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1jaGVja2JveC1ib3gtYmFja2dyb3VuZC1jb2xvcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS03NSkpfSNjaGVja21hcmssI3BhcnRpYWxDaGVja21hcmt7cG9zaXRpb246YWJzb2x1dGU7dG9wOjUwJTtsZWZ0OjUwJTttYXJnaW4tdG9wOmNhbGModmFyKC0tc3BlY3RydW0taWNvbi1jaGVja21hcmstc21hbGwtaGVpZ2h0LFxudmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1mb250LXNpemUtMjUpKS8tMik7bWFyZ2luLWxlZnQ6Y2FsYyh2YXIoLS1zcGVjdHJ1bS1pY29uLWNoZWNrbWFyay1zbWFsbC13aWR0aCxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tZm9udC1zaXplLTI1KSkvLTIpO29wYWNpdHk6MDt0cmFuc2Zvcm06c2NhbGUoMCk7dHJhbnNpdGlvbjpvcGFjaXR5IHZhcigtLXNwZWN0cnVtLWdsb2JhbC1hbmltYXRpb24tZHVyYXRpb24tMTAwLC4xM3MpIGVhc2UtaW4tb3V0LHRyYW5zZm9ybSB2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtYW5pbWF0aW9uLWR1cmF0aW9uLTEwMCwuMTNzKSBlYXNlLWluLW91dH0jcGFydGlhbENoZWNrbWFya3tkaXNwbGF5Om5vbmV9I2NoZWNrbWFyaywjcGFydGlhbENoZWNrbWFya3tjb2xvcjp2YXIoLS1zcGVjdHJ1bS1jaGVja2JveC1jaGVja21hcmstY29sb3IsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNzUpKX0jaW5wdXQ6Y2hlY2tlZCsjYm94LDpob3N0KFtpbmRldGVybWluYXRlXSkgI3Jvb3QgI2JveHtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tY2hlY2tib3gtYm94LWJvcmRlci1jb2xvci1zZWxlY3RlZCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItYmx1ZS01MDApKX0jcm9vdDpob3ZlciAjaW5wdXQ6Y2hlY2tlZCsjYm94LDpob3N0KFtpbmRldGVybWluYXRlXSkgI3Jvb3Q6aG92ZXIgI2JveHtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tY2hlY2tib3gtYm94LWJvcmRlci1jb2xvci1zZWxlY3RlZC1ob3Zlcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItYmx1ZS02MDApKX0jcm9vdDphY3RpdmUgI2lucHV0OmNoZWNrZWQrI2JveCw6aG9zdChbaW5kZXRlcm1pbmF0ZV0pICNyb290OmFjdGl2ZSAjYm94e2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1jaGVja2JveC1ib3gtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWRvd24sdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWJsdWUtNzAwKSl9I3Jvb3Q6aG92ZXIgI2JveHtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tY2hlY2tib3gtYm94LWJvcmRlci1jb2xvci1ob3Zlcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS03MDApKTtib3gtc2hhZG93Om5vbmV9I3Jvb3Q6aG92ZXIgI2xhYmVse2NvbG9yOnZhcigtLXNwZWN0cnVtLWNoZWNrYm94LXRleHQtY29sb3ItaG92ZXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktOTAwKSl9I3Jvb3Q6YWN0aXZlICNib3h7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWNoZWNrYm94LWJveC1ib3JkZXItY29sb3ItZG93bix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS04MDApKX0jcm9vdDphY3RpdmUgI2xhYmVse2NvbG9yOnZhcigtLXNwZWN0cnVtLWNoZWNrYm94LXRleHQtY29sb3ItZG93bix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS05MDApKX06aG9zdChbZGlzYWJsZWRdKSAjaW5wdXQrI2JveHtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tY2hlY2tib3gtYm94LWJvcmRlci1jb2xvci1kaXNhYmxlZCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS00MDApKSFpbXBvcnRhbnQ7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1jaGVja2JveC1ib3gtYmFja2dyb3VuZC1jb2xvci1kaXNhYmxlZCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS03NSkpfTpob3N0KFtkaXNhYmxlZF0pICNpbnB1dH4jbGFiZWx7Y29sb3I6dmFyKC0tc3BlY3RydW0tY2hlY2tib3gtdGV4dC1jb2xvci1kaXNhYmxlZCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS01MDApKX0jaW5wdXQ6Zm9jdXMrI2JveHtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tY2hlY2tib3gtYm94LWJvcmRlci1jb2xvci1rZXktZm9jdXMsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWJsdWUtNDAwKSkhaW1wb3J0YW50O2JveC1zaGFkb3c6MCAwIDAgMXB4IHZhcigtLXNwZWN0cnVtLWNoZWNrYm94LWJveC1ib3JkZXItY29sb3Ita2V5LWZvY3VzLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ibHVlLTQwMCkpIWltcG9ydGFudH0jaW5wdXQ6Zm9jdXN+I2xhYmVse2NvbG9yOnZhcigtLXNwZWN0cnVtLWNoZWNrYm94LXRleHQtY29sb3Ita2V5LWZvY3VzLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ibHVlLTYwMCkpIWltcG9ydGFudH06aG9zdChbcXVpZXRdKSAjaW5wdXQ6Y2hlY2tlZCsjYm94LDpob3N0KFtxdWlldF1baW5kZXRlcm1pbmF0ZV0pICNyb290ICNib3h7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWNoZWNrYm94LXF1aWV0LWJveC1ib3JkZXItY29sb3Itc2VsZWN0ZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNzAwKSl9Omhvc3QoW3F1aWV0XSkgI3Jvb3Q6aG92ZXIgI2lucHV0OmNoZWNrZWQrI2JveCw6aG9zdChbcXVpZXRdW2luZGV0ZXJtaW5hdGVdKSAjcm9vdDpob3ZlciAjYm94e2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1jaGVja2JveC1xdWlldC1ib3gtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWhvdmVyLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTgwMCkpfTpob3N0KFtxdWlldF0pICNyb290OmFjdGl2ZSAjaW5wdXQ6Y2hlY2tlZCsjYm94LDpob3N0KFtxdWlldF1baW5kZXRlcm1pbmF0ZV0pICNyb290OmFjdGl2ZSAjYm94e2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1jaGVja2JveC1xdWlldC1ib3gtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWRvd24sdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktOTAwKSl9Omhvc3QoW2ludmFsaWRdKSAjcm9vdCAjYm94LDpob3N0KFtpbnZhbGlkXSkgI3Jvb3QgI2lucHV0OmNoZWNrZWQrI2JveHtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tY2hlY2tib3gtYm94LWJvcmRlci1jb2xvci1lcnJvcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItcmVkLTUwMCkpfTpob3N0KFtpbnZhbGlkXSkgI3Jvb3QgI2xhYmVse2NvbG9yOnZhcigtLXNwZWN0cnVtLWNoZWNrYm94LXRleHQtY29sb3ItZXJyb3IsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXJlZC02MDApKX06aG9zdChbaW52YWxpZF0pICNyb290OmhvdmVyICNib3gsOmhvc3QoW2ludmFsaWRdKSAjcm9vdDpob3ZlciAjaW5wdXQ6Y2hlY2tlZCsjYm94e2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1jaGVja2JveC1ib3gtYm9yZGVyLWNvbG9yLWVycm9yLWhvdmVyLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1yZWQtNjAwKSl9Omhvc3QoW2ludmFsaWRdKSAjcm9vdDpob3ZlciAjbGFiZWx7Y29sb3I6dmFyKC0tc3BlY3RydW0tY2hlY2tib3gtdGV4dC1jb2xvci1lcnJvci1ob3Zlcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItcmVkLTcwMCkpfTpob3N0KFtpbnZhbGlkXSkgI3Jvb3Q6YWN0aXZlICNib3gsOmhvc3QoW2ludmFsaWRdKSAjcm9vdDphY3RpdmUgI2lucHV0OmNoZWNrZWQrI2JveHtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tY2hlY2tib3gtYm94LWJvcmRlci1jb2xvci1lcnJvci1kb3duLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1yZWQtNzAwKSl9Omhvc3QoW2ludmFsaWRdKSAjcm9vdDphY3RpdmUgI2xhYmVse2NvbG9yOnZhcigtLXNwZWN0cnVtLWNoZWNrYm94LXRleHQtY29sb3ItZXJyb3ItZG93bix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItcmVkLTcwMCkpfTpob3N0e2Rpc3BsYXk6aW5saW5lLWZsZXh9I2JveCBzcC1pY29uI2NoZWNrbWFyaywjYm94IHNwLWljb24jcGFydGlhbENoZWNrbWFya3ttYXJnaW4tdG9wOmNhbGModmFyKC0tc3BlY3RydW0taWNvbi1zaXplLCB2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLWZvbnQtc2l6ZS0yNSkpLy0yKTttYXJnaW4tbGVmdDpjYWxjKHZhcigtLXNwZWN0cnVtLWljb24tc2l6ZSwgdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1mb250LXNpemUtMjUpKS8tMil9I2xhYmVse292ZXJmbG93OnZpc2libGV9XG5gO1xuZXhwb3J0IGRlZmF1bHQgc3R5bGVzOyIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG4vKipcbiAqIE9taXQgdGhlIGdpdmVuIGtleXMgZnJvbSBhbiBvYmplY3QgdHlwZS5cbiAqL1xuLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1leHBsaWNpdC1hbnkgKi9cbmV4cG9ydCB0eXBlIE9taXQ8VCwgSyBleHRlbmRzIGtleW9mIFQ+ID0gVCBleHRlbmRzIGFueVxuICAgID8gUGljazxULCBFeGNsdWRlPGtleW9mIFQsIEs+PlxuICAgIDogbmV2ZXI7XG5cbi8qKlxuICogRXh0cmFjdHMgYSBDdXN0b21FdmVudCBwYXlsb2FkIHR5cGUgZnJvbSBhIEN1c3RvbUV2ZW50IHR5cGUuXG4gKi9cbnR5cGUgVW5wYWNrQ3VzdG9tRXZlbnRQYXlsb2FkPFQ+ID0gVCBleHRlbmRzIEN1c3RvbUV2ZW50PGluZmVyIFU+ID8gVSA6IG5ldmVyO1xuXG4vKipcbiAqIEV4dHJhY3RzIHRoZSBDdXN0b21FdmVudCBkZXRhaWwgdHlwZSBmcm9tIGEgQ3VzdG9tRXZlbnQgdHlwZSB1c2luZyB0aGUgbmFtZSBvZiB0aGUgZXZlbnQgYXMgdGhlIGtleVxuICogYW5kIHRoZSBEb2N1bWVudEV2ZW50TWFwLlxuICogRS5nLiBVbnBhY2tDdXN0b21FdmVudERldGFpbDwnbXktY29vbC1ldmVudCc+XG4gKi9cbmV4cG9ydCB0eXBlIFVucGFja0N1c3RvbUV2ZW50RGV0YWlsPFxuICAgIFQgZXh0ZW5kcyBrZXlvZiBEb2N1bWVudEV2ZW50TWFwXG4+ID0gVW5wYWNrQ3VzdG9tRXZlbnRQYXlsb2FkPERvY3VtZW50RXZlbnRNYXBbVF0+O1xuXG4vKipcbiAqIEEgc3Ryb25nbHkgdHlwZWQgQ3VzdG9tRXZlbnQgYmFzZWQgb24gdGhlIGV2ZW50IG5hbWUgdXNpbmcgdGhlIGdsb2JhbCBEb2N1bWVudEV2ZW50TWFwLlxuICogRS5nLiBTdHJpY3RDdXN0b21FdmVudDwnbXktY29vbC1ldmVudCc+XG4gKi9cbmV4cG9ydCB0eXBlIFN0cmljdEN1c3RvbUV2ZW50PFQgZXh0ZW5kcyBrZXlvZiBEb2N1bWVudEV2ZW50TWFwPiA9IEN1c3RvbUV2ZW50PFxuICAgIFVucGFja0N1c3RvbUV2ZW50UGF5bG9hZDxEb2N1bWVudEV2ZW50TWFwW1RdPlxuPjtcblxuLyoqXG4gKiBBIGhlbHBlciB0eXBlIHRvIGNyZWF0ZSBhIEN1c3RvbUV2ZW50SW5pdCB0eXBlIGZyb20gYSBldmVudCBkZXRhaWwgdHlwZS5cbiAqL1xudHlwZSBTdHJpY3RDdXN0b21FdmVudEluaXQ8VD4gPSBUIGV4dGVuZHMgdm9pZFxuICAgID8gQ3VzdG9tRXZlbnRJbml0PFQ+XG4gICAgOiBPbWl0PEN1c3RvbUV2ZW50SW5pdDxUPiwgJ2RldGFpbCc+ICYgeyBkZXRhaWw6IFQgfTtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RyaWN0bHkgdHlwZWQgQ3VzdG9tRXZlbnQ8VD4gdXNpbmcgdGhlIERvY3VtZW50RXZlbnRNYXAuXG4gKlxuICogVG8gbWFrZSB1c2Ugb2YgdGhpcyBoZWxwZXIgZW5zdXJlIHRoYXQgeW91ciBldmVudHMgYXJlIGFkZGVkIHRvIHRoZSBEb2N1bWVudEV2ZW50TWFwLiBUaGVcbiAqIGVhc2llc3Qgd2F5IHRvIGRvIHRoaXMgaXMgdG8gaW5jbHVkZSB0aGVtIGluIHRoZSBHbG9iYWxFdmVudE1hcFxuICpcbiAqIEBwYXJhbSBuYW1lIFRoZSBuYW1lIG9mIHRoZSBDdXN0b21FdmVudCB0byBjcmVhdGVcbiAqIEBwYXJhbSBwYXlsb2FkIFRoZSBhcmd1bWVudHMgZm9yIHRoZSBDdXN0b21FdmVudCBjb25zdHJ1Y3RvclxuICovXG5leHBvcnQgZnVuY3Rpb24gc3RyaWN0Q3VzdG9tRXZlbnQ8XG4gICAgVCBleHRlbmRzIGtleW9mIERvY3VtZW50RXZlbnRNYXAsXG4gICAgRCBleHRlbmRzIFVucGFja0N1c3RvbUV2ZW50UGF5bG9hZDxEb2N1bWVudEV2ZW50TWFwW1RdPixcbiAgICBDIGV4dGVuZHMgU3RyaWN0Q3VzdG9tRXZlbnRJbml0PEQ+XG4+KG5hbWU6IFQsIHBheWxvYWQ6IEMpOiBDdXN0b21FdmVudDxEPiB7XG4gICAgcmV0dXJuIG5ldyBDdXN0b21FdmVudDxEPihuYW1lLCBwYXlsb2FkKTtcbn1cbiIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuaW1wb3J0IHsgSWNvbnNldCB9IGZyb20gJy4vaWNvbnNldCc7XG5pbXBvcnQgeyBzdHJpY3RDdXN0b21FdmVudCB9IGZyb20gJy4uL2V2ZW50cyc7XG5cbmV4cG9ydCBjbGFzcyBJY29uc2V0UmVnaXN0cnkge1xuICAgIC8vIHNpbmdsZXRvbiBnZXR0ZXJcbiAgICBwdWJsaWMgc3RhdGljIGdldEluc3RhbmNlKCk6IEljb25zZXRSZWdpc3RyeSB7XG4gICAgICAgIGlmICghSWNvbnNldFJlZ2lzdHJ5Lmluc3RhbmNlKSB7XG4gICAgICAgICAgICBJY29uc2V0UmVnaXN0cnkuaW5zdGFuY2UgPSBuZXcgSWNvbnNldFJlZ2lzdHJ5KCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIEljb25zZXRSZWdpc3RyeS5pbnN0YW5jZTtcbiAgICB9XG4gICAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IEljb25zZXRSZWdpc3RyeTtcblxuICAgIHByaXZhdGUgaWNvbnNldE1hcCA9IG5ldyBNYXA8c3RyaW5nLCBJY29uc2V0PigpO1xuXG4gICAgcHVibGljIGFkZEljb25zZXQobmFtZTogc3RyaW5nLCBpY29uc2V0OiBJY29uc2V0KTogdm9pZCB7XG4gICAgICAgIHRoaXMuaWNvbnNldE1hcC5zZXQobmFtZSwgaWNvbnNldCk7XG5cbiAgICAgICAgLy8gZGlzcGF0Y2ggYSBzcC1pY29uc2V0LWFkZGVkIGV2ZW50IG9uIHdpbmRvdyB0byBsZXQgZXZlcnlvbmUga25vdyB3ZSBoYXZlIGEgbmV3IGljb25zZXRcbiAgICAgICAgLy8gbm90ZSB3ZSdyZSB1c2luZyB3aW5kb3cgaGVyZSBmb3IgZWZmaWNpZW5jeSBzaW5jZSB3ZSBkb24ndCBuZWVkIHRvIGJ1YmJsZSB0aHJvdWdoIHRoZSBkb20gc2luY2UgZXZlcnlvbmVcbiAgICAgICAgLy8gd2lsbCBrbm93IHdoZXJlIHRvIGxvb2sgZm9yIHRoaXMgZXZlbnRcbiAgICAgICAgY29uc3QgZXZlbnQgPSBzdHJpY3RDdXN0b21FdmVudCgnc3AtaWNvbnNldDphZGRlZCcsIHtcbiAgICAgICAgICAgIGRldGFpbDogeyBuYW1lLCBpY29uc2V0IH0sXG4gICAgICAgIH0pO1xuICAgICAgICAvLyB3ZSdyZSBkaXNwYXRjaGluZyB0aGlzIGV2ZW50IGluIHRoZSBuZXh0IHRpY2sgdG8gYWxsb3cgdGhlIGljb25zZXQgdG8gZmluaXNoIGFueSBzbG90Y2hhbmdlIG9yIG90aGVyIGV2ZW50XG4gICAgICAgIC8vIGxpc3RlbmVycyBjYXVzZWQgYnkgY29ubmVjdGlvbiB0byB0aGUgZG9tIGFuZCBmaXJzdCByZW5kZXIgdG8gY29tcGxldGUsIHRoaXMgd2F5IGFueSBpY29ucyBsaXN0ZW5pbmcgZm9yXG4gICAgICAgIC8vIHRoaXMgaWNvbnNldCB3aWxsIGJlIGFibGUgdG8gYWNjZXNzIHRoZSBjb21wbGV0ZWQgaWNvbnNldFxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KSwgMCk7XG4gICAgfVxuICAgIHB1YmxpYyByZW1vdmVJY29uc2V0KG5hbWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICB0aGlzLmljb25zZXRNYXAuZGVsZXRlKG5hbWUpO1xuICAgICAgICAvLyBkaXNwYXRjaCBhIHNwLWljb25zZXQtcmVtb3ZlZCBldmVudCBvbiB3aW5kb3cgdG8gbGV0IGV2ZXJ5b25lIGtub3cgd2UgaGF2ZSBhIG5ldyBpY29uc2V0XG4gICAgICAgIC8vIG5vdGUgd2UncmUgdXNpbmcgd2luZG93IGhlcmUgZm9yIGVmZmljaWVuY3kgc2luY2Ugd2UgZG9uJ3QgbmVlZCB0byBidWJibGUgdGhyb3VnaCB0aGUgZG9tIHNpbmNlIGV2ZXJ5b25lXG4gICAgICAgIC8vIHdpbGwga25vdyB3aGVyZSB0byBsb29rIGZvciB0aGlzIGV2ZW50XG4gICAgICAgIGNvbnN0IGV2ZW50ID0gc3RyaWN0Q3VzdG9tRXZlbnQoJ3NwLWljb25zZXQ6cmVtb3ZlZCcsIHtcbiAgICAgICAgICAgIGRldGFpbDogeyBuYW1lIH0sXG4gICAgICAgIH0pO1xuICAgICAgICAvLyB3ZSdyZSBkaXNwYXRjaGluZyB0aGlzIGV2ZW50IGluIHRoZSBuZXh0IHRpY2sgVG8ga2VlcCB0aGUgZXZlbnQgbW9kZWwgY29uc2lzdGVudCB3aXRoIHRoZSBhZGRlZCBldmVudFxuICAgICAgICBzZXRUaW1lb3V0KCgpID0+IHdpbmRvdy5kaXNwYXRjaEV2ZW50KGV2ZW50KSwgMCk7XG4gICAgfVxuICAgIHB1YmxpYyBnZXRJY29uc2V0KG5hbWU6IHN0cmluZyk6IEljb25zZXQgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5pY29uc2V0TWFwLmdldChuYW1lKTtcbiAgICB9XG59XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBpbnRlcmZhY2UgR2xvYmFsRXZlbnRIYW5kbGVyc0V2ZW50TWFwIHtcbiAgICAgICAgJ3NwLWljb25zZXQ6YWRkZWQnOiBDdXN0b21FdmVudDx7IG5hbWU6IHN0cmluZzsgaWNvbnNldDogSWNvbnNldCB9PjtcbiAgICAgICAgJ3NwLWljb25zZXQ6cmVtb3ZlZCc6IEN1c3RvbUV2ZW50PHsgbmFtZTogc3RyaW5nIH0+O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmNvbnN0IHN0eWxlcyA9IGNzc2Bcbjpob3N0e2Rpc3BsYXk6aW5saW5lLWJsb2NrO2NvbG9yOmluaGVyaXQ7ZmlsbDpjdXJyZW50Q29sb3I7cG9pbnRlci1ldmVudHM6bm9uZTstLXNwZWN0cnVtLWljb24tc2l6ZS1zOnZhcigtLXNwZWN0cnVtLWFsaWFzLXdvcmtmbG93LWljb24tc2l6ZSk7LS1zcGVjdHJ1bS1pY29uLXNpemUtbTp2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMzAwKTstLXNwZWN0cnVtLWljb24tc2l6ZS14eHM6Y2FsYyh2YXIoLS1zcGVjdHJ1bS1pY29uLXNpemUtcykvMik7LS1zcGVjdHJ1bS1pY29uLXNpemUteHM6Y2FsYyh2YXIoLS1zcGVjdHJ1bS1pY29uLXNpemUtbSkvMik7LS1zcGVjdHJ1bS1pY29uLXNpemUtbDpjYWxjKHZhcigtLXNwZWN0cnVtLWljb24tc2l6ZS1zKSoyKTstLXNwZWN0cnVtLWljb24tc2l6ZS14bDpjYWxjKHZhcigtLXNwZWN0cnVtLWljb24tc2l6ZS1tKSoyKTstLXNwZWN0cnVtLWljb24tc2l6ZS14eGw6Y2FsYyh2YXIoLS1zcGVjdHJ1bS1pY29uLXNpemUtbSkqMyk7LS1zcGVjdHJ1bS1pY29uLXNpemU6dmFyKC0tc3BlY3RydW0taWNvbi1zaXplLW0pfTpob3N0LGltZyxzdmd7aGVpZ2h0OnZhcigtLXNwZWN0cnVtLWljb24tc2l6ZSk7d2lkdGg6dmFyKC0tc3BlY3RydW0taWNvbi1zaXplKX06aG9zdChbc2l6ZT14eHNdKXstLXNwZWN0cnVtLWljb24tc2l6ZTp2YXIoLS1zcGVjdHJ1bS1pY29uLXNpemUteHhzKX06aG9zdChbc2l6ZT14c10pey0tc3BlY3RydW0taWNvbi1zaXplOnZhcigtLXNwZWN0cnVtLWljb24tc2l6ZS14cyl9Omhvc3QoW3NpemU9c10pey0tc3BlY3RydW0taWNvbi1zaXplOnZhcigtLXNwZWN0cnVtLWljb24tc2l6ZS1zKX06aG9zdChbc2l6ZT1tXSl7LS1zcGVjdHJ1bS1pY29uLXNpemU6dmFyKC0tc3BlY3RydW0taWNvbi1zaXplLW0pfTpob3N0KFtzaXplPWxdKXstLXNwZWN0cnVtLWljb24tc2l6ZTp2YXIoLS1zcGVjdHJ1bS1pY29uLXNpemUtbCl9Omhvc3QoW3NpemU9eGxdKXstLXNwZWN0cnVtLWljb24tc2l6ZTp2YXIoLS1zcGVjdHJ1bS1pY29uLXNpemUteGwpfTpob3N0KFtzaXplPXh4bF0pey0tc3BlY3RydW0taWNvbi1zaXplOnZhcigtLXNwZWN0cnVtLWljb24tc2l6ZS14eGwpfVxuYDtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlczsiLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHtcbiAgICBodG1sLFxuICAgIExpdEVsZW1lbnQsXG4gICAgcHJvcGVydHksXG4gICAgcXVlcnksXG4gICAgQ1NTUmVzdWx0QXJyYXksXG4gICAgVGVtcGxhdGVSZXN1bHQsXG59IGZyb20gJ2xpdC1lbGVtZW50JztcblxuaW1wb3J0IHsgSWNvbnNldFJlZ2lzdHJ5IH0gZnJvbSAnLi4vaWNvbnNldC9pY29uc2V0LXJlZ2lzdHJ5JztcblxuaW1wb3J0IHN0eWxlcyBmcm9tICcuL2ljb24uY3NzJztcbmltcG9ydCB7IG5vdGhpbmcgfSBmcm9tICdsaXQtaHRtbCc7XG5cbmV4cG9ydCBjbGFzcyBJY29uIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gICAgcHVibGljIHN0YXRpYyBpcyA9ICdzcC1pY29uJztcblxuICAgIEBwcm9wZXJ0eSgpXG4gICAgcHVibGljIHNyYz86IHN0cmluZztcblxuICAgIEBwcm9wZXJ0eSgpXG4gICAgcHVibGljIG5hbWU/OiBzdHJpbmc7XG5cbiAgICBAcHJvcGVydHkoKVxuICAgIHB1YmxpYyBzaXplOiBzdHJpbmcgPSAnbSc7XG5cbiAgICBAcXVlcnkoJyNjb250YWluZXInKVxuICAgIHByaXZhdGUgaWNvbkNvbnRhaW5lcj86IEhUTUxFbGVtZW50O1xuXG4gICAgcHJpdmF0ZSBpY29uc2V0TGlzdGVuZXI/OiBFdmVudExpc3RlbmVyO1xuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgc3R5bGVzKCk6IENTU1Jlc3VsdEFycmF5IHtcbiAgICAgICAgcmV0dXJuIFtzdHlsZXNdO1xuICAgIH1cblxuICAgIHB1YmxpYyBjb25uZWN0ZWRDYWxsYmFjaygpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcblxuICAgICAgICAvLyBzdGFydCBsaXN0ZW5pbmcgZm9yIGljb25zZXQtYWRkZWQgYW5kIGRvIHVwZGF0ZUljb24gaWYgd2UgZ2V0IG9uZSBsYXRlclxuICAgICAgICB0aGlzLmljb25zZXRMaXN0ZW5lciA9ICgoZXY6IEN1c3RvbUV2ZW50KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXRoaXMubmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHBhcnNlIHRoZSBpY29uIG5hbWUgdG8gZ2V0IGljb25zZXQgbmFtZVxuICAgICAgICAgICAgY29uc3QgaWNvbiA9IHRoaXMucGFyc2VJY29uKHRoaXMubmFtZSk7XG4gICAgICAgICAgICBpZiAoIWljb24pIHtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZXYuZGV0YWlsLm5hbWUgPT09IGljb24uaWNvbnNldCkge1xuICAgICAgICAgICAgICAgIHRoaXMudXBkYXRlSWNvbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KSBhcyBFdmVudExpc3RlbmVyO1xuICAgICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcignc3AtaWNvbnNldDphZGRlZCcsIHRoaXMuaWNvbnNldExpc3RlbmVyKTtcbiAgICB9XG4gICAgcHVibGljIGRpc2Nvbm5lY3RlZENhbGxiYWNrKCk6IHZvaWQge1xuICAgICAgICBzdXBlci5kaXNjb25uZWN0ZWRDYWxsYmFjaygpO1xuICAgICAgICBpZiAodGhpcy5pY29uc2V0TGlzdGVuZXIpIHtcbiAgICAgICAgICAgIHdpbmRvdy5yZW1vdmVFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgICAgICdzcC1pY29uc2V0OmFkZGVkJyxcbiAgICAgICAgICAgICAgICB0aGlzLmljb25zZXRMaXN0ZW5lclxuICAgICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBmaXJzdFVwZGF0ZWQoKTogdm9pZCB7XG4gICAgICAgIHRoaXMudXBkYXRlSWNvbigpO1xuICAgIH1cblxuICAgIHB1YmxpYyBhdHRyaWJ1dGVDaGFuZ2VkQ2FsbGJhY2soXG4gICAgICAgIG5hbWU6IHN0cmluZyxcbiAgICAgICAgb2xkOiBzdHJpbmcsXG4gICAgICAgIHZhbHVlOiBzdHJpbmdcbiAgICApOiB2b2lkIHtcbiAgICAgICAgc3VwZXIuYXR0cmlidXRlQ2hhbmdlZENhbGxiYWNrKG5hbWUsIG9sZCwgdmFsdWUpO1xuICAgICAgICB0aGlzLnVwZGF0ZUljb24oKTsgLy8gYW55IG9mIG91ciBhdHRyaWJ1dGVzIGNoYW5nZSwgdXBkYXRlIG91ciBpY29uXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHJlbmRlcigpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgPGRpdiBpZD1cImNvbnRhaW5lclwiPiR7dGhpcy5yZW5kZXJJY29uKCl9PC9kaXY+XG4gICAgICAgIGA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVJY29uKCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMubmFtZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIHBhcnNlIHRoZSBpY29uIG5hbWUgdG8gZ2V0IGljb25zZXQgbmFtZVxuICAgICAgICBjb25zdCBpY29uID0gdGhpcy5wYXJzZUljb24odGhpcy5uYW1lKTtcbiAgICAgICAgaWYgKCFpY29uKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgLy8gdHJ5IHRvIHJldHJpZXZlIHRoZSBpY29uc2V0XG4gICAgICAgIGNvbnN0IGljb25zZXQgPSBJY29uc2V0UmVnaXN0cnkuZ2V0SW5zdGFuY2UoKS5nZXRJY29uc2V0KGljb24uaWNvbnNldCk7XG4gICAgICAgIGlmICghaWNvbnNldCkge1xuICAgICAgICAgICAgLy8gd2UgY2FuIHN0b3AgaGVyZSBhcyB0aGVyZSdzIG5vdGhpbmcgdG8gYmUgZG9uZSB0aWxsIHdlIGdldCB0aGUgaWNvbnNldFxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pY29uQ29udGFpbmVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pY29uQ29udGFpbmVyLmlubmVySFRNTCA9ICcnO1xuICAgICAgICBpY29uc2V0LmFwcGx5SWNvblRvRWxlbWVudChcbiAgICAgICAgICAgIHRoaXMuaWNvbkNvbnRhaW5lcixcbiAgICAgICAgICAgIGljb24uaWNvbixcbiAgICAgICAgICAgIHRoaXMuc2l6ZSA/IHRoaXMuc2l6ZSA6ICcnXG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBwYXJzZUljb24oaWNvbjogc3RyaW5nKTogeyBpY29uc2V0OiBzdHJpbmc7IGljb246IHN0cmluZyB9IHwgbnVsbCB7XG4gICAgICAgIGlmICghaWNvbikge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgaWNvblBhcnRzID0gaWNvbi5zcGxpdCgnOicpO1xuICAgICAgICBsZXQgaWNvbnNldE5hbWUgPSAnZGVmYXVsdCc7XG4gICAgICAgIGxldCBpY29uTmFtZSA9IGljb247XG4gICAgICAgIGlmIChpY29uUGFydHMubGVuZ3RoID4gMSkge1xuICAgICAgICAgICAgaWNvbnNldE5hbWUgPSBpY29uUGFydHNbMF07XG4gICAgICAgICAgICBpY29uTmFtZSA9IGljb25QYXJ0c1sxXTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4geyBpY29uc2V0OiBpY29uc2V0TmFtZSwgaWNvbjogaWNvbk5hbWUgfTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckljb24oKTogVGVtcGxhdGVSZXN1bHQge1xuICAgICAgICAvLyBoYW5kbGUgc3JjIGltYWdlIGNhc2VcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICAke3RoaXMuc3JjXG4gICAgICAgICAgICAgICAgPyBodG1sYFxuICAgICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPVwiJHt0aGlzLnNyY31cIiAvPlxuICAgICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgICAgIDogbm90aGluZ31cbiAgICAgICAgYDtcbiAgICB9XG59XG4iLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbmV4cG9ydCAqIGZyb20gJy4vaWNvbic7XG5pbXBvcnQgeyBJY29uIH0gZnJvbSAnLi9pY29uJztcblxuaWYgKCFjdXN0b21FbGVtZW50cy5nZXQoJ3NwLWljb24nKSkge1xuICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZSgnc3AtaWNvbicsIEljb24pO1xufVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgaW50ZXJmYWNlIEhUTUxFbGVtZW50VGFnTmFtZU1hcCB7XG4gICAgICAgICdzcC1pY29uJzogSWNvbjtcbiAgICB9XG59XG4iLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHsgQ1NTUmVzdWx0QXJyYXksIFRlbXBsYXRlUmVzdWx0LCBodG1sLCBwcm9wZXJ0eSB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmltcG9ydCB7IENoZWNrYm94QmFzZSB9IGZyb20gJy4vY2hlY2tib3gtYmFzZSc7XG5pbXBvcnQgY2hlY2tib3hTdHlsZXMgZnJvbSAnLi9jaGVja2JveC5jc3MnO1xuaW1wb3J0ICcuLi9pY29uJztcblxuZXhwb3J0IGNsYXNzIENoZWNrYm94IGV4dGVuZHMgQ2hlY2tib3hCYXNlIHtcbiAgICBAcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiB0cnVlIH0pXG4gICAgcHVibGljIGluZGV0ZXJtaW5hdGU6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IEJvb2xlYW4sIHJlZmxlY3Q6IHRydWUgfSlcbiAgICBwdWJsaWMgaW52YWxpZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgc3R5bGVzKCk6IENTU1Jlc3VsdEFycmF5IHtcbiAgICAgICAgcmV0dXJuIFtjaGVja2JveFN0eWxlc107XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHJlbmRlcigpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgPGxhYmVsIGlkPVwicm9vdFwiPlxuICAgICAgICAgICAgICAgICR7c3VwZXIucmVuZGVyKCl9XG4gICAgICAgICAgICAgICAgPHNwYW4gaWQ9XCJib3hcIj5cbiAgICAgICAgICAgICAgICAgICAgPHNwLWljb25cbiAgICAgICAgICAgICAgICAgICAgICAgIGlkPVwiY2hlY2ttYXJrXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ1aTpDaGVja21hcmtTbWFsbFwiXG4gICAgICAgICAgICAgICAgICAgICAgICBhcmlhLWhpZGRlbj1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgICA+PC9zcC1pY29uPlxuICAgICAgICAgICAgICAgICAgICA8c3AtaWNvblxuICAgICAgICAgICAgICAgICAgICAgICAgaWQ9XCJwYXJ0aWFsQ2hlY2ttYXJrXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNpemU9XCJzXCJcbiAgICAgICAgICAgICAgICAgICAgICAgIG5hbWU9XCJ1aTpEYXNoU21hbGxcIlxuICAgICAgICAgICAgICAgICAgICAgICAgYXJpYS1oaWRkZW49XCJ0cnVlXCJcbiAgICAgICAgICAgICAgICAgICAgPjwvc3AtaWNvbj5cbiAgICAgICAgICAgICAgICA8L3NwYW4+XG4gICAgICAgICAgICAgICAgPHNwYW4gaWQ9XCJsYWJlbFwiPjxzbG90Pjwvc2xvdD48L3NwYW4+XG4gICAgICAgICAgICA8L2xhYmVsPlxuICAgICAgICBgO1xuICAgIH1cbn1cbiIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuZXhwb3J0ICogZnJvbSAnLi9jaGVja2JveCc7XG5cbmltcG9ydCB7IENoZWNrYm94IH0gZnJvbSAnLi9jaGVja2JveCc7XG5cbmlmICghY3VzdG9tRWxlbWVudHMuZ2V0KCdzcC1jaGVja2JveCcpKSB7XG4gICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdzcC1jaGVja2JveCcsIENoZWNrYm94KTtcbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBIVE1MRWxlbWVudFRhZ05hbWVNYXAge1xuICAgICAgICAnc3AtY2hlY2tib3gnOiBDaGVja2JveDtcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdsaXQtZWxlbWVudCc7XG5jb25zdCBzdHlsZXMgPSBjc3NgXG46aG9zdHtkaXNwbGF5OmJsb2NrO3RleHQtYWxpZ246Y2VudGVyO2JvcmRlci1yYWRpdXM6dmFyKC0tc3BlY3RydW0tZHJvcHpvbmUtYm9yZGVyLXJhZGl1cyk7cGFkZGluZzp2YXIoLS1zcGVjdHJ1bS1kcm9wem9uZS1wYWRkaW5nKTtib3JkZXI6dmFyKC0tc3BlY3RydW0tZHJvcHpvbmUtYm9yZGVyLXdpZHRoKSBkYXNoZWQgdmFyKC0tc3BlY3RydW0tZHJvcHpvbmUtYm9yZGVyLWNvbG9yKTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLWdyYXktNzAwKX06aG9zdCg6Zm9jdXMpe2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1kcm9wem9uZS1ib3JkZXItY29sb3IpO291dGxpbmU6MDtib3JkZXItc3R5bGU6ZGFzaGVkfTpob3N0KFtpcy1kcmFnZ2VkXSl7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLWRyb3B6b25lLWJvcmRlci1jb2xvci1zZWxlY3RlZC1ob3Zlcik7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1kcm9wem9uZS1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkLWhvdmVyKTtib3JkZXItc3R5bGU6c29saWR9Omhvc3QoW2lzLWRyYWdnZWRdKSA6OnNsb3R0ZWQoKil7Y29sb3I6dmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXN0YXRpYy1ibHVlLTQwMCl9XG5gO1xuZXhwb3J0IGRlZmF1bHQgc3R5bGVzOyIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQge1xuICAgIGh0bWwsXG4gICAgTGl0RWxlbWVudCxcbiAgICBwcm9wZXJ0eSxcbiAgICBDU1NSZXN1bHRBcnJheSxcbiAgICBUZW1wbGF0ZVJlc3VsdCxcbn0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuXG5pbXBvcnQgZHJvcHpvbmVTdHlsZXMgZnJvbSAnLi9kcm9wem9uZS5jc3MnO1xuaW1wb3J0IHsgc3RyaWN0Q3VzdG9tRXZlbnQgfSBmcm9tICcuLi9ldmVudHMnO1xuXG5leHBvcnQgdHlwZSBEcm9wem9uZUV2ZW50RGV0YWlsID0gRHJhZ0V2ZW50O1xuXG5leHBvcnQgdHlwZSBEcm9wRWZmZWN0cyA9ICdjb3B5JyB8ICdtb3ZlJyB8ICdsaW5rJyB8ICdub25lJztcblxuZXhwb3J0IGNsYXNzIERyb3B6b25lIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBpcyA9ICdzcC1kcm9wem9uZSc7XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldCBzdHlsZXMoKTogQ1NTUmVzdWx0QXJyYXkge1xuICAgICAgICByZXR1cm4gW2Ryb3B6b25lU3R5bGVzXTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF9kcm9wRWZmZWN0OiBEcm9wRWZmZWN0cyA9ICdjb3B5JztcbiAgICBwdWJsaWMgZ2V0IGRyb3BFZmZlY3QoKTogRHJvcEVmZmVjdHMge1xuICAgICAgICByZXR1cm4gdGhpcy5fZHJvcEVmZmVjdDtcbiAgICB9XG4gICAgcHVibGljIHNldCBkcm9wRWZmZWN0KHZhbHVlOiBEcm9wRWZmZWN0cykge1xuICAgICAgICBpZiAoWydjb3B5JywgJ21vdmUnLCAnbGluaycsICdub25lJ10uaW5jbHVkZXModmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLl9kcm9wRWZmZWN0ID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiB0cnVlLCBhdHRyaWJ1dGU6ICdpcy1kcmFnZ2VkJyB9KVxuICAgIHB1YmxpYyBpc0RyYWdnZWQgPSBmYWxzZTtcblxuICAgIHByaXZhdGUgZGVib3VuY2VkRHJhZ0xlYXZlOiBudW1iZXIgfCBudWxsID0gbnVsbDtcblxuICAgIHB1YmxpYyBvbkRyYWdPdmVyKGV2OiBEcmFnRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgc2hvdWxkQWNjZXB0RXZlbnQgPSBzdHJpY3RDdXN0b21FdmVudChcbiAgICAgICAgICAgICdzcC1kcm9wem9uZTpzaG91bGQtYWNjZXB0JyxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNhbmNlbGFibGU6IHRydWUsXG4gICAgICAgICAgICAgICAgY29tcG9zZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgZGV0YWlsOiBldixcbiAgICAgICAgICAgIH1cbiAgICAgICAgKTtcbiAgICAgICAgLy8gZGlzcGF0Y2ggZXZlbnQgcmV0dXJucyB0cnVlIGlmIHByZXZlbnREZWZhdWx0KCkgaXMgbm90IGNhbGxlZFxuICAgICAgICBjb25zdCBzaG91bGRBY2NlcHQgPSB0aGlzLmRpc3BhdGNoRXZlbnQoc2hvdWxkQWNjZXB0RXZlbnQpO1xuICAgICAgICBpZiAoIWV2LmRhdGFUcmFuc2Zlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghc2hvdWxkQWNjZXB0KSB7XG4gICAgICAgICAgICBldi5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9ICdub25lJztcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGV2LnByZXZlbnREZWZhdWx0KCk7XG5cbiAgICAgICAgdGhpcy5jbGVhckRlYm91bmNlZERyYWdMZWF2ZSgpO1xuXG4gICAgICAgIHRoaXMuaXNEcmFnZ2VkID0gdHJ1ZTtcblxuICAgICAgICBldi5kYXRhVHJhbnNmZXIuZHJvcEVmZmVjdCA9IHRoaXMuZHJvcEVmZmVjdDtcbiAgICAgICAgY29uc3QgZHJhZ092ZXJFdmVudCA9IHN0cmljdEN1c3RvbUV2ZW50KCdzcC1kcm9wem9uZTpkcmFnb3ZlcicsIHtcbiAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgICAgICAgIGRldGFpbDogZXYsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoZHJhZ092ZXJFdmVudCk7XG4gICAgfVxuXG4gICAgcHVibGljIG9uRHJhZ0xlYXZlKGV2OiBEcmFnRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5jbGVhckRlYm91bmNlZERyYWdMZWF2ZSgpO1xuXG4gICAgICAgIHRoaXMuZGVib3VuY2VkRHJhZ0xlYXZlID0gd2luZG93LnNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgaWYgKHRoaXMuaXNEcmFnZ2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5pc0RyYWdnZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgY29uc3QgZHJhZ0xlYXZlID0gc3RyaWN0Q3VzdG9tRXZlbnQoJ3NwLWRyb3B6b25lOmRyYWdsZWF2ZScsIHtcbiAgICAgICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgICAgICAgIGNvbXBvc2VkOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRldGFpbDogZXYsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChkcmFnTGVhdmUpO1xuICAgICAgICB9LCAxMDApO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbkRyb3AoZXY6IERyYWdFdmVudCk6IHZvaWQge1xuICAgICAgICBldi5wcmV2ZW50RGVmYXVsdCgpO1xuXG4gICAgICAgIHRoaXMuY2xlYXJEZWJvdW5jZWREcmFnTGVhdmUoKTtcblxuICAgICAgICBpZiAodGhpcy5pc0RyYWdnZWQpIHtcbiAgICAgICAgICAgIHRoaXMuaXNEcmFnZ2VkID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgZHJvcEV2ZW50ID0gc3RyaWN0Q3VzdG9tRXZlbnQoJ3NwLWRyb3B6b25lOmRyb3AnLCB7XG4gICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgICAgY29tcG9zZWQ6IHRydWUsXG4gICAgICAgICAgICBkZXRhaWw6IGV2LFxuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGRyb3BFdmVudCk7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHJlbmRlcigpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGlkPVwiY29udGFpbmVyXCJcbiAgICAgICAgICAgICAgICBAZHJvcD1cIiR7dGhpcy5vbkRyb3B9XCJcbiAgICAgICAgICAgICAgICBAZHJhZ292ZXI9XCIke3RoaXMub25EcmFnT3Zlcn1cIlxuICAgICAgICAgICAgICAgIEBkcmFnbGVhdmU9XCIke3RoaXMub25EcmFnTGVhdmV9XCJcbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgY2xlYXJEZWJvdW5jZWREcmFnTGVhdmUoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmRlYm91bmNlZERyYWdMZWF2ZSkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZGVib3VuY2VkRHJhZ0xlYXZlKTtcbiAgICAgICAgICAgIHRoaXMuZGVib3VuY2VkRHJhZ0xlYXZlID0gbnVsbDtcbiAgICAgICAgfVxuICAgIH1cbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBHbG9iYWxFdmVudEhhbmRsZXJzRXZlbnRNYXAge1xuICAgICAgICAnc3AtZHJvcHpvbmU6c2hvdWxkLWFjY2VwdCc6IEN1c3RvbUV2ZW50PERyYWdFdmVudD47XG4gICAgICAgICdzcC1kcm9wem9uZTpkcmFnb3Zlcic6IEN1c3RvbUV2ZW50PERyYWdFdmVudD47XG4gICAgICAgICdzcC1kcm9wem9uZTpkcmFnbGVhdmUnOiBDdXN0b21FdmVudDxEcmFnRXZlbnQ+O1xuICAgICAgICAnc3AtZHJvcHpvbmU6ZHJvcCc6IEN1c3RvbUV2ZW50PERyYWdFdmVudD47XG4gICAgfVxufVxuIiwiLypcbkNvcHlyaWdodCAyMDE4IEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbm9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG50aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbk9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5leHBvcnQgKiBmcm9tICcuL2Ryb3B6b25lJztcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmNvbnN0IHN0eWxlcyA9IGNzc2Bcbjpob3N0e2hlaWdodDoxMDAlO2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47YWxpZ24taXRlbXM6Y2VudGVyO2p1c3RpZnktY29udGVudDpjZW50ZXI7dGV4dC1hbGlnbjpjZW50ZXI7Y29sb3I6dmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXN0YXRpYy1ncmF5LTUwMCl9OjpzbG90dGVkKCope21hcmdpbi1ib3R0b206dmFyKC0tc3BlY3RydW0taWxsdXN0cmF0ZWQtbWVzc2FnZS1pbGx1c3RyYXRpb24tbWFyZ2luLWJvdHRvbSk7ZmlsbDpjdXJyZW50Q29sb3I7c3Ryb2tlOmN1cnJlbnRDb2xvcn0jaGVhZGluZ3ttYXgtd2lkdGg6dmFyKC0tc3BlY3RydW0taWxsdXN0cmF0ZWQtbWVzc2FnZS1oZWFkaW5nLW1heC13aWR0aCk7bWFyZ2luOnZhcigtLXNwZWN0cnVtLWlsbHVzdHJhdGVkLW1lc3NhZ2UtaGVhZGluZy1tYXJnaW4pfSNkZXNjcmlwdGlvbiwjaGVhZGluZ3tjb2xvcjp2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLWdyYXktNzAwKX0jZGVzY3JpcHRpb257bWF4LXdpZHRoOnZhcigtLXNwZWN0cnVtLWlsbHVzdHJhdGVkLW1lc3NhZ2UtZGVzY3JpcHRpb24tbWF4LXdpZHRoKTttYXJnaW46dmFyKC0tc3BlY3RydW0taWxsdXN0cmF0ZWQtbWVzc2FnZS1kZXNjcmlwdGlvbi1tYXJnaW4pO2ZvbnQtc3R5bGU6aXRhbGljfVxuYDtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlczsiLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHtcbiAgICBodG1sLFxuICAgIExpdEVsZW1lbnQsXG4gICAgcHJvcGVydHksXG4gICAgQ1NTUmVzdWx0QXJyYXksXG4gICAgVGVtcGxhdGVSZXN1bHQsXG59IGZyb20gJ2xpdC1lbGVtZW50JztcblxuaW1wb3J0IG1lc3NhZ2VTdHlsZXMgZnJvbSAnLi9pbGx1c3RyYXRlZC1tZXNzYWdlLmNzcyc7XG5cbmV4cG9ydCBjbGFzcyBJbGx1c3RyYXRlZE1lc3NhZ2UgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGlzID0gJ3NwLWlsbHVzdHJhdGVkLW1lc3NhZ2UnO1xuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgc3R5bGVzKCk6IENTU1Jlc3VsdEFycmF5IHtcbiAgICAgICAgcmV0dXJuIFttZXNzYWdlU3R5bGVzXTtcbiAgICB9XG5cbiAgICBAcHJvcGVydHkoKVxuICAgIHB1YmxpYyBoZWFkaW5nID0gJyc7XG5cbiAgICBAcHJvcGVydHkoKVxuICAgIHB1YmxpYyBkZXNjcmlwdGlvbiA9ICcnO1xuXG4gICAgcHJvdGVjdGVkIHJlbmRlcigpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgPHNsb3Q+PC9zbG90PlxuICAgICAgICAgICAgPGRpdiBpZD1cImhlYWRpbmdcIj4ke3RoaXMuaGVhZGluZ308L2Rpdj5cbiAgICAgICAgICAgIDxkaXYgaWQ9XCJkZXNjcmlwdGlvblwiPiR7dGhpcy5kZXNjcmlwdGlvbn08L2Rpdj5cbiAgICAgICAgYDtcbiAgICB9XG59XG4iLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbmV4cG9ydCAqIGZyb20gJy4vaWxsdXN0cmF0ZWQtbWVzc2FnZSc7XG4iLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTggVGhlIFBvbHltZXIgUHJvamVjdCBBdXRob3JzLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuICogVGhpcyBjb2RlIG1heSBvbmx5IGJlIHVzZWQgdW5kZXIgdGhlIEJTRCBzdHlsZSBsaWNlbnNlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vTElDRU5TRS50eHRcbiAqIFRoZSBjb21wbGV0ZSBzZXQgb2YgYXV0aG9ycyBtYXkgYmUgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9BVVRIT1JTLnR4dFxuICogVGhlIGNvbXBsZXRlIHNldCBvZiBjb250cmlidXRvcnMgbWF5IGJlIGZvdW5kIGF0XG4gKiBodHRwOi8vcG9seW1lci5naXRodWIuaW8vQ09OVFJJQlVUT1JTLnR4dFxuICogQ29kZSBkaXN0cmlidXRlZCBieSBHb29nbGUgYXMgcGFydCBvZiB0aGUgcG9seW1lciBwcm9qZWN0IGlzIGFsc29cbiAqIHN1YmplY3QgdG8gYW4gYWRkaXRpb25hbCBJUCByaWdodHMgZ3JhbnQgZm91bmQgYXRcbiAqIGh0dHA6Ly9wb2x5bWVyLmdpdGh1Yi5pby9QQVRFTlRTLnR4dFxuICovXG5cbmltcG9ydCB7QXR0cmlidXRlUGFydCwgZGlyZWN0aXZlLCBQYXJ0fSBmcm9tICcuLi9saXQtaHRtbC5qcyc7XG5cbi8qKlxuICogRm9yIEF0dHJpYnV0ZVBhcnRzLCBzZXRzIHRoZSBhdHRyaWJ1dGUgaWYgdGhlIHZhbHVlIGlzIGRlZmluZWQgYW5kIHJlbW92ZXNcbiAqIHRoZSBhdHRyaWJ1dGUgaWYgdGhlIHZhbHVlIGlzIHVuZGVmaW5lZC5cbiAqXG4gKiBGb3Igb3RoZXIgcGFydCB0eXBlcywgdGhpcyBkaXJlY3RpdmUgaXMgYSBuby1vcC5cbiAqL1xuZXhwb3J0IGNvbnN0IGlmRGVmaW5lZCA9IGRpcmVjdGl2ZSgodmFsdWU6IHVua25vd24pID0+IChwYXJ0OiBQYXJ0KSA9PiB7XG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIHBhcnQgaW5zdGFuY2VvZiBBdHRyaWJ1dGVQYXJ0KSB7XG4gICAgaWYgKHZhbHVlICE9PSBwYXJ0LnZhbHVlKSB7XG4gICAgICBjb25zdCBuYW1lID0gcGFydC5jb21taXR0ZXIubmFtZTtcbiAgICAgIHBhcnQuY29tbWl0dGVyLmVsZW1lbnQucmVtb3ZlQXR0cmlidXRlKG5hbWUpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICBwYXJ0LnNldFZhbHVlKHZhbHVlKTtcbiAgfVxufSk7XG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdsaXQtZWxlbWVudCc7XG5jb25zdCBzdHlsZXMgPSBjc3NgXG46aG9zdCxhOi13ZWJraXQtYW55LWxpbmt7YmFja2dyb3VuZC1jb2xvcjppbml0aWFsO3RleHQtZGVjb3JhdGlvbjpub25lO3RyYW5zaXRpb246Y29sb3IgdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWFuaW1hdGlvbi1kdXJhdGlvbi0xMDApIGVhc2UtaW4tb3V0O291dGxpbmU6bm9uZTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1saW5rLXRleHQtY29sb3IpfTpob3N0LGE6LXdlYmtpdC1hbnktbGluayxhOmFueS1saW5re2JhY2tncm91bmQtY29sb3I6aW5pdGlhbDt0ZXh0LWRlY29yYXRpb246bm9uZTt0cmFuc2l0aW9uOmNvbG9yIHZhcigtLXNwZWN0cnVtLWdsb2JhbC1hbmltYXRpb24tZHVyYXRpb24tMTAwKSBlYXNlLWluLW91dDtvdXRsaW5lOm5vbmU7Y29sb3I6dmFyKC0tc3BlY3RydW0tbGluay10ZXh0LWNvbG9yKX06aG9zdCg6aG92ZXIpIGF7dGV4dC1kZWNvcmF0aW9uOnVuZGVybGluZTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1saW5rLXRleHQtY29sb3ItaG92ZXIpO2N1cnNvcjpwb2ludGVyfTpob3N0KFtkaXNhYmxlZF0pe2N1cnNvcjpkZWZhdWx0O3BvaW50ZXItZXZlbnRzOm5vbmV9Omhvc3QoW2Rpc2FibGVkXTpmb2N1cykgYSw6aG9zdChbZGlzYWJsZWRdOmhvdmVyKSBhe3RleHQtZGVjb3JhdGlvbjpub25lfVxuYDtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlczsiLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHtcbiAgICBodG1sLFxuICAgIExpdEVsZW1lbnQsXG4gICAgcHJvcGVydHksXG4gICAgQ1NTUmVzdWx0QXJyYXksXG4gICAgVGVtcGxhdGVSZXN1bHQsXG59IGZyb20gJ2xpdC1lbGVtZW50JztcbmltcG9ydCB7IGlmRGVmaW5lZCB9IGZyb20gJ2xpdC1odG1sL2RpcmVjdGl2ZXMvaWYtZGVmaW5lZCc7XG5cbmltcG9ydCBsaW5rU3R5bGVzIGZyb20gJy4vbGluay5jc3MnO1xuXG5leHBvcnQgY2xhc3MgTGluayBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgaXMgPSAnc3AtbGluayc7XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldCBzdHlsZXMoKTogQ1NTUmVzdWx0QXJyYXkge1xuICAgICAgICByZXR1cm4gW2xpbmtTdHlsZXNdO1xuICAgIH1cblxuICAgIEBwcm9wZXJ0eSgpXG4gICAgcHVibGljIGhyZWY6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAgIEBwcm9wZXJ0eSgpXG4gICAgcHVibGljIHRhcmdldDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgcHJvdGVjdGVkIHJlbmRlcigpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgPGEgaHJlZj0ke2lmRGVmaW5lZCh0aGlzLmhyZWYpfSB0YXJnZXQ9JHtpZkRlZmluZWQodGhpcy50YXJnZXQpfT5cbiAgICAgICAgICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICAgICAgICA8L2E+XG4gICAgICAgIGA7XG4gICAgfVxufVxuIiwiLypcbkNvcHlyaWdodCAyMDE4IEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbm9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG50aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbk9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5leHBvcnQgKiBmcm9tICcuL2xpbmsnO1xuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuY29uc3Qgc3R5bGVzID0gY3NzYFxuI3Jvb3R7ZGlzcGxheTppbmxpbmUtZmxleDthbGlnbi1pdGVtczpmbGV4LXN0YXJ0O3Bvc2l0aW9uOnJlbGF0aXZlO21pbi1oZWlnaHQ6dmFyKC0tc3BlY3RydW0tcmFkaW8taGVpZ2h0LHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS00MDApKTttYXgtd2lkdGg6MTAwJTttYXJnaW4tcmlnaHQ6Y2FsYyh2YXIoLS1zcGVjdHJ1bS1yYWRpby1jdXJzb3ItaGl0LXgsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTAwKSkqMik7dmVydGljYWwtYWxpZ246dG9wfSNpbnB1dHtmb250LWZhbWlseTppbmhlcml0O2ZvbnQtc2l6ZToxMDAlO2xpbmUtaGVpZ2h0OjEuMTU7bWFyZ2luOjA7b3ZlcmZsb3c6dmlzaWJsZTtib3gtc2l6aW5nOmJvcmRlci1ib3g7cGFkZGluZzowO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6Y2FsYyh2YXIoLS1zcGVjdHJ1bS1yYWRpby1jdXJzb3ItaGl0LXgsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTAwKSkqLTEpO3dpZHRoOmNhbGMoMTAwJSArIHZhcigtLXNwZWN0cnVtLXJhZGlvLWN1cnNvci1oaXQteCxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0xMDApKSoyKTtoZWlnaHQ6MTAwJTtvcGFjaXR5Oi4wMDAxO3otaW5kZXg6MTtjdXJzb3I6cG9pbnRlcn06aG9zdChbZGlzYWJsZWRdKSAjaW5wdXR7Y3Vyc29yOmRlZmF1bHR9Omhvc3QoW2NoZWNrZWRdKSAjaW5wdXQrI2J1dHRvbntib3JkZXItd2lkdGg6Y2FsYyh2YXIoLS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtZGlhbWV0ZXIsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTc1KSkvMiAtIHZhcigtLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1kb3Qtc2l6ZSwgNHB4KS8yKTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1jb2xvci1zZWxlY3RlZCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItYmx1ZS01MDApKX0jbGFiZWx7bWFyZ2luLWxlZnQ6dmFyKC0tc3BlY3RydW0tcmFkaW8tdGV4dC1nYXAsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTEyNSkpO2ZvbnQtc2l6ZTp2YXIoLS1zcGVjdHJ1bS1yYWRpby10ZXh0LXNpemUsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1mb250LXNpemUtMTAwKSk7dHJhbnNpdGlvbjpjb2xvciB2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtYW5pbWF0aW9uLWR1cmF0aW9uLTEwMCwuMTNzKSBlYXNlLWluLW91dDttYXJnaW4tdG9wOnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS03NSk7Y29sb3I6dmFyKC0tc3BlY3RydW0tcmFkaW8tdGV4dC1jb2xvcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS04MDApKX0jYnV0dG9ue3Bvc2l0aW9uOnJlbGF0aXZlO2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDp2YXIoLS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtZGlhbWV0ZXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTE3NSkpO2hlaWdodDp2YXIoLS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtZGlhbWV0ZXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTE3NSkpO21hcmdpbjpjYWxjKCh2YXIoLS1zcGVjdHJ1bS1yYWRpby1oZWlnaHQsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNDAwKSkgLSB2YXIoLS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtZGlhbWV0ZXIsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTc1KSkpLzIpIDA7ZmxleC1ncm93OjA7ZmxleC1zaHJpbms6MDtib3JkZXItcmFkaXVzOmNhbGModmFyKC0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWRpYW1ldGVyLFxudmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTE3NSkpLzIpO3RyYW5zaXRpb246Ym9yZGVyIHZhcigtLXNwZWN0cnVtLWdsb2JhbC1hbmltYXRpb24tZHVyYXRpb24tMTAwLC4xM3MpIGVhc2UtaW4tb3V0LGJveC1zaGFkb3cgdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWFuaW1hdGlvbi1kdXJhdGlvbi0xMDAsLjEzcykgZWFzZS1pbi1vdXQ7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtYmFja2dyb3VuZC1jb2xvcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS03NSkpO2JvcmRlcjp2YXIoLS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtYm9yZGVyLXNpemUsMnB4KSBzb2xpZCB2YXIoLS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtYm9yZGVyLWNvbG9yLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTYwMCkpfTpob3N0KFtsYWJlbC1iZWxvd10pICNyb290e2Rpc3BsYXk6aW5saW5lLWZsZXg7ZmxleC1kaXJlY3Rpb246Y29sdW1uO2FsaWduLWl0ZW1zOmNlbnRlcjtoZWlnaHQ6YXV0b306aG9zdChbbGFiZWwtYmVsb3ddKSAjYnV0dG9ue2ZsZXgtc2hyaW5rOjB9Omhvc3QoW2xhYmVsLWJlbG93XSkgI2xhYmVse21hcmdpbjp2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNDApIDAgMCAwfSNyb290OmhvdmVyICNidXR0b257Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3ItaG92ZXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNzAwKSk7Ym94LXNoYWRvdzpub25lfTpob3N0KFtjaGVja2VkXSkgI3Jvb3Q6aG92ZXIgI2lucHV0KyNidXR0b257Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3Itc2VsZWN0ZWQtaG92ZXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWJsdWUtNjAwKSl9I3Jvb3Q6aG92ZXIgI2xhYmVse2NvbG9yOnZhcigtLXNwZWN0cnVtLXJhZGlvLXRleHQtY29sb3ItaG92ZXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktOTAwKSl9I3Jvb3Q6YWN0aXZlICNidXR0b257Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3ItZG93bix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS04MDApKX06aG9zdChbY2hlY2tlZF0pICNyb290OmFjdGl2ZSAjaW5wdXQrI2J1dHRvbntib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1jb2xvci1zZWxlY3RlZC1kb3duLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ibHVlLTcwMCkpfSNyb290OmFjdGl2ZSAjbGFiZWx7Y29sb3I6dmFyKC0tc3BlY3RydW0tcmFkaW8tdGV4dC1jb2xvci1kb3duLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTkwMCkpfTpob3N0KFtxdWlldF1bY2hlY2tlZF0pICNpbnB1dCsjYnV0dG9ue2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTcwMCkpfTpob3N0KFtxdWlldF1bY2hlY2tlZF0pICNyb290OmhvdmVyICNpbnB1dCsjYnV0dG9ue2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWhvdmVyLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTgwMCkpfTpob3N0KFtxdWlldF1bY2hlY2tlZF0pICNyb290OmFjdGl2ZSAjaW5wdXQrI2J1dHRvbntib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tcmFkaW8tcXVpZXQtY2lyY2xlLWJvcmRlci1jb2xvci1zZWxlY3RlZC1kb3duLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTkwMCkpfTpob3N0KFtpbnZhbGlkXSkgI3Jvb3Q6aG92ZXIgI2lucHV0KyNidXR0b24sOmhvc3QoW3F1aWV0XVtpbnZhbGlkXSkgI3Jvb3Q6aG92ZXIgI2lucHV0KyNidXR0b257Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3ItZXJyb3ItaG92ZXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXJlZC02MDApKX06aG9zdChbaW52YWxpZF0pICNyb290OmhvdmVyICNsYWJlbCw6aG9zdChbcXVpZXRdW2ludmFsaWRdKSAjcm9vdDpob3ZlciAjbGFiZWx7Y29sb3I6dmFyKC0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1jb2xvci1lcnJvci1ob3Zlcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItcmVkLTYwMCkpfTpob3N0KFtpbnZhbGlkXSkgI3Jvb3Q6YWN0aXZlICNpbnB1dCsjYnV0dG9uLDpob3N0KFtxdWlldF1baW52YWxpZF0pICNyb290OmFjdGl2ZSAjaW5wdXQrI2J1dHRvbntib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1jb2xvci1lcnJvci1kb3duLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1yZWQtNzAwKSl9Omhvc3QoW2ludmFsaWRdKSAjcm9vdDphY3RpdmUgI2xhYmVsLDpob3N0KFtxdWlldF1baW52YWxpZF0pICNyb290OmFjdGl2ZSAjbGFiZWx7Y29sb3I6dmFyKC0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1jb2xvci1lcnJvci1kb3duLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1yZWQtNzAwKSl9Omhvc3QoW2ludmFsaWRdKSAjcm9vdCAjYnV0dG9uLDpob3N0KFtpbnZhbGlkXVtjaGVja2VkXSkgI3Jvb3QgI2lucHV0KyNidXR0b24sOmhvc3QoW3F1aWV0XVtpbnZhbGlkXSkgI3Jvb3QgI2J1dHRvbiw6aG9zdChbcXVpZXRdW2ludmFsaWRdW2NoZWNrZWRdKSAjcm9vdCAjaW5wdXQrI2J1dHRvbntib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1jb2xvci1lcnJvcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItcmVkLTUwMCkpfTpob3N0KFtpbnZhbGlkXSkgI3Jvb3QgI2xhYmVsLDpob3N0KFtxdWlldF1baW52YWxpZF0pICNyb290ICNsYWJlbHtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtYm9yZGVyLWNvbG9yLWVycm9yLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1yZWQtNTAwKSl9Omhvc3QoW2Rpc2FibGVkXSkgI2lucHV0KyNidXR0b257Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3ItZGlzYWJsZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNDAwKSkhaW1wb3J0YW50fTpob3N0KFtkaXNhYmxlZF0pICNpbnB1dH4jbGFiZWx7Y29sb3I6dmFyKC0tc3BlY3RydW0tcmFkaW8tdGV4dC1jb2xvci1kaXNhYmxlZCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS01MDApKSFpbXBvcnRhbnR9I2lucHV0OmZvY3VzKyNidXR0b24sI3Jvb3Q6aG92ZXIgI2lucHV0OmZvY3VzKyNidXR0b24sOmhvc3QoW3F1aWV0XSkgI2lucHV0OmZvY3VzKyNidXR0b24sOmhvc3QoW3F1aWV0XSkgI3Jvb3Q6aG92ZXIgI2lucHV0OmZvY3VzKyNidXR0b257Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3Ita2V5LWZvY3VzLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ibHVlLTQwMCkpO2JveC1zaGFkb3c6MCAwIDAgMXB4IHZhcigtLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3Ita2V5LWZvY3VzLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ibHVlLTQwMCkpfSNpbnB1dDpmb2N1c34jbGFiZWwsI3Jvb3Q6aG92ZXIgI2lucHV0OmZvY3VzfiNsYWJlbCw6aG9zdChbcXVpZXRdKSAjaW5wdXQ6Zm9jdXN+I2xhYmVsLDpob3N0KFtxdWlldF0pICNyb290OmhvdmVyICNpbnB1dDpmb2N1c34jbGFiZWx7Y29sb3I6dmFyKC0tc3BlY3RydW0tcmFkaW8tdGV4dC1jb2xvci1rZXktZm9jdXMsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWJsdWUtNjAwKSl9Omhvc3QoW2ludmFsaWRdW2NoZWNrZWRdKSAjcm9vdCAjaW5wdXQ6Zm9jdXMrI2J1dHRvbiw6aG9zdChbcXVpZXRdW2ludmFsaWRdW2NoZWNrZWRdKSAjcm9vdCAjaW5wdXQ6Zm9jdXMrI2J1dHRvbntib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1jb2xvci1rZXktZm9jdXMsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWJsdWUtNDAwKSk7Ym94LXNoYWRvdzowIDAgMCAxcHggdmFyKC0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1jb2xvci1rZXktZm9jdXMsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWJsdWUtNDAwKSl9XG5gO1xuZXhwb3J0IGRlZmF1bHQgc3R5bGVzOyIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQge1xuICAgIGh0bWwsXG4gICAgcHJvcGVydHksXG4gICAgcXVlcnksXG4gICAgQ1NTUmVzdWx0QXJyYXksXG4gICAgVGVtcGxhdGVSZXN1bHQsXG59IGZyb20gJ2xpdC1lbGVtZW50JztcblxuaW1wb3J0IHJhZGlvU3R5bGVzIGZyb20gJy4vcmFkaW8uY3NzJztcbmltcG9ydCB7IEZvY3VzYWJsZSB9IGZyb20gJy4uL3NoYXJlZC9mb2N1c2FibGUnO1xuaW1wb3J0IHsgc3RyaWN0Q3VzdG9tRXZlbnQgfSBmcm9tICcuLi9ldmVudHMnO1xuXG5leHBvcnQgaW50ZXJmYWNlIFJhZGlvQ2hhbmdlRGV0YWlsIHtcbiAgICB2YWx1ZTogc3RyaW5nO1xufVxuXG4vKipcbiAqIFJhZGlvIGJ1dHRvbiBjb21wb25lbnRcbiAqXG4gKiBAYXR0ciBxdWlldCAtIHVzZXMgdGhlIHF1aWV0IHN0eWxlXG4gKiBAYXR0ciBsYWJlbC1iZWxvdyAtIG1vdmVzIHRoZSBsYWJlbCBiZWxvdyB0aGUgcmFkaW8gYnV0dG9uXG4gKiBAYXR0ciBpbnZhbGlkIC0gdXNlcyB0aGUgaW52YWxpZCBzdHlsZVxuICogQGF0dHIgZGlzYWJsZWQgLSB1c2VzIHRoZSBkaXNhYmxlZCBzdHlsZVxuICogQGF0dHIgY2hlY2tlZCAtIHJlcHJlc2VudHMgd2hlbiB0aGUgaW5wdXQgaXMgY2hlY2tlZFxuICovXG5leHBvcnQgY2xhc3MgUmFkaW8gZXh0ZW5kcyBGb2N1c2FibGUge1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IHN0eWxlcygpOiBDU1NSZXN1bHRBcnJheSB7XG4gICAgICAgIHJldHVybiBbcmFkaW9TdHlsZXNdO1xuICAgIH1cbiAgICBAcHJvcGVydHkoeyB0eXBlOiBTdHJpbmcsIHJlZmxlY3Q6IHRydWUgfSlcbiAgICBwdWJsaWMgbmFtZSA9ICcnO1xuXG4gICAgQHByb3BlcnR5KHsgdHlwZTogU3RyaW5nLCByZWZsZWN0OiB0cnVlIH0pXG4gICAgcHVibGljIHZhbHVlID0gJyc7XG5cbiAgICBAcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiB0cnVlIH0pXG4gICAgcHVibGljIGNoZWNrZWQ6IGJvb2xlYW4gPSBmYWxzZTtcblxuICAgIEBxdWVyeSgnI2lucHV0JylcbiAgICBwcml2YXRlIGlucHV0RWxlbWVudCE6IEhUTUxJbnB1dEVsZW1lbnQ7XG5cbiAgICBwdWJsaWMgZ2V0IGZvY3VzRWxlbWVudCgpOiBIVE1MRWxlbWVudCB7XG4gICAgICAgIHJldHVybiB0aGlzLmlucHV0RWxlbWVudDtcbiAgICB9XG5cbiAgICBwdWJsaWMgaGFuZGxlQ2hhbmdlKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmNoZWNrZWQgPSB0aGlzLmlucHV0RWxlbWVudC5jaGVja2VkO1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoXG4gICAgICAgICAgICBzdHJpY3RDdXN0b21FdmVudCgnc3AtcmFkaW86Y2hhbmdlJywge1xuICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgY29tcG9zZWQ6IHRydWUsXG4gICAgICAgICAgICAgICAgZGV0YWlsOiB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiB0aGlzLnZhbHVlLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCByZW5kZXIoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgPGxhYmVsIGlkPVwicm9vdFwiPlxuICAgICAgICAgICAgPGlucHV0XG4gICAgICAgICAgICAgICAgaWQ9XCJpbnB1dFwiXG4gICAgICAgICAgICAgICAgdHlwZT1cInJhZGlvXCJcbiAgICAgICAgICAgICAgICBuYW1lPSR7dGhpcy5uYW1lfVxuICAgICAgICAgICAgICAgIHZhbHVlPSR7dGhpcy52YWx1ZX1cbiAgICAgICAgICAgICAgICAuY2hlY2tlZD0ke3RoaXMuY2hlY2tlZH1cbiAgICAgICAgICAgICAgICBAY2hhbmdlPSR7dGhpcy5oYW5kbGVDaGFuZ2V9XG4gICAgICAgICAgICAvPlxuICAgICAgICAgICAgPHNwYW4gaWQ9XCJidXR0b25cIj48L3NwYW4+XG4gICAgICAgICAgICA8c3BhbiBpZD1cImxhYmVsXCI+PHNsb3Q+PC9zbG90Pjwvc3Bhbj5cbiAgICAgICAgPC9kaXY+XG4gICAgICAgIGA7XG4gICAgfVxufVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgaW50ZXJmYWNlIEdsb2JhbEV2ZW50SGFuZGxlcnNFdmVudE1hcCB7XG4gICAgICAgICdzcC1yYWRpbzpjaGFuZ2UnOiBDdXN0b21FdmVudDxSYWRpb0NoYW5nZURldGFpbD47XG4gICAgfVxufVxuIiwiLypcbkNvcHlyaWdodCAyMDE4IEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbm9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG50aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbk9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5leHBvcnQgKiBmcm9tICcuL3JhZGlvJztcblxuaW1wb3J0IHsgUmFkaW8gfSBmcm9tICcuL3JhZGlvJztcblxuaWYgKCFjdXN0b21FbGVtZW50cy5nZXQoJ3NwLXJhZGlvJykpIHtcbiAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ3NwLXJhZGlvJywgUmFkaW8pO1xufVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgaW50ZXJmYWNlIEhUTUxFbGVtZW50VGFnTmFtZU1hcCB7XG4gICAgICAgICdzcC1yYWRpbyc6IFJhZGlvO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmNvbnN0IHN0eWxlcyA9IGNzc2Bcbjpob3N0e2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpyb3d9Omhvc3QoW2NvbHVtbl0pe2ZsZXgtZGlyZWN0aW9uOmNvbHVtbn1cbmA7XG5leHBvcnQgZGVmYXVsdCBzdHlsZXM7IiwiLypcbkNvcHlyaWdodCAyMDE4IEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbm9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG50aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbk9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCB7XG4gICAgaHRtbCxcbiAgICBMaXRFbGVtZW50LFxuICAgIHByb3BlcnR5LFxuICAgIENTU1Jlc3VsdEFycmF5LFxuICAgIFRlbXBsYXRlUmVzdWx0LFxufSBmcm9tICdsaXQtZWxlbWVudCc7XG5cbmltcG9ydCByYWRpb0dyb3VwU3R5bGVzIGZyb20gJy4vcmFkaW8tZ3JvdXAuY3NzJztcbmltcG9ydCB7IFJhZGlvQ2hhbmdlRGV0YWlsIH0gZnJvbSAnLi4vcmFkaW8vcmFkaW8nO1xuaW1wb3J0IHsgUmFkaW8gfSBmcm9tICcuLi9yYWRpby9yYWRpbyc7XG5cbi8qKlxuICogUmFkaW8gZ3JvdXAgY29tcG9uZW50XG4gKlxuICogQGF0dHIgY29sdW1uIC0gYXJyYW5nZXMgcmFkaW8gYnV0dG9ucyB2ZXJ0aWNhbGx5XG4gKi9cbmV4cG9ydCBjbGFzcyBSYWRpb0dyb3VwIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gICAgcHVibGljIHN0YXRpYyBnZXQgc3R5bGVzKCk6IENTU1Jlc3VsdEFycmF5IHtcbiAgICAgICAgcmV0dXJuIFtyYWRpb0dyb3VwU3R5bGVzXTtcbiAgICB9XG5cbiAgICBAcHJvcGVydHkoeyB0eXBlOiBTdHJpbmcsIHJlZmxlY3Q6IHRydWUgfSlcbiAgICBwdWJsaWMgbmFtZSA9ICcnO1xuXG4gICAgcHJpdmF0ZSBfc2VsZWN0ZWQgPSAnJztcblxuICAgIEBwcm9wZXJ0eSh7IHJlZmxlY3Q6IHRydWUgfSlcbiAgICBwdWJsaWMgZ2V0IHNlbGVjdGVkKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiB0aGlzLl9zZWxlY3RlZDtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IHNlbGVjdGVkKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgY29uc3QgcmFkaW8gPSB2YWx1ZVxuICAgICAgICAgICAgPyAodGhpcy5xdWVyeVNlbGVjdG9yKGBzcC1yYWRpb1t2YWx1ZT0ke3ZhbHVlfV1gKSBhcyBSYWRpbylcbiAgICAgICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICAgIHRoaXMuZGVzZWxlY3RDaGVja2VkKCk7XG5cbiAgICAgICAgaWYgKHJhZGlvKSB7XG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RlZCA9IHZhbHVlO1xuICAgICAgICAgICAgcmFkaW8uY2hlY2tlZCA9IHRydWU7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBJZiBubyBtYXRjaGluZyByYWRpbywgc2VsZWN0ZWQgaXMgcmVzZXQgdG8gZW1wdHkgc3RyaW5nXG4gICAgICAgICAgICB0aGlzLl9zZWxlY3RlZCA9ICcnO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHJlbmRlcigpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgPHNsb3Q+PC9zbG90PlxuICAgICAgICBgO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBmaXJzdFVwZGF0ZWQoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGNoZWNrZWRSYWRpbyA9IHRoaXMucXVlcnlTZWxlY3Rvcignc3AtcmFkaW9bY2hlY2tlZF0nKSBhcyBSYWRpbztcbiAgICAgICAgY29uc3QgY2hlY2tlZFJhZGlvVmFsdWUgPSBjaGVja2VkUmFkaW8gPyBjaGVja2VkUmFkaW8udmFsdWUgOiAnJztcblxuICAgICAgICAvLyBJZiBzZWxlY3RlZCBhbHJlYWR5IGFzc2lnbmVkLCBkb24ndCBvdmVyd3JpdGVcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IHRoaXMuc2VsZWN0ZWQgfHwgY2hlY2tlZFJhZGlvVmFsdWU7XG5cbiAgICAgICAgdGhpcy5hZGRFdmVudExpc3RlbmVyKFxuICAgICAgICAgICAgJ3NwLXJhZGlvOmNoYW5nZScsXG4gICAgICAgICAgICAoZXY6IEN1c3RvbUV2ZW50PFJhZGlvQ2hhbmdlRGV0YWlsPikgPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBldi5kZXRhaWwudmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBkZXNlbGVjdENoZWNrZWQoKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IHByZXZpb3VzQ2hlY2tlZCA9IHRoaXMucXVlcnlTZWxlY3RvckFsbCgnc3AtcmFkaW9bY2hlY2tlZF0nKTtcblxuICAgICAgICBwcmV2aW91c0NoZWNrZWQuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmFkaW8gPSBlbGVtZW50IGFzIFJhZGlvO1xuICAgICAgICAgICAgcmFkaW8uY2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICB9KTtcbiAgICB9XG59XG4iLCIvKlxuQ29weXJpZ2h0IDIwMTkgQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbmV4cG9ydCAqIGZyb20gJy4vcmFkaW8tZ3JvdXAnO1xuXG5pbXBvcnQgeyBSYWRpb0dyb3VwIH0gZnJvbSAnLi9yYWRpby1ncm91cCc7XG5cbmlmICghY3VzdG9tRWxlbWVudHMuZ2V0KCdzcC1yYWRpby1ncm91cCcpKSB7XG4gICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdzcC1yYWRpby1ncm91cCcsIFJhZGlvR3JvdXApO1xufVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgaW50ZXJmYWNlIEhUTUxFbGVtZW50VGFnTmFtZU1hcCB7XG4gICAgICAgICdzcC1yYWRpby1ncm91cCc6IFJhZGlvR3JvdXA7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuY29uc3Qgc3R5bGVzID0gY3NzYFxuOmhvc3R7ei1pbmRleDoxO2Rpc3BsYXk6YmxvY2s7bWluLXdpZHRoOnZhcigtLXNwZWN0cnVtLXNsaWRlci1taW4td2lkdGgsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTE2MDApKTstd2Via2l0LXVzZXItc2VsZWN0Om5vbmU7LW1vei11c2VyLXNlbGVjdDpub25lO3VzZXItc2VsZWN0Om5vbmV9I2NvbnRyb2xzLDpob3N0e3Bvc2l0aW9uOnJlbGF0aXZlO21pbi1oZWlnaHQ6dmFyKC0tc3BlY3RydW0tc2xpZGVyLWhlaWdodCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNDAwKSl9I2NvbnRyb2xze2Rpc3BsYXk6aW5saW5lLWJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDt6LWluZGV4OmF1dG87d2lkdGg6Y2FsYygxMDAlIC0gdmFyKC0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS13aWR0aCxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0yMDApKS8yKjIpO21hcmdpbi1sZWZ0OmNhbGModmFyKC0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS13aWR0aCxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0yMDApKS8yKTt2ZXJ0aWNhbC1hbGlnbjp0b3B9I2J1ZmZlciwjZmlsbCwjcmFtcCwudHJhY2t7aGVpZ2h0OnZhcigtLXNwZWN0cnVtLXNsaWRlci10cmFjay1oZWlnaHQsMnB4KTtib3gtc2l6aW5nOmJvcmRlci1ib3g7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDoxO3RvcDpjYWxjKHZhcigtLXNwZWN0cnVtLXNsaWRlci1oZWlnaHQsIHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS00MDApKS8yKTtsZWZ0OjA7cmlnaHQ6YXV0bzttYXJnaW4tdG9wOmNhbGModmFyKC0tc3BlY3RydW0tc2xpZGVyLWZpbGwtdHJhY2staGVpZ2h0LCAycHgpLy0yKTtwb2ludGVyLWV2ZW50czpub25lfSNidWZmZXIsI2ZpbGwsLnRyYWNre3BhZGRpbmc6MCB2YXIoLS1zcGVjdHJ1bS1zbGlkZXItaGFuZGxlLWdhcCw0cHgpIDAgMDttYXJnaW4tbGVmdDpjYWxjKHZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtd2lkdGgsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMjAwKSkvMiotMSl9I2J1ZmZlcjpiZWZvcmUsI2ZpbGw6YmVmb3JlLC50cmFjazpiZWZvcmV7Y29udGVudDpcIlwiO2Rpc3BsYXk6YmxvY2s7aGVpZ2h0OjEwMCU7Ym9yZGVyLXJhZGl1czp2YXIoLS1zcGVjdHJ1bS1zbGlkZXItdHJhY2stYm9yZGVyLXJhZGl1cywxcHgpfSNmaWxse21hcmdpbi1sZWZ0OjA7cGFkZGluZzowIDAgMCBjYWxjKHZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtd2lkdGgsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMjAwKSkvMiArIHZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtZ2FwLCA0cHgpKX0uc3BlY3RydW0tU2xpZGVyLWZpbGwtLXJpZ2h0e3BhZGRpbmc6MCBjYWxjKHZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtd2lkdGgsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMjAwKSkvMiArIHZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtZ2FwLCA0cHgpKSAwIDB9I2J1ZmZlcntwYWRkaW5nOjAgdmFyKC0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1nYXAsNHB4KSAwIDA7ei1pbmRleDoyfSNidWZmZXJ+I2J1ZmZlciwudHJhY2t+LnRyYWNre2xlZnQ6YXV0bztyaWdodDowO3BhZGRpbmc6MCAwIDAgdmFyKC0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1nYXAsNHB4KTttYXJnaW4tbGVmdDowO21hcmdpbi1yaWdodDpjYWxjKHZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtd2lkdGgsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMjAwKSkvMiotMSl9I2J1ZmZlcn4jYnVmZmVye21hcmdpbi1yaWdodDowO3BhZGRpbmc6MCAwIDAgY2FsYyh2YXIoLS1zcGVjdHJ1bS1zbGlkZXItaGFuZGxlLWdhcCwgNHB4KSArIHZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtd2lkdGgsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMjAwKSkvMil9I2J1ZmZlcn4jYnVmZmVyOmFmdGVye2Rpc3BsYXk6bm9uZX06aG9zdChbdmFyaWFudD1yYW5nZV0pICN2YWx1ZXstd2Via2l0LXVzZXItc2VsZWN0OnRleHQ7LW1vei11c2VyLXNlbGVjdDp0ZXh0O3VzZXItc2VsZWN0OnRleHR9Omhvc3QoW3ZhcmlhbnQ9cmFuZ2VdKSAudHJhY2s6Zmlyc3Qtb2YtdHlwZXtwYWRkaW5nOjAgdmFyKC0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1nYXAsNHB4KSAwIDA7bGVmdDowO3JpZ2h0OmF1dG87bWFyZ2luLWxlZnQ6Y2FsYyh2YXIoLS1zcGVjdHJ1bS1zbGlkZXItaGFuZGxlLXdpZHRoLFxudmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTIwMCkpLzIqLTEpfTpob3N0KFt2YXJpYW50PXJhbmdlXSkgLnRyYWNre3BhZGRpbmc6MCBjYWxjKHZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtZ2FwLCA0cHgpICsgdmFyKC0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS13aWR0aCxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0yMDApKS8yKSAwIGNhbGModmFyKC0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1nYXAsIDRweCkgKyB2YXIoLS1zcGVjdHJ1bS1zbGlkZXItaGFuZGxlLXdpZHRoLFxudmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTIwMCkpLzIpO2xlZnQ6YXV0bztyaWdodDphdXRvO21hcmdpbjowfTpob3N0KFt2YXJpYW50PXJhbmdlXSkgLnRyYWNrOmxhc3Qtb2YtdHlwZXtwYWRkaW5nOjAgMCAwIHZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtZ2FwLDRweCk7bGVmdDphdXRvO3JpZ2h0OjA7bWFyZ2luLXJpZ2h0OmNhbGModmFyKC0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS13aWR0aCxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0yMDApKS8yKi0xKX0jcmFtcHttYXJnaW4tdG9wOjA7aGVpZ2h0OnZhcigtLXNwZWN0cnVtLXNsaWRlci1yYW1wLXRyYWNrLWhlaWdodCwxNnB4KTtwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0OmNhbGModmFyKC0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS13aWR0aCxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0yMDApKS8yKi0xKTtyaWdodDpjYWxjKHZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtd2lkdGgsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMjAwKSkvMiotMSk7dG9wOmNhbGModmFyKC0tc3BlY3RydW0tc2xpZGVyLXJhbXAtdHJhY2staGVpZ2h0LCAxNnB4KS8yKX0jcmFtcCBzdmd7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX0jaGFuZGxle3Bvc2l0aW9uOmFic29sdXRlO2xlZnQ6MDt0b3A6Y2FsYyh2YXIoLS1zcGVjdHJ1bS1zbGlkZXItaGVpZ2h0LCB2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNDAwKSkvMik7ei1pbmRleDoyO2Rpc3BsYXk6aW5saW5lLWJsb2NrO2JveC1zaXppbmc6Ym9yZGVyLWJveDt3aWR0aDp2YXIoLS1zcGVjdHJ1bS1zbGlkZXItaGFuZGxlLXdpZHRoLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0yMDApKTtoZWlnaHQ6dmFyKC0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1oZWlnaHQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTIwMCkpO21hcmdpbjpjYWxjKHZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtd2lkdGgsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMjAwKSkvLTIpIDAgMCBjYWxjKHZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtd2lkdGgsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMjAwKSkvLTIpO2JvcmRlci1yYWRpdXM6dmFyKC0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1ib3JkZXItcmFkaXVzLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0xMDApKTt0cmFuc2l0aW9uOmJvcmRlci13aWR0aCB2YXIoLS1zcGVjdHJ1bS1zbGlkZXItYW5pbWF0aW9uLWR1cmF0aW9uLC4xM3MpIGVhc2UtaW4tb3V0O291dGxpbmU6bm9uZTtjdXJzb3I6cG9pbnRlcjtjdXJzb3I6LXdlYmtpdC1ncmFiO2N1cnNvcjpncmFiO2JvcmRlcjp2YXIoLS1zcGVjdHJ1bS1zbGlkZXItaGFuZGxlLWJvcmRlci1zaXplLDJweCkgc29saWQgdmFyKC0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1ib3JkZXItY29sb3IsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNzAwKSk7YmFja2dyb3VuZDp2YXIoLS1zcGVjdHJ1bS1hbGlhcy1iYWNrZ3JvdW5kLWNvbG9yLWRlZmF1bHQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMTAwKSl9I2hhbmRsZTphY3RpdmUsOmhvc3QoW2RyYWdnaW5nXSkgI2hhbmRsZSw6aG9zdChbaGFuZGxlLWhpZ2hsaWdodF0pICNoYW5kbGV7Ym9yZGVyLXdpZHRoOnZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtYm9yZGVyLXNpemUtZG93bix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNzUpKTtjdXJzb3I6bnMtcmVzaXplO2N1cnNvcjotd2Via2l0LWdyYWJiaW5nO2N1cnNvcjpncmFiYmluZ30jaGFuZGxlLmlzLXRvcGhhbmRsZSwjaGFuZGxlOmFjdGl2ZSw6aG9zdChbZHJhZ2dpbmddKSAjaGFuZGxlLDpob3N0KFtoYW5kbGUtaGlnaGxpZ2h0XSkgI2hhbmRsZXt6LWluZGV4OjN9I2lucHV0e21hcmdpbjowO3dpZHRoOnZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtd2lkdGgsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTIwMCkpO2hlaWdodDp2YXIoLS1zcGVjdHJ1bS1zbGlkZXItaGFuZGxlLWhlaWdodCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMjAwKSk7cGFkZGluZzowO3Bvc2l0aW9uOmFic29sdXRlO3RvcDpjYWxjKHZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtd2lkdGgsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMjAwKSkvLTIvNCk7bGVmdDpjYWxjKHZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtd2lkdGgsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMjAwKSkvLTIvNCk7b3ZlcmZsb3c6aGlkZGVuO29wYWNpdHk6LjAwMDAwMTtjdXJzb3I6ZGVmYXVsdDstd2Via2l0LWFwcGVhcmFuY2U6bm9uZTtib3JkZXI6MDtwb2ludGVyLWV2ZW50czpub25lO2JhY2tncm91bmQ6dHJhbnNwYXJlbnR9I2lucHV0OmZvY3Vze291dGxpbmU6bm9uZX0jbGFiZWxDb250YWluZXJ7ZGlzcGxheTpmbGV4O3Bvc2l0aW9uOnJlbGF0aXZlO3dpZHRoOmF1dG87cGFkZGluZy10b3A6dmFyKC0tc3BlY3RydW0tZmllbGRsYWJlbC1wYWRkaW5nLXRvcCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNTApKTtmb250LXNpemU6dmFyKC0tc3BlY3RydW0tbGFiZWwtdGV4dC1zaXplLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0xNTApKTtsaW5lLWhlaWdodDp2YXIoLS1zcGVjdHJ1bS1sYWJlbC10ZXh0LWxpbmUtaGVpZ2h0LDEuMyk7Y29sb3I6dmFyKC0tc3BlY3RydW0tbGFiZWwtdGV4dC1jb2xvcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS03MDApKX0jbGFiZWx7cGFkZGluZy1sZWZ0OjA7ZmxleC1ncm93OjF9I3ZhbHVle2ZsZXgtZ3JvdzowO3BhZGRpbmctcmlnaHQ6MDtjdXJzb3I6ZGVmYXVsdDttYXJnaW4tbGVmdDp2YXIoLS1zcGVjdHJ1bS1zbGlkZXItbGFiZWwtZ2FwLXgsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTIwMCkpfS5zcGVjdHJ1bS1TbGlkZXItdGlja3N7ZGlzcGxheTpmbGV4O2p1c3RpZnktY29udGVudDpzcGFjZS1iZXR3ZWVuO3otaW5kZXg6MDttYXJnaW46MCBjYWxjKHZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtd2lkdGgsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMjAwKSkvMiotMSk7bWFyZ2luLXRvcDpjYWxjKHZhcigtLXNwZWN0cnVtLXNsaWRlci10aWNrLW1hcmstaGVpZ2h0LCAxMHB4KSArIHZhcigtLXNwZWN0cnVtLXNsaWRlci10cmFjay1oZWlnaHQsIDJweCkvMil9I3RpY2t7cG9zaXRpb246cmVsYXRpdmV9I3RpY2ssI3RpY2s6YWZ0ZXJ7d2lkdGg6dmFyKC0tc3BlY3RydW0tc2xpZGVyLXRpY2stbWFyay13aWR0aCwycHgpfSN0aWNrOmFmdGVye2Rpc3BsYXk6YmxvY2s7cG9zaXRpb246YWJzb2x1dGU7dG9wOjA7bGVmdDpjYWxjKDUwJSAtIHZhcigtLXNwZWN0cnVtLXNsaWRlci10aWNrLW1hcmstd2lkdGgsIDJweCkvMik7Y29udGVudDpcIlwiO2hlaWdodDp2YXIoLS1zcGVjdHJ1bS1zbGlkZXItdGljay1tYXJrLWhlaWdodCwxMHB4KTtib3JkZXItcmFkaXVzOnZhcigtLXNwZWN0cnVtLXNsaWRlci10aWNrLW1hcmstYm9yZGVyLXJhZGl1cywxcHgpO2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tc2xpZGVyLXRpY2stbWFyay1jb2xvcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS0zMDApKX0jdGljayAjdGlja0xhYmVse2Rpc3BsYXk6ZmxleDthbGlnbi1pdGVtczpjZW50ZXI7anVzdGlmeS1jb250ZW50OmNlbnRlcjttYXJnaW46dmFyKC0tc3BlY3RydW0tc2xpZGVyLWxhYmVsLWdhcC14LHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0yMDApKSBjYWxjKHZhcigtLXNwZWN0cnVtLXNsaWRlci1sYWJlbC1nYXAteCxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0yMDApKSotMSkgMCBjYWxjKHZhcigtLXNwZWN0cnVtLXNsaWRlci1sYWJlbC1nYXAteCxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0yMDApKSotMSk7Zm9udC1zaXplOnZhcigtLXNwZWN0cnVtLWxhYmVsLXRleHQtc2l6ZSx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTUwKSk7bGluZS1oZWlnaHQ6dmFyKC0tc3BlY3RydW0tbGFiZWwtdGV4dC1saW5lLWhlaWdodCwxLjMpfSN0aWNrOmZpcnN0LW9mLXR5cGUgI3RpY2tMYWJlbCwjdGljazpsYXN0LW9mLXR5cGUgI3RpY2tMYWJlbHtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO21hcmdpbjp2YXIoLS1zcGVjdHJ1bS1zbGlkZXItbGFiZWwtZ2FwLXgsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTIwMCkpIDAgMCAwfSN0aWNrOmZpcnN0LW9mLXR5cGUgI3RpY2tMYWJlbHtsZWZ0OjB9I3RpY2s6bGFzdC1vZi10eXBlICN0aWNrTGFiZWx7cmlnaHQ6MH06aG9zdChbdmFyaWFudD1jb2xvcl0pICNsYWJlbENvbnRhaW5lciw6aG9zdChbdmFyaWFudD1jb2xvcl0pIC5zcGVjdHJ1bS1EaWFsLWxhYmVsQ29udGFpbmVye3BhZGRpbmctYm90dG9tOnZhcigtLXNwZWN0cnVtLWZpZWxkbGFiZWwtcGFkZGluZy1ib3R0b20sdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTY1KSl9Omhvc3QoW3ZhcmlhbnQ9Y29sb3JdKSAjY29udHJvbHMsOmhvc3QoW3ZhcmlhbnQ9Y29sb3JdKSAjY29udHJvbHM6YmVmb3JlLDpob3N0KFt2YXJpYW50PWNvbG9yXSkgLnNwZWN0cnVtLURpYWwtY29udHJvbHMsOmhvc3QoW3ZhcmlhbnQ9Y29sb3JdKSAuc3BlY3RydW0tRGlhbC1jb250cm9sczpiZWZvcmUsOmhvc3QoW3ZhcmlhbnQ9Y29sb3JdKSAudHJhY2t7bWluLWhlaWdodDphdXRvO2hlaWdodDp2YXIoLS1zcGVjdHJ1bS1zbGlkZXItY29sb3ItdHJhY2staGVpZ2h0LDI0cHgpO21hcmdpbi1sZWZ0OjA7d2lkdGg6MTAwJX06aG9zdChbdmFyaWFudD1jb2xvcl0pICNjb250cm9sczpiZWZvcmUsOmhvc3QoW3ZhcmlhbnQ9Y29sb3JdKSAuc3BlY3RydW0tRGlhbC1jb250cm9sczpiZWZvcmV7ZGlzcGxheTpibG9jaztjb250ZW50OlwiXCJ9Omhvc3QoW3ZhcmlhbnQ9Y29sb3JdKSAjY29udHJvbHM6YmVmb3JlLDpob3N0KFt2YXJpYW50PWNvbG9yXSkgLnNwZWN0cnVtLURpYWwtY29udHJvbHM6YmVmb3JlLDpob3N0KFt2YXJpYW50PWNvbG9yXSkgLnRyYWNre3RvcDowO3BhZGRpbmc6MDttYXJnaW4tdG9wOjA7bWFyZ2luLXJpZ2h0OjA7Ym9yZGVyLXJhZGl1czp2YXIoLS1zcGVjdHJ1bS1hbGlhcy1ib3JkZXItcmFkaXVzLXJlZ3VsYXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTUwKSl9Omhvc3QoW3ZhcmlhbnQ9Y29sb3JdKSAjaGFuZGxlLDpob3N0KFt2YXJpYW50PWNvbG9yXSkgLnNwZWN0cnVtLURpYWwtaGFuZGxle3RvcDo1MCV9Omhvc3QoW2Rpc2FibGVkXSl7Y3Vyc29yOmRlZmF1bHR9Omhvc3QoW2Rpc2FibGVkXSkgI2hhbmRsZSw6aG9zdChbZGlzYWJsZWRdKSAuc3BlY3RydW0tRGlhbC1oYW5kbGV7Y3Vyc29yOmRlZmF1bHQ7cG9pbnRlci1ldmVudHM6bm9uZX06aG9zdChbZGlzYWJsZWRdW3ZhcmlhbnQ9Y29sb3JdKSAjaGFuZGxlOmFjdGl2ZSw6aG9zdChbZGlzYWJsZWRdW3ZhcmlhbnQ9Y29sb3JdKSAjaGFuZGxlOmhvdmVyLDpob3N0KFtkaXNhYmxlZF1bdmFyaWFudD1jb2xvcl0pIC5zcGVjdHJ1bS1EaWFsLWhhbmRsZTphY3RpdmUsOmhvc3QoW2Rpc2FibGVkXVt2YXJpYW50PWNvbG9yXSkgLnNwZWN0cnVtLURpYWwtaGFuZGxlOmhvdmVye2JvcmRlci13aWR0aDp2YXIoLS1zcGVjdHJ1bS1zbGlkZXItY29sb3ItaGFuZGxlLW91dHNldC1ib3JkZXItc2l6ZSwxcHgpfS50cmFjazpiZWZvcmV7YmFja2dyb3VuZDp2YXIoLS1zcGVjdHJ1bS1zbGlkZXItdHJhY2stY29sb3IsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMzAwKSl9I2ZpbGw6YmVmb3JlLDpob3N0KFt2YXJpYW50PWZpbGxlZF0pIC50cmFjazpmaXJzdC1jaGlsZDpiZWZvcmV7YmFja2dyb3VuZDp2YXIoLS1zcGVjdHJ1bS1zbGlkZXItZmlsbC10cmFjay1jb2xvcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS03MDApKX0jYnVmZmVyOmFmdGVyLCNidWZmZXI6YmVmb3Jle2JhY2tncm91bmQ6dmFyKC0tc3BlY3RydW0tc2xpZGVyLXBsYXllci10cmFjay1idWZmZXItY29sb3IsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNTAwKSl9I3JhbXAgcGF0aHtmaWxsOnZhcigtLXNwZWN0cnVtLXNsaWRlci10cmFjay1jb2xvcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS0zMDApKX0jaGFuZGxlOmhvdmVye2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1zbGlkZXItaGFuZGxlLWJvcmRlci1jb2xvci1ob3Zlcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS04MDApKX06aG9zdChbaGFuZGxlLWhpZ2hsaWdodF0pICNoYW5kbGV7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtYm9yZGVyLWNvbG9yLWtleS1mb2N1cyx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItYmx1ZS00MDApKTtiYWNrZ3JvdW5kOnZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1rZXktZm9jdXMsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWJsdWUtNDAwKSl9I2hhbmRsZTphY3RpdmUsOmhvc3QoW2RyYWdnaW5nXSkgI2hhbmRsZXtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1ib3JkZXItY29sb3ItZG93bix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS04MDApKX0uc3BlY3RydW0tU2xpZGVyLS1yYW1wICNoYW5kbGUsLnNwZWN0cnVtLVNsaWRlci0tcmFtcCAuc3BlY3RydW0tRGlhbC1oYW5kbGV7Ym94LXNoYWRvdzowIDAgMCA0cHggdmFyKC0tc3BlY3RydW0tYWxpYXMtYmFja2dyb3VuZC1jb2xvci1kZWZhdWx0LHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTEwMCkpfTpob3N0KFtkcmFnZ2luZ10pICNoYW5kbGV7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtYm9yZGVyLWNvbG9yLWRvd24sdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktODAwKSk7YmFja2dyb3VuZDp2YXIoLS1zcGVjdHJ1bS1zbGlkZXItaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZG93bix0cmFuc3BhcmVudCl9Omhvc3QoW3ZhcmlhbnQ9cmFuZ2VdKSAudHJhY2s6bm90KDpmaXJzdC1vZi10eXBlKTpub3QoOmxhc3Qtb2YtdHlwZSk6YmVmb3Jle2JhY2tncm91bmQ6dmFyKC0tc3BlY3RydW0tc2xpZGVyLWZpbGwtdHJhY2stY29sb3IsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNzAwKSl9Omhvc3QoW3ZhcmlhbnQ9Y29sb3JdKSAjY29udHJvbHM6YmVmb3JlLDpob3N0KFt2YXJpYW50PWNvbG9yXSkgLnNwZWN0cnVtLURpYWwtY29udHJvbHM6YmVmb3Jle2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXN0YXRpYy13aGl0ZSwjZmZmKTtiYWNrZ3JvdW5kLWltYWdlOmxpbmVhci1ncmFkaWVudCgtNDVkZWcsdHJhbnNwYXJlbnQgNzUuNSUsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXN0YXRpYy1ncmF5LTUwMCwjYmNiY2JjKSAwKSxsaW5lYXItZ3JhZGllbnQoNDVkZWcsdHJhbnNwYXJlbnQgNzUuNSUsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXN0YXRpYy1ncmF5LTUwMCwjYmNiY2JjKSAwKSxsaW5lYXItZ3JhZGllbnQoLTQ1ZGVnLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1zdGF0aWMtZ3JheS01MDAsI2JjYmNiYykgMjUuNSUsdHJhbnNwYXJlbnQgMCksbGluZWFyLWdyYWRpZW50KDQ1ZGVnLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1zdGF0aWMtZ3JheS01MDAsI2JjYmNiYykgMjUuNSUsdHJhbnNwYXJlbnQgMCk7YmFja2dyb3VuZC1zaXplOnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc3RhdGljLXNpemUtMjAwLDE2cHgpIHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc3RhdGljLXNpemUtMjAwLDE2cHgpO2JhY2tncm91bmQtcG9zaXRpb246MCAwLDAgdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zdGF0aWMtc2l6ZS0xMDAsOHB4KSx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1zaXplLTEwMCw4cHgpIGNhbGMoLTEqdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zdGF0aWMtc2l6ZS0xMDAsIDhweCkpLGNhbGMoLTEqdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zdGF0aWMtc2l6ZS0xMDAsIDhweCkpIDA7ei1pbmRleDowfTpob3N0KFt2YXJpYW50PWNvbG9yXSkgLnRyYWNre2JhY2tncm91bmQtY29sb3I6aW5pdGlhbDtiYWNrZ3JvdW5kLWltYWdlOmxpbmVhci1ncmFkaWVudCg5MGRlZyx2YXIoLS1zcGVjdHJ1bS1zbGlkZXItY29sb3ItdHJhY2stYmFja2dyb3VuZC1jb2xvci1ncmFkaWVudC1zdGFydCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItYmx1ZS00MDApKSx2YXIoLS1zcGVjdHJ1bS1zbGlkZXItY29sb3ItdHJhY2stYmFja2dyb3VuZC1jb2xvci1ncmFkaWVudC1lbmQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWJsdWUtNzAwKSkpO2JveC1zaGFkb3c6aW5zZXQgMCAwIDAgMXB4IHZhcigtLXNwZWN0cnVtLXNsaWRlci1jb2xvci10cmFjay1ib3JkZXItY29sb3IscmdiYSgwLDAsMCwuMDUpKX06aG9zdChbdmFyaWFudD1jb2xvcl0pIC50cmFjazpiZWZvcmV7ZGlzcGxheTpub25lfTpob3N0KFt2YXJpYW50PWNvbG9yXSkgI2hhbmRsZSw6aG9zdChbdmFyaWFudD1jb2xvcl0pIC5zcGVjdHJ1bS1EaWFsLWhhbmRsZXtib3gtc2hhZG93Omluc2V0IDAgMCAwIDFweCB2YXIoLS1zcGVjdHJ1bS1zbGlkZXItY29sb3ItaGFuZGxlLWluc2V0LWJvcmRlci1jb2xvcixyZ2JhKDAsMCwwLC4wNSkpLDAgMCAwIDFweCB2YXIoLS1zcGVjdHJ1bS1zbGlkZXItY29sb3ItaGFuZGxlLW91dHNldC1ib3JkZXItY29sb3IscmdiYSgwLDAsMCwuMDUpKTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tc2xpZGVyLWNvbG9yLWhhbmRsZS1ib3JkZXItY29sb3IsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNTApKTtiYWNrZ3JvdW5kOnZhcigtLXNwZWN0cnVtLXNsaWRlci1jb2xvci1oYW5kbGUtY29sb3IsdHJhbnNwYXJlbnQpfTpob3N0KFt2YXJpYW50PWNvbG9yXVtoYW5kbGUtaGlnaGxpZ2h0XSkgI2hhbmRsZXtib3gtc2hhZG93OjAgMCAwIDFweCB2YXIoLS1zcGVjdHJ1bS1zbGlkZXItY29sb3ItaGFuZGxlLW91dHNldC1ib3JkZXItY29sb3Ita2V5LWZvY3VzLHJnYmEoMCwwLDAsLjA1KSl9Omhvc3QoW2Rpc2FibGVkXSkgI2xhYmVsQ29udGFpbmVyLDpob3N0KFtkaXNhYmxlZF0pIC5zcGVjdHJ1bS1EaWFsLWxhYmVsQ29udGFpbmVye2NvbG9yOnZhcigtLXNwZWN0cnVtLWxhYmVsLXRleHQtY29sb3ItZGlzYWJsZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNTAwKSl9Omhvc3QoW2Rpc2FibGVkXSkgI2hhbmRsZSw6aG9zdChbZGlzYWJsZWRdKSAuc3BlY3RydW0tRGlhbC1oYW5kbGV7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtYm9yZGVyLWNvbG9yLWRpc2FibGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTQwMCkpO2JhY2tncm91bmQ6dmFyKC0tc3BlY3RydW0tYWxpYXMtYmFja2dyb3VuZC1jb2xvci1kZWZhdWx0LHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTEwMCkpfTpob3N0KFtkaXNhYmxlZF0pICNoYW5kbGU6YWN0aXZlLDpob3N0KFtkaXNhYmxlZF0pICNoYW5kbGU6aG92ZXIsOmhvc3QoW2Rpc2FibGVkXSkgLnNwZWN0cnVtLURpYWwtaGFuZGxlOmFjdGl2ZSw6aG9zdChbZGlzYWJsZWRdKSAuc3BlY3RydW0tRGlhbC1oYW5kbGU6aG92ZXJ7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtYm9yZGVyLWNvbG9yLWRpc2FibGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTQwMCkpO2JhY2tncm91bmQ6dmFyKC0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLHRyYW5zcGFyZW50KX06aG9zdChbZGlzYWJsZWRdKSAudHJhY2s6YmVmb3Jle2JhY2tncm91bmQ6dmFyKC0tc3BlY3RydW0tc2xpZGVyLXRyYWNrLWNvbG9yLWRpc2FibGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTMwMCkpfTpob3N0KFtkaXNhYmxlZF0pICNmaWxsOmJlZm9yZSw6aG9zdChbZGlzYWJsZWRdW3ZhcmlhbnQ9ZmlsbGVkXSkgLnRyYWNrOmZpcnN0LWNoaWxkOmJlZm9yZXtiYWNrZ3JvdW5kOnZhcigtLXNwZWN0cnVtLXNsaWRlci1maWxsLXRyYWNrLWNvbG9yLWRpc2FibGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTMwMCkpfTpob3N0KFtkaXNhYmxlZF0pICNidWZmZXI6YmVmb3Jle2JhY2tncm91bmQ6dmFyKC0tc3BlY3RydW0tc2xpZGVyLXBsYXllci10cmFjay1idWZmZXItY29sb3ItZGlzYWJsZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMzAwKSl9Omhvc3QoW2Rpc2FibGVkXSkgI3JhbXAgcGF0aHtmaWxsOnZhcigtLXNwZWN0cnVtLXNsaWRlci1yYW1wLXRyYWNrLWNvbG9yLWRpc2FibGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTIwMCkpfTpob3N0KFtkaXNhYmxlZF1bdmFyaWFudD1jb2xvcl0pIC50cmFja3tiYWNrZ3JvdW5kOnZhcigtLXNwZWN0cnVtLXNsaWRlci1jb2xvci10cmFjay1jb2xvci1kaXNhYmxlZCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS0yMDApKSFpbXBvcnRhbnQ7Ym94LXNoYWRvdzpub25lfTpob3N0KFtkaXNhYmxlZF1bdmFyaWFudD1jb2xvcl0pICNoYW5kbGUsOmhvc3QoW2Rpc2FibGVkXVt2YXJpYW50PWNvbG9yXSkgI2hhbmRsZTphY3RpdmUsOmhvc3QoW2Rpc2FibGVkXVt2YXJpYW50PWNvbG9yXSkgI2hhbmRsZTpob3Zlciw6aG9zdChbZGlzYWJsZWRdW3ZhcmlhbnQ9Y29sb3JdKSAuc3BlY3RydW0tRGlhbC1oYW5kbGUsOmhvc3QoW2Rpc2FibGVkXVt2YXJpYW50PWNvbG9yXSkgLnNwZWN0cnVtLURpYWwtaGFuZGxlOmFjdGl2ZSw6aG9zdChbZGlzYWJsZWRdW3ZhcmlhbnQ9Y29sb3JdKSAuc3BlY3RydW0tRGlhbC1oYW5kbGU6aG92ZXJ7YmFja2dyb3VuZDp2YXIoLS1zcGVjdHJ1bS1zbGlkZXItY29sb3ItaGFuZGxlLWNvbG9yLWRpc2FibGVkLHRyYW5zcGFyZW50KTtib3gtc2hhZG93Om5vbmU7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLXNsaWRlci1jb2xvci1oYW5kbGUtYm9yZGVyLWNvbG9yLWRpc2FibGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTQwMCkpfTpob3N0KFtkaXNhYmxlZF1bdmFyaWFudD1yYW5nZV0pIC50cmFjazpub3QoOmZpcnN0LW9mLXR5cGUpOm5vdCg6bGFzdC1vZi10eXBlKTpiZWZvcmV7YmFja2dyb3VuZDp2YXIoLS1zcGVjdHJ1bS1zbGlkZXItZmlsbC10cmFjay1jb2xvci1kaXNhYmxlZCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS0zMDApKX1cbmA7XG5leHBvcnQgZGVmYXVsdCBzdHlsZXM7IiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuY29uc3Qgc3R5bGVzID0gY3NzYFxuOmhvc3QoOmZvY3VzKXtvdXRsaW5lLXdpZHRoOjB9Omhvc3QoW2hhcy1hbHBoYV1bdmFyaWFudD1jb2xvcl0pIC50cmFja3tiYWNrZ3JvdW5kOmxpbmVhci1ncmFkaWVudCg5MGRlZyxyZ2JhKDM4LDEyOCwyMzUsLjUpLCMwOTVhYmEpfVxuYDtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlczsiLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHtcbiAgICBodG1sLFxuICAgIHByb3BlcnR5LFxuICAgIENTU1Jlc3VsdEFycmF5LFxuICAgIFRlbXBsYXRlUmVzdWx0LFxuICAgIHF1ZXJ5LFxufSBmcm9tICdsaXQtZWxlbWVudCc7XG5cbmltcG9ydCBzcGVjdHJ1bVNsaWRlclN0eWxlcyBmcm9tICcuL3NwZWN0cnVtLXNsaWRlci5jc3MnO1xuaW1wb3J0IHNsaWRlclN0eWxlcyBmcm9tICcuL3NsaWRlci5jc3MnO1xuaW1wb3J0IHsgc3RyaWN0Q3VzdG9tRXZlbnQgfSBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IHsgRm9jdXNhYmxlIH0gZnJvbSAnLi4vc2hhcmVkL2ZvY3VzYWJsZSc7XG5cbmV4cG9ydCB0eXBlIFNsaWRlckV2ZW50RGV0YWlsID0gbnVtYmVyO1xuXG5leHBvcnQgY2xhc3MgU2xpZGVyIGV4dGVuZHMgRm9jdXNhYmxlIHtcbiAgICBwdWJsaWMgc3RhdGljIGdldCBzdHlsZXMoKTogQ1NTUmVzdWx0QXJyYXkge1xuICAgICAgICByZXR1cm4gW3NsaWRlclN0eWxlcywgc3BlY3RydW1TbGlkZXJTdHlsZXNdO1xuICAgIH1cblxuICAgIEBwcm9wZXJ0eSgpXG4gICAgcHVibGljIHR5cGUgPSAnJztcblxuICAgIEBwcm9wZXJ0eSh7IHJlZmxlY3Q6IHRydWUgfSlcbiAgICBwdWJsaWMgZ2V0IHZhbHVlKCk6IG51bWJlciB7XG4gICAgICAgIHJldHVybiB0aGlzLl92YWx1ZTtcbiAgICB9XG5cbiAgICBwdWJsaWMgc2V0IHZhbHVlKHZhbHVlOiBudW1iZXIpIHtcbiAgICAgICAgY29uc3Qgb2xkVmFsdWUgPSB0aGlzLnZhbHVlO1xuXG4gICAgICAgIGlmICh2YWx1ZSA9PT0gb2xkVmFsdWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuX3ZhbHVlID0gdGhpcy5jbGFtcFZhbHVlKHZhbHVlKTtcbiAgICAgICAgdGhpcy5yZXF1ZXN0VXBkYXRlKCd2YWx1ZScsIG9sZFZhbHVlKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIF92YWx1ZSA9IDEwO1xuXG4gICAgQHByb3BlcnR5KHsgcmVmbGVjdDogdHJ1ZSB9KVxuICAgIHB1YmxpYyB2YXJpYW50ID0gJyc7XG5cbiAgICBAcHJvcGVydHkoKVxuICAgIHB1YmxpYyBsYWJlbCA9ICcnO1xuXG4gICAgQHByb3BlcnR5KHsgcmVmbGVjdDogdHJ1ZSwgYXR0cmlidXRlOiAnYXJpYS1sYWJlbCcgfSlcbiAgICBwdWJsaWMgYXJpYUxhYmVsPyA9IG51bGw7XG5cbiAgICBAcHJvcGVydHkoeyB0eXBlOiBOdW1iZXIgfSlcbiAgICBwdWJsaWMgbWF4ID0gMjA7XG5cbiAgICBAcHJvcGVydHkoeyB0eXBlOiBOdW1iZXIgfSlcbiAgICBwdWJsaWMgbWluID0gMDtcblxuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IE51bWJlciB9KVxuICAgIHB1YmxpYyBzdGVwID0gMTtcblxuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IEJvb2xlYW4sIHJlZmxlY3Q6IHRydWUgfSlcbiAgICBwdWJsaWMgZGlzYWJsZWQgPSBmYWxzZTtcblxuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IEJvb2xlYW4sIHJlZmxlY3Q6IHRydWUgfSlcbiAgICBwdWJsaWMgZHJhZ2dpbmcgPSBmYWxzZTtcblxuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IEJvb2xlYW4sIHJlZmxlY3Q6IHRydWUsIGF0dHJpYnV0ZTogJ2hhbmRsZS1oaWdobGlnaHQnIH0pXG4gICAgcHVibGljIGhhbmRsZUhpZ2hsaWdodCA9IGZhbHNlO1xuXG4gICAgQHF1ZXJ5KCcjaGFuZGxlJylcbiAgICBwcml2YXRlIGhhbmRsZSE6IEhUTUxEaXZFbGVtZW50O1xuXG4gICAgQHF1ZXJ5KCcjaW5wdXQnKVxuICAgIHByaXZhdGUgaW5wdXQhOiBIVE1MSW5wdXRFbGVtZW50O1xuXG4gICAgcHVibGljIGdldCBmb2N1c0VsZW1lbnQoKTogSFRNTEVsZW1lbnQge1xuICAgICAgICByZXR1cm4gdGhpcy5pbnB1dCA/IHRoaXMuaW5wdXQgOiB0aGlzO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCByZW5kZXIoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgICAgICR7dGhpcy5yZW5kZXJMYWJlbCgpfVxuICAgICAgICAgICAgJHt0aGlzLnZhcmlhbnQgPT09ICdjb2xvcidcbiAgICAgICAgICAgICAgICA/IHRoaXMucmVuZGVyQ29sb3JUcmFjaygpXG4gICAgICAgICAgICAgICAgOiB0aGlzLnJlbmRlclRyYWNrKCl9XG4gICAgICAgIGA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJMYWJlbCgpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgPGRpdiBpZD1cImxhYmVsQ29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPGxhYmVsIGlkPVwibGFiZWxcIiBmb3I9XCJpbnB1dFwiPiR7dGhpcy5sYWJlbH08L2xhYmVsPlxuICAgICAgICAgICAgICAgIDxkaXZcbiAgICAgICAgICAgICAgICAgICAgaWQ9XCJ2YWx1ZVwiXG4gICAgICAgICAgICAgICAgICAgIHJvbGU9XCJ0ZXh0Ym94XCJcbiAgICAgICAgICAgICAgICAgICAgYXJpYS1yZWFkb25seT1cInRydWVcIlxuICAgICAgICAgICAgICAgICAgICBhcmlhLWxhYmVsbGVkYnk9XCJsYWJlbFwiXG4gICAgICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICAgICAke3RoaXMudmFsdWV9XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckhhbmRsZSgpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGlkPVwiaGFuZGxlXCJcbiAgICAgICAgICAgICAgICBzdHlsZT0ke3RoaXMuaGFuZGxlU3R5bGV9XG4gICAgICAgICAgICAgICAgQHBvaW50ZXJtb3ZlPSR7dGhpcy5vblBvaW50ZXJNb3ZlfVxuICAgICAgICAgICAgICAgIEBwb2ludGVyZG93bj0ke3RoaXMub25Qb2ludGVyRG93bn1cbiAgICAgICAgICAgICAgICBAcG9pbnRlcnVwPSR7dGhpcy5vblBvaW50ZXJVcH1cbiAgICAgICAgICAgICAgICBAcG9pbnRlcmNhbmNlbD0ke3RoaXMub25Qb2ludGVyQ2FuY2VsfVxuICAgICAgICAgICAgICAgIHJvbGU9XCJwcmVzZW50YXRpb25cIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgICAgICAgICB0eXBlPVwicmFuZ2VcIlxuICAgICAgICAgICAgICAgICAgICBpZD1cImlucHV0XCJcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU9XCIke3RoaXMudmFsdWV9XCJcbiAgICAgICAgICAgICAgICAgICAgc3RlcD1cIiR7dGhpcy5zdGVwfVwiXG4gICAgICAgICAgICAgICAgICAgIG1pbj1cIiR7dGhpcy5taW59XCJcbiAgICAgICAgICAgICAgICAgICAgbWF4PVwiJHt0aGlzLm1heH1cIlxuICAgICAgICAgICAgICAgICAgICBhcmlhLWRpc2FibGVkPSR7dGhpcy5kaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgYXJpYS1sYWJlbD0ke3RoaXMuYXJpYUxhYmVsIHx8IHRoaXMubGFiZWx9XG4gICAgICAgICAgICAgICAgICAgIGFyaWEtdmFsdWVtaW49JHt0aGlzLm1pbn1cbiAgICAgICAgICAgICAgICAgICAgYXJpYS12YWx1ZW1heD0ke3RoaXMubWF4fVxuICAgICAgICAgICAgICAgICAgICBhcmlhLXZhbHVldGV4dD0ke3RoaXMudmFsdWV9XG4gICAgICAgICAgICAgICAgICAgIEBjaGFuZ2U9JHt0aGlzLm9uSW5wdXRDaGFuZ2V9XG4gICAgICAgICAgICAgICAgICAgIEBmb2N1cz0ke3RoaXMub25JbnB1dEZvY3VzfVxuICAgICAgICAgICAgICAgICAgICBAYmx1cj0ke3RoaXMub25JbnB1dEJsdXJ9XG4gICAgICAgICAgICAgICAgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICBgO1xuICAgIH1cblxuICAgIHByaXZhdGUgcmVuZGVyVHJhY2soKTogVGVtcGxhdGVSZXN1bHQge1xuICAgICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgICAgIDxkaXYgaWQ9XCJjb250cm9sc1wiIEBwb2ludGVyZG93bj0ke3RoaXMub25UcmFja1BvaW50ZXJEb3dufT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidHJhY2tcIiBpZD1cInRyYWNrLWxlZnRcIlxuICAgICAgICAgICAgICAgICAgICBzdHlsZT0ke3RoaXMudHJhY2tMZWZ0U3R5bGV9IFxuICAgICAgICAgICAgICAgICAgICByb2xlPVwicHJlc2VudGF0aW9uXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgJHt0aGlzLnJlbmRlckhhbmRsZSgpfVxuICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJ0cmFja1wiXG4gICAgICAgICAgICAgICAgICAgIGlkPVwidHJhY2stcmlnaHRcIlxuICAgICAgICAgICAgICAgICAgICBzdHlsZT0ke3RoaXMudHJhY2tSaWdodFN0eWxlfVxuICAgICAgICAgICAgICAgICAgICByb2xlPVwicHJlc2VudGF0aW9uXCJcbiAgICAgICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbmRlckNvbG9yVHJhY2soKTogVGVtcGxhdGVSZXN1bHQge1xuICAgICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgICAgIDxkaXYgaWQ9XCJjb250cm9sc1wiIEBwb2ludGVyZG93bj0ke3RoaXMub25UcmFja1BvaW50ZXJEb3dufT5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwidHJhY2tcIj48L2Rpdj5cbiAgICAgICAgICAgICAgICAke3RoaXMucmVuZGVySGFuZGxlKCl9XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uUG9pbnRlckRvd24oZXY6IFBvaW50ZXJFdmVudCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW5wdXQuZm9jdXMoKTtcbiAgICAgICAgdGhpcy5kcmFnZ2luZyA9IHRydWU7XG4gICAgICAgIHRoaXMuaGFuZGxlLnNldFBvaW50ZXJDYXB0dXJlKGV2LnBvaW50ZXJJZCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblBvaW50ZXJVcChldjogUG9pbnRlckV2ZW50KTogdm9pZCB7XG4gICAgICAgIC8vIFJldGFpbiBmb2N1cyBvbiBpbnB1dCBlbGVtZW50IGFmdGVyIG1vdXNlIHVwIHRvIGVuYWJsZSBrZXlib2FyZCBpbnRlcmFjdGlvbnNcbiAgICAgICAgdGhpcy5pbnB1dC5mb2N1cygpO1xuICAgICAgICB0aGlzLmhhbmRsZUhpZ2hsaWdodCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGFuZGxlLnJlbGVhc2VQb2ludGVyQ2FwdHVyZShldi5wb2ludGVySWQpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoQ2hhbmdlRXZlbnQoKTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uUG9pbnRlck1vdmUoZXY6IFBvaW50ZXJFdmVudCk6IHZvaWQge1xuICAgICAgICBpZiAoIXRoaXMuZHJhZ2dpbmcpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbHVlID0gdGhpcy5jYWxjdWxhdGVIYW5kbGVQb3NpdGlvbihldik7XG4gICAgICAgIHRoaXMuZGlzcGF0Y2hJbnB1dEV2ZW50KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblBvaW50ZXJDYW5jZWwoZXY6IFBvaW50ZXJFdmVudCk6IHZvaWQge1xuICAgICAgICB0aGlzLmRyYWdnaW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuaGFuZGxlLnJlbGVhc2VQb2ludGVyQ2FwdHVyZShldi5wb2ludGVySWQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE1vdmUgdGhlIGhhbmRsZSB1bmRlciB0aGUgY3Vyc29yIGFuZCBiZWdpbiBzdGFydCBhIHBvaW50ZXIgY2FwdHVyZSB3aGVuIHRoZSB0cmFja1xuICAgICAqIGlzIG1vdXNlZCBkb3duXG4gICAgICovXG4gICAgcHJpdmF0ZSBvblRyYWNrUG9pbnRlckRvd24oZXY6IFBvaW50ZXJFdmVudCk6IHZvaWQge1xuICAgICAgICBpZiAoZXYudGFyZ2V0ID09PSB0aGlzLmhhbmRsZSB8fCB0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kcmFnZ2luZyA9IHRydWU7XG4gICAgICAgIHRoaXMuaGFuZGxlLnNldFBvaW50ZXJDYXB0dXJlKGV2LnBvaW50ZXJJZCk7XG5cbiAgICAgICAgdGhpcy52YWx1ZSA9IHRoaXMuY2FsY3VsYXRlSGFuZGxlUG9zaXRpb24oZXYpO1xuICAgICAgICB0aGlzLmRpc3BhdGNoSW5wdXRFdmVudCgpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIEtlZXAgdGhlIHNsaWRlciB2YWx1ZSBwcm9wZXJ0eSBpbiBzeW5jIHdpdGggdGhlIGlucHV0IGVsZW1lbnQncyB2YWx1ZVxuICAgICAqL1xuICAgIHByaXZhdGUgb25JbnB1dENoYW5nZSgpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaW5wdXRWYWx1ZSA9IHBhcnNlRmxvYXQodGhpcy5pbnB1dC52YWx1ZSk7XG4gICAgICAgIHRoaXMudmFsdWUgPSB0aGlzLmNsYW1wVmFsdWUoaW5wdXRWYWx1ZSk7XG4gICAgICAgIHRoaXMuaW5wdXQudmFsdWUgPSB0aGlzLnZhbHVlLnRvU3RyaW5nKCk7XG5cbiAgICAgICAgdGhpcy5kaXNwYXRjaElucHV0RXZlbnQoKTtcbiAgICAgICAgdGhpcy5kaXNwYXRjaENoYW5nZUV2ZW50KCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbklucHV0Rm9jdXMoKTogdm9pZCB7XG4gICAgICAgIHRoaXMuaGFuZGxlSGlnaGxpZ2h0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uSW5wdXRCbHVyKCk6IHZvaWQge1xuICAgICAgICB0aGlzLmhhbmRsZUhpZ2hsaWdodCA9IGZhbHNlO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHZhbHVlIHVuZGVyIHRoZSBjdXJzb3JcbiAgICAgKiBAcGFyYW06IFBvaW50ZXJFdmVudCBvbiBzbGlkZXJcbiAgICAgKiBAcmV0dXJuOiBTbGlkZXIgdmFsdWUgdGhhdCBjb3JyZWxhdGVzIHRvIHRoZSBwb3NpdGlvbiB1bmRlciB0aGUgcG9pbnRlclxuICAgICAqL1xuICAgIHByaXZhdGUgY2FsY3VsYXRlSGFuZGxlUG9zaXRpb24oZXY6IFBvaW50ZXJFdmVudCk6IG51bWJlciB7XG4gICAgICAgIGNvbnN0IHJlY3QgPSB0aGlzLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICBjb25zdCBtaW5PZmZzZXQgPSByZWN0LmxlZnQ7XG4gICAgICAgIGNvbnN0IG9mZnNldCA9IGV2LmNsaWVudFg7XG4gICAgICAgIGNvbnN0IHNpemUgPSByZWN0LndpZHRoO1xuXG4gICAgICAgIGNvbnN0IHBlcmNlbnQgPSAob2Zmc2V0IC0gbWluT2Zmc2V0KSAvIHNpemU7XG4gICAgICAgIGxldCB2YWx1ZSA9IHRoaXMubWluICsgKHRoaXMubWF4IC0gdGhpcy5taW4pICogcGVyY2VudDtcblxuICAgICAgICB2YWx1ZSA9IHRoaXMuY2xhbXBWYWx1ZSh2YWx1ZSk7XG5cbiAgICAgICAgaWYgKHRoaXMuc3RlcCkge1xuICAgICAgICAgICAgdmFsdWUgPSBNYXRoLnJvdW5kKHZhbHVlIC8gdGhpcy5zdGVwKSAqIHRoaXMuc3RlcDtcbiAgICAgICAgfVxuXG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBAcGFyYW06IHZhbHVlIHRvIGJlIGNsYW1wZWRcbiAgICAgKiBAcmV0dXJuOiB0aGUgb3JpZ2luYWwgdmFsdWUgaWYgaW4gcmFuZ2UsIHRoaXMubWF4IGlmIG92ZXIsIGFuZCB0aGlzLm1pbiBpZiB1bmRlclxuICAgICAqL1xuICAgIHByaXZhdGUgY2xhbXBWYWx1ZSh2YWx1ZTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICAgICAgY29uc3QgcmVkdWNlZFZhbHVlID0gTWF0aC5taW4odmFsdWUsIHRoaXMubWF4KTtcbiAgICAgICAgcmV0dXJuIE1hdGgubWF4KHJlZHVjZWRWYWx1ZSwgdGhpcy5taW4pO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGlzcGF0Y2hJbnB1dEV2ZW50KCk6IHZvaWQge1xuICAgICAgICBjb25zdCBpbnB1dEV2ZW50ID0gc3RyaWN0Q3VzdG9tRXZlbnQoJ3NwLXNsaWRlcjppbnB1dCcsIHtcbiAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgICAgICAgIGRldGFpbDogdGhpcy52YWx1ZSxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KGlucHV0RXZlbnQpO1xuICAgIH1cblxuICAgIHByaXZhdGUgZGlzcGF0Y2hDaGFuZ2VFdmVudCgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5pbnB1dC52YWx1ZSA9IHRoaXMudmFsdWUudG9TdHJpbmcoKTtcblxuICAgICAgICBjb25zdCBjaGFuZ2VFdmVudCA9IHN0cmljdEN1c3RvbUV2ZW50KCdzcC1zbGlkZXI6Y2hhbmdlJywge1xuICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgIGNvbXBvc2VkOiB0cnVlLFxuICAgICAgICAgICAgZGV0YWlsOiB0aGlzLnZhbHVlLFxuICAgICAgICB9KTtcblxuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoY2hhbmdlRXZlbnQpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIFJhdGlvIHJlcHJlc2VudGluZyB0aGUgc2xpZGVyJ3MgcG9zaXRpb24gb24gdGhlIHRyYWNrXG4gICAgICovXG4gICAgcHJpdmF0ZSBnZXQgdHJhY2tQcm9ncmVzcygpOiBudW1iZXIge1xuICAgICAgICBjb25zdCByYW5nZSA9IHRoaXMubWF4IC0gdGhpcy5taW47XG4gICAgICAgIGNvbnN0IHByb2dyZXNzID0gdGhpcy52YWx1ZSAtIHRoaXMubWluO1xuXG4gICAgICAgIHJldHVybiBwcm9ncmVzcyAvIHJhbmdlO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IHRyYWNrTGVmdFN0eWxlKCk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgd2lkdGg6ICR7dGhpcy50cmFja1Byb2dyZXNzICogMTAwfSVgO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IHRyYWNrUmlnaHRTdHlsZSgpOiBzdHJpbmcge1xuICAgICAgICBjb25zdCB3aWR0aCA9IGB3aWR0aDogJHsoMSAtIHRoaXMudHJhY2tQcm9ncmVzcykgKiAxMDB9JTsgYDtcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gYGxlZnQ6IGNhbGMoJHt0aGlzLnRyYWNrUHJvZ3Jlc3MgKiAxMDB9JSArIDhweClgO1xuXG4gICAgICAgIHJldHVybiB3aWR0aCArIG9mZnNldDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGdldCBoYW5kbGVTdHlsZSgpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYGxlZnQ6ICR7dGhpcy50cmFja1Byb2dyZXNzICogMTAwfSVgO1xuICAgIH1cbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBHbG9iYWxFdmVudEhhbmRsZXJzRXZlbnRNYXAge1xuICAgICAgICAnc3Atc2xpZGVyOmlucHV0JzogQ3VzdG9tRXZlbnQ8U2xpZGVyRXZlbnREZXRhaWw+O1xuICAgICAgICAnc3Atc2xpZGVyOmNoYW5nZSc6IEN1c3RvbUV2ZW50PFNsaWRlckV2ZW50RGV0YWlsPjtcbiAgICB9XG59XG4iLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbmV4cG9ydCAqIGZyb20gJy4vc2xpZGVyJztcblxuaW1wb3J0IHsgU2xpZGVyIH0gZnJvbSAnLi9zbGlkZXInO1xuXG5pZiAoIWN1c3RvbUVsZW1lbnRzLmdldCgnc3Atc2xpZGVyJykpIHtcbiAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ3NwLXNsaWRlcicsIFNsaWRlcik7XG59XG5cbmRlY2xhcmUgZ2xvYmFsIHtcbiAgICBpbnRlcmZhY2UgSFRNTEVsZW1lbnRUYWdOYW1lTWFwIHtcbiAgICAgICAgJ3NwLXNsaWRlcic6IFNsaWRlcjtcbiAgICB9XG59XG4iLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbmltcG9ydCB7IEljb25zZXRSZWdpc3RyeSB9IGZyb20gJy4vaWNvbnNldC1yZWdpc3RyeSc7XG5cbmltcG9ydCB7IExpdEVsZW1lbnQsIHByb3BlcnR5IH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgSWNvbnNldCBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgIHB1YmxpYyBzdGF0aWMgaXMgPSAnc3AtaWNvbnNldCc7XG5cbiAgICBwcm90ZWN0ZWQgcmVnaXN0ZXJlZDogYm9vbGVhbiA9IGZhbHNlO1xuXG4gICAgcHJpdmF0ZSBfbmFtZSE6IHN0cmluZztcblxuICAgIHByb3RlY3RlZCBmaXJzdFVwZGF0ZWQoXG4gICAgICAgIGNoYW5nZWRQcm9wZXJ0aWVzOiBNYXA8c3RyaW5nIHwgbnVtYmVyIHwgc3ltYm9sLCB1bmtub3duPlxuICAgICk6IHZvaWQge1xuICAgICAgICAvLyBmb3JjZSBubyBkaXNwbGF5IGZvciBhbGwgaWNvbnNldHNcbiAgICAgICAgdGhpcy5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE5hbWUgb2YgdGhlIGljb25zZXQsIHVzZWQgYnkgdGhlIEljb25zZXRSZWdpc3RyeSB0byBzZXJ2ZSB0aGlzIGljb24gc2V0XG4gICAgICogdG8gY29uc3VtaW5nIGljb25zLlxuICAgICAqL1xuICAgIEBwcm9wZXJ0eSgpXG4gICAgcHVibGljIHNldCBuYW1lKHZhbHVlOiBzdHJpbmcpIHtcbiAgICAgICAgLy8gaWYgd2UncmUgYWxyZWFkeSByZWdpc3RlcmVkIGluIHRoZSBpY29uc2V0IHJlZ2lzdHJ5XG4gICAgICAgIC8vIHdlJ2xsIG5lZWQgdG8gdXBkYXRlIG91ciByZWdpc3RyYXRpb25cbiAgICAgICAgaWYgKHRoaXMucmVnaXN0ZXJlZCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuX25hbWUpIHtcbiAgICAgICAgICAgICAgICAvLyByZW1vdmUgZnJvbSB0aGUgaWNvbnNldCBtYXAgdXNpbmcgdGhlIG9sZCBuYW1lXG4gICAgICAgICAgICAgICAgSWNvbnNldFJlZ2lzdHJ5LmdldEluc3RhbmNlKCkucmVtb3ZlSWNvbnNldCh0aGlzLl9uYW1lKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgLy8gc2V0IGluIHRoZSBtYXAgdXNpbmcgdGhlIG5ldyBuYW1lXG4gICAgICAgICAgICAgICAgSWNvbnNldFJlZ2lzdHJ5LmdldEluc3RhbmNlKCkuYWRkSWNvbnNldCh2YWx1ZSwgdGhpcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5fbmFtZSA9IHZhbHVlO1xuICAgIH1cbiAgICBwdWJsaWMgZ2V0IG5hbWUoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX25hbWU7XG4gICAgfVxuXG4gICAgLyoqXG4gICAgICogQXBwbGllcyBhbiBpY29uIHRvIHRoZSBnaXZlbiBlbGVtZW50XG4gICAgICovXG4gICAgcHVibGljIGFic3RyYWN0IGFwcGx5SWNvblRvRWxlbWVudChcbiAgICAgICAgZWw6IEhUTUxFbGVtZW50LFxuICAgICAgICBpY29uOiBzdHJpbmcsXG4gICAgICAgIHNpemU6IHN0cmluZ1xuICAgICk6IHZvaWQ7XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBhbGwgaWNvbnMgaW4gdGhpcyBpY29uc2V0LlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRJY29uTGlzdCgpOiBzdHJpbmdbXSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignTm90IGltcGxlbWVudGVkIScpO1xuICAgIH1cblxuICAgIC8qKlxuICAgICAqIE9uIHVwZGF0ZWQgd2UgcmVnaXN0ZXIgdGhlIGljb25zZXQgaWYgd2UncmUgbm90IGFscmVhZHkgcmVnaXN0ZXJlZFxuICAgICAqL1xuICAgIHB1YmxpYyBjb25uZWN0ZWRDYWxsYmFjaygpOiB2b2lkIHtcbiAgICAgICAgc3VwZXIuY29ubmVjdGVkQ2FsbGJhY2soKTtcblxuICAgICAgICBpZiAoIXRoaXMubmFtZSB8fCB0aGlzLnJlZ2lzdGVyZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBJY29uc2V0UmVnaXN0cnkuZ2V0SW5zdGFuY2UoKS5hZGRJY29uc2V0KHRoaXMubmFtZSwgdGhpcyk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJlZCA9IHRydWU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE9uIGRpc2Nvbm5lY3RlZCB3ZSByZW1vdmUgdGhlIGljb25zZXRcbiAgICAgKi9cbiAgICBwdWJsaWMgZGlzY29ubmVjdGVkQ2FsbGJhY2soKTogdm9pZCB7XG4gICAgICAgIHN1cGVyLmRpc2Nvbm5lY3RlZENhbGxiYWNrKCk7XG5cbiAgICAgICAgaWYgKCF0aGlzLm5hbWUpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBJY29uc2V0UmVnaXN0cnkuZ2V0SW5zdGFuY2UoKS5yZW1vdmVJY29uc2V0KHRoaXMubmFtZSk7XG4gICAgICAgIHRoaXMucmVnaXN0ZXJlZCA9IGZhbHNlO1xuICAgIH1cbn1cbiIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBodG1sLCBxdWVyeSwgVGVtcGxhdGVSZXN1bHQsIFByb3BlcnR5VmFsdWVzIH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuXG5pbXBvcnQgeyBJY29uc2V0IH0gZnJvbSAnLi9pY29uc2V0JztcblxuZXhwb3J0IGNsYXNzIEljb25zZXRTVkcgZXh0ZW5kcyBJY29uc2V0IHtcbiAgICBwdWJsaWMgc3RhdGljIGlzID0gJ3NwLWljb25zZXQtc3ZnJztcbiAgICBwcml2YXRlIGljb25NYXA6IE1hcDxzdHJpbmcsIFNWR1N5bWJvbEVsZW1lbnQ+ID0gbmV3IE1hcCgpO1xuXG4gICAgQHF1ZXJ5KCdzbG90JylcbiAgICBwcml2YXRlIHNsb3RDb250YWluZXI/OiBIVE1MU2xvdEVsZW1lbnQ7XG5cbiAgICAvKipcbiAgICAgKiBGaXJzdCB1cGRhdGVkIGhhbmRsZXIganVzdCBlbnN1cmVzIHdlJ3ZlIHByb2Nlc3NlZCBhbnkgc2xvdHRlZCBzeW1ib2xzXG4gICAgICovXG4gICAgcHVibGljIHVwZGF0ZWQoY2hhbmdlZFByb3BlcnRpZXM6IFByb3BlcnR5VmFsdWVzKTogdm9pZCB7XG4gICAgICAgIGlmICghdGhpcy5zbG90Q29udGFpbmVyKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgY3VycmVudFNWR05vZGVzID0gdGhpcy5nZXRTVkdOb2Rlcyh0aGlzLnNsb3RDb250YWluZXIpO1xuICAgICAgICB0aGlzLnVwZGF0ZVNWRyhjdXJyZW50U1ZHTm9kZXMpO1xuICAgICAgICBzdXBlci51cGRhdGVkKGNoYW5nZWRQcm9wZXJ0aWVzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQXBwbGllcyB0aGUgcmVxdWVzdGVkIGljb24gZnJvbSB0aGlzIGljb25zZXQgaW5zdGFuY2UgdG8gdGhlIGdpdmVuIGVsZW1lbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZWwgLSB0aGUgZWxlbWVudCB0byBhcHBseSB0aGUgaWNvbiB0b1xuICAgICAqIEBwYXJhbSBpY29uIC0gdGhlIG5hbWUgb2YgdGhlIGljb24gd2l0aGluIHRoaXMgc2V0IHRvIGFwcGx5LlxuICAgICAqL1xuICAgIHB1YmxpYyBhcHBseUljb25Ub0VsZW1lbnQoZWw6IEhUTUxFbGVtZW50LCBpY29uOiBzdHJpbmcpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgaWNvblN5bWJvbCA9IHRoaXMuaWNvbk1hcC5nZXQoaWNvbik7XG4gICAgICAgIGlmICghaWNvblN5bWJvbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBVbmFibGUgdG8gZmluZCBpY29uICR7aWNvbn1gKTtcbiAgICAgICAgfVxuICAgICAgICAvLyB3ZSBjYW5ub3Qgc2hhcmUgYSBzaW5nbGUgU1ZHIGdsb2JhbGx5IGFjcm9zcyBzaGFkb3dyb290IGJvdW5kYXJpZXNcbiAgICAgICAgLy8gc28gY29weSB0aGUgdGVtcGxhdGUgbm9kZSBzbyB3ZSBjYW4gaW5qZWN0IGl0IHdoZXJlIHdlIG5lZWQgaXRcbiAgICAgICAgY29uc3QgY2xvbmVkTm9kZSA9IHRoaXMucHJlcGFyZVN2Z0Nsb25lKGljb25TeW1ib2wpO1xuICAgICAgICAvLyBhcHBlbmQgdGhlIHN2ZyB0byB0aGUgbm9kZSBlaXRoZXIgaW4gaXRzIHNoYWRvd3Jvb3Qgb3IgZGlyZWN0bHkgaW50byBpdHMgZG9tXG4gICAgICAgIGlmIChlbC5zaGFkb3dSb290KSB7XG4gICAgICAgICAgICBlbC5zaGFkb3dSb290LmFwcGVuZENoaWxkKGNsb25lZE5vZGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZWwuYXBwZW5kQ2hpbGQoY2xvbmVkTm9kZSk7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGEgbGlzdCBvZiBhbGwgaWNvbnMgaW4gdGhpcyBpY29uc2V0LlxuICAgICAqL1xuICAgIHB1YmxpYyBnZXRJY29uTGlzdCgpOiBzdHJpbmdbXSB7XG4gICAgICAgIHJldHVybiBbLi4udGhpcy5pY29uTWFwLmtleXMoKV07XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHByZXBhcmVTdmdDbG9uZShzb3VyY2VTdmc6IFNWR1N5bWJvbEVsZW1lbnQpOiBTVkdTVkdFbGVtZW50IHtcbiAgICAgICAgY29uc3QgY29udGVudCA9IHNvdXJjZVN2Zy5jbG9uZU5vZGUodHJ1ZSkgYXMgU1ZHU3ltYm9sRWxlbWVudDtcbiAgICAgICAgLy8gd2UncmUgZ29pbmcgdG8gY3JlYXRlIGEgbmV3IHN2ZyBlbGVtZW50IHRoYXQgd2lsbCBoYXZlIG91ciBzeW1ib2wgZ2VvbWV0cnkgaW5zaWRlXG4gICAgICAgIGNvbnN0IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhcbiAgICAgICAgICAgICdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsXG4gICAgICAgICAgICAnc3ZnJ1xuICAgICAgICApO1xuICAgICAgICBjb25zdCB2aWV3Qm94ID0gY29udGVudC5nZXRBdHRyaWJ1dGUoJ3ZpZXdCb3gnKSB8fCAnJztcbiAgICAgICAgLy8gaW5saW5lIHN0eWxlIGlzbid0IGlkZWFsIGJ1dCB3aWxsIHdvcmsgaW4gYWxsIGNhc2VzIGFuZCBtZWFucyBvdXIgaWNvbnMgZG9uJ3QgbmVlZCB0byBrbm93XG4gICAgICAgIC8vIGlmIHRoZXkgYXJlIHN2ZyBvciBzcHJpdGVzaGVldCBwcm92aWRlZFxuICAgICAgICBjb25zdCBjc3NUZXh0ID1cbiAgICAgICAgICAgICdwb2ludGVyLWV2ZW50czogbm9uZTsgZGlzcGxheTogYmxvY2s7IHdpZHRoOiAxMDAlOyBoZWlnaHQ6IDEwMCU7JztcbiAgICAgICAgc3ZnLnN0eWxlLmNzc1RleHQgPSBjc3NUZXh0O1xuICAgICAgICAvLyBjb3B5IHRoZSB2aWV3Ym94IGFuZCBvdGhlciBwcm9wZXJ0aWVzIGludG8gdGhlIHN2Z1xuICAgICAgICBzdmcuc2V0QXR0cmlidXRlKCd2aWV3Qm94Jywgdmlld0JveCk7XG4gICAgICAgIHN2Zy5zZXRBdHRyaWJ1dGUoJ3ByZXNlcnZlQXNwZWN0UmF0aW8nLCAneE1pZFlNaWQgbWVldCcpO1xuICAgICAgICBzdmcuc2V0QXR0cmlidXRlKCdmb2N1c2FibGUnLCAnZmFsc2UnKTtcbiAgICAgICAgLy8gbW92ZSBhbGwgdGhlIGNoaWxkIG5vZGVzIG92ZXIgdG8gdGhlIHN2Z1xuICAgICAgICB3aGlsZSAoY29udGVudC5jaGlsZE5vZGVzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHN2Zy5hcHBlbmRDaGlsZChjb250ZW50LmNoaWxkTm9kZXNbMF0pO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzdmc7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXRTVkdJY29uTmFtZShpY29uOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gaWNvbjtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldFNhbml0aXplZEljb25OYW1lKGljb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBpY29uO1xuICAgIH1cbiAgICBwcm90ZWN0ZWQgcmVuZGVyRGVmYXVsdENvbnRlbnQoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgICAgICByZXR1cm4gaHRtbGBgO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCByZW5kZXIoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgICAgIDxzbG90IEBzbG90Y2hhbmdlPSR7dGhpcy5vblNsb3RDaGFuZ2V9PlxuICAgICAgICAgICAgICAgICR7dGhpcy5yZW5kZXJEZWZhdWx0Q29udGVudCgpfVxuICAgICAgICAgICAgPC9zbG90PlxuICAgICAgICBgO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCB1cGRhdGVTVkcobm9kZXM6IFNWR0VsZW1lbnRbXSk6IHZvaWQge1xuICAgICAgICAvLyBpdGVyYXRlIG92ZXIgdGhlIG5vZGVzIHRoYXQgd2VyZSBwYXNzZWQgaW4sIGFuZCBmaW5kIGFsbCB0aGUgdG9wIGxldmVsIHN5bWJvbHNcbiAgICAgICAgY29uc3Qgc3ltYm9scyA9IG5vZGVzLnJlZHVjZShcbiAgICAgICAgICAgIChwcmV2LCBzdmdOb2RlKSA9PiB7XG4gICAgICAgICAgICAgICAgY29uc3QgY29udGFpbmVkU3ltYm9scyA9IHN2Z05vZGUucXVlcnlTZWxlY3RvckFsbCgnc3ltYm9sJyk7XG4gICAgICAgICAgICAgICAgcHJldi5wdXNoKC4uLmNvbnRhaW5lZFN5bWJvbHMpO1xuICAgICAgICAgICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIFtdIGFzIFNWR1N5bWJvbEVsZW1lbnRbXVxuICAgICAgICApO1xuICAgICAgICBzeW1ib2xzLmZvckVhY2goKHN5bWJvbCkgPT4ge1xuICAgICAgICAgICAgdGhpcy5pY29uTWFwLnNldCh0aGlzLmdldFNhbml0aXplZEljb25OYW1lKHN5bWJvbC5pZCksIHN5bWJvbCk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXRTVkdOb2RlcyhzbG90VGFyZ2V0OiBIVE1MU2xvdEVsZW1lbnQpOiBTVkdFbGVtZW50W10ge1xuICAgICAgICBjb25zdCBub2RlcyA9IHNsb3RUYXJnZXQuYXNzaWduZWROb2Rlcyh7IGZsYXR0ZW46IHRydWUgfSk7XG4gICAgICAgIC8vIGZpbmQgYWxsIHRoZSBzdmcgbm9kZXNcbiAgICAgICAgY29uc3Qgc3ZnTm9kZXMgPSBub2Rlcy5maWx0ZXIoKG5vZGUpID0+IHtcbiAgICAgICAgICAgIHJldHVybiBub2RlLm5vZGVOYW1lID09PSAnc3ZnJztcbiAgICAgICAgfSkgYXMgU1ZHRWxlbWVudFtdO1xuICAgICAgICByZXR1cm4gc3ZnTm9kZXM7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvblNsb3RDaGFuZ2UoZXZ0OiBFdmVudCk6IHZvaWQge1xuICAgICAgICBjb25zdCBzbG90VGFyZ2V0ID0gZXZ0LnRhcmdldCBhcyBIVE1MU2xvdEVsZW1lbnQ7XG4gICAgICAgIGNvbnN0IHN2Z05vZGVzID0gdGhpcy5nZXRTVkdOb2RlcyhzbG90VGFyZ2V0KTtcbiAgICAgICAgdGhpcy51cGRhdGVTVkcoc3ZnTm9kZXMpO1xuICAgIH1cbn1cbiIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuaW1wb3J0IHsgc3ZnIH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuZXhwb3J0IGRlZmF1bHQgc3ZnYDxzdmcgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUFsZXJ0TWVkaXVtXCIgdmlld0JveD1cIi0xIC0xIDI0IDI0XCI+PHBhdGggZD1cIk0xMC41NjMgMi4yMDZsLTkuMjQ5IDE2LjU1YS41LjUgMCAwIDAgLjQzNi43NDRoMTguNWEuNS41IDAgMCAwIC40MzYtLjc0NGwtOS4yNTEtMTYuNTVhLjUuNSAwIDAgMC0uODcyIDB6bTEuNDM2IDE1LjA0NGEuMjUuMjUgMCAwIDEtLjI1LjI1aC0xLjVhLjI1LjI1IDAgMCAxLS4yNS0uMjV2LTEuNWEuMjUuMjUgMCAwIDEgLjI1LS4yNWgxLjVhLjI1LjI1IDAgMCAxIC4yNS4yNXptMC0zLjVhLjI1LjI1IDAgMCAxLS4yNS4yNWgtMS41YS4yNS4yNSAwIDAgMS0uMjUtLjI1di02YS4yNS4yNSAwIDAgMSAuMjUtLjI1aDEuNWEuMjUuMjUgMCAwIDEgLjI1LjI1elwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1BbGVydFNtYWxsXCIgdmlld0JveD1cIi0zIC0zIDI0IDI0XCI+PHBhdGggZD1cIk04LjU2NCAxLjI4OUwuMiAxNi4yNTZBLjUuNSAwIDAgMCAuNjM2IDE3aDE2LjcyOGEuNS41IDAgMCAwIC40MzYtLjc0NEw5LjQzNiAxLjI4OWEuNS41IDAgMCAwLS44NzIgMHpNMTAgMTQuNzVhLjI1LjI1IDAgMCAxLS4yNS4yNWgtMS41YS4yNS4yNSAwIDAgMS0uMjUtLjI1di0xLjVhLjI1LjI1IDAgMCAxIC4yNS0uMjVoMS41YS4yNS4yNSAwIDAgMSAuMjUuMjV6bTAtM2EuMjUuMjUgMCAwIDEtLjI1LjI1aC0xLjVhLjI1LjI1IDAgMCAxLS4yNS0uMjV2LTZhLjI1LjI1IDAgMCAxIC4yNS0uMjVoMS41YS4yNS4yNSAwIDAgMSAuMjUuMjV6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUFycm93RG93blNtYWxsXCIgdmlld0JveD1cIi03IC02IDI0IDI0XCI+PHBhdGggZD1cIk05Ljk5IDcuMDFhMSAxIDAgMCAwLTEuNzA3LS43MDdMNiA4LjU4NlYxLjAxYTEgMSAwIDAgMC0yIDB2Ny41NzZMMS43MTcgNi4zMDNBMSAxIDAgMSAwIC4zMDMgNy43MTdsMy45OSAzLjk4YTEgMSAwIDAgMCAxLjQxNCAwbDMuOTktMy45OGEuOTk3Ljk5NyAwIDAgMCAuMjkzLS43MDd6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUFycm93TGVmdE1lZGl1bVwiIHZpZXdCb3g9XCItMyAtNSAyNCAyNFwiPjxwYXRoIGQ9XCJNMTYuOTkgNkgzLjQxNGw0LjI4My00LjI4M0ExIDEgMCAxIDAgNi4yODMuMzAzbC01Ljk4IDUuOTlhMSAxIDAgMCAwIDAgMS40MTRsNS45OCA1Ljk5YTEgMSAwIDEgMCAxLjQxNC0xLjQxNEwzLjQxNCA4SDE2Ljk5YTEgMSAwIDAgMCAwLTJ6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUFycm93VXBTbWFsbFwiIHZpZXdCb3g9XCItNyAtNiAyNCAyNFwiPjxwYXRoIGQ9XCJNOS45OSA0Ljk5YTEgMSAwIDAgMS0xLjcwNy43MDdMNiAzLjQxNHY3LjU3NmExIDEgMCAwIDEtMiAwVjMuNDE0TDEuNzE3IDUuNjk3QTEgMSAwIDEgMSAuMzAzIDQuMjgzbDMuOTktMy45OGExIDEgMCAwIDEgMS40MTQgMGwzLjk5IDMuOThhLjk5Ny45OTcgMCAwIDEgLjI5My43MDd6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUFzdGVyaXNrXCIgdmlld0JveD1cIi03IC03IDI0IDI0XCI+PHBhdGggZD1cIk03Ljg2NyA3Ljg3MmMuMDYxLjA2Mi4xMDMuMTQ1IDAgLjIyOGwtMS4yODMuODI3Yy0uMTA0LjA2MS0uMTQ1LjAyLS4xODYtLjA4M0w0LjgwNCA2LjA3bC0yLjA5IDIuMjk3Yy0uMDIxLjA0Mi0uMDgzLjA4My0uMTQ1IDBsLS45OTQtMS4wMzVjLS4xMDMtLjA2Mi0uMDgyLS4xMjQgMC0uMTg2bDIuMzYtMS45NjYtMi42OTEtMS4wMTRjLS4wNDIgMC0uMTA0LS4wODMtLjA2Mi0uMTg2bC43MDMtMS40MWEuMTEuMTEgMCAwIDEgLjE4Ny0uMDRMNC40MyA0LjA2bC4xNDUtMy4wMkEuMTA5LjEwOSAwIDAgMSA0LjcuOTE3bDEuNzE4LjIyN2MuMTA0IDAgLjEyNC4wNDIuMTA0LjE0NWwtLjgwOCAyLjk2IDIuNzM0LS44MjhjLjA2MS0uMDQyLjEyNC0uMDQyLjE2NS4wODJsLjI3IDEuNTMyYy4wMi4xMDMgMCAuMTQ1LS4wODQuMTQ1bC0yLjg1Ni4yMjd6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUNoZWNrbWFya01lZGl1bVwiIHZpZXdCb3g9XCItNCAtNCAyNCAyNFwiPjxwYXRoIGQ9XCJNNiAxNGExIDEgMCAwIDEtLjc4OS0uMzg1bC00LTVhMSAxIDAgMSAxIDEuNTc3LTEuMjNMNiAxMS4zNzZsNy4yMTMtOC45OWExIDEgMCAxIDEgMS41NzYgMS4yM2wtOCAxMGExIDEgMCAwIDEtLjc4OS4zODR6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUNoZWNrbWFya1NtYWxsXCIgdmlld0JveD1cIi02IC02IDI0IDI0XCI+PHBhdGggZD1cIk00LjUgMTFhLjk5OS45OTkgMCAwIDEtLjc4OC0uMzg1bC0zLTRhMSAxIDAgMSAxIDEuNTc2LTEuMjNMNC41IDguMzc2bDUuMjEyLTYuOTlhMSAxIDAgMSAxIDEuNTc2IDEuMjNsLTYgOEEuOTk5Ljk5OSAwIDAgMSA0LjUgMTF6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUNoZXZyb25Eb3duTWVkaXVtXCIgdmlld0JveD1cIi02IC04IDI0IDI0XCI+PHBhdGggZD1cIk0xMS45OSAxLjUxYTEgMSAwIDAgMC0xLjcwNy0uNzA3TDYgNS4wODYgMS43MTcuODAzQTEgMSAwIDEgMCAuMzAzIDIuMjE3bDQuOTkgNC45OWExIDEgMCAwIDAgMS40MTQgMGw0Ljk5LTQuOTlhLjk5Ny45OTcgMCAwIDAgLjI5My0uNzA3elwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1DaGV2cm9uRG93blNtYWxsXCIgdmlld0JveD1cIi03IC04IDI0IDI0XCI+PHBhdGggZD1cIk01IDdhLjc0Ny43NDcgMCAwIDAgLjUzLS4yMmw0LjI0LTQuMjRhLjc1Ljc1IDAgMSAwLTEuMDYtMS4wNkw1IDUuMTkgMS4yOSAxLjQ4QS43NS43NSAwIDEgMCAuMjMgMi41NGw0LjI0IDQuMjRBLjc0Ny43NDcgMCAwIDAgNSA3elwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1DaGV2cm9uTGVmdExhcmdlXCIgdmlld0JveD1cIi00IC0yIDI0IDI0XCI+PHBhdGggZD1cIk0xMi4xMDkgMTcuODUzbC04LjA2Ni03Ljg0OSA4LjA2Ni03Ljg0YTEuMjQzIDEuMjQzIDAgMCAwIC4zODEtLjg5NCAxLjI0IDEuMjQgMCAwIDAtMi4xMi0uODk0TDEuMzc5IDkuMTA4YTEuMjQ2IDEuMjQ2IDAgMCAwIC4wMDMgMS43OWw4Ljk5IDguNzQ0YTEuMjQ3IDEuMjQ3IDAgMSAwIDEuNzM4LTEuNzg5elwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1DaGV2cm9uTGVmdE1lZGl1bVwiIHZpZXdCb3g9XCItOCAtNiAyNCAyNFwiPjxwYXRoIGQ9XCJNNy4xOTcgMTAuMjgzTDIuOTE0IDZsNC4yODMtNC4yODNBMSAxIDAgMSAwIDUuNzgzLjMwM2wtNC45OSA0Ljk5YTEgMSAwIDAgMCAwIDEuNDE0bDQuOTkgNC45OWExIDEgMCAxIDAgMS40MTQtMS40MTR6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUNoZXZyb25SaWdodExhcmdlXCIgdmlld0JveD1cIi00IC0yIDI0IDI0XCI+PHBhdGggZD1cIk0xNSAxMC4wMDRhMS4yNDMgMS4yNDMgMCAwIDAtLjM4LS44OTRMNS42MzEuMzY0YTEuMjQ5IDEuMjQ5IDAgMSAwLTEuNzQxIDEuNzlsOC4wNjYgNy44NS04LjA2OSA3Ljg0N2ExLjI0OSAxLjI0OSAwIDAgMCAxLjc0MSAxLjc5bDguOTkyLTguNzRhMS4yNDYgMS4yNDYgMCAwIDAgLjM3OS0uODk3elwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1DaGV2cm9uUmlnaHRNZWRpdW1cIiB2aWV3Qm94PVwiLTggLTYgMjQgMjRcIj48cGF0aCBkPVwiTTcuNSA2YS45OTcuOTk3IDAgMCAwLS4yOTMtLjcwN0wyLjIxNy4zMDNBMSAxIDAgMSAwIC44MDMgMS43MTdMNS4wODYgNiAuODAzIDEwLjI4M2ExIDEgMCAxIDAgMS40MTQgMS40MTRsNC45OS00Ljk5QS45OTcuOTk3IDAgMCAwIDcuNSA2elwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1DaGV2cm9uUmlnaHRTbWFsbFwiIHZpZXdCb3g9XCItOCAtNyAyNCAyNFwiPjxwYXRoIGQ9XCJNNyA1YS43NDcuNzQ3IDAgMCAwLS4yMi0uNTNMMi41NC4yM2EuNzUuNzUgMCAxIDAtMS4wNiAxLjA2TDUuMTkgNSAxLjQ4IDguNzFhLjc1Ljc1IDAgMSAwIDEuMDYgMS4wNmw0LjI0LTQuMjRBLjc0Ny43NDcgMCAwIDAgNyA1elwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1DaGV2cm9uVXBTbWFsbFwiIHZpZXdCb3g9XCItNyAtOCAyNCAyNFwiPjxwYXRoIGQ9XCJNNSAxYS43NDcuNzQ3IDAgMCAwLS41My4yMkwuMjMgNS40NmEuNzUuNzUgMCAxIDAgMS4wNiAxLjA2TDUgMi44MWwzLjcxIDMuNzFhLjc1Ljc1IDAgMSAwIDEuMDYtMS4wNkw1LjUzIDEuMjJBLjc0Ny43NDcgMCAwIDAgNSAxelwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1Db3JuZXJUcmlhbmdsZVwiIHZpZXdCb3g9XCItOSAtOSAyNCAyNFwiPjxwYXRoIGQ9XCJNNS43NC4wMWEuMjUuMjUgMCAwIDAtLjE3Ny4wNzNsLTUuNDggNS40OGEuMjUuMjUgMCAwIDAgLjE3Ny40MjdoNS40OGEuMjUuMjUgMCAwIDAgLjI1LS4yNVYuMjZhLjI1LjI1IDAgMCAwLS4yNS0uMjV6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUNyb3NzTGFyZ2VcIiB2aWV3Qm94PVwiLTQgLTQgMjQgMjRcIj48cGF0aCBkPVwiTTE1LjY5NyAxNC4yODNMOS40MTQgOGw2LjI4My02LjI4M0ExIDEgMCAxIDAgMTQuMjgzLjMwM0w4IDYuNTg2IDEuNzE3LjMwM0ExIDEgMCAxIDAgLjMwMyAxLjcxN0w2LjU4NiA4IC4zMDMgMTQuMjgzYTEgMSAwIDEgMCAxLjQxNCAxLjQxNEw4IDkuNDE0bDYuMjgzIDYuMjgzYTEgMSAwIDEgMCAxLjQxNC0xLjQxNHpcIi8+PC9zeW1ib2w+PHN5bWJvbCBpZD1cInNwZWN0cnVtLWljb24tQ3Jvc3NNZWRpdW1cIiB2aWV3Qm94PVwiLTcgLTcgMjQgMjRcIj48cGF0aCBkPVwiTTkuNzcgOC43MUw2LjA2IDVsMy43MS0zLjcxQS43NS43NSAwIDEgMCA4LjcxLjIzTDUgMy45NCAxLjI5LjIzQS43NS43NSAwIDEgMCAuMjMgMS4yOUwzLjk0IDUgLjIzIDguNzFhLjc1Ljc1IDAgMSAwIDEuMDYgMS4wNkw1IDYuMDZsMy43MSAzLjcxYS43NS43NSAwIDEgMCAxLjA2LTEuMDZ6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUNyb3NzU21hbGxcIiB2aWV3Qm94PVwiLTcgLTcgMjQgMjRcIj48cGF0aCBkPVwiTTkuMzE3IDguNDMzTDUuODg0IDVsMy40MzMtMy40MzNhLjYyNS42MjUgMCAxIDAtLjg4NC0uODg0TDUgNC4xMTYgMS41NjcuNjgzYS42MjUuNjI1IDAgMSAwLS44ODQuODg0Qy44MyAxLjcxMyAyLjc3IDMuNjU3IDQuMTE2IDVMLjY4MyA4LjQzM2EuNjI1LjYyNSAwIDEgMCAuODg0Ljg4NEw1IDUuODg0bDMuNDMzIDMuNDMzYS42MjUuNjI1IDAgMCAwIC44ODQtLjg4NHpcIi8+PC9zeW1ib2w+PHN5bWJvbCBpZD1cInNwZWN0cnVtLWljb24tRGFzaFNtYWxsXCIgdmlld0JveD1cIi02IC02IDI0IDI0XCI+PHBhdGggZD1cIk0xMC45OSA1SDEuMDFhMSAxIDAgMCAwIDAgMmg5Ljk4YTEgMSAwIDEgMCAwLTJ6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLURvdWJsZUdyaXBwZXJcIiB2aWV3Qm94PVwiLTIgLTkuNSAyNCAyNFwiPjxwYXRoIGQ9XCJNMTkuNDkgNEguNTFhLjUuNSAwIDEgMCAwIDFoMTguOThhLjUuNSAwIDAgMCAwLTF6TS41MSAxaDE4Ljk4YS41LjUgMCAwIDAgMC0xSC41MWEuNS41IDAgMCAwIDAgMXpcIi8+PC9zeW1ib2w+PHN5bWJvbCBpZD1cInNwZWN0cnVtLWljb24tSGVscE1lZGl1bVwiIHZpZXdCb3g9XCItMSAtMSAyNCAyNFwiPjxwYXRoIGQ9XCJNMTEgMmE5IDkgMCAxIDAgOSA5IDkgOSAwIDAgMC05LTl6bS0uMDA3IDE0LjY4MWExLjE0NSAxLjE0NSAwIDAgMS0xLjIyNy0xLjIxNSAxLjE1OSAxLjE1OSAwIDAgMSAxLjExNS0xLjIwMXEuMDU2LS4wMDIuMTEyLjAwMWExLjE1OSAxLjE1OSAwIDAgMSAxLjIyNiAxLjA4OHEuMDAzLjA1Ni4wMDEuMTEyYTEuMTI3IDEuMTI3IDAgMCAxLTEuMjI3IDEuMjE1em0xLjk4MS02LjYzYy0uNjg0LjY0Mi0xLjM0NCAxLjIxNS0xLjMzMyAxLjczNmEyLjI3NSAyLjI3NSAwIDAgMCAuMTc2LjczMi4yNS4yNSAwIDAgMS0uMjMyLjM0M2gtMS4yNmEuMy4zIDAgMCAxLS4yMjgtLjA2OSAxLjg4NiAxLjg4NiAwIDAgMS0uNDIxLTEuMmMwLS44MTYuNTA4LTEuMzM2IDEuMzUtMi4xNy41NzgtLjU3My45MTEtLjkzNy45MTEtMS40NzUgMC0uNjI1LS40MjEtMS4wNTktMS40OS0xLjA1OWE1LjMzNyA1LjMzNyAwIDAgMC0yIC40NzMuMjQ5LjI0OSAwIDAgMS0uMzQ3LS4yM3YtMS4yNGEuNS41IDAgMCAxIC4zLS40NTkgNi40MTMgNi40MTMgMCAwIDEgMi40MzQtLjVjMi4xLjAwNiAzLjI2MSAxLjIgMy4yNjEgMi43MjVhMy4wNTMgMy4wNTMgMCAwIDEtMS4xMjEgMi4zOTN6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUhlbHBTbWFsbFwiIHZpZXdCb3g9XCItMyAtMyAyNCAyNFwiPjxwYXRoIGQ9XCJNOSAxYTggOCAwIDEgMCA4IDggOCA4IDAgMCAwLTgtOHptLjAyMyAxMy40MzhhMS4zNDUgMS4zNDUgMCAwIDEtLjEwNC0yLjY4OHEuMDUyLS4wMDIuMTA0IDBhMS4zMSAxLjMxIDAgMCAxIDEuMzk3IDEuMjE3cS4wMDQuMDU5LjAwMy4xMThhMS4yOTEgMS4yOTEgMCAwIDEtMS40IDEuMzUzem0xLjc4My02LjQwOWwtLjEuMWMtLjM5NS40MTQtLjg0Mi44ODQtLjg0MiAxLjE3NWExLjM4NiAxLjM4NiAwIDAgMCAuMTc5LjY3NGwuMDczLjEzOS0uMDU3LjIxNWEuMzA4LjMwOCAwIDAgMS0uMjg0LjE4OUg4LjQzNmEuNDM0LjQzNCAwIDAgMS0uMzI1LS4xMTcgMi4wNTYgMi4wNTYgMCAwIDEtLjQyMi0xLjI2MkEzLjA1OCAzLjA1OCAwIDAgMSA4LjggNy4wNzFjLjEtLjExLjItLjIxLjI4OC0uMy4zMTQtLjMyNS41MDctLjUzNS41MDctLjc1OCAwLS4xNTQgMC0uNjIyLS44OTMtLjYyMmEyLjk1OCAyLjk1OCAwIDAgMC0xLjU4LjQ1OS4zLjMgMCAwIDEtLjMyNy0uMDFsLS4xMTgtLjA4NS0uMDI4LS4yMjVWNC4wODFhLjQ0LjQ0IDAgMCAxIC4yLS40MUE0LjEzNSA0LjEzNSAwIDAgMSA5IDMuMTE5YTIuNTUyIDIuNTUyIDAgMCAxIDIuNzUxIDIuNjM2IDMuMDY3IDMuMDY3IDAgMCAxLS45NDQgMi4yNzR6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUluZm9NZWRpdW1cIiB2aWV3Qm94PVwiLTEgLTEgMjQgMjRcIj48cGF0aCBkPVwiTTExIDJhOSA5IDAgMSAwIDkgOSA5IDkgMCAwIDAtOS05em0tLjE1IDIuNjVhMS4zNTkgMS4zNTkgMCAwIDEgMS40MzEgMS4yODNxLjAwNC4wNjQuMDAxLjEyOWExLjMzMiAxLjMzMiAwIDAgMS0xLjQzMiAxLjQzMiAxLjM1MyAxLjM1MyAwIDAgMS0xLjQzMi0xLjQzMyAxLjM1OSAxLjM1OSAwIDAgMSAxLjMwNC0xLjQxMnEuMDY0LS4wMDIuMTI4LjAwMXpNMTMuNSAxNmEuNS41IDAgMCAxLS41LjVIOWEuNS41IDAgMCAxLS41LS41di0xYS41LjUgMCAwIDEgLjUtLjVoMXYtNEg5YS41LjUgMCAwIDEtLjUtLjVWOWEuNS41IDAgMCAxIC41LS41aDIuNWEuNS41IDAgMCAxIC41LjV2NS41aDFhLjUuNSAwIDAgMSAuNS41elwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1JbmZvU21hbGxcIiB2aWV3Qm94PVwiLTMgLTMgMjQgMjRcIj48cGF0aCBkPVwiTTkgMWE4IDggMCAxIDAgOCA4IDggOCAwIDAgMC04LTh6bS0uMTUgMi4xNWExLjM1OSAxLjM1OSAwIDAgMSAxLjQzMSAxLjI4M3EuMDA0LjA2NC4wMDEuMTI5QTEuMzMyIDEuMzMyIDAgMCAxIDguODUgNS45OTRhMS4zNTMgMS4zNTMgMCAwIDEtMS40MzItMS40MzMgMS4zNTkgMS4zNTkgMCAwIDEgMS4zMDQtMS40MTJxLjA2NC0uMDAyLjEyOC4wMDF6TTExIDEzLjVhLjUuNSAwIDAgMS0uNS41aC0zYS41LjUgMCAwIDEtLjUtLjV2LTFhLjUuNSAwIDAgMSAuNS0uNUg4VjloLS41YS41LjUgMCAwIDEtLjUtLjV2LTFhLjUuNSAwIDAgMSAuNS0uNWgyYS41LjUgMCAwIDEgLjUuNVYxMmguNWEuNS41IDAgMCAxIC41LjV6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLU1hZ25pZmllclwiIHZpZXdCb3g9XCItMiAtMiAyNCAyNFwiPjxwYXRoIGQ9XCJNMTkuNzcgMTguNzFsLTUuNDY0LTUuNDY0YTcuNTAzIDcuNTAzIDAgMSAwLTEuMDYgMS4wNmw1LjQ2MyA1LjQ2NGEuNzUuNzUgMCAxIDAgMS4wNjEtMS4wNnpNMi41IDguNWE2IDYgMCAxIDEgNiA2IDYuMDA3IDYuMDA3IDAgMCAxLTYtNnpcIi8+PC9zeW1ib2w+PHN5bWJvbCBpZD1cInNwZWN0cnVtLWljb24tU2tpcExlZnRcIiB2aWV3Qm94PVwiLTcgLTYgMjQgMjRcIj48cGF0aCBkPVwiTTkuNjk3IDEwLjI4M0w1LjQxNCA2bDQuMjgzLTQuMjgzQTEgMSAwIDEgMCA4LjI4My4zMDNsLTQuOTkgNC45OWExIDEgMCAwIDAgMCAxLjQxNGw0Ljk5IDQuOTlhMSAxIDAgMSAwIDEuNDE0LTEuNDE0ek0xIC4wMWExIDEgMCAwIDAtMSAxdjkuOThhMSAxIDAgMCAwIDIgMFYxLjAxYTEgMSAwIDAgMC0xLTF6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLVNraXBSaWdodFwiIHZpZXdCb3g9XCItNyAtNiAyNCAyNFwiPjxwYXRoIGQ9XCJNOSAuMDFhMSAxIDAgMCAwLTEgMXY5Ljk4YTEgMSAwIDEgMCAyIDBWMS4wMWExIDEgMCAwIDAtMS0xek03IDZhLjk5Ny45OTcgMCAwIDAtLjI5My0uNzA3TDEuNzE3LjMwM0ExIDEgMCAxIDAgLjMwMyAxLjcxN0w0LjU4NiA2IC4zMDMgMTAuMjgzYTEgMSAwIDEgMCAxLjQxNCAxLjQxNGw0Ljk5LTQuOTlBLjk5Ny45OTcgMCAwIDAgNyA2elwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1TdGFyXCIgdmlld0JveD1cIi0xIC0xIDI0IDI0XCI+PHBhdGggZD1cIk0xMS4zNjEgMS42OGwyLjI1OSA1Ljk3NWEuMjU3LjI1NyAwIDAgMCAuMjI4LjE2Nmw2LjM4MS4zYS4zODYuMzg2IDAgMCAxIC4yMjMuNjg2TDE1LjQ2NyAxMi44YS4yNTcuMjU3IDAgMCAwLS4wODcuMjY4bDEuNjg0IDYuMTYyYS4zODYuMzg2IDAgMCAxLS41ODQuNDI0bC01LjM0LTMuNTA2YS4yNTcuMjU3IDAgMCAwLS4yODIgMGwtNS4zNCAzLjUwNmEuMzg2LjM4NiAwIDAgMS0uNTg0LS40MjRsMS42ODYtNi4xNThhLjI1Ny4yNTcgMCAwIDAtLjA4Ny0uMjY4TDEuNTQ4IDguODA5YS4zODYuMzg2IDAgMCAxIC4yMjMtLjY4Nmw2LjM4MS0uM2EuMjU3LjI1NyAwIDAgMCAuMjI4LS4xNjZsMi4yNTktNS45NzdhLjM4Ni4zODYgMCAwIDEgLjcyMiAwelwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1TdGFyT3V0bGluZVwiIHZpZXdCb3g9XCItMSAtMSAyNCAyNFwiPjxwYXRoIGQ9XCJNMTEgNC45bDEuMjMxIDMuMjU1QTEuNzc3IDEuNzc3IDAgMCAwIDEzLjgwOSA5LjNsMy40NzYuMTY1LTIuNzE1IDIuMThhMS43NzcgMS43NzcgMCAwIDAtLjYgMS44NTVsLjkxOCAzLjM1Ny0yLjkwOS0xLjkxYTEuNzc3IDEuNzc3IDAgMCAwLTEuOTUxIDBsLTIuOTA5IDEuOTEuOTE0LTMuMzU3YTEuNzc4IDEuNzc4IDAgMCAwLS42LTEuODU2TDQuNzE1IDkuNDY5IDguMTkxIDkuM2ExLjc3NyAxLjc3NyAwIDAgMCAxLjU3OC0xLjE0MnptMC0zLjQ1OGEuNDQ4LjQ0OCAwIDAgMC0uNDI2LjI5NEw4LjM1IDcuNjIxYS4yNi4yNiAwIDAgMS0uMjMxLjE2OGwtNi4yODIuM2EuNDU1LjQ1NSAwIDAgMC0uMjYzLjgxbDQuOTA3IDMuOTMzYS4yNi4yNiAwIDAgMSAuMDg4LjI3MWwtMS42NTcgNi4wNjRhLjQ1Ny40NTcgMCAwIDAgLjQ0LjU3Ny40NS40NSAwIDAgMCAuMjQ5LS4wNzZsNS4yNTctMy40NTJhLjI2LjI2IDAgMCAxIC4yODUgMGw1LjI1NyAzLjQ1MWEuNDUuNDUgMCAwIDAgLjI0OS4wNzYuNDU3LjQ1NyAwIDAgMCAuNDQtLjU3N0wxNS40MyAxMy4xYS4yNi4yNiAwIDAgMSAuMDg4LS4yNzFMMjAuNDI2IDguOWEuNDU1LjQ1NSAwIDAgMC0uMjYzLS44MWwtNi4yODItLjNhLjI2LjI2IDAgMCAxLS4yMzEtLjE2OGwtMi4yMjQtNS44ODNBLjQ0OC40NDggMCAwIDAgMTEgMS40NDV6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLVN1Y2Nlc3NNZWRpdW1cIiB2aWV3Qm94PVwiLTEgLTEgMjQgMjRcIj48cGF0aCBkPVwiTTExIDJhOSA5IDAgMSAwIDkgOSA5IDkgMCAwIDAtOS05em01LjYzOCA1LjYwOUwxMC4xIDE1LjY1MmEuNS41IDAgMCAxLS43NDIuMDM4TDUuMDg2IDExLjVhLjUuNSAwIDAgMSAwLS43MDdsLjcwNy0uNzA3YS41LjUgMCAwIDEgLjcwNyAwTDkuNiAxMy4xbDUuNDg2LTYuNzUxYS41LjUgMCAwIDEgLjctLjA3M2wuNzc2LjYzMWEuNS41IDAgMCAxIC4wNzYuNzAyelwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1TdWNjZXNzU21hbGxcIiB2aWV3Qm94PVwiLTMgLTMgMjQgMjRcIj48cGF0aCBkPVwiTTkgMWE4IDggMCAxIDAgOCA4IDggOCAwIDAgMC04LTh6bTUuMzMzIDQuNTRsLTYuMzI0IDguMTNhLjYuNiAwIDAgMS0uNDM3LjIzaC0uMDM3YS42LjYgMCAwIDEtLjQyNS0uMTc2bC0zLjg5My0zLjlhLjYuNiAwIDAgMSAwLS44NDlsLjY2My0uNjYzYS42LjYgMCAwIDEgLjg0OCAwTDcuNCAxMC45OTFsNS4yNTYtNi43NTRhLjYuNiAwIDAgMSAuODQzLS4xbC43MjguNTY2YS42LjYgMCAwIDEgLjEwNi44Mzd6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLVRyaXBsZUdyaXBwZXJcIiB2aWV3Qm94PVwiLTYgLTcuNSAyNCAyNFwiPjxwYXRoIGQ9XCJNMTEuNDkgOEguNTFhLjUuNSAwIDEgMCAwIDFoMTAuOThhLjUuNSAwIDEgMCAwLTF6TTExLjQ5IDRILjUxYS41LjUgMCAxIDAgMCAxaDEwLjk4YS41LjUgMCAwIDAgMC0xek0uNTEgMWgxMC45OGEuNS41IDAgMCAwIDAtMUguNTFhLjUuNSAwIDAgMCAwIDF6XCIvPjwvc3ltYm9sPjwvc3ZnPmA7XG4iLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHsgVGVtcGxhdGVSZXN1bHQgfSBmcm9tICdsaXQtZWxlbWVudCc7XG5cbmltcG9ydCB7IEljb25zZXRTVkcgfSBmcm9tICcuLi9pY29uc2V0L2ljb25zZXQtc3ZnJztcblxuaW1wb3J0IGljb25zU1ZHIGZyb20gJy4vaWNvbnMtbGFyZ2Uuc3ZnJztcblxuZXhwb3J0IGNsYXNzIEljb25zTGFyZ2UgZXh0ZW5kcyBJY29uc2V0U1ZHIHtcbiAgICBwdWJsaWMgc3RhdGljIGlzID0gJ3NwLWljb25zLWxhcmdlJztcblxuICAgIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICAgICAgdGhpcy5uYW1lID0gJ3VpJzsgLy8gZGVmYXVsdCBpY29uc2V0IG5hbWUgZm9yIHRoZXNlIGljb25zXG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHJlbmRlckRlZmF1bHRDb250ZW50KCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICAgICAgcmV0dXJuIGljb25zU1ZHO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBPdmVycmlkZXMgY3JlYXRlSWNvbk5hbWUgdG8gbWFrZSBpY29uIHN0cmluZ3MgY29tcGF0aWJsZSB3aXRoIHNwZWN0cnVtLWljb24gaWQgZm9ybWF0XG4gICAgICogQHBhcmFtIGljb25cbiAgICAgKiBAcGFyYW0gc2l6ZVxuICAgICAqL1xuICAgIHByb3RlY3RlZCBnZXRTVkdJY29uTmFtZShpY29uOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gYHNwZWN0cnVtLWljb24tJHtpY29ufWA7XG4gICAgfVxuICAgIHByb3RlY3RlZCBnZXRTYW5pdGl6ZWRJY29uTmFtZShpY29uOiBzdHJpbmcpOiBzdHJpbmcge1xuICAgICAgICByZXR1cm4gaWNvbi5yZXBsYWNlKCdzcGVjdHJ1bS1pY29uLScsICcnKTtcbiAgICB9XG59XG4iLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbmltcG9ydCB7IHN2ZyB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmV4cG9ydCBkZWZhdWx0IHN2Z2A8c3ZnIHhtbG5zPVwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1BbGVydE1lZGl1bVwiIHZpZXdCb3g9XCIwIDAgMTggMThcIj48cGF0aCBkPVwiTTguNTY0IDEuMjg5TC4yIDE2LjI1NkEuNS41IDAgMCAwIC42MzYgMTdoMTYuNzI4YS41LjUgMCAwIDAgLjQzNi0uNzQ0TDkuNDM2IDEuMjg5YS41LjUgMCAwIDAtLjg3MiAwek0xMCAxNC43NWEuMjUuMjUgMCAwIDEtLjI1LjI1aC0xLjVhLjI1LjI1IDAgMCAxLS4yNS0uMjV2LTEuNWEuMjUuMjUgMCAwIDEgLjI1LS4yNWgxLjVhLjI1LjI1IDAgMCAxIC4yNS4yNXptMC0zYS4yNS4yNSAwIDAgMS0uMjUuMjVoLTEuNWEuMjUuMjUgMCAwIDEtLjI1LS4yNXYtNmEuMjUuMjUgMCAwIDEgLjI1LS4yNWgxLjVhLjI1LjI1IDAgMCAxIC4yNS4yNXpcIi8+PC9zeW1ib2w+PHN5bWJvbCBpZD1cInNwZWN0cnVtLWljb24tQWxlcnRTbWFsbFwiIHZpZXdCb3g9XCItMiAtMiAxOCAxOFwiPjxwYXRoIGQ9XCJNNi42NiAxLjAwM0wuMTU3IDEyLjY0M2EuMzg5LjM4OSAwIDAgMCAuMzM5LjU4aDEzLjAxYS4zODkuMzg5IDAgMCAwIC4zNC0uNThMNy4zMzggMS4wMDRhLjM4OS4zODkgMCAwIDAtLjY3OCAwem0xLjExOCAxMC40N2EuMTk0LjE5NCAwIDAgMS0uMTk1LjE5NEg2LjQxN2EuMTk0LjE5NCAwIDAgMS0uMTk1LS4xOTV2LTEuMTY2YS4xOTQuMTk0IDAgMCAxIC4xOTUtLjE5NWgxLjE2NmEuMTk0LjE5NCAwIDAgMSAuMTk1LjE5NXptMC0yLjMzNGEuMTk0LjE5NCAwIDAgMS0uMTk1LjE5NEg2LjQxN2EuMTk0LjE5NCAwIDAgMS0uMTk1LS4xOTRWNC40NzJhLjE5NC4xOTQgMCAwIDEgLjE5NS0uMTk0aDEuMTY2YS4xOTQuMTk0IDAgMCAxIC4xOTUuMTk0elwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1BcnJvd0Rvd25TbWFsbFwiIHZpZXdCb3g9XCItNSAtNCAxOCAxOFwiPjxwYXRoIGQ9XCJNNy45OSA2LjAxYTEgMSAwIDAgMC0xLjcwNy0uNzA3TDUgNi41ODZWMWExIDEgMCAwIDAtMiAwdjUuNTg2TDEuNzE3IDUuMzAzQTEgMSAwIDEgMCAuMzAzIDYuNzE3bDIuOTkgMi45OGExIDEgMCAwIDAgMS40MTQgMGwyLjk5LTIuOThhLjk5Ny45OTcgMCAwIDAgLjI5My0uNzA3elwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1BcnJvd0xlZnRNZWRpdW1cIiB2aWV3Qm94PVwiLTIgLTQgMTggMThcIj48cGF0aCBkPVwiTTEyLjk5IDRIMy40MTRsMi4yODMtMi4yODNBMSAxIDAgMSAwIDQuMjgzLjMwM2wtMy45OCAzLjk5YTEgMSAwIDAgMCAwIDEuNDE0bDMuOTggMy45OWExIDEgMCAxIDAgMS40MTQtMS40MTRMMy40MTQgNmg5LjU3NmExIDEgMCAxIDAgMC0yelwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1BcnJvd1VwU21hbGxcIiB2aWV3Qm94PVwiLTUgLTQgMTggMThcIj48cGF0aCBkPVwiTTcuOTkgMy45OWExIDEgMCAwIDEtMS43MDcuNzA3TDUgMy40MTRWOWExIDEgMCAwIDEtMiAwVjMuNDE0TDEuNzE3IDQuNjk3QTEgMSAwIDEgMSAuMzAzIDMuMjgzbDIuOTktMi45OGExIDEgMCAwIDEgMS40MTQgMGwyLjk5IDIuOThhLjk5Ny45OTcgMCAwIDEgLjI5My43MDd6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUFzdGVyaXNrXCIgdmlld0JveD1cIi01IC01IDE4IDE4XCI+PHBhdGggZD1cIk02LjU3MyA2LjU1OGMuMDU2LjA1NS4wOTIuMTMgMCAuMjA0bC0xLjE0OC43NGMtLjA5My4wNTYtLjEzLjAyLS4xNjctLjA3M0wzLjgzMiA0Ljk0N2wtMS44NyAyLjA1NWMtLjAyLjAzNy0uMDc1LjA3NC0uMTMgMGwtLjg4OS0uOTI2Yy0uMDkyLS4wNTUtLjA3NC0uMTExIDAtLjE2N2wyLjExMS0xLjc2LTIuNDA4LS45MDZjLS4wMzcgMC0uMDkyLS4wNzQtLjA1NS0uMTY3bC42My0xLjI1OWEuMDk3LjA5NyAwIDAgMSAuMTY2LS4wMzZsMi4xMTEgMS4zNy4xMy0yLjcwNGEuMDk3LjA5NyAwIDAgMSAuMTExLS4xMUw1LjI3Ny41NGMuMDkyIDAgLjExLjAzNy4wOTIuMTNsLS43MjIgMi42NDcgMi40NDQtLjc0Yy4wNTYtLjAzOC4xMTEtLjAzOC4xNDguMDczbC4yNDEgMS4zN2MuMDE5LjA5MyAwIC4xMy0uMDc0LjEzbC0yLjU1Ni4yMDR6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUNoZWNrbWFya01lZGl1bVwiIHZpZXdCb3g9XCItMyAtMyAxOCAxOFwiPjxwYXRoIGQ9XCJNNC41IDEwYTEuMDIyIDEuMDIyIDAgMCAxLS43OTktLjM4NGwtMi40ODgtM2ExIDEgMCAwIDEgMS41NzYtMS4yMzNMNC41IDcuMzc2bDQuNzEyLTUuOTkxYTEgMSAwIDEgMSAxLjU3NiAxLjIzbC01LjUxIDdBLjk3OC45NzggMCAwIDEgNC41IDEwelwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1DaGVja21hcmtTbWFsbFwiIHZpZXdCb3g9XCItNCAtNCAxOCAxOFwiPjxwYXRoIGQ9XCJNMy43ODggOUEuOTk5Ljk5OSAwIDAgMSAzIDguNjE1bC0yLjI4OC0zYTEgMSAwIDEgMSAxLjU3Ni0xLjIzbDEuNSAxLjk5MSAzLjkyNC00Ljk5MWExIDEgMCAxIDEgMS41NzYgMS4yM2wtNC43MTIgNkEuOTk5Ljk5OSAwIDAgMSAzLjc4OCA5elwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1DaGV2cm9uRG93bk1lZGl1bVwiIHZpZXdCb3g9XCItNCAtNiAxOCAxOFwiPjxwYXRoIGQ9XCJNOS45OSAxLjAxQTEgMSAwIDAgMCA4LjI4My4zMDNMNSAzLjU4NiAxLjcxNy4zMDNBMSAxIDAgMSAwIC4zMDMgMS43MTdsMy45OSAzLjk4YTEgMSAwIDAgMCAxLjQxNCAwbDMuOTktMy45OGEuOTk3Ljk5NyAwIDAgMCAuMjkzLS43MDd6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUNoZXZyb25Eb3duU21hbGxcIiB2aWV3Qm94PVwiLTUgLTYgMTggMThcIj48cGF0aCBkPVwiTTQgNS41YS43NDcuNzQ3IDAgMCAwIC41My0uMjJjLjYwNy0uNTc3IDEuOTctMi4wMzggMy4yNC0zLjI0QS43NS43NSAwIDEgMCA2LjcxLjk4TDQgMy42OSAxLjI5Ljk4QS43NS43NSAwIDEgMCAuMjMgMi4wNGwzLjI0IDMuMjRBLjc0Ny43NDcgMCAwIDAgNCA1LjV6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUNoZXZyb25MZWZ0TGFyZ2VcIiB2aWV3Qm94PVwiLTMgLTEgMTggMThcIj48cGF0aCBkPVwiTTkuNjA1IDEzLjg0M0wzLjU1IDhsNi4wNTYtNS44NEExLjI0OCAxLjI0OCAwIDEgMCA3Ljg3Ni4zNjNMLjg4MiA3LjFhMS4yNDMgMS4yNDMgMCAwIDAgLjAwMyAxLjc5N2w2Ljk4OCA2Ljc0MmExLjI0OCAxLjI0OCAwIDEgMCAxLjczMi0xLjc5NnpcIi8+PC9zeW1ib2w+PHN5bWJvbCBpZD1cInNwZWN0cnVtLWljb24tQ2hldnJvbkxlZnRNZWRpdW1cIiB2aWV3Qm94PVwiLTYgLTQgMTggMThcIj48cGF0aCBkPVwiTTUuNjk3IDguMjgzTDIuNDE0IDVsMy4yODMtMy4yODNBMSAxIDAgMSAwIDQuMjgzLjMwM2wtMy45OCAzLjk5YTEgMSAwIDAgMCAwIDEuNDE0bDMuOTggMy45OWExIDEgMCAxIDAgMS40MTQtMS40MTR6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUNoZXZyb25SaWdodExhcmdlXCIgdmlld0JveD1cIi0zIC0xIDE4IDE4XCI+PHBhdGggZD1cIk0xMS41IDhhMS4yNDEgMS4yNDEgMCAwIDAtLjM4Ni0uODk3TDQuMTI4LjM2YTEuMjQ4IDEuMjQ4IDAgMSAwLTEuNzMzIDEuNzk3TDguNDUgOGwtNi4wNTggNS44NGExLjI0OCAxLjI0OCAwIDEgMCAxLjczMyAxLjc5N0wxMS4xMTcgOC45QTEuMjQ1IDEuMjQ1IDAgMCAwIDExLjUgOHpcIi8+PC9zeW1ib2w+PHN5bWJvbCBpZD1cInNwZWN0cnVtLWljb24tQ2hldnJvblJpZ2h0TWVkaXVtXCIgdmlld0JveD1cIi02IC00IDE4IDE4XCI+PHBhdGggZD1cIk01Ljk5IDVhLjk5Ny45OTcgMCAwIDAtLjI5My0uNzA3TDEuNzE3LjMwM0ExIDEgMCAxIDAgLjMwMyAxLjcxN0wzLjU4NiA1IC4zMDMgOC4yODNhMSAxIDAgMSAwIDEuNDE0IDEuNDE0bDMuOTgtMy45OUEuOTk3Ljk5NyAwIDAgMCA1Ljk5IDV6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUNoZXZyb25SaWdodFNtYWxsXCIgdmlld0JveD1cIi02IC01IDE4IDE4XCI+PHBhdGggZD1cIk01LjUgNGEuNzQ3Ljc0NyAwIDAgMC0uMjItLjUzQzQuNzAzIDIuODYyIDMuMjQyIDEuNSAyLjA0LjIzQS43NS43NSAwIDEgMCAuOTggMS4yOUwzLjY5IDQgLjk4IDYuNzFhLjc1Ljc1IDAgMSAwIDEuMDYgMS4wNmwzLjI0LTMuMjRBLjc0Ny43NDcgMCAwIDAgNS41IDR6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUNoZXZyb25VcFNtYWxsXCIgdmlld0JveD1cIi01IC02IDE4IDE4XCI+PHBhdGggZD1cIk00IC41YS43NDcuNzQ3IDAgMCAwLS41My4yMkMyLjg2MiAxLjI5NyAxLjUgMi43NTguMjMgMy45NmEuNzUuNzUgMCAxIDAgMS4wNiAxLjA2TDQgMi4zMWwyLjcxIDIuNzFhLjc1Ljc1IDAgMSAwIDEuMDYtMS4wNkw0LjUzLjcyQS43NDcuNzQ3IDAgMCAwIDQgLjV6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUNvcm5lclRyaWFuZ2xlXCIgdmlld0JveD1cIi02LjUgLTYuNSAxOCAxOFwiPjxwYXRoIGQ9XCJNNC43NC4wMWEuMjUuMjUgMCAwIDAtLjE3Ny4wNzNsLTQuNDggNC40OGEuMjUuMjUgMCAwIDAgLjE3Ny40MjdoNC40OGEuMjUuMjUgMCAwIDAgLjI1LS4yNVYuMjZhLjI1LjI1IDAgMCAwLS4yNS0uMjV6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUNyb3NzTGFyZ2VcIiB2aWV3Qm94PVwiLTMgLTMgMTggMThcIj48cGF0aCBkPVwiTTExLjY5NyAxMC4yODNMNy40MTQgNmw0LjI4My00LjI4M0ExIDEgMCAxIDAgMTAuMjgzLjMwM0w2IDQuNTg2IDEuNzE3LjMwM0ExIDEgMCAxIDAgLjMwMyAxLjcxN0w0LjU4NiA2IC4zMDMgMTAuMjgzYTEgMSAwIDEgMCAxLjQxNCAxLjQxNEw2IDcuNDE0bDQuMjgzIDQuMjgzYTEgMSAwIDEgMCAxLjQxNC0xLjQxNHpcIi8+PC9zeW1ib2w+PHN5bWJvbCBpZD1cInNwZWN0cnVtLWljb24tQ3Jvc3NNZWRpdW1cIiB2aWV3Qm94PVwiLTUgLTUgMTggMThcIj48cGF0aCBkPVwiTTcuNzcgNi43MUw1LjA2IDRsMi43MS0yLjcxQS43NS43NSAwIDEgMCA2LjcxLjIzTDQgMi45NCAxLjI5LjIzQS43NS43NSAwIDEgMCAuMjMgMS4yOUwyLjk0IDQgLjIzIDYuNzFhLjc1Ljc1IDAgMSAwIDEuMDYgMS4wNkw0IDUuMDZsMi43MSAyLjcxYS43NS43NSAwIDEgMCAxLjA2LTEuMDZ6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUNyb3NzU21hbGxcIiB2aWV3Qm94PVwiLTUgLTUgMTggMThcIj48cGF0aCBkPVwiTTcuMzE3IDYuNDMzTDQuODg0IDRsMi40MzMtMi40MzNhLjYyNS42MjUgMCAxIDAtLjg4NC0uODg0TDQgMy4xMTYgMS41NjcuNjgzYS42MjUuNjI1IDAgMSAwLS44ODQuODg0TDMuMTE2IDQgLjY4MyA2LjQzM2EuNjI1LjYyNSAwIDEgMCAuODg0Ljg4NEw0IDQuODg0bDIuNDMzIDIuNDMzYS42MjUuNjI1IDAgMCAwIC44ODQtLjg4NHpcIi8+PC9zeW1ib2w+PHN5bWJvbCBpZD1cInNwZWN0cnVtLWljb24tRGFzaFNtYWxsXCIgdmlld0JveD1cIi00IC00IDE4IDE4XCI+PHBhdGggZD1cIk04IDRIMmExIDEgMCAwIDAgMCAyaDZhMSAxIDAgMCAwIDAtMnpcIi8+PC9zeW1ib2w+PHN5bWJvbCBpZD1cInNwZWN0cnVtLWljb24tRG91YmxlR3JpcHBlclwiIHZpZXdCb3g9XCItMSAtNyAxOCAxOFwiPjxwYXRoIGQ9XCJNMTUuNDkgM0guNTFhLjUuNSAwIDEgMCAwIDFoMTQuOThhLjUuNSAwIDEgMCAwLTF6TS41MSAxaDE0Ljk4YS41LjUgMCAwIDAgMC0xSC41MWEuNS41IDAgMCAwIDAgMXpcIi8+PC9zeW1ib2w+PHN5bWJvbCBpZD1cInNwZWN0cnVtLWljb24tSGVscE1lZGl1bVwiIHZpZXdCb3g9XCIwIDAgMTggMThcIj48cGF0aCBkPVwiTTkgMWE4IDggMCAxIDAgOCA4IDggOCAwIDAgMC04LTh6bTEuMyAxMi4zYTEuMjIyIDEuMjIyIDAgMCAxLS4zLjkgMS4yMjMgMS4yMjMgMCAwIDEtLjkuMyAxLjIgMS4yIDAgMCAxIDAtMi40Yy44IDAgMS4zLjUgMS4yIDEuMnptLjEtNC41Yy0uNC40LS44LjgtLjggMS4yYTEuMTM1IDEuMTM1IDAgMCAwIC4zLjh2LjFhLjA5OC4wOTggMCAwIDEtLjA5Ni4xSDguNGEuMjI5LjIyOSAwIDAgMS0uMi0uMSAxLjY2NiAxLjY2NiAwIDAgMS0uNC0xLjEgMi43NzIgMi43NzIgMCAwIDEgMS0xLjcgMi43NzIgMi43NzIgMCAwIDAgMS0xLjdjMC0uNS0uNC0xLjEtMS40LTEuMWE1LjAxOCA1LjAxOCAwIDAgMC0yIC40aC0uMlY0LjNjMC0uMSAwLS4yLjEtLjJhNi4xODMgNi4xODMgMCAwIDEgMi40LS41YzEuOSAwIDMuMSAxLjEgMy4xIDIuN2EzLjcwNCAzLjcwNCAwIDAgMS0xLjQgMi41elwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1IZWxwU21hbGxcIiB2aWV3Qm94PVwiLTIgLTIgMTggMThcIj48cGF0aCBkPVwiTTcgLjc3OEE2LjIyMiA2LjIyMiAwIDEgMCAxMy4yMjIgNyA2LjIyMiA2LjIyMiAwIDAgMCA3IC43Nzh6bS4wMTggMTAuNDUyYTEuMDQ2IDEuMDQ2IDAgMSAxLS4wOC0yLjA5MXEuMDQtLjAwMi4wOCAwYTEuMDE5IDEuMDE5IDAgMCAxIDEuMDg3Ljk0NnEuMDAzLjA0Ni4wMDIuMDkyYTEuMDA0IDEuMDA0IDAgMCAxLTEuMDkgMS4wNTN6bTEuMzg3LTQuOTg1bC0uMDc4LjA3OGMtLjMwNy4zMjItLjY1NS42ODctLjY1NS45MTNhMS4wNzggMS4wNzggMCAwIDAgLjE0LjUyNWwuMDU2LjEwOC0uMDQ0LjE2N2EuMjQuMjQgMCAwIDEtLjIyMS4xNDdINi41NmEuMzM4LjMzOCAwIDAgMS0uMjUyLS4wOTEgMS42IDEuNiAwIDAgMS0uMzI5LS45ODIgMi4zNzggMi4zNzggMCAwIDEgLjg2NC0xLjYxYy4wNzgtLjA4Ni4xNTYtLjE2NC4yMjQtLjIzNC4yNDUtLjI1Mi4zOTUtLjQxNi4zOTUtLjU5IDAtLjExOSAwLS40ODMtLjY5NS0uNDgzYTIuMyAyLjMgMCAwIDAtMS4yMjkuMzU3LjIzMy4yMzMgMCAwIDEtLjI1NC0uMDA4bC0uMDkyLS4wNjYtLjAyMi0uMTc1VjMuMTc0YS4zNDIuMzQyIDAgMCAxIC4xNTYtLjMxOUEzLjIxNiAzLjIxNiAwIDAgMSA3IDIuNDI1YTEuOTg1IDEuOTg1IDAgMCAxIDIuMTQgMi4wNTEgMi4zODUgMi4zODUgMCAwIDEtLjczNSAxLjc2OXpcIi8+PC9zeW1ib2w+PHN5bWJvbCBpZD1cInNwZWN0cnVtLWljb24tSW5mb01lZGl1bVwiIHZpZXdCb3g9XCIwIDAgMTggMThcIj48cGF0aCBkPVwiTTkgMWE4IDggMCAxIDAgOCA4IDggOCAwIDAgMC04LTh6bS0uMTUgMi4xNWExLjM1OSAxLjM1OSAwIDAgMSAxLjQzMSAxLjI4M3EuMDA0LjA2NC4wMDEuMTI5QTEuMzMyIDEuMzMyIDAgMCAxIDguODUgNS45OTRhMS4zNTMgMS4zNTMgMCAwIDEtMS40MzItMS40MzMgMS4zNTkgMS4zNTkgMCAwIDEgMS4zMDQtMS40MTJxLjA2NC0uMDAyLjEyOC4wMDF6TTExIDEzLjVhLjUuNSAwIDAgMS0uNS41aC0zYS41LjUgMCAwIDEtLjUtLjV2LTFhLjUuNSAwIDAgMSAuNS0uNUg4VjloLS41YS41LjUgMCAwIDEtLjUtLjV2LTFhLjUuNSAwIDAgMSAuNS0uNWgyYS41LjUgMCAwIDEgLjUuNVYxMmguNWEuNS41IDAgMCAxIC41LjV6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLUluZm9TbWFsbFwiIHZpZXdCb3g9XCItMiAtMiAxOCAxOFwiPjxwYXRoIGQ9XCJNNyAuNzc4QTYuMjIyIDYuMjIyIDAgMSAwIDEzLjIyMiA3IDYuMjIyIDYuMjIyIDAgMCAwIDcgLjc3OHpNNi44ODMgMi40NWExLjA1NyAxLjA1NyAwIDAgMSAxLjExMy45OThxLjAwMy4wNS4wMDEuMWExLjAzNiAxLjAzNiAwIDAgMS0xLjExNCAxLjExNEExLjA1MiAxLjA1MiAwIDAgMSA1Ljc3IDMuNTQ3IDEuMDU3IDEuMDU3IDAgMCAxIDYuNzg0IDIuNDVxLjA1LS4wMDIuMS4wMDF6bTEuNjczIDguMDVhLjM4OS4zODkgMCAwIDEtLjM5LjM4OUg1LjgzNGEuMzg5LjM4OSAwIDAgMS0uMzg5LS4zODl2LS43NzhhLjM4OS4zODkgMCAwIDEgLjM5LS4zODloLjM4OFY3aC0uMzg5YS4zODkuMzg5IDAgMCAxLS4zODktLjM4OXYtLjc3OGEuMzg5LjM4OSAwIDAgMSAuMzktLjM4OWgxLjU1NWEuMzg5LjM4OSAwIDAgMSAuMzg5LjM5djMuNWguMzg5YS4zODkuMzg5IDAgMCAxIC4zODkuMzg4elwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1NYWduaWZpZXJcIiB2aWV3Qm94PVwiLTEgLTEgMTggMThcIj48cGF0aCBkPVwiTTE1Ljc3IDE0LjcxbC00LjUzNC00LjUzNWE2LjAxNCA2LjAxNCAwIDEgMC0xLjA2IDEuMDZsNC41MzMgNC41MzVhLjc1Ljc1IDAgMSAwIDEuMDYxLTEuMDZ6TTYuNSAxMUE0LjUgNC41IDAgMSAxIDExIDYuNSA0LjUwNSA0LjUwNSAwIDAgMSA2LjUgMTF6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLVNraXBMZWZ0XCIgdmlld0JveD1cIi00LjUgLTQgMTggMThcIj48cGF0aCBkPVwiTTguNjk3IDguMjgzTDUuNDE0IDVsMy4yODMtMy4yODNBMSAxIDAgMSAwIDcuMjgzLjMwM2wtMy45OSAzLjk5YTEgMSAwIDAgMCAwIDEuNDE0bDMuOTkgMy45OWExIDEgMCAxIDAgMS40MTQtMS40MTR6TTEgLjAxYTEgMSAwIDAgMC0xIDF2Ny45OGExIDEgMCAwIDAgMiAwVjEuMDFhMSAxIDAgMCAwLTEtMXpcIi8+PC9zeW1ib2w+PHN5bWJvbCBpZD1cInNwZWN0cnVtLWljb24tU2tpcFJpZ2h0XCIgdmlld0JveD1cIi00LjUgLTQgMTggMThcIj48cGF0aCBkPVwiTTggLjAxYTEgMSAwIDAgMC0xIDF2Ny45OGExIDEgMCAxIDAgMiAwVjEuMDFhMSAxIDAgMCAwLTEtMXpNNiA1YS45OTcuOTk3IDAgMCAwLS4yOTMtLjcwN0wxLjcxNy4zMDNBMSAxIDAgMSAwIC4zMDMgMS43MTdMMy41ODYgNSAuMzAzIDguMjgzYTEgMSAwIDEgMCAxLjQxNCAxLjQxNGwzLjk5LTMuOTlBLjk5Ny45OTcgMCAwIDAgNiA1elwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1TdGFyXCIgdmlld0JveD1cIjAgMCAxOCAxOFwiPjxwYXRoIGQ9XCJNOS4yNDEuM2wyLjE2MSA1LjcxNSA2LjEwNi4yODlhLjI1NS4yNTUgMCAwIDEgLjE0Ny40NTRsLTQuNzcgMy44MjMgMS42MTIgNS45YS4yNTUuMjU1IDAgMCAxLS4zODYuMjhMOS4wMDIgMTMuNGwtNS4xMSAzLjM1OGEuMjU1LjI1NSAwIDAgMS0uMzg2LS4yOGwxLjYxMi01LjktNC43Ny0zLjgyMUEuMjU1LjI1NSAwIDAgMSAuNDk1IDYuM2w2LjEwNy0uMjg1TDguNzYzLjNhLjI1NS4yNTUgMCAwIDEgLjQ3OCAwelwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1TdGFyT3V0bGluZVwiIHZpZXdCb3g9XCIwIDAgMTggMThcIj48cGF0aCBkPVwiTTkuMDMxIDIuNTQxbDEuNzc3IDQuNzUzIDUuMTEuMjQxLTMuOTg3IDMuMiAxLjMzNiA0LjkxMy00LjI2Ni0yLjc4Mi00LjI4MiAyLjgwOCAxLjM1Mi00LjkzNy0zLjk4Ny0zLjIgNS4xLS4yNDV6TTkuMDQyLjQxMmEuMzY5LjM2OSAwIDAgMC0uMzQ5LjIzOUw2LjQ4NiA2LjMyNmwtNi4xLjI5M2EuMzc1LjM3NSAwIDAgMC0uMjE3LjY2N2w0Ljc2MiAzLjgyMUwzLjMxOCAxN2EuMzc2LjM3NiAwIDAgMCAuMzYyLjQ3NS4zNzEuMzcxIDAgMCAwIC4yLS4wNjNsNS4xMjEtMy4zNTEgNS4wOTUgMy4zMjRhLjM3MS4zNzEgMCAwIDAgLjIuMDYyLjM3Ni4zNzYgMCAwIDAgLjM2My0uNDc1bC0xLjU5NS01Ljg2NiA0Ljc2Ny0zLjgyNmEuMzc1LjM3NSAwIDAgMC0uMjE3LS42NjdsLTYuMS0uMjg3TDkuMzkzLjY1NWEuMzY5LjM2OSAwIDAgMC0uMzUxLS4yNDN6XCIvPjwvc3ltYm9sPjxzeW1ib2wgaWQ9XCJzcGVjdHJ1bS1pY29uLVN1Y2Nlc3NNZWRpdW1cIiB2aWV3Qm94PVwiMCAwIDE4IDE4XCI+PHBhdGggZD1cIk05IDFhOCA4IDAgMSAwIDggOCA4IDggMCAwIDAtOC04em01LjMzMyA0LjU0bC02LjMyNCA4LjEzYS42LjYgMCAwIDEtLjQzNy4yM2gtLjAzN2EuNi42IDAgMCAxLS40MjUtLjE3NmwtMy44OTMtMy45YS42LjYgMCAwIDEgMC0uODQ5bC42NjMtLjY2M2EuNi42IDAgMCAxIC44NDggMEw3LjQgMTAuOTkxbDUuMjU2LTYuNzU0YS42LjYgMCAwIDEgLjg0My0uMWwuNzI4LjU2NmEuNi42IDAgMCAxIC4xMDYuODM3elwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1TdWNjZXNzU21hbGxcIiB2aWV3Qm94PVwiLTIgLTIgMTggMThcIj48cGF0aCBkPVwiTTcgLjc3OEE2LjIyMiA2LjIyMiAwIDEgMCAxMy4yMjIgNyA2LjIyMiA2LjIyMiAwIDAgMCA3IC43Nzh6bTQuMTQ4IDMuNTNsLTQuOTE5IDYuMzI0YS40NjcuNDY3IDAgMCAxLS4zNC4xOGgtLjAyOGEuNDY3LjQ2NyAwIDAgMS0uMzMxLS4xMzhMMi41MDIgNy42NDFhLjQ2Ny40NjcgMCAwIDEgMC0uNjZsLjUxNi0uNTE2YS40NjcuNDY3IDAgMCAxIC42NiAwbDIuMDc4IDIuMDg0IDQuMDg4LTUuMjU0YS40NjcuNDY3IDAgMCAxIC42NTUtLjA3OGwuNTY2LjQ0YS40NjcuNDY3IDAgMCAxIC4wODMuNjUyelwiLz48L3N5bWJvbD48c3ltYm9sIGlkPVwic3BlY3RydW0taWNvbi1UcmlwbGVHcmlwcGVyXCIgdmlld0JveD1cIi00IC01LjUgMTggMThcIj48cGF0aCBkPVwiTTkuNDkgNkguNTFhLjUuNSAwIDEgMCAwIDFoOC45OGEuNS41IDAgMCAwIDAtMXpNOS40OSAzSC41MWEuNS41IDAgMSAwIDAgMWg4Ljk4YS41LjUgMCAwIDAgMC0xek0uNTEgMWg4Ljk4YS41LjUgMCAwIDAgMC0xSC41MWEuNS41IDAgMCAwIDAgMXpcIi8+PC9zeW1ib2w+PC9zdmc+YDtcbiIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBUZW1wbGF0ZVJlc3VsdCB9IGZyb20gJ2xpdC1lbGVtZW50JztcblxuaW1wb3J0IHsgSWNvbnNldFNWRyB9IGZyb20gJy4uL2ljb25zZXQvaWNvbnNldC1zdmcnO1xuXG5pbXBvcnQgaWNvbnNTVkcgZnJvbSAnLi9pY29ucy1tZWRpdW0uc3ZnJztcblxuZXhwb3J0IGNsYXNzIEljb25zTWVkaXVtIGV4dGVuZHMgSWNvbnNldFNWRyB7XG4gICAgcHVibGljIHN0YXRpYyBpcyA9ICdzcC1pY29ucy1tZWRpdW0nO1xuXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm5hbWUgPSAndWknOyAvLyBkZWZhdWx0IGljb25zZXQgbmFtZSBmb3IgdGhlc2UgaWNvbnNcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcmVuZGVyRGVmYXVsdENvbnRlbnQoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgICAgICByZXR1cm4gaWNvbnNTVkc7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlcyBjcmVhdGVJY29uTmFtZSB0byBtYWtlIGljb24gc3RyaW5ncyBjb21wYXRpYmxlIHdpdGggc3BlY3RydW0taWNvbiBpZCBmb3JtYXRcbiAgICAgKiBAcGFyYW0gaWNvblxuICAgICAqIEBwYXJhbSBzaXplXG4gICAgICovXG4gICAgcHJvdGVjdGVkIGdldFNWR0ljb25OYW1lKGljb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBgc3BlY3RydW0taWNvbi0ke2ljb259YDtcbiAgICB9XG4gICAgcHJvdGVjdGVkIGdldFNhbml0aXplZEljb25OYW1lKGljb246IHN0cmluZyk6IHN0cmluZyB7XG4gICAgICAgIHJldHVybiBpY29uLnJlcGxhY2UoJ3NwZWN0cnVtLWljb24tJywgJycpO1xuICAgIH1cbn1cbiIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuZXhwb3J0ICogZnJvbSAnLi9pY29ucy1sYXJnZSc7XG5leHBvcnQgKiBmcm9tICcuL2ljb25zLW1lZGl1bSc7XG4iLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbmV4cG9ydCAqIGZyb20gJy4vaWNvbnNldCc7XG5leHBvcnQgKiBmcm9tICcuL2ljb25zZXQtc3ZnJztcbmV4cG9ydCAqIGZyb20gJy4vaWNvbnNldC1yZWdpc3RyeSc7XG4iLCJpbXBvcnQgeyBjc3MgfSBmcm9tICdsaXQtZWxlbWVudCc7XG5jb25zdCBzdHlsZXMgPSBjc3NgXG46aG9zdHtkaXNwbGF5OmJsb2NrO3dpZHRoOjI0MHB4Oy0tc3BlY3RydW0td2ViLWNvbXBvbmVudC1zaWRlbmF2LWZvbnQtd2VpZ2h0OnZhcigtLXNwZWN0cnVtLXNpZGVuYXYtaXRlbS1mb250LXdlaWdodCw0MDApfTpob3N0KFt2YXJpYW50PW11bHRpbGV2ZWxdKXstLXNwZWN0cnVtLXdlYi1jb21wb25lbnQtc2lkZW5hdi1mb250LXdlaWdodDp2YXIoLS1zcGVjdHJ1bS1zaWRlbmF2LW11bHRpbGV2ZWwtbWFpbi1pdGVtLWZvbnQtd2VpZ2h0LDcwMCl9dWx7bGlzdC1zdHlsZS10eXBlOm5vbmU7bWFyZ2luOjA7cGFkZGluZzowfVxuYDtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlczsiLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHtcbiAgICBodG1sLFxuICAgIExpdEVsZW1lbnQsXG4gICAgQ1NTUmVzdWx0QXJyYXksXG4gICAgVGVtcGxhdGVSZXN1bHQsXG4gICAgcHJvcGVydHksXG59IGZyb20gJ2xpdC1lbGVtZW50JztcblxuaW1wb3J0IHsgU3RyaWN0Q3VzdG9tRXZlbnQgfSBmcm9tICcuLi9ldmVudHMnO1xuaW1wb3J0IHNpZGVuYXZTdHlsZXMgZnJvbSAnLi9zaWRlbmF2LmNzcyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgU2lkZW5hdlNlbGVjdERldGFpbCB7XG4gICAgdmFsdWU6IHN0cmluZztcbn1cblxuZXhwb3J0IGNsYXNzIFNpZGVOYXYgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGlzID0gJ3NwLXNpZGVuYXYnO1xuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgc3R5bGVzKCk6IENTU1Jlc3VsdEFycmF5IHtcbiAgICAgICAgcmV0dXJuIFtzaWRlbmF2U3R5bGVzXTtcbiAgICB9XG5cbiAgICBAcHJvcGVydHkoeyByZWZsZWN0OiB0cnVlIH0pXG4gICAgcHVibGljIHZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbiAgICBwcml2YXRlIGhhbmRsZVNlbGVjdChldjogU3RyaWN0Q3VzdG9tRXZlbnQ8J3NwLXNpZGVuYXY6c2VsZWN0Jz4pOiB2b2lkIHtcbiAgICAgICAgdGhpcy52YWx1ZSA9IGV2LmRldGFpbC52YWx1ZTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcmVuZGVyKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICA8bmF2IEBzaWRlbmF2LXNlbGVjdD0ke3RoaXMuaGFuZGxlU2VsZWN0fT5cbiAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgPC9uYXY+XG4gICAgICAgIGA7XG4gICAgfVxufVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgaW50ZXJmYWNlIEdsb2JhbEV2ZW50SGFuZGxlcnNFdmVudE1hcCB7XG4gICAgICAgICdzcC1zaWRlbmF2OnNlbGVjdCc6IEN1c3RvbUV2ZW50PFNpZGVuYXZTZWxlY3REZXRhaWw+O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmNvbnN0IHN0eWxlcyA9IGNzc2BcbiNsaXN0e21hcmdpbjowO3BhZGRpbmc6MH0jbGlzdCw6aG9zdHtsaXN0LXN0eWxlLXR5cGU6bm9uZX06aG9zdHttYXJnaW46dmFyKC0tc3BlY3RydW0tc2lkZW5hdi1pdGVtLWdhcCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNTApKSAwfSNpdGVtTGlua3twb3NpdGlvbjpyZWxhdGl2ZTtkaXNwbGF5OmlubGluZS1mbGV4O2FsaWduLWl0ZW1zOmNlbnRlcjtqdXN0aWZ5LWNvbnRlbnQ6bGVmdDtib3gtc2l6aW5nOmJvcmRlci1ib3g7d2lkdGg6MTAwJTttaW4taGVpZ2h0OnZhcigtLXNwZWN0cnVtLXNpZGVuYXYtaXRlbS1oZWlnaHQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTQwMCkpO3BhZGRpbmc6dmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTY1KSB2YXIoLS1zcGVjdHJ1bS1zaWRlbmF2LWl0ZW0tcGFkZGluZy14LHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0xNTApKTtib3JkZXItcmFkaXVzOnZhcigtLXNwZWN0cnVtLXNpZGVuYXYtaXRlbS1ib3JkZXItcmFkaXVzLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS01MCkpO2ZvbnQtc2l6ZTp2YXIoLS1zcGVjdHJ1bS1zaWRlbmF2LWl0ZW0tdGV4dC1zaXplLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tZm9udC1zaXplLTEwMCkpO2ZvbnQtd2VpZ2h0OnZhcigtLXNwZWN0cnVtLXNpZGVuYXYtaXRlbS1mb250LXdlaWdodCw0MDApO2ZvbnQtc3R5bGU6bm9ybWFsO3RleHQtZGVjb3JhdGlvbjpub25lO3dvcmQtYnJlYWs6YnJlYWstd29yZDstd2Via2l0LWh5cGhlbnM6YXV0bztoeXBoZW5zOmF1dG87Y3Vyc29yOnBvaW50ZXI7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kLWNvbG9yIHZhcigtLXNwZWN0cnVtLWdsb2JhbC1hbmltYXRpb24tZHVyYXRpb24tMTAwLC4xM3MpIGVhc2Utb3V0LGNvbG9yIHZhcigtLXNwZWN0cnVtLWdsb2JhbC1hbmltYXRpb24tZHVyYXRpb24tMTAwLC4xM3MpIGVhc2Utb3V0O2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tc2lkZW5hdi1pdGVtLWJhY2tncm91bmQtY29sb3IsdHJhbnNwYXJlbnQpO2NvbG9yOnZhcigtLXNwZWN0cnVtLXNpZGVuYXYtaXRlbS10ZXh0LWNvbG9yLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTgwMCkpfSNpdGVtTGluazpmb2N1c3tvdXRsaW5lOm5vbmU7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1zaWRlbmF2LWl0ZW0tYmFja2dyb3VuZC1jb2xvci1rZXktZm9jdXMsdmFyKC0tc3BlY3RydW0tYWxpYXMtaGlnaGxpZ2h0LWhvdmVyKSk7Y29sb3I6dmFyKC0tc3BlY3RydW0tc2lkZW5hdi1pdGVtLXRleHQtY29sb3Ita2V5LWZvY3VzLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTkwMCkpfSNpdGVtTGluazpmb2N1czpiZWZvcmV7Y29udGVudDpcIlwiO3Bvc2l0aW9uOmFic29sdXRlO3RvcDowO2xlZnQ6MDtyaWdodDowO2JvdHRvbTowO2JvcmRlci1jb2xvcjp0cmFuc3BhcmVudDtib3JkZXItcmFkaXVzOnZhcigtLXNwZWN0cnVtLXNpZGVuYXYtaXRlbS1ib3JkZXItcmFkaXVzLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS01MCkpO2JvcmRlcjp2YXIoLS1zcGVjdHJ1bS10YWJzLWZvY3VzLXJpbmctc2l6ZSwycHgpIHNvbGlkIHZhcigtLXNwZWN0cnVtLXNpZGVuYXYtaXRlbS1ib3JkZXItY29sb3Ita2V5LWZvY3VzLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ibHVlLTQwMCkpfSNpdGVtTGluayAuc3BlY3RydW0tU2lkZU5hdi1pdGVtSWNvbnttYXJnaW4tcmlnaHQ6dmFyKC0tc3BlY3RydW0tc2lkZW5hdi1pY29uLWdhcCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTAwKSl9Omhvc3QoW3NlbGVjdGVkXSk+I2l0ZW1MaW5re2NvbG9yOnZhcigtLXNwZWN0cnVtLXNpZGVuYXYtaXRlbS10ZXh0LWNvbG9yLXNlbGVjdGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTkwMCkpO2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tc2lkZW5hdi1pdGVtLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQsdmFyKC0tc3BlY3RydW0tYWxpYXMtaGlnaGxpZ2h0LWhvdmVyKSl9LmlzLWFjdGl2ZT4jaXRlbUxpbmt7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1zaWRlbmF2LWl0ZW0tYmFja2dyb3VuZC1jb2xvci1kb3duLHZhcigtLXNwZWN0cnVtLWFsaWFzLWhpZ2hsaWdodC1ob3ZlcikpfTpob3N0KFtkaXNhYmxlZF0pICNpdGVtTGlua3tiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLXNpZGVuYXYtaXRlbS1iYWNrZ3JvdW5kLWNvbG9yLWRpc2FibGVkLHRyYW5zcGFyZW50KTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1zaWRlbmF2LWl0ZW0tdGV4dC1jb2xvci1kaXNhYmxlZCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS01MDApKTtjdXJzb3I6ZGVmYXVsdDtwb2ludGVyLWV2ZW50czpub25lfSNpdGVtTGluazpob3ZlcntiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLXNpZGVuYXYtaXRlbS1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyLHZhcigtLXNwZWN0cnVtLWFsaWFzLWhpZ2hsaWdodC1ob3ZlcikpO2NvbG9yOnZhcigtLXNwZWN0cnVtLXNpZGVuYXYtaXRlbS10ZXh0LWNvbG9yLWhvdmVyLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTkwMCkpfSNpdGVtTGluazphY3RpdmV7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1zaWRlbmF2LWl0ZW0tYmFja2dyb3VuZC1jb2xvci1kb3duLHZhcigtLXNwZWN0cnVtLWFsaWFzLWhpZ2hsaWdodC1ob3ZlcikpfTpob3N0KFttdWx0aUxldmVsXSl7LS1zcGVjdHJ1bS13ZWItY29tcG9uZW50LXNpZGVuYXYtZm9udC13ZWlnaHQ6dmFyKC0tc3BlY3RydW0tc2lkZW5hdi1pdGVtLWZvbnQtd2VpZ2h0LDcwMCl9OjpzbG90dGVkKHNwLXNpZGVuYXYtaXRlbSl7LS1zcGVjdHJ1bS13ZWItY29tcG9uZW50LXNpZGVuYXYtZm9udC13ZWlnaHQ6dmFyKC0tc3BlY3RydW0tc2lkZW5hdi1pdGVtLWZvbnQtd2VpZ2h0LDQwMCl9I2l0ZW1MaW5re2ZvbnQtd2VpZ2h0OnZhcigtLXNwZWN0cnVtLXdlYi1jb21wb25lbnQtc2lkZW5hdi1mb250LXdlaWdodCl9I2l0ZW1MaW5rW2RhdGEtbGV2ZWw9XCIxXCJde3BhZGRpbmctbGVmdDpjYWxjKHZhcigtLXNwZWN0cnVtLXNpZGVuYXYtbXVsdGlsZXZlbC1pdGVtLWluZGVudGF0aW9uLWxldmVsMSxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0xNTApKSArIHZhcigtLXNwZWN0cnVtLXNpZGVuYXYtaXRlbS1wYWRkaW5nLXgsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTUwKSkpfSNpdGVtTGlua1tkYXRhLWxldmVsPVwiMlwiXXtwYWRkaW5nLWxlZnQ6Y2FsYyh2YXIoLS1zcGVjdHJ1bS1zaWRlbmF2LW11bHRpbGV2ZWwtaXRlbS1pbmRlbnRhdGlvbi1sZXZlbDIsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMzAwKSkgKyB2YXIoLS1zcGVjdHJ1bS1zaWRlbmF2LWl0ZW0tcGFkZGluZy14LFxudmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTE1MCkpKX1cbmA7XG5leHBvcnQgZGVmYXVsdCBzdHlsZXM7IiwiLypcbkNvcHlyaWdodCAyMDE4IEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbm9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG50aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbk9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCB7XG4gICAgaHRtbCxcbiAgICBMaXRFbGVtZW50LFxuICAgIENTU1Jlc3VsdEFycmF5LFxuICAgIFRlbXBsYXRlUmVzdWx0LFxuICAgIHByb3BlcnR5LFxufSBmcm9tICdsaXQtZWxlbWVudCc7XG5pbXBvcnQgeyBpZkRlZmluZWQgfSBmcm9tICdsaXQtaHRtbC9kaXJlY3RpdmVzL2lmLWRlZmluZWQuanMnO1xuaW1wb3J0IHsgc3RyaWN0Q3VzdG9tRXZlbnQgfSBmcm9tICcuLi9ldmVudHMnO1xuXG5pbXBvcnQgeyBTaWRlbmF2U2VsZWN0RGV0YWlsLCBTaWRlTmF2IH0gZnJvbSAnLi9zaWRlbmF2JztcblxuaW1wb3J0IHNpZGVuYXZJdGVtU3R5bGVzIGZyb20gJy4vc2lkZW5hdi1pdGVtLmNzcyc7XG5cbmV4cG9ydCBjbGFzcyBTaWRlTmF2SXRlbSBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgaXMgPSAnc3Atc2lkZW5hdi1pdGVtJztcblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IHN0eWxlcygpOiBDU1NSZXN1bHRBcnJheSB7XG4gICAgICAgIHJldHVybiBbc2lkZW5hdkl0ZW1TdHlsZXNdO1xuICAgIH1cblxuICAgIEBwcm9wZXJ0eSgpXG4gICAgcHVibGljIHZhbHVlOiBzdHJpbmcgfCB1bmRlZmluZWQgPSB1bmRlZmluZWQ7XG5cbiAgICBAcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiB0cnVlIH0pXG4gICAgcHVibGljIHNlbGVjdGVkOiBib29sZWFuID0gZmFsc2U7XG5cbiAgICBAcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiB0cnVlIH0pXG4gICAgcHVibGljIGRpc2FibGVkID0gZmFsc2U7XG5cbiAgICBAcHJvcGVydHkoeyB0eXBlOiBCb29sZWFuLCByZWZsZWN0OiB0cnVlIH0pXG4gICAgcHVibGljIGV4cGFuZGVkID0gdHJ1ZTtcblxuICAgIEBwcm9wZXJ0eSgpXG4gICAgcHVibGljIGhyZWY6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAgIEBwcm9wZXJ0eSgpXG4gICAgcHVibGljIHRhcmdldDogc3RyaW5nIHwgdW5kZWZpbmVkID0gdW5kZWZpbmVkO1xuXG4gICAgQHByb3BlcnR5KClcbiAgICBwdWJsaWMgbGFiZWw6IHN0cmluZyA9ICcnO1xuXG4gICAgcHJvdGVjdGVkIGdldCBwYXJlbnRTaWRlTmF2KCk6IFNpZGVOYXYgfCB1bmRlZmluZWQge1xuICAgICAgICByZXR1cm4gdGhpcy5jbG9zZXN0KCdzcC1zaWRlbmF2JykgYXMgU2lkZU5hdiB8IHVuZGVmaW5lZDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZ2V0IGhhc0NoaWxkcmVuKCk6IGJvb2xlYW4ge1xuICAgICAgICByZXR1cm4gISF0aGlzLnF1ZXJ5U2VsZWN0b3IoJ3NwLXNpZGVuYXYtaXRlbScpO1xuICAgIH1cblxuICAgIHByb3RlY3RlZCBnZXQgZGVwdGgoKTogbnVtYmVyIHtcbiAgICAgICAgbGV0IGRlcHRoID0gMDtcbiAgICAgICAgbGV0IGVsZW1lbnQgPSB0aGlzLnBhcmVudEVsZW1lbnQ7XG4gICAgICAgIHdoaWxlIChlbGVtZW50IGluc3RhbmNlb2YgU2lkZU5hdkl0ZW0pIHtcbiAgICAgICAgICAgIGRlcHRoKys7XG4gICAgICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnRFbGVtZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkZXB0aDtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgZmlyc3RVcGRhdGVkKCk6IHZvaWQge1xuICAgICAgICBjb25zdCBwYXJlbnRTaWRlTmF2ID0gdGhpcy5wYXJlbnRTaWRlTmF2O1xuICAgICAgICBpZiAocGFyZW50U2lkZU5hdikge1xuICAgICAgICAgICAgcGFyZW50U2lkZU5hdi5hZGRFdmVudExpc3RlbmVyKCdzcC1zaWRlbmF2OnNlbGVjdCcsIChldikgPT5cbiAgICAgICAgICAgICAgICB0aGlzLmhhbmRsZVNpZGVOYXZTZWxlY3QoZXYpXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZCA9XG4gICAgICAgICAgICAgICAgdGhpcy52YWx1ZSAhPSBudWxsICYmIHRoaXMudmFsdWUgPT09IHBhcmVudFNpZGVOYXYudmFsdWU7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaGFuZGxlU2lkZU5hdlNlbGVjdChldjogRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgdGhpcy5zZWxlY3RlZCA9IGV2LnRhcmdldCA9PT0gdGhpcztcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgaGFuZGxlQ2xpY2soKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLnZhbHVlICYmICF0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5oYXNDaGlsZHJlbikge1xuICAgICAgICAgICAgICAgIHRoaXMuZXhwYW5kZWQgPSAhdGhpcy5leHBhbmRlZDtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0RGV0YWlsOiBTaWRlbmF2U2VsZWN0RGV0YWlsID0ge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdGhpcy52YWx1ZSxcbiAgICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgICAgY29uc3Qgc2VsZWN0aW9uRXZlbnQgPSBzdHJpY3RDdXN0b21FdmVudCgnc3Atc2lkZW5hdjpzZWxlY3QnLCB7XG4gICAgICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgIGNvbXBvc2VkOiB0cnVlLFxuICAgICAgICAgICAgICAgICAgICBkZXRhaWw6IHNlbGVjdERldGFpbCxcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHRoaXMuZGlzcGF0Y2hFdmVudChzZWxlY3Rpb25FdmVudCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcmVuZGVyKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICA8YVxuICAgICAgICAgICAgICAgIC5ocmVmPSR7aWZEZWZpbmVkKHRoaXMuaHJlZil9XG4gICAgICAgICAgICAgICAgLnRhcmdldD0ke2lmRGVmaW5lZCh0aGlzLnRhcmdldCl9XG4gICAgICAgICAgICAgICAgZGF0YS1sZXZlbD1cIiR7dGhpcy5kZXB0aH1cIlxuICAgICAgICAgICAgICAgIEBjbGljaz1cIiR7dGhpcy5oYW5kbGVDbGlja31cIlxuICAgICAgICAgICAgICAgIGlkPVwiaXRlbUxpbmtcIlxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgICR7dGhpcy5sYWJlbH1cbiAgICAgICAgICAgIDwvYT5cbiAgICAgICAgICAgICR7dGhpcy5leHBhbmRlZFxuICAgICAgICAgICAgICAgID8gaHRtbGBcbiAgICAgICAgICAgICAgICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICAgICAgICAgICAgICBgXG4gICAgICAgICAgICAgICAgOiB1bmRlZmluZWR9XG4gICAgICAgIGA7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuY29uc3Qgc3R5bGVzID0gY3NzYFxuI2xpc3R7bGlzdC1zdHlsZS10eXBlOm5vbmU7bWFyZ2luOjA7cGFkZGluZzowfSNoZWFkaW5ne2hlaWdodDp2YXIoLS1zcGVjdHJ1bS1zaWRlbmF2LWhlYWRlci1oZWlnaHQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTQwMCkpO2xpbmUtaGVpZ2h0OnZhcigtLXNwZWN0cnVtLXNpZGVuYXYtaGVhZGVyLWhlaWdodCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNDAwKSk7bWFyZ2luOnZhcigtLXNwZWN0cnVtLXNpZGVuYXYtaGVhZGVyLWdhcC10b3AsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTIwMCkpIDAgdmFyKC0tc3BlY3RydW0tc2lkZW5hdi1oZWFkZXItZ2FwLWJvdHRvbSx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNTApKSAwO3BhZGRpbmc6MCB2YXIoLS1zcGVjdHJ1bS1zaWRlbmF2LWhlYWRlci1wYWRkaW5nLXgsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTE1MCkpO2JvcmRlci1yYWRpdXM6dmFyKC0tc3BlY3RydW0tc2lkZW5hdi1oZWFkZXItYm9yZGVyLXJhZGl1cyx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNTApKTtmb250LXNpemU6dmFyKC0tc3BlY3RydW0tc2lkZW5hdi1oZWFkZXItdGV4dC1zaXplLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tZm9udC1zaXplLTUwKSk7Zm9udC13ZWlnaHQ6dmFyKC0tc3BlY3RydW0tc2lkZW5hdi1oZWFkZXItZm9udC13ZWlnaHQsNTAwKTtmb250LXN0eWxlOm5vcm1hbDtsZXR0ZXItc3BhY2luZzp2YXIoLS1zcGVjdHJ1bS1zaWRlbmF2LWhlYWRlci1sZXR0ZXItc3BhY2luZywuMDZlbSk7dGV4dC10cmFuc2Zvcm06dXBwZXJjYXNlO2NvbG9yOnZhcigtLXNwZWN0cnVtLXNpZGVuYXYtaGVhZGVyLXRleHQtY29sb3IsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNzAwKSl9Omhvc3R7ZGlzcGxheTpibG9ja31cbmA7XG5leHBvcnQgZGVmYXVsdCBzdHlsZXM7IiwiLypcbkNvcHlyaWdodCAyMDE4IEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbm9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG50aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbk9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCB7XG4gICAgaHRtbCxcbiAgICBMaXRFbGVtZW50LFxuICAgIHByb3BlcnR5LFxuICAgIENTU1Jlc3VsdEFycmF5LFxuICAgIFRlbXBsYXRlUmVzdWx0LFxufSBmcm9tICdsaXQtZWxlbWVudCc7XG5cbmltcG9ydCBzaWRlbmF2SXRlbVN0eWxlcyBmcm9tICcuL3NpZGVuYXYtaXRlbS5jc3MnO1xuaW1wb3J0IHNpZGVuYXZIZWFkaW5nU3R5bGVzIGZyb20gJy4vc2lkZW5hdi1oZWFkaW5nLmNzcyc7XG5cbmV4cG9ydCBjbGFzcyBTaWRlTmF2SGVhZGluZyBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgaXMgPSAnc3Atc2lkZW5hdi1oZWFkaW5nJztcblxuICAgIEBwcm9wZXJ0eSh7IHJlZmxlY3Q6IHRydWUgfSlcbiAgICBwdWJsaWMgbGFiZWwgPSAnJztcblxuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IHN0eWxlcygpOiBDU1NSZXN1bHRBcnJheSB7XG4gICAgICAgIHJldHVybiBbc2lkZW5hdkl0ZW1TdHlsZXMsIHNpZGVuYXZIZWFkaW5nU3R5bGVzXTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcmVuZGVyKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICA8aDIgaWQ9XCJoZWFkaW5nXCI+JHt0aGlzLmxhYmVsfTwvaDI+XG4gICAgICAgICAgICA8dWwgaWQ9XCJsaXN0XCIgYXJpYS1sYWJlbGxlZGJ5PVwiaGVhZGluZ1wiPlxuICAgICAgICAgICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgICAgICAgIDwvdWw+XG4gICAgICAgIGA7XG4gICAgfVxufVxuIiwiLypcbkNvcHlyaWdodCAyMDE4IEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbm9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG50aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbk9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5leHBvcnQgKiBmcm9tICcuL3NpZGVuYXYnO1xuZXhwb3J0ICogZnJvbSAnLi9zaWRlbmF2LWl0ZW0nO1xuZXhwb3J0ICogZnJvbSAnLi9zaWRlbmF2LWhlYWRpbmcnO1xuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuY29uc3Qgc3R5bGVzID0gY3NzYFxuOmhvc3R7ZGlzcGxheTppbmxpbmUtZmxleDthbGlnbi1pdGVtczpmbGV4LXN0YXJ0O3Bvc2l0aW9uOnJlbGF0aXZlO21pbi1oZWlnaHQ6dmFyKC0tc3BlY3RydW0tc3dpdGNoLWhlaWdodCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNDAwKSk7bWF4LXdpZHRoOjEwMCU7bWFyZ2luLXJpZ2h0OmNhbGModmFyKC0tc3BlY3RydW0tc3dpdGNoLWN1cnNvci1oaXQteCxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0xMDApKSoyKTt2ZXJ0aWNhbC1hbGlnbjp0b3B9I2lucHV0e21hcmdpbjowO2JveC1zaXppbmc6Ym9yZGVyLWJveDtwYWRkaW5nOjA7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJTt0b3A6MDtsZWZ0OjA7b3BhY2l0eTouMDAwMTt6LWluZGV4OjE7Y3Vyc29yOnBvaW50ZXJ9Omhvc3QoW2NoZWNrZWRdKSAjaW5wdXQrI3N3aXRjaDphZnRlcnt0cmFuc2Zvcm06dHJhbnNsYXRlWChjYWxjKHZhcigtLXNwZWN0cnVtLXN3aXRjaC10cmFjay13aWR0aCkgLSB2YXIoLS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLXNpemUsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTc1KSkpKTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItY29sb3Itc2VsZWN0ZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWJsdWUtNTAwKSl9I2lucHV0W2Rpc2FibGVkXSw6aG9zdChbZGlzYWJsZWRdKSAjaW5wdXR7Y3Vyc29yOmRlZmF1bHR9I2xhYmVse21hcmdpbjowIHZhcigtLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWdhcCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTI1KSk7Zm9udC1zaXplOnZhcigtLXNwZWN0cnVtLXN3aXRjaC10ZXh0LXNpemUsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1mb250LXNpemUtMTAwKSk7dHJhbnNpdGlvbjpjb2xvciB2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtYW5pbWF0aW9uLWR1cmF0aW9uLTIwMCwuMTZzKSBlYXNlLWluLW91dDttYXJnaW4tdG9wOnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS03NSl9I3N3aXRjaHtkaXNwbGF5OmlubGluZS1ibG9jaztwb3NpdGlvbjpyZWxhdGl2ZTtoZWlnaHQ6dmFyKC0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLWhlaWdodCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTc1KSk7d2lkdGg6dmFyKC0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLXdpZHRoKTttYXJnaW46Y2FsYygodmFyKC0tc3BlY3RydW0tc3dpdGNoLWhlaWdodCxcbnZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS00MDApKSAtIHZhcigtLXNwZWN0cnVtLXN3aXRjaC10cmFjay1oZWlnaHQsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTc1KSkpLzIpIDA7ZmxleC1ncm93OjA7ZmxleC1zaHJpbms6MDt2ZXJ0aWNhbC1hbGlnbjptaWRkbGV9I3N3aXRjaDphZnRlciwjc3dpdGNoOmJlZm9yZXtkaXNwbGF5OmJsb2NrO3Bvc2l0aW9uOmFic29sdXRlO2NvbnRlbnQ6XCJcIjtib3gtc2l6aW5nOmJvcmRlci1ib3h9I3N3aXRjaDpiZWZvcmV7dHJhbnNpdGlvbjpiYWNrZ3JvdW5kIHZhcigtLXNwZWN0cnVtLWdsb2JhbC1hbmltYXRpb24tZHVyYXRpb24tMTAwLC4xM3MpIGVhc2UtaW4tb3V0LGJvcmRlciB2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtYW5pbWF0aW9uLWR1cmF0aW9uLTEwMCwuMTNzKSBlYXNlLWluLW91dDtoZWlnaHQ6dmFyKC0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLWhlaWdodCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTc1KSk7bGVmdDowO3JpZ2h0OjA7Ym9yZGVyLXJhZGl1czpjYWxjKHZhcigtLXNwZWN0cnVtLXN3aXRjaC10cmFjay1oZWlnaHQsXG52YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTc1KSkvMik7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3IsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMzAwKSl9I3N3aXRjaDphZnRlcnt0cmFuc2l0aW9uOmJhY2tncm91bmQgdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWFuaW1hdGlvbi1kdXJhdGlvbi0xMDAsLjEzcykgZWFzZS1pbi1vdXQsYm9yZGVyIHZhcigtLXNwZWN0cnVtLWdsb2JhbC1hbmltYXRpb24tZHVyYXRpb24tMTAwLC4xM3MpIGVhc2UtaW4tb3V0LHRyYW5zZm9ybSB2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtYW5pbWF0aW9uLWR1cmF0aW9uLTEwMCwuMTNzKSBlYXNlLWluLW91dCxib3gtc2hhZG93IHZhcigtLXNwZWN0cnVtLWdsb2JhbC1hbmltYXRpb24tZHVyYXRpb24tMTAwLC4xM3MpIGVhc2UtaW4tb3V0O3dpZHRoOnZhcigtLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtc2l6ZSx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTc1KSk7aGVpZ2h0OnZhcigtLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtc2l6ZSx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTc1KSk7dG9wOjA7bGVmdDowO2JvcmRlci1yYWRpdXM6dmFyKC0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItcmFkaXVzLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS04NSkpO2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTc1KSk7Ym9yZGVyOnZhcigtLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLXNpemUsMnB4KSBzb2xpZCB2YXIoLS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS02MDApKX0jaW5wdXR+I2xhYmVse2NvbG9yOnZhcigtLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTgwMCkpfTpob3N0KFtjaGVja2VkXSkgI2lucHV0KyNzd2l0Y2g6YmVmb3Jle2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLWNvbG9yLXNlbGVjdGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ibHVlLTUwMCkpfTpob3N0KDpob3ZlcikgI2lucHV0KyNzd2l0Y2g6YWZ0ZXJ7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLWNvbG9yLWhvdmVyLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTcwMCkpO2JveC1zaGFkb3c6bm9uZX06aG9zdCg6aG92ZXIpICNpbnB1dH4jbGFiZWx7Y29sb3I6dmFyKC0tc3BlY3RydW0tc3dpdGNoLXRleHQtY29sb3ItaG92ZXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktOTAwKSl9Omhvc3QoOmhvdmVyW2NoZWNrZWRdKSAjaW5wdXQ6ZW5hYmxlZCsjc3dpdGNoOmJlZm9yZXtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLXN3aXRjaC10cmFjay1jb2xvci1zZWxlY3RlZC1ob3Zlcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItYmx1ZS02MDApKX06aG9zdCg6aG92ZXJbY2hlY2tlZF0pICNpbnB1dDplbmFibGVkKyNzd2l0Y2g6YWZ0ZXJ7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWhvdmVyLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ibHVlLTYwMCkpfTpob3N0KDphY3RpdmUpICNpbnB1dCsjc3dpdGNoOmFmdGVye2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1kb3duLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTgwMCkpfTpob3N0KDphY3RpdmUpICNpbnB1dH4jbGFiZWx7Y29sb3I6dmFyKC0tc3BlY3RydW0tc3dpdGNoLXRleHQtY29sb3ItZG93bix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS05MDApKX06aG9zdCg6YWN0aXZlW2NoZWNrZWRdKSAjaW5wdXQ6ZW5hYmxlZCsjc3dpdGNoOmJlZm9yZXtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLXN3aXRjaC10cmFjay1jb2xvci1zZWxlY3RlZC1kb3duLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ibHVlLTcwMCkpfTpob3N0KDphY3RpdmVbY2hlY2tlZF0pICNpbnB1dDplbmFibGVkKyNzd2l0Y2g6YWZ0ZXJ7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWRvd24sdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWJsdWUtNzAwKSl9Omhvc3QoW2Rpc2FibGVkXSkgI2lucHV0KyNzd2l0Y2g6YmVmb3Jle2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLWNvbG9yLWRpc2FibGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTMwMCkpfTpob3N0KFtkaXNhYmxlZF0pICNpbnB1dCsjc3dpdGNoOmFmdGVye2JvcmRlci1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1kaXNhYmxlZCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS00MDApKX06aG9zdChbZGlzYWJsZWRdKSAjaW5wdXR+I2xhYmVse2NvbG9yOnZhcigtLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLWRpc2FibGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTUwMCkpfTpob3N0KFtkaXNhYmxlZF1bY2hlY2tlZF0pICNpbnB1dCsjc3dpdGNoOmJlZm9yZXtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLXN3aXRjaC10cmFjay1jb2xvci1zZWxlY3RlZC1kaXNhYmxlZCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS00MDApKX06aG9zdChbZGlzYWJsZWRdW2NoZWNrZWRdKSAjaW5wdXQrI3N3aXRjaDphZnRlcntib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNDAwKSl9Omhvc3QoW2Rpc2FibGVkXVtjaGVja2VkXSkgI2lucHV0fiNsYWJlbHtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1jb2xvci1zZWxlY3RlZC1kaXNhYmxlZCx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS01MDApKX06aG9zdChbcXVpZXRdW2NoZWNrZWRdKSAjaW5wdXQrI3N3aXRjaDpiZWZvcmV7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdHJhY2stY29sb3Itc2VsZWN0ZWQsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNzAwKSl9Omhvc3QoW3F1aWV0XVtjaGVja2VkXSkgI2lucHV0KyNzd2l0Y2g6YWZ0ZXJ7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTcwMCkpfTpob3N0KFtxdWlldF1bY2hlY2tlZF0pIDpob3ZlciAjaW5wdXQ6ZW5hYmxlZCsjc3dpdGNoOmJlZm9yZXtiYWNrZ3JvdW5kLWNvbG9yOnZhcigtLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1zZWxlY3RlZC1ob3Zlcix2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS04MDApKX06aG9zdChbcXVpZXRdW2NoZWNrZWRdKSA6aG92ZXIgI2lucHV0OmVuYWJsZWQrI3N3aXRjaDphZnRlcntib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1ib3JkZXItY29sb3Itc2VsZWN0ZWQtaG92ZXIsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktODAwKSl9Omhvc3QoOmFjdGl2ZVtxdWlldF1bY2hlY2tlZF0pICNpbnB1dDplbmFibGVkKyNzd2l0Y2g6YmVmb3Jle2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRyYWNrLWNvbG9yLXNlbGVjdGVkLWRvd24sdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktOTAwKSl9Omhvc3QoOmFjdGl2ZVtxdWlldF1bY2hlY2tlZF0pICNpbnB1dDplbmFibGVkKyNzd2l0Y2g6YWZ0ZXJ7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWRvd24sdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktOTAwKSl9I2lucHV0OmZvY3VzKyNzd2l0Y2g6YWZ0ZXIsOmhvc3QoOmhvdmVyKSAjaW5wdXQ6Zm9jdXMrI3N3aXRjaDphZnRlciw6aG9zdChbcXVpZXRdKSAjaW5wdXQ6Zm9jdXMrI3N3aXRjaDphZnRlciw6aG9zdChbcXVpZXRdKSA6aG92ZXIgI2lucHV0OmZvY3VzKyNzd2l0Y2g6YWZ0ZXJ7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLWNvbG9yLWtleS1mb2N1cyx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItYmx1ZS00MDApKTtib3gtc2hhZG93OjAgMCAwIDFweCB2YXIoLS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1rZXktZm9jdXMsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWJsdWUtNDAwKSl9I2lucHV0OmZvY3VzfiNsYWJlbCw6aG9zdCg6aG92ZXIpICNpbnB1dDpmb2N1c34jbGFiZWwsOmhvc3QoW3F1aWV0XSkgI2lucHV0OmZvY3VzfiNsYWJlbCw6aG9zdChbcXVpZXRdKSA6aG92ZXIgI2lucHV0OmZvY3VzfiNsYWJlbHtjb2xvcjp2YXIoLS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1jb2xvci1rZXktZm9jdXMsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWJsdWUtNjAwKSl9Omhvc3QoOmhvdmVyW2NoZWNrZWRdKSAjaW5wdXQ6Zm9jdXMrI3N3aXRjaDpiZWZvcmUsOmhvc3QoW2NoZWNrZWRdKSAjaW5wdXQ6Zm9jdXMrI3N3aXRjaDpiZWZvcmUsOmhvc3QoW3F1aWV0XVtjaGVja2VkXSkgI2lucHV0OmZvY3VzKyNzd2l0Y2g6YmVmb3JlLDpob3N0KFtxdWlldF1bY2hlY2tlZF0pIDpob3ZlciAjaW5wdXQ6Zm9jdXMrI3N3aXRjaDpiZWZvcmV7YmFja2dyb3VuZC1jb2xvcjp2YXIoLS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzLHZhcigtLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ibHVlLTQwMCkpfTpob3N0KDpob3ZlcltjaGVja2VkXSkgI2lucHV0OmZvY3VzKyNzd2l0Y2g6YWZ0ZXIsOmhvc3QoW2NoZWNrZWRdKSAjaW5wdXQ6Zm9jdXMrI3N3aXRjaDphZnRlciw6aG9zdChbcXVpZXRdW2NoZWNrZWRdKSAjaW5wdXQ6Zm9jdXMrI3N3aXRjaDphZnRlciw6aG9zdChbcXVpZXRdW2NoZWNrZWRdKSA6aG92ZXIgI2lucHV0OmZvY3VzKyNzd2l0Y2g6YWZ0ZXJ7Ym9yZGVyLWNvbG9yOnZhcigtLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1cyx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItYmx1ZS00MDApKTtib3gtc2hhZG93OjAgMCAwIDFweCB2YXIoLS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXMsdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWJsdWUtNDAwKSl9Omhvc3QoOmhvdmVyW2NoZWNrZWRdKSAjaW5wdXQ6Zm9jdXN+I2xhYmVsLDpob3N0KFtjaGVja2VkXSkgI2lucHV0OmZvY3VzfiNsYWJlbCw6aG9zdChbcXVpZXRdW2NoZWNrZWRdKSAjaW5wdXQ6Zm9jdXN+I2xhYmVsLDpob3N0KFtxdWlldF1bY2hlY2tlZF0pIDpob3ZlciAjaW5wdXQ6Zm9jdXN+I2xhYmVse2NvbG9yOnZhcigtLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1cyx2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItYmx1ZS02MDApKX1cbmA7XG5leHBvcnQgZGVmYXVsdCBzdHlsZXM7IiwiLypcbkNvcHlyaWdodCAyMDE4IEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbm9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG50aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbk9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCB7IENTU1Jlc3VsdEFycmF5LCBUZW1wbGF0ZVJlc3VsdCwgaHRtbCB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmltcG9ydCB7IENoZWNrYm94QmFzZSB9IGZyb20gJy4uL2NoZWNrYm94L2NoZWNrYm94LWJhc2UnO1xuaW1wb3J0IHN3aXRjaFN0eWxlcyBmcm9tICcuL3N3aXRjaC5jc3MnO1xuXG5leHBvcnQgY2xhc3MgU3dpdGNoIGV4dGVuZHMgQ2hlY2tib3hCYXNlIHtcbiAgICBwdWJsaWMgc3RhdGljIGdldCBzdHlsZXMoKTogQ1NTUmVzdWx0QXJyYXkge1xuICAgICAgICByZXR1cm4gW3N3aXRjaFN0eWxlc107XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHJlbmRlcigpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgJHtzdXBlci5yZW5kZXIoKX1cbiAgICAgICAgICAgIDxzcGFuIGlkPVwic3dpdGNoXCI+PC9zcGFuPlxuICAgICAgICAgICAgPGxhYmVsIGlkPVwibGFiZWxcIiBmb3I9XCJpbnB1dFwiPjxzbG90Pjwvc2xvdD48L2xhYmVsPlxuICAgICAgICBgO1xuICAgIH1cbn1cbiIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuZXhwb3J0ICogZnJvbSAnLi9zd2l0Y2gnO1xuXG5pbXBvcnQgeyBTd2l0Y2ggfSBmcm9tICcuL3N3aXRjaCc7XG5cbmlmICghY3VzdG9tRWxlbWVudHMuZ2V0KCdzcC1zd2l0Y2gnKSkge1xuICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZSgnc3Atc3dpdGNoJywgU3dpdGNoKTtcbn1cblxuZGVjbGFyZSBnbG9iYWwge1xuICAgIGludGVyZmFjZSBIVE1MRWxlbWVudFRhZ05hbWVNYXAge1xuICAgICAgICAnc3Atc3dpdGNoJzogU3dpdGNoO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmNvbnN0IHN0eWxlcyA9IGNzc2Bcbjpob3N0KFtzZWxlY3RlZF0pe2NvbG9yOnZhcigtLXNwZWN0cnVtLXRhYnMtdGV4dC1jb2xvci1zZWxlY3RlZCl9Omhvc3QoW2Rpc2FibGVkXSl7Y29sb3I6dmFyKC0tc3BlY3RydW0tdGFicy10ZXh0LWNvbG9yLWRpc2FibGVkKX06aG9zdHtkaXNwbGF5OmZsZXg7cG9zaXRpb246cmVsYXRpdmU7bWFyZ2luOjA7cGFkZGluZzowIHZhcigtLXNwZWN0cnVtLXRhYnMtZm9jdXMtcmluZy1wYWRkaW5nLXgpO2xpbmUtaGVpZ2h0OjQ2cHg7dmVydGljYWwtYWxpZ246dG9wO2N1cnNvcjpwb2ludGVyO2ZvbnQtc2l6ZTp2YXIoLS1zcGVjdHJ1bS10YWJzLXRleHQtc2l6ZSk7Zm9udC13ZWlnaHQ6dmFyKC0tc3BlY3RydW0tdGFicy10ZXh0LWZvbnQtd2VpZ2h0KTtjb2xvcjp2YXIoLS1zcGVjdHJ1bS10YWJzLXRleHQtY29sb3IpfTpob3N0KDpob3Zlcil7Y29sb3I6dmFyKC0tc3BlY3RydW0tdGFicy10ZXh0LWNvbG9yLWhvdmVyKX06aG9zdCAqe3BvaW50ZXItZXZlbnRzOm5vbmV9XG5gO1xuZXhwb3J0IGRlZmF1bHQgc3R5bGVzOyIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQge1xuICAgIGh0bWwsXG4gICAgTGl0RWxlbWVudCxcbiAgICBwcm9wZXJ0eSxcbiAgICBDU1NSZXN1bHRBcnJheSxcbiAgICBUZW1wbGF0ZVJlc3VsdCxcbn0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuXG5pbXBvcnQgdGFiU3R5bGVzIGZyb20gJy4vdGFiLmNzcyc7XG5cbmV4cG9ydCBjbGFzcyBUYWIgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGlzID0gJ3NwLXRhYic7XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldCBzdHlsZXMoKTogQ1NTUmVzdWx0QXJyYXkge1xuICAgICAgICByZXR1cm4gW3RhYlN0eWxlc107XG4gICAgfVxuXG4gICAgQHByb3BlcnR5KHsgdHlwZTogQm9vbGVhbiwgcmVmbGVjdDogdHJ1ZSB9KVxuICAgIHB1YmxpYyBzZWxlY3RlZCA9IGZhbHNlO1xuXG4gICAgQHByb3BlcnR5KHsgdHlwZTogU3RyaW5nLCByZWZsZWN0OiB0cnVlIH0pXG4gICAgcHVibGljIHZhbHVlID0gJyc7XG5cbiAgICBAcHJvcGVydHkoKVxuICAgIHByb3RlY3RlZCByZW5kZXIoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgICAgYDtcbiAgICB9XG59XG4iLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbmV4cG9ydCAqIGZyb20gJy4vdGFiJztcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmNvbnN0IHN0eWxlcyA9IGNzc2Bcbjpob3N0e2Rpc3BsYXk6ZmxleDt6LWluZGV4OjB9Omhvc3QoW2RpcmVjdGlvbj1jb2x1bW5dKXtoZWlnaHQ6MTAwJTtmbGV4LWRpcmVjdGlvbjpjb2x1bW47Ym9yZGVyLWxlZnQ6dmFyKC0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNDAwKSBzb2xpZH06aG9zdChbZGlyZWN0aW9uPXJvd10pe3dpZHRoOjEwMCU7ZmxleC1kaXJlY3Rpb246cm93fVxuYDtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlczsiLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHtcbiAgICBodG1sLFxuICAgIExpdEVsZW1lbnQsXG4gICAgcHJvcGVydHksXG4gICAgQ1NTUmVzdWx0QXJyYXksXG4gICAgVGVtcGxhdGVSZXN1bHQsXG59IGZyb20gJ2xpdC1lbGVtZW50JztcblxuaW1wb3J0IHRhYkxpc3RTdHlsZXMgZnJvbSAnLi90YWItbGlzdC5jc3MnO1xuaW1wb3J0IHsgc3RyaWN0Q3VzdG9tRXZlbnQgfSBmcm9tICcuLi9ldmVudHMnO1xuXG5leHBvcnQgY2xhc3MgVGFiTGlzdCBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgaXMgPSAnc3AtdGFiLWxpc3QnO1xuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgc3R5bGVzKCk6IENTU1Jlc3VsdEFycmF5IHtcbiAgICAgICAgcmV0dXJuIFt0YWJMaXN0U3R5bGVzXTtcbiAgICB9XG5cbiAgICBAcHJvcGVydHkoeyByZWZsZWN0OiB0cnVlIH0pXG4gICAgcHVibGljIGRpcmVjdGlvbjogJ2NvbHVtbicgfCAncm93JyA9ICdjb2x1bW4nO1xuXG4gICAgQHByb3BlcnR5KHsgcmVmbGVjdDogdHJ1ZSB9KVxuICAgIHB1YmxpYyBnZXQgc2VsZWN0ZWQoKTogc3RyaW5nIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3NlbGVjdGVkO1xuICAgIH1cblxuICAgIHB1YmxpYyBzZXQgc2VsZWN0ZWQodmFsdWU6IHN0cmluZykge1xuICAgICAgICBjb25zdCBvbGRWYWx1ZSA9IHRoaXMuc2VsZWN0ZWQ7XG5cbiAgICAgICAgaWYgKHZhbHVlID09PSBvbGRWYWx1ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlQ2hlY2tlZFN0YXRlKHZhbHVlKTtcblxuICAgICAgICB0aGlzLl9zZWxlY3RlZCA9IHZhbHVlO1xuICAgICAgICB0aGlzLnJlcXVlc3RVcGRhdGUoJ3NlbGVjdGVkJywgb2xkVmFsdWUpO1xuICAgIH1cblxuICAgIHByaXZhdGUgX3NlbGVjdGVkID0gJyc7XG5cbiAgICBwdWJsaWMgb25DbGljayhldjogRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXYudGFyZ2V0IGFzIEVsZW1lbnQ7XG4gICAgICAgIGlmICh0YXJnZXQpIHtcbiAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGFyZ2V0LmdldEF0dHJpYnV0ZSgndmFsdWUnKTtcbiAgICAgICAgICAgIGlmICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGFwcGx5RGVmYXVsdCA9IHRoaXMuZGlzcGF0Y2hFdmVudChcbiAgICAgICAgICAgICAgICAgICAgc3RyaWN0Q3VzdG9tRXZlbnQoJ3NwLXRhYi1saXN0OmNoYW5nZScsIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICAgICAgICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGRldGFpbDoge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGVjdGVkOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAoYXBwbHlEZWZhdWx0KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWQgPSB2YWx1ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBAcHJvcGVydHkoKVxuICAgIHByb3RlY3RlZCByZW5kZXIoKTogVGVtcGxhdGVSZXN1bHQge1xuICAgICAgICByZXR1cm4gaHRtbGBcbiAgICAgICAgICAgIDxzbG90XG4gICAgICAgICAgICAgICAgQGNsaWNrPVwiJHt0aGlzLm9uQ2xpY2t9XCJcbiAgICAgICAgICAgICAgICBAc2xvdGNoYW5nZT0ke3RoaXMub25TbG90Q2hhbmdlfVxuICAgICAgICAgICAgPjwvc2xvdD5cbiAgICAgICAgYDtcbiAgICB9XG5cbiAgICBwcml2YXRlIG9uU2xvdENoYW5nZSgpOiB2b2lkIHtcbiAgICAgICAgdGhpcy51cGRhdGVDaGVja2VkU3RhdGUodGhpcy5zZWxlY3RlZCk7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSB1cGRhdGVDaGVja2VkU3RhdGUodmFsdWU6IHN0cmluZyk6IHZvaWQge1xuICAgICAgICBjb25zdCBwcmV2aW91c0NoZWNrZWQgPSB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoJ1tzZWxlY3RlZF0nKTtcblxuICAgICAgICBwcmV2aW91c0NoZWNrZWQuZm9yRWFjaCgoZWxlbWVudCkgPT4ge1xuICAgICAgICAgICAgZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoJ3NlbGVjdGVkJyk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgICAgIGNvbnN0IGN1cnJlbnRDaGVja2VkID0gdGhpcy5xdWVyeVNlbGVjdG9yKGBbdmFsdWU9XCIke3ZhbHVlfVwiXWApO1xuXG4gICAgICAgICAgICBpZiAoY3VycmVudENoZWNrZWQpIHtcbiAgICAgICAgICAgICAgICBjdXJyZW50Q2hlY2tlZC5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxufVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgaW50ZXJmYWNlIEdsb2JhbEV2ZW50SGFuZGxlcnNFdmVudE1hcCB7XG4gICAgICAgICdzcC10YWItbGlzdDpjaGFuZ2UnOiBDdXN0b21FdmVudDx7IHNlbGVjdGVkOiBzdHJpbmcgfT47XG4gICAgfVxufVxuIiwiLypcbkNvcHlyaWdodCAyMDE4IEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbm9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG50aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbk9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5leHBvcnQgKiBmcm9tICcuL3RhYi1saXN0JztcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmNvbnN0IHN0eWxlcyA9IGNzc2Bcbjpob3N0LDpyb290ey0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWNlbGVyeS00MDA6IzQ0YjU1NjstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1jZWxlcnktNTAwOiM0YmMzNWY7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItY2VsZXJ5LTYwMDojNTFkMjY3Oy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWNlbGVyeS03MDA6IzU4ZTA2ZjstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1jaGFydHJldXNlLTQwMDojODVkMDQ0Oy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWNoYXJ0cmV1c2UtNTAwOiM4ZWRlNDk7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItY2hhcnRyZXVzZS02MDA6IzliZWM1NDstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1jaGFydHJldXNlLTcwMDojYTNmODU4Oy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXllbGxvdy00MDA6I2RmYmYwMDstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci15ZWxsb3ctNTAwOiNlZGNjMDA7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3IteWVsbG93LTYwMDojZmFkOTAwOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXllbGxvdy03MDA6I2ZmZTIyZTstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1tYWdlbnRhLTQwMDojZDgzNzkwOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLW1hZ2VudGEtNTAwOiNlMjQ5OWQ7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItbWFnZW50YS02MDA6I2VjNWFhYTstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1tYWdlbnRhLTcwMDojZjU2YmI3Oy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWZ1Y2hzaWEtNDAwOiNjMDM4Y2M7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZnVjaHNpYS01MDA6I2NmM2VkYzstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1mdWNoc2lhLTYwMDojZDk1MWU1Oy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWZ1Y2hzaWEtNzAwOiNlMzY2ZWY7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItcHVycGxlLTQwMDojOTI1NmQ5Oy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXB1cnBsZS01MDA6IzlkNjRlMTstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1wdXJwbGUtNjAwOiNhODczZTk7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItcHVycGxlLTcwMDojYjQ4M2YwOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWluZGlnby00MDA6IzY3NjdlYzstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1pbmRpZ28tNTAwOiM3NTc1ZjE7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItaW5kaWdvLTYwMDojODI4MmY2Oy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWluZGlnby03MDA6IzkwOTBmYTstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1zZWFmb2FtLTQwMDojMWI5NTlhOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXNlYWZvYW0tNTAwOiMyMGEzYTg7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc2VhZm9hbS02MDA6IzIzYjJiODstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1zZWFmb2FtLTcwMDojMjZjMGM3Oy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXJlZC00MDA6I2UzNDg1MDstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1yZWQtNTAwOiNlYzViNjI7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItcmVkLTYwMDojZjc2ZDc0Oy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXJlZC03MDA6I2ZmN2I4MjstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1vcmFuZ2UtNDAwOiNlNjg2MTk7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itb3JhbmdlLTUwMDojZjI5NDIzOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLW9yYW5nZS02MDA6I2Y5YTQzZjstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1vcmFuZ2UtNzAwOiNmZmI1NWI7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JlZW4tNDAwOiMyZDlkNzg7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JlZW4tNTAwOiMzM2FiODQ7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JlZW4tNjAwOiMzOWI5OTA7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JlZW4tNzAwOiMzZmM4OWM7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItYmx1ZS00MDA6IzI2ODBlYjstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ibHVlLTUwMDojMzc4ZWYwOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWJsdWUtNjAwOiM0YjljZjU7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItYmx1ZS03MDA6IzVhYTlmYTstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTUwOiMyNTI1MjU7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS03NTojMmYyZjJmOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMTAwOiMzMjMyMzI7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS0yMDA6IzNlM2UzZTstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTMwMDojNGE0YTRhOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNDAwOiM1YTVhNWE7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS01MDA6IzZlNmU2ZTstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTYwMDojOTA5MDkwOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNzAwOiNiOWI5Yjk7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS04MDA6I2UzZTNlMzstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTkwMDojZmZmOy0tc3BlY3RydW0tYWxpYXMtYmFja2dyb3VuZC1jb2xvci1kZWZhdWx0OiMzMjMyMzI7LS1zcGVjdHJ1bS1hbGlhcy1iYWNrZ3JvdW5kLWNvbG9yLXRyYW5zcGFyZW50OnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tYWxpYXMtYmFja2dyb3VuZC1jb2xvci1sYWJlbC1ncmF5OiM3MDcwNzA7LS1zcGVjdHJ1bS1hbGlhcy1iYWNrZ3JvdW5kLWNvbG9yLW1vZGFsLW92ZXJsYXk6cmdiYSgwLDAsMCwwLjUpOy0tc3BlY3RydW0tYWxpYXMtZHJvcHNoYWRvdy1jb2xvcjpyZ2JhKDAsMCwwLDAuNSk7LS1zcGVjdHJ1bS1hbGlhcy1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyLW92ZXJsYXk6aHNsYSgwLDAlLDEwMCUsMC4wNik7LS1zcGVjdHJ1bS1hbGlhcy1oaWdobGlnaHQtaG92ZXI6aHNsYSgwLDAlLDEwMCUsMC4wNyk7LS1zcGVjdHJ1bS1hbGlhcy1oaWdobGlnaHQtYWN0aXZlOmhzbGEoMCwwJSwxMDAlLDAuMSk7LS1zcGVjdHJ1bS1hbGlhcy1oaWdobGlnaHQtc2VsZWN0ZWQ6cmdiYSg1NSwxNDIsMjQwLDAuMTUpOy0tc3BlY3RydW0tYWxpYXMtaGlnaGxpZ2h0LXNlbGVjdGVkLWhvdmVyOnJnYmEoNTUsMTQyLDI0MCwwLjI1KTstLXNwZWN0cnVtLWFsaWFzLXRleHQtaGlnaGxpZ2h0LWNvbG9yOnJnYmEoNTUsMTQyLDI0MCwwLjI1KTstLXNwZWN0cnVtLWFsaWFzLWJhY2tncm91bmQtY29sb3ItcXVpY2thY3Rpb25zOnJnYmEoNTAsNTAsNTAsMC45KTstLXNwZWN0cnVtLWFsaWFzLWJhY2tncm91bmQtY29sb3ItcXVpY2thY3Rpb25zLW92ZXJsYXk6cmdiYSgwLDAsMCwwLjIpOy0tc3BlY3RydW0tYWxpYXMtcGxhY2Vob2xkZXItdGV4dC1jb2xvcjojOTA5MDkwOy0tc3BlY3RydW0tYWxpYXMtcGxhY2Vob2xkZXItdGV4dC1jb2xvci1ob3ZlcjojZmZmOy0tc3BlY3RydW0tYWxpYXMtcGxhY2Vob2xkZXItdGV4dC1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS1hbGlhcy1wbGFjZWhvbGRlci10ZXh0LWNvbG9yLXNlbGVjdGVkOiNlM2UzZTM7LS1zcGVjdHJ1bS1hbGlhcy1sYWJlbC10ZXh0LWNvbG9yOiNiOWI5Yjk7LS1zcGVjdHJ1bS1hbGlhcy10ZXh0LWNvbG9yOiNlM2UzZTM7LS1zcGVjdHJ1bS1hbGlhcy10ZXh0LWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS1hbGlhcy10ZXh0LWNvbG9yLWRvd246I2ZmZjstLXNwZWN0cnVtLWFsaWFzLXRleHQtY29sb3Ita2V5LWZvY3VzOiM0YjljZjU7LS1zcGVjdHJ1bS1hbGlhcy10ZXh0LWNvbG9yLWRpc2FibGVkOiM2ZTZlNmU7LS1zcGVjdHJ1bS1hbGlhcy10ZXh0LWNvbG9yLWludmFsaWQ6I2VjNWI2MjstLXNwZWN0cnVtLWFsaWFzLXRleHQtY29sb3Itc2VsZWN0ZWQ6IzRiOWNmNTstLXNwZWN0cnVtLWFsaWFzLXRleHQtY29sb3Itc2VsZWN0ZWQtbmV1dHJhbDojZmZmOy0tc3BlY3RydW0tYWxpYXMtdGl0bGUtdGV4dC1jb2xvcjojZmZmOy0tc3BlY3RydW0tYWxpYXMtaGVhZGluZy10ZXh0LWNvbG9yOiNmZmY7LS1zcGVjdHJ1bS1hbGlhcy1ib3JkZXItY29sb3I6IzRhNGE0YTstLXNwZWN0cnVtLWFsaWFzLWJvcmRlci1jb2xvci1ob3ZlcjojNWE1YTVhOy0tc3BlY3RydW0tYWxpYXMtYm9yZGVyLWNvbG9yLWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1hbGlhcy1ib3JkZXItY29sb3ItZG93bjojMzc4ZWYwOy0tc3BlY3RydW0tYWxpYXMtYm9yZGVyLWNvbG9yLWV4dHJhbGlnaHQ6IzMyMzIzMjstLXNwZWN0cnVtLWFsaWFzLWJvcmRlci1jb2xvci1saWdodDojM2UzZTNlOy0tc3BlY3RydW0tYWxpYXMtYm9yZGVyLWNvbG9yLW1pZDojNGE0YTRhOy0tc3BlY3RydW0tYWxpYXMtYm9yZGVyLWNvbG9yLWRhcms6IzVhNWE1YTstLXNwZWN0cnVtLWFsaWFzLWJvcmRlci1jb2xvci10cmFuc3BhcmVudDp0cmFuc3BhcmVudDstLXNwZWN0cnVtLWFsaWFzLWJvcmRlci1jb2xvci10cmFuc2x1Y2VudC1kYXJrOnJnYmEoMCwwLDAsMC4wNSk7LS1zcGVjdHJ1bS1hbGlhcy1ib3JkZXItY29sb3ItdHJhbnNsdWNlbnQtZGFya2VyOnJnYmEoMCwwLDAsMC4xKTstLXNwZWN0cnVtLWFsaWFzLWZvY3VzLWNvbG9yOiMyNjgwZWI7LS1zcGVjdHJ1bS1hbGlhcy10cmFjay1jb2xvci1kZWZhdWx0OiM0YTRhNGE7LS1zcGVjdHJ1bS1hbGlhcy10cmFjay1jb2xvci1kaXNhYmxlZDojNGE0YTRhOy0tc3BlY3RydW0tYWxpYXMtdHJhY2stY29sb3Itb3Zlci1iYWNrZ3JvdW5kOmhzbGEoMCwwJSwxMDAlLDAuMik7LS1zcGVjdHJ1bS1hbGlhcy1pY29uLWNvbG9yOiNiOWI5Yjk7LS1zcGVjdHJ1bS1hbGlhcy1pY29uLWNvbG9yLW92ZXItYmFja2dyb3VuZDojZmZmOy0tc3BlY3RydW0tYWxpYXMtaWNvbi1jb2xvci1ob3ZlcjojZmZmOy0tc3BlY3RydW0tYWxpYXMtaWNvbi1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS1hbGlhcy1pY29uLWNvbG9yLWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS1hbGlhcy1pY29uLWNvbG9yLWRpc2FibGVkOiM1YTVhNWE7LS1zcGVjdHJ1bS1hbGlhcy1pY29uLWNvbG9yLXNlbGVjdGVkLW5ldXRyYWw6I2ZmZjstLXNwZWN0cnVtLWFsaWFzLWljb24tY29sb3Itc2VsZWN0ZWQ6IzM3OGVmMDstLXNwZWN0cnVtLWFsaWFzLWljb24tY29sb3Itc2VsZWN0ZWQtaG92ZXI6IzRiOWNmNTstLXNwZWN0cnVtLWFsaWFzLWljb24tY29sb3Itc2VsZWN0ZWQtZG93bjojNWFhOWZhOy0tc3BlY3RydW0tYWxpYXMtaWNvbi1jb2xvci1zZWxlY3RlZC1mb2N1czojNGI5Y2Y1Oy0tc3BlY3RydW0tYWxpYXMtaWNvbi1jb2xvci1lcnJvcjojZTM0ODUwOy0tc3BlY3RydW0tYWxpYXMtcmFkaWFsLXJlYWN0aW9uLWNvbG9yLWRlZmF1bHQ6aHNsYSgwLDAlLDg5JSwwLjYpOy0tc3BlY3RydW0tYWxpYXMtcGFzdGVib2FyZC1iYWNrZ3JvdW5kLWNvbG9yOiMyNTI1MjU7LS1zcGVjdHJ1bS1hbGlhcy1hcHBmcmFtZS1ib3JkZXItY29sb3I6IzI1MjUyNTstLXNwZWN0cnVtLWFsaWFzLWFwcGZyYW1lLXNlcGFyYXRvci1jb2xvcjojMjUyNTI1Oy0tc3BlY3RydW0tYWxpYXMtdG9vbGJhci1iYWNrZ3JvdW5kLWNvbG9yOiMzMjMyMzI7LS1zcGVjdHJ1bS1zZW1hbnRpYy1uZWdhdGl2ZS1jb2xvci1iYWNrZ3JvdW5kOiNjOTI1MmQ7LS1zcGVjdHJ1bS1zZW1hbnRpYy1uZWdhdGl2ZS1jb2xvci1kZWZhdWx0OiNlYzViNjI7LS1zcGVjdHJ1bS1zZW1hbnRpYy1uZWdhdGl2ZS1jb2xvci1kYXJrOiNmNzZkNzQ7LS1zcGVjdHJ1bS1zZW1hbnRpYy1uZWdhdGl2ZS1jb2xvci1ib3JkZXI6I2UzNDg1MDstLXNwZWN0cnVtLXNlbWFudGljLW5lZ2F0aXZlLWNvbG9yLWljb246I2Y3NmQ3NDstLXNwZWN0cnVtLXNlbWFudGljLW5lZ2F0aXZlLWNvbG9yLXN0YXR1czojZTM0ODUwOy0tc3BlY3RydW0tc2VtYW50aWMtbmVnYXRpdmUtY29sb3ItdGV4dC1sYXJnZTojZWM1YjYyOy0tc3BlY3RydW0tc2VtYW50aWMtbmVnYXRpdmUtY29sb3ItdGV4dC1zbWFsbDojZjc2ZDc0Oy0tc3BlY3RydW0tc2VtYW50aWMtbmVnYXRpdmUtY29sb3Itc3RhdGUtZG93bjojZmY3YjgyOy0tc3BlY3RydW0tc2VtYW50aWMtbmVnYXRpdmUtY29sb3Itc3RhdGUtZm9jdXM6I2UzNDg1MDstLXNwZWN0cnVtLXNlbWFudGljLW5vdGljZS1jb2xvci1iYWNrZ3JvdW5kOiNjYjZmMTA7LS1zcGVjdHJ1bS1zZW1hbnRpYy1ub3RpY2UtY29sb3ItZGVmYXVsdDojZjI5NDIzOy0tc3BlY3RydW0tc2VtYW50aWMtbm90aWNlLWNvbG9yLWRhcms6I2Y5YTQzZjstLXNwZWN0cnVtLXNlbWFudGljLW5vdGljZS1jb2xvci1ib3JkZXI6I2U2ODYxOTstLXNwZWN0cnVtLXNlbWFudGljLW5vdGljZS1jb2xvci1pY29uOiNmOWE0M2Y7LS1zcGVjdHJ1bS1zZW1hbnRpYy1ub3RpY2UtY29sb3Itc3RhdHVzOiNlNjg2MTk7LS1zcGVjdHJ1bS1zZW1hbnRpYy1ub3RpY2UtY29sb3ItdGV4dC1sYXJnZTojZjI5NDIzOy0tc3BlY3RydW0tc2VtYW50aWMtbm90aWNlLWNvbG9yLXRleHQtc21hbGw6I2Y5YTQzZjstLXNwZWN0cnVtLXNlbWFudGljLW5vdGljZS1jb2xvci1zdGF0ZS1kb3duOiNmZmI1NWI7LS1zcGVjdHJ1bS1zZW1hbnRpYy1ub3RpY2UtY29sb3Itc3RhdGUtZm9jdXM6I2U2ODYxOTstLXNwZWN0cnVtLXNlbWFudGljLXBvc2l0aXZlLWNvbG9yLWJhY2tncm91bmQ6IzEyODA1YzstLXNwZWN0cnVtLXNlbWFudGljLXBvc2l0aXZlLWNvbG9yLWRlZmF1bHQ6IzMzYWI4NDstLXNwZWN0cnVtLXNlbWFudGljLXBvc2l0aXZlLWNvbG9yLWRhcms6IzM5Yjk5MDstLXNwZWN0cnVtLXNlbWFudGljLXBvc2l0aXZlLWNvbG9yLWJvcmRlcjojMmQ5ZDc4Oy0tc3BlY3RydW0tc2VtYW50aWMtcG9zaXRpdmUtY29sb3ItaWNvbjojMzliOTkwOy0tc3BlY3RydW0tc2VtYW50aWMtcG9zaXRpdmUtY29sb3Itc3RhdHVzOiMyZDlkNzg7LS1zcGVjdHJ1bS1zZW1hbnRpYy1wb3NpdGl2ZS1jb2xvci10ZXh0LWxhcmdlOiMzM2FiODQ7LS1zcGVjdHJ1bS1zZW1hbnRpYy1wb3NpdGl2ZS1jb2xvci10ZXh0LXNtYWxsOiMzOWI5OTA7LS1zcGVjdHJ1bS1zZW1hbnRpYy1wb3NpdGl2ZS1jb2xvci1zdGF0ZS1kb3duOiMzZmM4OWM7LS1zcGVjdHJ1bS1zZW1hbnRpYy1wb3NpdGl2ZS1jb2xvci1zdGF0ZS1mb2N1czojMmQ5ZDc4Oy0tc3BlY3RydW0tc2VtYW50aWMtaW5mb3JtYXRpdmUtY29sb3ItYmFja2dyb3VuZDojMGQ2NmQwOy0tc3BlY3RydW0tc2VtYW50aWMtaW5mb3JtYXRpdmUtY29sb3ItZGVmYXVsdDojMzc4ZWYwOy0tc3BlY3RydW0tc2VtYW50aWMtaW5mb3JtYXRpdmUtY29sb3ItZGFyazojNGI5Y2Y1Oy0tc3BlY3RydW0tc2VtYW50aWMtaW5mb3JtYXRpdmUtY29sb3ItYm9yZGVyOiMyNjgwZWI7LS1zcGVjdHJ1bS1zZW1hbnRpYy1pbmZvcm1hdGl2ZS1jb2xvci1pY29uOiM0YjljZjU7LS1zcGVjdHJ1bS1zZW1hbnRpYy1pbmZvcm1hdGl2ZS1jb2xvci1zdGF0dXM6IzI2ODBlYjstLXNwZWN0cnVtLXNlbWFudGljLWluZm9ybWF0aXZlLWNvbG9yLXRleHQtbGFyZ2U6IzM3OGVmMDstLXNwZWN0cnVtLXNlbWFudGljLWluZm9ybWF0aXZlLWNvbG9yLXRleHQtc21hbGw6IzRiOWNmNTstLXNwZWN0cnVtLXNlbWFudGljLWluZm9ybWF0aXZlLWNvbG9yLXN0YXRlLWRvd246IzVhYTlmYTstLXNwZWN0cnVtLXNlbWFudGljLWluZm9ybWF0aXZlLWNvbG9yLXN0YXRlLWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1zZW1hbnRpYy1jdGEtY29sb3ItYmFja2dyb3VuZC1kZWZhdWx0OiMxNDczZTY7LS1zcGVjdHJ1bS1zZW1hbnRpYy1jdGEtY29sb3ItYmFja2dyb3VuZC1ob3ZlcjojMGQ2NmQwOy0tc3BlY3RydW0tc2VtYW50aWMtY3RhLWNvbG9yLWJhY2tncm91bmQtZG93bjojMGQ2NmQwOy0tc3BlY3RydW0tc2VtYW50aWMtYmFja2dyb3VuZC1jb2xvci1rZXktZm9jdXM6IzE0NzNlNjstLXNwZWN0cnVtLXNlbWFudGljLW5ldXRyYWwtY29sb3ItYmFja2dyb3VuZDojNzQ3NDc0Oy0tc3BlY3RydW0tYmFubmVyLXRleHQtY29sb3I6I2ZmZjstLXNwZWN0cnVtLWJhbm5lci1lcnJvci1iYWNrZ3JvdW5kLWNvbG9yOiNlYzViNjI7LS1zcGVjdHJ1bS1iYW5uZXItaW5mby1iYWNrZ3JvdW5kLWNvbG9yOiMzNzhlZjA7LS1zcGVjdHJ1bS1iYW5uZXItd2FybmluZy1iYWNrZ3JvdW5kLWNvbG9yOiNmMjk0MjM7LS1zcGVjdHJ1bS1idXR0b24tY3RhLWljb24tY29sb3I6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1jdGEtYmFja2dyb3VuZC1jb2xvcjojMTQ3M2U2Oy0tc3BlY3RydW0tYnV0dG9uLWN0YS1ib3JkZXItY29sb3I6IzE0NzNlNjstLXNwZWN0cnVtLWJ1dHRvbi1jdGEtdGV4dC1jb2xvcjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLWN0YS1pY29uLWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tY3RhLWJhY2tncm91bmQtY29sb3ItaG92ZXI6IzBkNjZkMDstLXNwZWN0cnVtLWJ1dHRvbi1jdGEtYm9yZGVyLWNvbG9yLWhvdmVyOiMwZDY2ZDA7LS1zcGVjdHJ1bS1idXR0b24tY3RhLXRleHQtY29sb3ItaG92ZXI6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1jdGEtaWNvbi1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tY3RhLWJhY2tncm91bmQtY29sb3ItZG93bjojMGQ2NmQwOy0tc3BlY3RydW0tYnV0dG9uLWN0YS1ib3JkZXItY29sb3ItZG93bjojMGQ2NmQwOy0tc3BlY3RydW0tYnV0dG9uLWN0YS10ZXh0LWNvbG9yLWRvd246I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1jdGEtaWNvbi1jb2xvci1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1jdGEtYmFja2dyb3VuZC1jb2xvci1rZXktZm9jdXM6IzE0NzNlNjstLXNwZWN0cnVtLWJ1dHRvbi1jdGEtYm9yZGVyLWNvbG9yLWtleS1mb2N1czojMTQ3M2U2Oy0tc3BlY3RydW0tYnV0dG9uLWN0YS10ZXh0LWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tYnV0dG9uLWN0YS1pY29uLWNvbG9yLWRpc2FibGVkOiM1YTVhNWE7LS1zcGVjdHJ1bS1idXR0b24tY3RhLWJhY2tncm91bmQtY29sb3ItZGlzYWJsZWQ6IzNlM2UzZTstLXNwZWN0cnVtLWJ1dHRvbi1jdGEtYm9yZGVyLWNvbG9yLWRpc2FibGVkOiMzZTNlM2U7LS1zcGVjdHJ1bS1idXR0b24tY3RhLXRleHQtY29sb3ItZGlzYWJsZWQ6IzZlNmU2ZTstLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtaWNvbi1jb2xvcjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC1iYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC1ib3JkZXItY29sb3I6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtdGV4dC1jb2xvcjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC1pY29uLWNvbG9yLWhvdmVyOiMyNTI1MjU7LS1zcGVjdHJ1bS1idXR0b24tb3Zlci1iYWNrZ3JvdW5kLWJhY2tncm91bmQtY29sb3ItaG92ZXI6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtYm9yZGVyLWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tb3Zlci1iYWNrZ3JvdW5kLWljb24tY29sb3ItZG93bjojMjUyNTI1Oy0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC1iYWNrZ3JvdW5kLWNvbG9yLWRvd246I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtYm9yZGVyLWNvbG9yLWRvd246I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtaWNvbi1jb2xvci1rZXktZm9jdXM6IzI1MjUyNTstLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtYmFja2dyb3VuZC1jb2xvci1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtYm9yZGVyLWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC1pY29uLWNvbG9yLWRpc2FibGVkOmhzbGEoMCwwJSwxMDAlLDAuMzUpOy0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC1iYWNrZ3JvdW5kLWNvbG9yLWRpc2FibGVkOmhzbGEoMCwwJSwxMDAlLDAuMSk7LS1zcGVjdHJ1bS1idXR0b24tb3Zlci1iYWNrZ3JvdW5kLWJvcmRlci1jb2xvci1kaXNhYmxlZDp0cmFuc3BhcmVudDstLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtdGV4dC1jb2xvci1kaXNhYmxlZDpoc2xhKDAsMCUsMTAwJSwwLjM1KTstLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWljb24tY29sb3I6I2UzZTNlMzstLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWJhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS1ib3JkZXItY29sb3I6I2UzZTNlMzstLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LXRleHQtY29sb3I6I2UzZTNlMzstLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWljb24tY29sb3ItaG92ZXI6IzI1MjUyNTstLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWJhY2tncm91bmQtY29sb3ItaG92ZXI6I2UzZTNlMzstLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWJvcmRlci1jb2xvci1ob3ZlcjojZTNlM2UzOy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktdGV4dC1jb2xvci1ob3ZlcjojMjUyNTI1Oy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktaWNvbi1jb2xvci1kb3duOiMyNTI1MjU7LS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS1iYWNrZ3JvdW5kLWNvbG9yLWRvd246I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWJvcmRlci1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS10ZXh0LWNvbG9yLWRvd246IzI1MjUyNTstLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWljb24tY29sb3Ita2V5LWZvY3VzOiMyNTI1MjU7LS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS1iYWNrZ3JvdW5kLWNvbG9yLWtleS1mb2N1czojMTQ3M2U2Oy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktYm9yZGVyLWNvbG9yLWtleS1mb2N1czojMTQ3M2U2Oy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktdGV4dC1jb2xvci1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWljb24tY29sb3ItZGlzYWJsZWQ6IzVhNWE1YTstLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWJhY2tncm91bmQtY29sb3ItZGlzYWJsZWQ6IzNlM2UzZTstLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWJvcmRlci1jb2xvci1kaXNhYmxlZDojM2UzZTNlOy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktdGV4dC1jb2xvci1kaXNhYmxlZDojNmU2ZTZlOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LW92ZXItYmFja2dyb3VuZC1pY29uLWNvbG9yOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLWJhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLWJvcmRlci1jb2xvcjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtdGV4dC1jb2xvcjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LW92ZXItYmFja2dyb3VuZC1pY29uLWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLWJhY2tncm91bmQtY29sb3ItaG92ZXI6aHNsYSgwLDAlLDEwMCUsMC4xKTstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtYm9yZGVyLWNvbG9yLWhvdmVyOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LW92ZXItYmFja2dyb3VuZC10ZXh0LWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLWljb24tY29sb3ItZG93bjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LW92ZXItYmFja2dyb3VuZC1iYWNrZ3JvdW5kLWNvbG9yLWRvd246aHNsYSgwLDAlLDEwMCUsMC4xNSk7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLWJvcmRlci1jb2xvci1kb3duOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LW92ZXItYmFja2dyb3VuZC10ZXh0LWNvbG9yLWRvd246I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtaWNvbi1jb2xvci1rZXktZm9jdXM6IzI1MjUyNTstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtYmFja2dyb3VuZC1jb2xvci1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtYm9yZGVyLWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LW92ZXItYmFja2dyb3VuZC1pY29uLWNvbG9yLWRpc2FibGVkOmhzbGEoMCwwJSwxMDAlLDAuMTUpOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LW92ZXItYmFja2dyb3VuZC1iYWNrZ3JvdW5kLWNvbG9yLWRpc2FibGVkOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LW92ZXItYmFja2dyb3VuZC1ib3JkZXItY29sb3ItZGlzYWJsZWQ6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLXRleHQtY29sb3ItZGlzYWJsZWQ6aHNsYSgwLDAlLDEwMCUsMC4xNSk7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1pY29uLWNvbG9yOiNlM2UzZTM7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1iYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktYm9yZGVyLWNvbG9yOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktdGV4dC1jb2xvcjojZTNlM2UzOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktaWNvbi1jb2xvci1ob3ZlcjojMjUyNTI1Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktYmFja2dyb3VuZC1jb2xvci1ob3ZlcjojM2UzZTNlOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktYm9yZGVyLWNvbG9yLWhvdmVyOiMzZTNlM2U7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS10ZXh0LWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1pY29uLWNvbG9yLWRvd246IzI1MjUyNTstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1wcmltYXJ5LWJhY2tncm91bmQtY29sb3ItZG93bjojNGE0YTRhOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktYm9yZGVyLWNvbG9yLWRvd246IzRhNGE0YTstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1wcmltYXJ5LXRleHQtY29sb3ItZG93bjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktaWNvbi1jb2xvci1rZXktZm9jdXM6IzI1MjUyNTstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1wcmltYXJ5LWJhY2tncm91bmQtY29sb3Ita2V5LWZvY3VzOiMxNDczZTY7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1ib3JkZXItY29sb3Ita2V5LWZvY3VzOiMxNDczZTY7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS10ZXh0LWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktaWNvbi1jb2xvci1kaXNhYmxlZDojNWE1YTVhOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktYmFja2dyb3VuZC1jb2xvci1kaXNhYmxlZDp0cmFuc3BhcmVudDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1wcmltYXJ5LWJvcmRlci1jb2xvci1kaXNhYmxlZDp0cmFuc3BhcmVudDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1wcmltYXJ5LXRleHQtY29sb3ItZGlzYWJsZWQ6IzZlNmU2ZTstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktaWNvbi1jb2xvcjojYjliOWI5Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS1ib3JkZXItY29sb3I6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LXRleHQtY29sb3I6I2I5YjliOTstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktaWNvbi1jb2xvci1ob3ZlcjojMjUyNTI1Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyOiMzZTNlM2U7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWJvcmRlci1jb2xvci1ob3ZlcjojM2UzZTNlOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS10ZXh0LWNvbG9yLWhvdmVyOiNlM2UzZTM7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWljb24tY29sb3ItZG93bjojMjUyNTI1Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yLWRvd246IzRhNGE0YTstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktYm9yZGVyLWNvbG9yLWRvd246IzRhNGE0YTstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktdGV4dC1jb2xvci1kb3duOiNlM2UzZTM7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWljb24tY29sb3Ita2V5LWZvY3VzOiMyNTI1MjU7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3Ita2V5LWZvY3VzOiMxNDczZTY7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWJvcmRlci1jb2xvci1rZXktZm9jdXM6IzE0NzNlNjstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktdGV4dC1jb2xvci1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktaWNvbi1jb2xvci1kaXNhYmxlZDojNWE1YTVhOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yLWRpc2FibGVkOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS1ib3JkZXItY29sb3ItZGlzYWJsZWQ6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LXRleHQtY29sb3ItZGlzYWJsZWQ6IzZlNmU2ZTstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLWljb24tY29sb3I6I2VjNWI2MjstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLWJhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy1ib3JkZXItY29sb3I6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy10ZXh0LWNvbG9yOiNlYzViNjI7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy1pY29uLWNvbG9yLWhvdmVyOiNmNzZkNzQ7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyOiMzZTNlM2U7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy1ib3JkZXItY29sb3ItaG92ZXI6IzNlM2UzZTstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLXRleHQtY29sb3ItaG92ZXI6I2Y3NmQ3NDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLWljb24tY29sb3ItZG93bjojZjc2ZDc0Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXdhcm5pbmctYmFja2dyb3VuZC1jb2xvci1kb3duOiM0YTRhNGE7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy1ib3JkZXItY29sb3ItZG93bjojNGE0YTRhOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXdhcm5pbmctdGV4dC1jb2xvci1kb3duOiNmNzZkNzQ7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy1pY29uLWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXdhcm5pbmctYmFja2dyb3VuZC1jb2xvci1rZXktZm9jdXM6IzE0NzNlNjstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLWJvcmRlci1jb2xvci1rZXktZm9jdXM6IzE0NzNlNjstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLXRleHQtY29sb3Ita2V5LWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy1pY29uLWNvbG9yLWRpc2FibGVkOiM1YTVhNWE7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy1iYWNrZ3JvdW5kLWNvbG9yLWRpc2FibGVkOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXdhcm5pbmctYm9yZGVyLWNvbG9yLWRpc2FibGVkOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXdhcm5pbmctdGV4dC1jb2xvci1kaXNhYmxlZDojNmU2ZTZlOy0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS1pY29uLWNvbG9yOiNiOWI5Yjk7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LWJvcmRlci1jb2xvcjojYjliOWI5Oy0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS10ZXh0LWNvbG9yOiNiOWI5Yjk7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LWljb24tY29sb3ItaG92ZXI6IzI1MjUyNTstLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktYmFja2dyb3VuZC1jb2xvci1ob3ZlcjojYjliOWI5Oy0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS1ib3JkZXItY29sb3ItaG92ZXI6I2I5YjliOTstLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktdGV4dC1jb2xvci1ob3ZlcjojMjUyNTI1Oy0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS1pY29uLWNvbG9yLWRvd246IzI1MjUyNTstLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktYmFja2dyb3VuZC1jb2xvci1kb3duOiNlM2UzZTM7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LWJvcmRlci1jb2xvci1kb3duOiNlM2UzZTM7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LXRleHQtY29sb3ItZG93bjojMjUyNTI1Oy0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS1pY29uLWNvbG9yLWtleS1mb2N1czojMjUyNTI1Oy0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yLWtleS1mb2N1czojMTQ3M2U2Oy0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS1ib3JkZXItY29sb3Ita2V5LWZvY3VzOiMxNDczZTY7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LXRleHQtY29sb3Ita2V5LWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LWljb24tY29sb3ItZGlzYWJsZWQ6IzVhNWE1YTstLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktYmFja2dyb3VuZC1jb2xvci1kaXNhYmxlZDojM2UzZTNlOy0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS1ib3JkZXItY29sb3ItZGlzYWJsZWQ6IzNlM2UzZTstLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktdGV4dC1jb2xvci1kaXNhYmxlZDojNmU2ZTZlOy0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctaWNvbi1jb2xvcjojZjc2ZDc0Oy0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctYmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLWJvcmRlci1jb2xvcjojZjc2ZDc0Oy0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctdGV4dC1jb2xvcjojZjc2ZDc0Oy0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctaWNvbi1jb2xvci1ob3ZlcjojMjUyNTI1Oy0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctYmFja2dyb3VuZC1jb2xvci1ob3ZlcjojZjc2ZDc0Oy0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctYm9yZGVyLWNvbG9yLWhvdmVyOiNmNzZkNzQ7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy10ZXh0LWNvbG9yLWhvdmVyOiMyNTI1MjU7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy1pY29uLWNvbG9yLWRvd246IzI1MjUyNTstLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLWJhY2tncm91bmQtY29sb3ItZG93bjojZmY3YjgyOy0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctYm9yZGVyLWNvbG9yLWRvd246I2ZmN2I4MjstLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLXRleHQtY29sb3ItZG93bjojMjUyNTI1Oy0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctaWNvbi1jb2xvci1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLWJhY2tncm91bmQtY29sb3Ita2V5LWZvY3VzOiMxNDczZTY7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy1ib3JkZXItY29sb3Ita2V5LWZvY3VzOiMxNDczZTY7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy10ZXh0LWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctaWNvbi1jb2xvci1kaXNhYmxlZDojNWE1YTVhOy0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctYmFja2dyb3VuZC1jb2xvci1kaXNhYmxlZDojM2UzZTNlOy0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctYm9yZGVyLWNvbG9yLWRpc2FibGVkOiMzZTNlM2U7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy10ZXh0LWNvbG9yLWRpc2FibGVkOiM2ZTZlNmU7LS1zcGVjdHJ1bS1jYXJkLWJvcmRlci1jb2xvcjojM2UzZTNlOy0tc3BlY3RydW0tY2FyZC1ib3JkZXItY29sb3Ita2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1jYXJkLWJvcmRlci1jb2xvci1ob3ZlcjojNWE1YTVhOy0tc3BlY3RydW0tY2FyZC1jb3ZlcnBob3RvLWJhY2tncm91bmQtY29sb3I6IzNlM2UzZTstLXNwZWN0cnVtLWNhcmQtY292ZXJwaG90by1ib3JkZXItY29sb3I6IzNlM2UzZTstLXNwZWN0cnVtLWNhcmQtZGVzY3JpcHRpb24tdGV4dC1jb2xvcjojYjliOWI5Oy0tc3BlY3RydW0tY2FyZC1iYWNrZ3JvdW5kLWNvbG9yOiMyNTI1MjU7LS1zcGVjdHJ1bS1jYXJkLXF1aWV0LXByZXZpZXctYmFja2dyb3VuZC1jb2xvcjojM2UzZTNlOy0tc3BlY3RydW0tY2FyZC1xdWlldC1wcmV2aWV3LWJhY2tncm91bmQtY29sb3ItaG92ZXI6IzRhNGE0YTstLXNwZWN0cnVtLWNhcmQtcXVpZXQtYm9yZGVyLWNvbG9yLXNlbGVjdGVkOiMzNzhlZjA7LS1zcGVjdHJ1bS1jYXJkLXF1aWV0LXRpdGxlLXRleHQtY29sb3I6I2UzZTNlMzstLXNwZWN0cnVtLWNhcmQtcXVpZXQtc3VidGl0bGUtdGV4dC1jb2xvcjojYjliOWI5Oy0tc3BlY3RydW0tZHJvcHpvbmUtYm9yZGVyLWNvbG9yOiM0YTRhNGE7LS1zcGVjdHJ1bS1kcm9wem9uZS1iYWNrZ3JvdW5kLWNvbG9yOiMzMjMyMzI7LS1zcGVjdHJ1bS1kcm9wem9uZS1pY29uLWNvbG9yOiM2ZTZlNmU7LS1zcGVjdHJ1bS1kcm9wem9uZS1ib3JkZXItY29sb3Itc2VsZWN0ZWQtaG92ZXI6IzI2ODBlYjstLXNwZWN0cnVtLWRyb3B6b25lLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQtaG92ZXI6cmdiYSg1NSwxNDIsMjQwLDAuMTUpOy0tc3BlY3RydW0tZHJvcHpvbmUtaWNvbi1jb2xvci1zZWxlY3RlZC1ob3ZlcjojMzc4ZWYwOy0tc3BlY3RydW0tZmllbGRsYWJlbC1hc3Rlcmlzay1jb2xvcjojOTA5MDkwOy0tc3BlY3RydW0tZmllbGRsYWJlbC10ZXh0LWNvbG9yOiNiOWI5Yjk7LS1zcGVjdHJ1bS1maWVsZGxhYmVsLWFzdGVyaXNrLWNvbG9yLWRpc2FibGVkOiM2ZTZlNmU7LS1zcGVjdHJ1bS1maWVsZGxhYmVsLXRleHQtY29sb3ItZGlzYWJsZWQ6IzZlNmU2ZTstLXNwZWN0cnVtLWZpZWxkbGFiZWwtc2lkZS1hc3Rlcmlzay1jb2xvcjojOTA5MDkwOy0tc3BlY3RydW0tZmllbGRsYWJlbC1zaWRlLXRleHQtY29sb3I6I2I5YjliOTstLXNwZWN0cnVtLWZpZWxkbGFiZWwtc2lkZS1hc3Rlcmlzay1jb2xvci1kaXNhYmxlZDojNmU2ZTZlOy0tc3BlY3RydW0tZmllbGRsYWJlbC1zaWRlLXRleHQtY29sb3ItZGlzYWJsZWQ6IzZlNmU2ZTstLXNwZWN0cnVtLWxhYmVsLWNvbG9yZWQtZ3JheS1iYWNrZ3JvdW5kLWNvbG9yOiM3NDc0NzQ7LS1zcGVjdHJ1bS1sYWJlbC1jb2xvcmVkLWdyZWVuLWJhY2tncm91bmQtY29sb3I6IzI2OGU2YzstLXNwZWN0cnVtLWxhYmVsLWNvbG9yZWQtYmx1ZS1iYWNrZ3JvdW5kLWNvbG9yOiMxNDczZTY7LS1zcGVjdHJ1bS1sYWJlbC1jb2xvcmVkLXJlZC1iYWNrZ3JvdW5kLWNvbG9yOiNkNzM3M2Y7LS1zcGVjdHJ1bS1sYWJlbC1jb2xvcmVkLXNlYWZvYW0tYmFja2dyb3VuZC1jb2xvcjojMWI5NTlhOy0tc3BlY3RydW0tbGFiZWwtY29sb3JlZC1mdWNoc2lhLWJhY2tncm91bmQtY29sb3I6I2MwMzhjYzstLXNwZWN0cnVtLWxhYmVsLWNvbG9yZWQtb3JhbmdlLWJhY2tncm91bmQtY29sb3I6I2RhN2IxMTstLXNwZWN0cnVtLWxhYmVsLWNvbG9yZWQteWVsbG93LWJhY2tncm91bmQtY29sb3I6I2RmYmYwMDstLXNwZWN0cnVtLWxhYmVsLWNvbG9yZWQtdGV4dC1jb2xvcjojZmZmOy0tc3BlY3RydW0tbGFiZWwtY29sb3JlZC1iYWNrZ3JvdW5kLWNvbG9yLWRpc2FibGVkOiMzZTNlM2U7LS1zcGVjdHJ1bS1sYWJlbC10ZXh0LWNvbG9yOiNiOWI5Yjk7LS1zcGVjdHJ1bS1sYWJlbC10ZXh0LWNvbG9yLWRpc2FibGVkOiM2ZTZlNmU7LS1zcGVjdHJ1bS1sYWJlbC1vdmVyLWJhY2tncm91bmQtdGV4dC1jb2xvcjojZmZmOy0tc3BlY3RydW0tbGFiZWwtb3Zlci1iYWNrZ3JvdW5kLXRleHQtY29sb3ItZGlzYWJsZWQ6I2ZmZjstLXNwZWN0cnVtLWxhYmVsLWxhcmdlLXRleHQtY29sb3I6I2I5YjliOTstLXNwZWN0cnVtLWxhYmVsLWxhcmdlLXRleHQtY29sb3ItZGlzYWJsZWQ6IzZlNmU2ZTstLXNwZWN0cnVtLWxhYmVsLWxhcmdlLW92ZXItYmFja2dyb3VuZC10ZXh0LWNvbG9yOiNmZmY7LS1zcGVjdHJ1bS1sYWJlbC1sYXJnZS1vdmVyLWJhY2tncm91bmQtdGV4dC1jb2xvci1kaXNhYmxlZDojZmZmOy0tc3BlY3RydW0tbGluay10ZXh0LWNvbG9yOiM0YjljZjU7LS1zcGVjdHJ1bS1saW5rLXVuZGVybGluZS1jb2xvcjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLWxpbmstdGV4dC1jb2xvci1ob3ZlcjojNGI5Y2Y1Oy0tc3BlY3RydW0tbGluay11bmRlcmxpbmUtY29sb3ItaG92ZXI6IzRiOWNmNTstLXNwZWN0cnVtLWxpbmstdGV4dC1jb2xvci1kb3duOiM1YWE5ZmE7LS1zcGVjdHJ1bS1saW5rLXVuZGVybGluZS1jb2xvci1kb3duOiM1YWE5ZmE7LS1zcGVjdHJ1bS1saW5rLXRleHQtY29sb3Ita2V5LWZvY3VzOiM0YjljZjU7LS1zcGVjdHJ1bS1saW5rLXVuZGVybGluZS1jb2xvci1rZXktZm9jdXM6IzRiOWNmNTstLXNwZWN0cnVtLWxpbmstdGV4dC1jb2xvci1kaXNhYmxlZDojNmU2ZTZlOy0tc3BlY3RydW0tbGluay11bmRlcmxpbmUtY29sb3ItZGlzYWJsZWQ6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1saW5rLW92ZXItYmFja2dyb3VuZC10ZXh0LWNvbG9yOiNmZmY7LS1zcGVjdHJ1bS1saW5rLW92ZXItYmFja2dyb3VuZC11bmRlcmxpbmUtY29sb3I6I2ZmZjstLXNwZWN0cnVtLWxpbmstb3Zlci1iYWNrZ3JvdW5kLXRleHQtY29sb3ItaG92ZXI6I2ZmZjstLXNwZWN0cnVtLWxpbmstb3Zlci1iYWNrZ3JvdW5kLXVuZGVybGluZS1jb2xvci1ob3ZlcjojZmZmOy0tc3BlY3RydW0tbGluay1vdmVyLWJhY2tncm91bmQtdGV4dC1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS1saW5rLW92ZXItYmFja2dyb3VuZC11bmRlcmxpbmUtY29sb3ItZG93bjojZmZmOy0tc3BlY3RydW0tbGluay1vdmVyLWJhY2tncm91bmQtdGV4dC1jb2xvci1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLWxpbmstb3Zlci1iYWNrZ3JvdW5kLXVuZGVybGluZS1jb2xvci1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLWxpbmstb3Zlci1iYWNrZ3JvdW5kLXRleHQtY29sb3ItZGlzYWJsZWQ6aHNsYSgwLDAlLDEwMCUsMC41KTstLXNwZWN0cnVtLWxpbmstb3Zlci1iYWNrZ3JvdW5kLXVuZGVybGluZS1jb2xvci1kaXNhYmxlZDp0cmFuc3BhcmVudDstLXNwZWN0cnVtLWxpbmstcXVpZXQtdGV4dC1jb2xvcjojZTNlM2UzOy0tc3BlY3RydW0tbGluay1xdWlldC11bmRlcmxpbmUtY29sb3I6I2UzZTNlMzstLXNwZWN0cnVtLWxpbmstcXVpZXQtdGV4dC1jb2xvci1ob3ZlcjojZmZmOy0tc3BlY3RydW0tbGluay1xdWlldC11bmRlcmxpbmUtY29sb3ItaG92ZXI6I2ZmZjstLXNwZWN0cnVtLWxpbmstcXVpZXQtdGV4dC1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS1saW5rLXF1aWV0LXVuZGVybGluZS1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS1saW5rLXF1aWV0LXRleHQtY29sb3Ita2V5LWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS1saW5rLXF1aWV0LXVuZGVybGluZS1jb2xvci1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLWxpbmstcXVpZXQtdGV4dC1jb2xvci1tb3VzZS1mb2N1czojZmZmOy0tc3BlY3RydW0tbGluay1xdWlldC10ZXh0LWNvbG9yLWRpc2FibGVkOiM2ZTZlNmU7LS1zcGVjdHJ1bS1saW5rLXF1aWV0LXVuZGVybGluZS1jb2xvci1kaXNhYmxlZDp0cmFuc3BhcmVudDstLXNwZWN0cnVtLXBvcG92ZXItYmFja2dyb3VuZC1jb2xvcjojMjUyNTI1Oy0tc3BlY3RydW0tcG9wb3Zlci1ib3JkZXItY29sb3I6IzVhNWE1YTstLXNwZWN0cnVtLXBvcG92ZXItc2hhZG93LWNvbG9yOnJnYmEoMCwwLDAsMC41KTstLXNwZWN0cnVtLXJhZGlvLXRleHQtY29sb3I6I2UzZTNlMzstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3I6IzkwOTA5MDstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1iYWNrZ3JvdW5kLWNvbG9yOiMyZjJmMmY7LS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtZG90LWNvbG9yOiMyZjJmMmY7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtYm9yZGVyLWNvbG9yLWhvdmVyOiNiOWI5Yjk7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWNvbG9yLWRvd246I2ZmZjstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3ItZG93bjojZTNlM2UzOy0tc3BlY3RydW0tcmFkaW8tdGV4dC1jb2xvci1rZXktZm9jdXM6IzRiOWNmNTstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3Ita2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWNvbG9yLWRpc2FibGVkOiM2ZTZlNmU7LS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtYm9yZGVyLWNvbG9yLWRpc2FibGVkOiM1YTVhNWE7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWNvbG9yLXNlbGVjdGVkOiNlM2UzZTM7LS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkOiMzNzhlZjA7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWNvbG9yLXNlbGVjdGVkLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWhvdmVyOiM0YjljZjU7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWNvbG9yLXNlbGVjdGVkLWRvd246I2ZmZjstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3Itc2VsZWN0ZWQtZG93bjojNWFhOWZhOy0tc3BlY3RydW0tcmFkaW8tdGV4dC1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXM6IzRiOWNmNTstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiM2ZTZlNmU7LS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiM1YTVhNWE7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWNvbG9yLWVycm9yOiNmNzZkNzQ7LS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtYm9yZGVyLWNvbG9yLWVycm9yOiNlYzViNjI7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWNvbG9yLWVycm9yLWhvdmVyOiNmZjdiODI7LS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtYm9yZGVyLWNvbG9yLWVycm9yLWhvdmVyOiNmNzZkNzQ7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWNvbG9yLWVycm9yLWRvd246I2ZmN2I4MjstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3ItZXJyb3ItZG93bjojZmY3YjgyOy0tc3BlY3RydW0tcmFkaW8tdGV4dC1jb2xvci1lcnJvci1rZXktZm9jdXM6IzRiOWNmNTstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3ItZXJyb3Ita2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWNvbG9yLWVycm9yLWRpc2FibGVkOiM2ZTZlNmU7LS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtYm9yZGVyLWNvbG9yLWVycm9yLWRpc2FibGVkOiM1YTVhNWE7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWNvbG9yLWVycm9yLXNlbGVjdGVkOiNmNzZkNzQ7LS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtYm9yZGVyLWNvbG9yLWVycm9yLXNlbGVjdGVkOiNlYzViNjI7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWNvbG9yLWVycm9yLXNlbGVjdGVkLWhvdmVyOiNmZjdiODI7LS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtYm9yZGVyLWNvbG9yLWVycm9yLXNlbGVjdGVkLWhvdmVyOiNmNzZkNzQ7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWNvbG9yLWVycm9yLXNlbGVjdGVkLWRvd246I2ZmN2I4MjstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3ItZXJyb3Itc2VsZWN0ZWQtZG93bjojZmY3YjgyOy0tc3BlY3RydW0tcmFkaW8tdGV4dC1jb2xvci1lcnJvci1zZWxlY3RlZC1rZXktZm9jdXM6IzRiOWNmNTstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3ItZXJyb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWNvbG9yLWVycm9yLXNlbGVjdGVkLWRpc2FibGVkOiM2ZTZlNmU7LS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtYm9yZGVyLWNvbG9yLWVycm9yLXNlbGVjdGVkLWRpc2FibGVkOiM1YTVhNWE7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWNvbG9yOiNlM2UzZTM7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yOiM5MDkwOTA7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYmFja2dyb3VuZC1jb2xvcjojMmYyZjJmOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtY2lyY2xlLWRvdC1jb2xvcjojMmYyZjJmOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1jb2xvci1ob3ZlcjojZmZmOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtY2lyY2xlLWJvcmRlci1jb2xvci1ob3ZlcjojYjliOWI5Oy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLWRvd246I2UzZTNlMzstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LXRleHQtY29sb3Ita2V5LWZvY3VzOiM0YjljZjU7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLWtleS1mb2N1czojMjY4MGViOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1jb2xvci1kaXNhYmxlZDojNmU2ZTZlOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtY2lyY2xlLWJvcmRlci1jb2xvci1kaXNhYmxlZDojNWE1YTVhOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1jb2xvci1zZWxlY3RlZDojZTNlM2UzOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtY2lyY2xlLWJvcmRlci1jb2xvci1zZWxlY3RlZDojYjliOWI5Oy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1jb2xvci1zZWxlY3RlZC1ob3ZlcjojZmZmOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtY2lyY2xlLWJvcmRlci1jb2xvci1zZWxlY3RlZC1ob3ZlcjojZTNlM2UzOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1jb2xvci1zZWxlY3RlZC1kb3duOiNmZmY7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWRvd246I2ZmZjstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LXRleHQtY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiM0YjljZjU7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1czojMjY4MGViOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1jb2xvci1zZWxlY3RlZC1kaXNhYmxlZDojNmU2ZTZlOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtY2lyY2xlLWJvcmRlci1jb2xvci1zZWxlY3RlZC1kaXNhYmxlZDojNWE1YTVhOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1jb2xvci1lcnJvcjojZjc2ZDc0Oy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtY2lyY2xlLWJvcmRlci1jb2xvci1lcnJvcjojZWM1YjYyOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1jb2xvci1lcnJvci1ob3ZlcjojZmY3YjgyOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtY2lyY2xlLWJvcmRlci1jb2xvci1lcnJvci1ob3ZlcjojZjc2ZDc0Oy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1jb2xvci1lcnJvci1kb3duOiNmZjdiODI7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLWVycm9yLWRvd246I2ZmN2I4MjstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LXRleHQtY29sb3ItZXJyb3Ita2V5LWZvY3VzOiM0YjljZjU7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLWVycm9yLWtleS1mb2N1czojMjY4MGViOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1jb2xvci1lcnJvci1kaXNhYmxlZDojNmU2ZTZlOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtY2lyY2xlLWJvcmRlci1jb2xvci1lcnJvci1kaXNhYmxlZDojNWE1YTVhOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1jb2xvci1lcnJvci1zZWxlY3RlZDojZjc2ZDc0Oy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtY2lyY2xlLWJvcmRlci1jb2xvci1lcnJvci1zZWxlY3RlZDojZWM1YjYyOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1jb2xvci1lcnJvci1zZWxlY3RlZC1ob3ZlcjojZmY3YjgyOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtY2lyY2xlLWJvcmRlci1jb2xvci1lcnJvci1zZWxlY3RlZC1ob3ZlcjojZjc2ZDc0Oy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1jb2xvci1lcnJvci1zZWxlY3RlZC1kb3duOiNmZjdiODI7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLWVycm9yLXNlbGVjdGVkLWRvd246I2ZmN2I4MjstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LXRleHQtY29sb3ItZXJyb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiM0YjljZjU7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLWVycm9yLXNlbGVjdGVkLWtleS1mb2N1czojMjY4MGViOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1jb2xvci1lcnJvci1zZWxlY3RlZC1kaXNhYmxlZDojNmU2ZTZlOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtY2lyY2xlLWJvcmRlci1jb2xvci1lcnJvci1zZWxlY3RlZC1kaXNhYmxlZDojNWE1YTVhOy0tc3BlY3RydW0tc2xpZGVyLWNvbG9yLWhhbmRsZS1vdXRzZXQtYm9yZGVyLWNvbG9yOnJnYmEoMCwwLDAsMC4wNSk7LS1zcGVjdHJ1bS1zbGlkZXItY29sb3ItaGFuZGxlLWluc2V0LWJvcmRlci1jb2xvcjpyZ2JhKDAsMCwwLDAuMDUpOy0tc3BlY3RydW0tc2xpZGVyLWNvbG9yLWhhbmRsZS1ib3JkZXItY29sb3I6IzI1MjUyNTstLXNwZWN0cnVtLXNsaWRlci1jb2xvci1oYW5kbGUtY29sb3I6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1zbGlkZXItY29sb3ItdHJhY2stYmFja2dyb3VuZC1jb2xvci1ncmFkaWVudC1zdGFydDojMjY4MGViOy0tc3BlY3RydW0tc2xpZGVyLWNvbG9yLXRyYWNrLWJhY2tncm91bmQtY29sb3ItZ3JhZGllbnQtZW5kOiM1YWE5ZmE7LS1zcGVjdHJ1bS1zbGlkZXItY29sb3ItdHJhY2stYm9yZGVyLWNvbG9yOnJnYmEoMCwwLDAsMC4wNSk7LS1zcGVjdHJ1bS1zbGlkZXItY29sb3ItaGFuZGxlLW91dHNldC1ib3JkZXItY29sb3Ita2V5LWZvY3VzOnJnYmEoMCwwLDAsMC4wNSk7LS1zcGVjdHJ1bS1zbGlkZXItY29sb3ItdHJhY2stY29sb3ItZGlzYWJsZWQ6IzNlM2UzZTstLXNwZWN0cnVtLXNsaWRlci1jb2xvci1oYW5kbGUtYm9yZGVyLWNvbG9yLWRpc2FibGVkOiM1YTVhNWE7LS1zcGVjdHJ1bS1zbGlkZXItY29sb3ItaGFuZGxlLWNvbG9yLWRpc2FibGVkOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1ib3JkZXItY29sb3I6I2I5YjliOTstLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtYmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLXNsaWRlci10cmFjay1jb2xvcjojNGE0YTRhOy0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1ib3JkZXItY29sb3ItaG92ZXI6I2UzZTNlMzstLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1ob3Zlcjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLXNsaWRlci10cmFjay1jb2xvci1ob3ZlcjojNGE0YTRhOy0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1ib3JkZXItY29sb3ItZG93bjojZTNlM2UzOy0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWRvd246dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1zbGlkZXItdHJhY2stY29sb3ItZG93bjojNGE0YTRhOy0tc3BlY3RydW0tc2xpZGVyLXJhZGlhbC1yZWFjdGlvbi1jb2xvci1kb3duOmhzbGEoMCwwJSw4OSUsMC42KTstLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtYm9yZGVyLWNvbG9yLWtleS1mb2N1czojMjY4MGViOy0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWtleS1mb2N1czojMjY4MGViOy0tc3BlY3RydW0tc2xpZGVyLXRyYWNrLWNvbG9yLWtleS1mb2N1czojNGE0YTRhOy0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1ib3JkZXItY29sb3ItZGlzYWJsZWQ6IzVhNWE1YTstLXNwZWN0cnVtLXNsaWRlci1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1kaXNhYmxlZDp0cmFuc3BhcmVudDstLXNwZWN0cnVtLXNsaWRlci10cmFjay1jb2xvci1kaXNhYmxlZDojNGE0YTRhOy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLWhhbmRsZS1ib3JkZXItY29sb3I6I2I5YjliOTstLXNwZWN0cnVtLXNsaWRlci1lZGl0YWJsZS1oYW5kbGUtYmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLXNsaWRlci1lZGl0YWJsZS10cmFjay1jb2xvcjojNGE0YTRhOy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLWhhbmRsZS1ib3JkZXItY29sb3ItaG92ZXI6I2UzZTNlMzstLXNwZWN0cnVtLXNsaWRlci1lZGl0YWJsZS1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1ob3Zlcjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLXNsaWRlci1lZGl0YWJsZS10cmFjay1jb2xvci1ob3ZlcjojNGE0YTRhOy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLWhhbmRsZS1ib3JkZXItY29sb3ItZG93bjojZTNlM2UzOy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWRvd246dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1zbGlkZXItZWRpdGFibGUtdHJhY2stY29sb3ItZG93bjojNGE0YTRhOy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLXJhZGlhbC1yZWFjdGlvbi1jb2xvci1kb3duOmhzbGEoMCwwJSw4OSUsMC42KTstLXNwZWN0cnVtLXNsaWRlci1lZGl0YWJsZS1oYW5kbGUtYm9yZGVyLWNvbG9yLWtleS1mb2N1czojMjY4MGViOy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWtleS1mb2N1czojMjY4MGViOy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLXRyYWNrLWNvbG9yLWtleS1mb2N1czojNGE0YTRhOy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLWhhbmRsZS1ib3JkZXItY29sb3ItZGlzYWJsZWQ6IzVhNWE1YTstLXNwZWN0cnVtLXNsaWRlci1lZGl0YWJsZS1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1kaXNhYmxlZDp0cmFuc3BhcmVudDstLXNwZWN0cnVtLXNsaWRlci1lZGl0YWJsZS10cmFjay1jb2xvci1kaXNhYmxlZDojNGE0YTRhOy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtaGFuZGxlLWJvcmRlci1jb2xvcjojYjliOWI5Oy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtaGFuZGxlLWJhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC10cmFjay1jb2xvcjojYjliOWI5Oy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtaGFuZGxlLWJvcmRlci1jb2xvci1ob3ZlcjojZTNlM2UzOy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItaG92ZXI6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC10cmFjay1jb2xvci1ob3ZlcjojNGE0YTRhOy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtaGFuZGxlLWJvcmRlci1jb2xvci1kb3duOiNlM2UzZTM7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1kb3duOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtdHJhY2stY29sb3ItZG93bjojNGE0YTRhOy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtcmFkaWFsLXJlYWN0aW9uLWNvbG9yLWRvd246aHNsYSgwLDAlLDg5JSwwLjYpOy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtaGFuZGxlLWJvcmRlci1jb2xvci1rZXktZm9jdXM6IzI2ODBlYjstLXNwZWN0cnVtLXNsaWRlci1maWxsLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWtleS1mb2N1czojMjY4MGViOy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtdHJhY2stY29sb3Ita2V5LWZvY3VzOiM0YTRhNGE7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC1oYW5kbGUtYm9yZGVyLWNvbG9yLWRpc2FibGVkOiM1YTVhNWE7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1kaXNhYmxlZDp0cmFuc3BhcmVudDstLXNwZWN0cnVtLXNsaWRlci1maWxsLXRyYWNrLWNvbG9yLWRpc2FibGVkOiM0YTRhNGE7LS1zcGVjdHJ1bS1zbGlkZXItcGxheWVyLXRyYWNrLWJ1ZmZlci1jb2xvcjojNmU2ZTZlOy0tc3BlY3RydW0tc2xpZGVyLXBsYXllci10cmFjay1idWZmZXItY29sb3ItZGlzYWJsZWQ6IzRhNGE0YTstLXNwZWN0cnVtLXNsaWRlci1yYW1wLXRyYWNrLWNvbG9yLWRpc2FibGVkOiMzZTNlM2U7LS1zcGVjdHJ1bS1zbGlkZXItdGljay1tYXJrLWNvbG9yOiM0YTRhNGE7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1jb2xvcjojZTNlM2UzOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItY29sb3I6IzkwOTA5MDstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvcjojMmYyZjJmOy0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLWNvbG9yOiM0YTRhNGE7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1jb2xvci1ob3ZlcjojZmZmOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItY29sb3ItaG92ZXI6I2I5YjliOTstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1ob3ZlcjojMmYyZjJmOy0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLWNvbG9yLWhvdmVyOiM0YTRhNGE7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1kb3duOiNlM2UzZTM7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZG93bjojMmYyZjJmOy0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLWNvbG9yLWRvd246IzRhNGE0YTstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLWtleS1mb2N1czojNGI5Y2Y1Oy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItY29sb3Ita2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJhY2tncm91bmQtY29sb3Ita2V5LWZvY3VzOiMyZjJmMmY7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3Ita2V5LWZvY3VzOiM0YTRhNGE7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1jb2xvci1kaXNhYmxlZDojNmU2ZTZlOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItY29sb3ItZGlzYWJsZWQ6IzVhNWE1YTstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1kaXNhYmxlZDojMmYyZjJmOy0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLWNvbG9yLWRpc2FibGVkOiM0YTRhNGE7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1jb2xvci1zZWxlY3RlZDojZTNlM2UzOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItY29sb3Itc2VsZWN0ZWQ6IzM3OGVmMDstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1zZWxlY3RlZDojMmYyZjJmOy0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLWNvbG9yLXNlbGVjdGVkOiMzNzhlZjA7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1jb2xvci1zZWxlY3RlZC1ob3ZlcjojZmZmOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItY29sb3Itc2VsZWN0ZWQtaG92ZXI6IzRiOWNmNTstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1zZWxlY3RlZC1ob3ZlcjojMmYyZjJmOy0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLWNvbG9yLXNlbGVjdGVkLWhvdmVyOiM0YjljZjU7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1jb2xvci1zZWxlY3RlZC1kb3duOiNmZmY7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1zZWxlY3RlZC1kb3duOiM1YWE5ZmE7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQtZG93bjojMmYyZjJmOy0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLWNvbG9yLXNlbGVjdGVkLWRvd246IzVhYTlmYTstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1czojNGI5Y2Y1Oy0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1czojMjY4MGViOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1czojMmYyZjJmOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1jb2xvci1zZWxlY3RlZC1kaXNhYmxlZDojNmU2ZTZlOy0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiM1YTVhNWE7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1zZWxlY3RlZC1kaXNhYmxlZDojNWE1YTVhOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiMyZjJmMmY7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1jb2xvci1lcnJvcjojZjc2ZDc0Oy0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLWNvbG9yLWVycm9yOiNlYzViNjI7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1lcnJvcjojZWM1YjYyOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWVycm9yOiMyZjJmMmY7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1jb2xvci1lcnJvci1ob3ZlcjojZmY3YjgyOy0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLWNvbG9yLWVycm9yLWhvdmVyOiNmNzZkNzQ7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1lcnJvci1ob3ZlcjojZjc2ZDc0Oy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWVycm9yLWhvdmVyOiMyZjJmMmY7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1jb2xvci1lcnJvci1kb3duOiNmZjdiODI7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3ItZXJyb3ItZG93bjojZmY3YjgyOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItY29sb3ItZXJyb3ItZG93bjojZmY3YjgyOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWVycm9yLWRvd246IzJmMmYyZjstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLWVycm9yLWtleS1mb2N1czojNGI5Y2Y1Oy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItY29sb3ItZXJyb3Ita2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZXJyb3Ita2V5LWZvY3VzOiMyZjJmMmY7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3ItZXJyb3Ita2V5LWZvY3VzOiM0YTRhNGE7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1jb2xvci1lcnJvci1kaXNhYmxlZDojNmU2ZTZlOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItY29sb3ItZXJyb3ItZGlzYWJsZWQ6IzVhNWE1YTstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1lcnJvci1kaXNhYmxlZDojMmYyZjJmOy0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLWNvbG9yLWVycm9yLWRpc2FibGVkOiM0YTRhNGE7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1jb2xvci1lcnJvci1zZWxlY3RlZDojZjc2ZDc0Oy0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLWNvbG9yLWVycm9yLXNlbGVjdGVkOiNlYzViNjI7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1lcnJvci1zZWxlY3RlZDojZWM1YjYyOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWVycm9yLXNlbGVjdGVkOiMyZjJmMmY7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1jb2xvci1lcnJvci1zZWxlY3RlZC1ob3ZlcjojZmY3YjgyOy0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLWNvbG9yLWVycm9yLXNlbGVjdGVkLWhvdmVyOiNmNzZkNzQ7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1lcnJvci1zZWxlY3RlZC1ob3ZlcjojZjc2ZDc0Oy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWVycm9yLXNlbGVjdGVkLWhvdmVyOiMyZjJmMmY7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1jb2xvci1lcnJvci1zZWxlY3RlZC1kb3duOiNmZjdiODI7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3ItZXJyb3Itc2VsZWN0ZWQtZG93bjojZmY3YjgyOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItY29sb3ItZXJyb3Itc2VsZWN0ZWQtZG93bjojZmY3YjgyOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWVycm9yLXNlbGVjdGVkLWRvd246IzJmMmYyZjstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLWVycm9yLXNlbGVjdGVkLWtleS1mb2N1czojNGI5Y2Y1Oy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItY29sb3ItZXJyb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZXJyb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiMyZjJmMmY7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3ItZXJyb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiM0YTRhNGE7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1jb2xvci1lcnJvci1zZWxlY3RlZC1kaXNhYmxlZDojNmU2ZTZlOy0tc3BlY3RydW0tc3dpdGNoLXRyYWNrLWNvbG9yLWVycm9yLXNlbGVjdGVkLWRpc2FibGVkOiM1YTVhNWE7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1lcnJvci1zZWxlY3RlZC1kaXNhYmxlZDojNWE1YTVhOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWVycm9yLXNlbGVjdGVkLWRpc2FibGVkOiMyZjJmMmY7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3ItZGlzYWJsZWQtc2VsZWN0ZWQ6IzVhNWE1YTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWNvbG9yOiNlM2UzZTM7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1jb2xvcjojOTA5MDkwOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yOiMyZjJmMmY7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdHJhY2stY29sb3I6IzRhNGE0YTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1jb2xvci1ob3ZlcjojYjliOWI5Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyOiMyZjJmMmY7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdHJhY2stY29sb3ItaG92ZXI6IzRhNGE0YTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWNvbG9yLWRvd246I2ZmZjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLWRvd246I2UzZTNlMzstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1kb3duOiMyZjJmMmY7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdHJhY2stY29sb3ItZG93bjojNGE0YTRhOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3Ita2V5LWZvY3VzOiM0YjljZjU7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1jb2xvci1rZXktZm9jdXM6IzI2ODBlYjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1rZXktZm9jdXM6IzJmMmYyZjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1rZXktZm9jdXM6IzRhNGE0YTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWNvbG9yLWRpc2FibGVkOiM2ZTZlNmU7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1jb2xvci1kaXNhYmxlZDojNWE1YTVhOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWRpc2FibGVkOiMyZjJmMmY7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdHJhY2stY29sb3ItZGlzYWJsZWQ6IzRhNGE0YTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWNvbG9yLXNlbGVjdGVkOiNlM2UzZTM7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1jb2xvci1zZWxlY3RlZDojYjliOWI5Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkOiMyZjJmMmY7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdHJhY2stY29sb3Itc2VsZWN0ZWQ6I2I5YjliOTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWNvbG9yLXNlbGVjdGVkLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1jb2xvci1zZWxlY3RlZC1ob3ZlcjojZTNlM2UzOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkLWhvdmVyOiMyZjJmMmY7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdHJhY2stY29sb3Itc2VsZWN0ZWQtaG92ZXI6I2UzZTNlMzstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWNvbG9yLXNlbGVjdGVkLWRvd246I2ZmZjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWRvd246I2ZmZjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1zZWxlY3RlZC1kb3duOiMyZjJmMmY7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdHJhY2stY29sb3Itc2VsZWN0ZWQtZG93bjojZmZmOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiM0YjljZjU7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdHJhY2stY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiMyZjJmMmY7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXM6IzI2ODBlYjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiM2ZTZlNmU7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdHJhY2stY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6IzVhNWE1YTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiM1YTVhNWE7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6IzJmMmYyZjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWNvbG9yLWVycm9yOiNmNzZkNzQ7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdHJhY2stY29sb3ItZXJyb3I6I2VjNWI2MjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLWVycm9yOiNlYzViNjI7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZXJyb3I6IzJmMmYyZjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWNvbG9yLWVycm9yLWhvdmVyOiNmZjdiODI7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdHJhY2stY29sb3ItZXJyb3ItaG92ZXI6I2Y3NmQ3NDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLWVycm9yLWhvdmVyOiNmNzZkNzQ7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZXJyb3ItaG92ZXI6IzJmMmYyZjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWNvbG9yLWVycm9yLWRvd246I2ZmN2I4MjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1lcnJvci1kb3duOiNmZjdiODI7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1jb2xvci1lcnJvci1kb3duOiNmZjdiODI7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZXJyb3ItZG93bjojMmYyZjJmOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3ItZXJyb3Ita2V5LWZvY3VzOiM0YjljZjU7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1jb2xvci1lcnJvci1rZXktZm9jdXM6IzI2ODBlYjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1lcnJvci1rZXktZm9jdXM6IzJmMmYyZjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1lcnJvci1rZXktZm9jdXM6IzRhNGE0YTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWNvbG9yLWVycm9yLWRpc2FibGVkOiM2ZTZlNmU7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1jb2xvci1lcnJvci1kaXNhYmxlZDojNWE1YTVhOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWVycm9yLWRpc2FibGVkOiMyZjJmMmY7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdHJhY2stY29sb3ItZXJyb3ItZGlzYWJsZWQ6IzRhNGE0YTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWNvbG9yLWVycm9yLXNlbGVjdGVkOiNmNzZkNzQ7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdHJhY2stY29sb3ItZXJyb3Itc2VsZWN0ZWQ6I2VjNWI2MjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLWVycm9yLXNlbGVjdGVkOiNlYzViNjI7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZXJyb3Itc2VsZWN0ZWQ6IzJmMmYyZjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWNvbG9yLWVycm9yLXNlbGVjdGVkLWhvdmVyOiNmZjdiODI7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdHJhY2stY29sb3ItZXJyb3Itc2VsZWN0ZWQtaG92ZXI6I2Y3NmQ3NDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLWVycm9yLXNlbGVjdGVkLWhvdmVyOiNmNzZkNzQ7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZXJyb3Itc2VsZWN0ZWQtaG92ZXI6IzJmMmYyZjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWNvbG9yLWVycm9yLXNlbGVjdGVkLWRvd246I2ZmN2I4MjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1lcnJvci1zZWxlY3RlZC1kb3duOiNmZjdiODI7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1jb2xvci1lcnJvci1zZWxlY3RlZC1kb3duOiNmZjdiODI7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZXJyb3Itc2VsZWN0ZWQtZG93bjojMmYyZjJmOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3ItZXJyb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiM0YjljZjU7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1jb2xvci1lcnJvci1zZWxlY3RlZC1rZXktZm9jdXM6IzI2ODBlYjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1lcnJvci1zZWxlY3RlZC1rZXktZm9jdXM6IzJmMmYyZjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1lcnJvci1zZWxlY3RlZC1rZXktZm9jdXM6IzRhNGE0YTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWNvbG9yLWVycm9yLXNlbGVjdGVkLWRpc2FibGVkOiM2ZTZlNmU7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdHJhY2stY29sb3ItZXJyb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6IzVhNWE1YTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLWVycm9yLXNlbGVjdGVkLWRpc2FibGVkOiM1YTVhNWE7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZXJyb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6IzJmMmYyZjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1kaXNhYmxlZC1zZWxlY3RlZDojNWE1YTVhOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXRleHQtY29sb3I6I2I5YjliOTstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC1pY29uLWNvbG9yOiNiOWI5Yjk7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3Qtc2VsZWN0aW9uLWluZGljYXRvci1jb2xvcjojZmZmOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LWZvY3VzLXJpbmctY29sb3I6IzI2ODBlYjstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC1ydWxlLWNvbG9yOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXRleHQtY29sb3ItaG92ZXI6I2ZmZjstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC1pY29uLWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdGV4dC1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtaWNvbi1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdGV4dC1jb2xvci1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC1pY29uLWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXRleHQtY29sb3ItbW91c2UtZm9jdXM6I2ZmZjstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC10ZXh0LWNvbG9yLWRpc2FibGVkOiM2ZTZlNmU7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtaWNvbi1jb2xvci1kaXNhYmxlZDojNWE1YTVhOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXRleHQtY29sb3Itc2VsZWN0ZWQ6I2ZmZjstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC1pY29uLWNvbG9yLXNlbGVjdGVkOiNmZmY7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdGV4dC1jb2xvci1zZWxlY3RlZC1ob3ZlcjojZmZmOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LWljb24tY29sb3Itc2VsZWN0ZWQtaG92ZXI6I2ZmZjstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC10ZXh0LWNvbG9yLXNlbGVjdGVkLWRvd246I2ZmZjstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC1pY29uLWNvbG9yLXNlbGVjdGVkLWRvd246I2ZmZjstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC10ZXh0LWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LWljb24tY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdGV4dC1jb2xvci1zZWxlY3RlZC1kaXNhYmxlZDojNmU2ZTZlOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LWljb24tY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6IzVhNWE1YTstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC10ZXh0LWNvbG9yOiNiOWI5Yjk7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtaWNvbi1jb2xvcjojYjliOWI5Oy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLXNlbGVjdGlvbi1pbmRpY2F0b3ItY29sb3I6I2ZmZjstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC1mb2N1cy1yaW5nLWNvbG9yOiMyNjgwZWI7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtcnVsZS1jb2xvcjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC10ZXh0LWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtaWNvbi1jb2xvci1ob3ZlcjojZmZmOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLXRleHQtY29sb3ItZG93bjojZmZmOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLWljb24tY29sb3ItZG93bjojZmZmOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLXRleHQtY29sb3Ita2V5LWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtaWNvbi1jb2xvci1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC10ZXh0LWNvbG9yLW1vdXNlLWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtdGV4dC1jb2xvci1kaXNhYmxlZDojNmU2ZTZlOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLWljb24tY29sb3ItZGlzYWJsZWQ6IzVhNWE1YTstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC10ZXh0LWNvbG9yLXNlbGVjdGVkOiNmZmY7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtaWNvbi1jb2xvci1zZWxlY3RlZDojZmZmOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLXRleHQtY29sb3Itc2VsZWN0ZWQtaG92ZXI6I2ZmZjstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC1pY29uLWNvbG9yLXNlbGVjdGVkLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtdGV4dC1jb2xvci1zZWxlY3RlZC1kb3duOiNmZmY7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtaWNvbi1jb2xvci1zZWxlY3RlZC1kb3duOiNmZmY7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtdGV4dC1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC1pY29uLWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLXRleHQtY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6IzZlNmU2ZTstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC1pY29uLWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiM1YTVhNWE7LS1zcGVjdHJ1bS10YWJzLXRleHQtY29sb3I6I2I5YjliOTstLXNwZWN0cnVtLXRhYnMtaWNvbi1jb2xvcjojYjliOWI5Oy0tc3BlY3RydW0tdGFicy1zZWxlY3Rpb24taW5kaWNhdG9yLWNvbG9yOiNmZmY7LS1zcGVjdHJ1bS10YWJzLWZvY3VzLXJpbmctY29sb3I6IzI2ODBlYjstLXNwZWN0cnVtLXRhYnMtcnVsZS1jb2xvcjojM2UzZTNlOy0tc3BlY3RydW0tdGFicy10ZXh0LWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS10YWJzLWljb24tY29sb3ItaG92ZXI6I2ZmZjstLXNwZWN0cnVtLXRhYnMtdGV4dC1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS10YWJzLWljb24tY29sb3ItZG93bjojZmZmOy0tc3BlY3RydW0tdGFicy10ZXh0LWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tdGFicy1pY29uLWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tdGFicy10ZXh0LWNvbG9yLW1vdXNlLWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXRleHQtY29sb3ItZGlzYWJsZWQ6IzZlNmU2ZTstLXNwZWN0cnVtLXRhYnMtaWNvbi1jb2xvci1kaXNhYmxlZDojNWE1YTVhOy0tc3BlY3RydW0tdGFicy10ZXh0LWNvbG9yLXNlbGVjdGVkOiNmZmY7LS1zcGVjdHJ1bS10YWJzLWljb24tY29sb3Itc2VsZWN0ZWQ6I2ZmZjstLXNwZWN0cnVtLXRhYnMtdGV4dC1jb2xvci1zZWxlY3RlZC1ob3ZlcjojZmZmOy0tc3BlY3RydW0tdGFicy1pY29uLWNvbG9yLXNlbGVjdGVkLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXRleHQtY29sb3Itc2VsZWN0ZWQtZG93bjojZmZmOy0tc3BlY3RydW0tdGFicy1pY29uLWNvbG9yLXNlbGVjdGVkLWRvd246I2ZmZjstLXNwZWN0cnVtLXRhYnMtdGV4dC1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLXRhYnMtaWNvbi1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLXRhYnMtdGV4dC1jb2xvci1zZWxlY3RlZC1kaXNhYmxlZDojNmU2ZTZlOy0tc3BlY3RydW0tdGFicy1pY29uLWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiM1YTVhNWE7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXRleHQtY29sb3I6I2I5YjliOTstLXNwZWN0cnVtLXRhYnMtcXVpZXQtaWNvbi1jb2xvcjojYjliOWI5Oy0tc3BlY3RydW0tdGFicy1xdWlldC1zZWxlY3Rpb24taW5kaWNhdG9yLWNvbG9yOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWZvY3VzLXJpbmctY29sb3I6IzI2ODBlYjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtcnVsZS1jb2xvcjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdGV4dC1jb2xvci1ob3ZlcjojZmZmOy0tc3BlY3RydW0tdGFicy1xdWlldC1pY29uLWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXRleHQtY29sb3ItZG93bjojZmZmOy0tc3BlY3RydW0tdGFicy1xdWlldC1pY29uLWNvbG9yLWRvd246I2ZmZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdGV4dC1jb2xvci1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtaWNvbi1jb2xvci1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdGV4dC1jb2xvci1tb3VzZS1mb2N1czojZmZmOy0tc3BlY3RydW0tdGFicy1xdWlldC10ZXh0LWNvbG9yLWRpc2FibGVkOiM2ZTZlNmU7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWljb24tY29sb3ItZGlzYWJsZWQ6IzVhNWE1YTstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdGV4dC1jb2xvci1zZWxlY3RlZDojZmZmOy0tc3BlY3RydW0tdGFicy1xdWlldC1pY29uLWNvbG9yLXNlbGVjdGVkOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXRleHQtY29sb3Itc2VsZWN0ZWQtaG92ZXI6I2ZmZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtaWNvbi1jb2xvci1zZWxlY3RlZC1ob3ZlcjojZmZmOy0tc3BlY3RydW0tdGFicy1xdWlldC10ZXh0LWNvbG9yLXNlbGVjdGVkLWRvd246I2ZmZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtaWNvbi1jb2xvci1zZWxlY3RlZC1kb3duOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXRleHQtY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWljb24tY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXRleHQtY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6IzZlNmU2ZTstLXNwZWN0cnVtLXRhYnMtcXVpZXQtaWNvbi1jb2xvci1zZWxlY3RlZC1kaXNhYmxlZDojNWE1YTVhOy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LXRleHQtY29sb3I6I2I5YjliOTstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC1pY29uLWNvbG9yOiNiOWI5Yjk7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3Qtc2VsZWN0aW9uLWluZGljYXRvci1jb2xvcjojZmZmOy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LWZvY3VzLXJpbmctY29sb3I6IzI2ODBlYjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC1ydWxlLWNvbG9yOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LXRleHQtY29sb3ItaG92ZXI6I2ZmZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC1pY29uLWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtdGV4dC1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtaWNvbi1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtdGV4dC1jb2xvci1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC1pY29uLWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LXRleHQtY29sb3ItbW91c2UtZm9jdXM6I2ZmZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC10ZXh0LWNvbG9yLWRpc2FibGVkOiM2ZTZlNmU7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtaWNvbi1jb2xvci1kaXNhYmxlZDojNWE1YTVhOy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LXRleHQtY29sb3Itc2VsZWN0ZWQ6I2ZmZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC1pY29uLWNvbG9yLXNlbGVjdGVkOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtdGV4dC1jb2xvci1zZWxlY3RlZC1ob3ZlcjojZmZmOy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LWljb24tY29sb3Itc2VsZWN0ZWQtaG92ZXI6I2ZmZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC10ZXh0LWNvbG9yLXNlbGVjdGVkLWRvd246I2ZmZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC1pY29uLWNvbG9yLXNlbGVjdGVkLWRvd246I2ZmZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC10ZXh0LWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LWljb24tY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtdGV4dC1jb2xvci1zZWxlY3RlZC1kaXNhYmxlZDojNmU2ZTZlOy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LWljb24tY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6IzVhNWE1YTstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtdGV4dC1jb2xvcjojYjliOWI5Oy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC1pY29uLWNvbG9yOiNiOWI5Yjk7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLXNlbGVjdGlvbi1pbmRpY2F0b3ItY29sb3I6I2ZmZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtZm9jdXMtcmluZy1jb2xvcjojMjY4MGViOy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC1ydWxlLWNvbG9yOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC10ZXh0LWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLWljb24tY29sb3ItaG92ZXI6I2ZmZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtdGV4dC1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLWljb24tY29sb3ItZG93bjojZmZmOy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC10ZXh0LWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC1pY29uLWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC10ZXh0LWNvbG9yLW1vdXNlLWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLXRleHQtY29sb3ItZGlzYWJsZWQ6IzZlNmU2ZTstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtaWNvbi1jb2xvci1kaXNhYmxlZDojNWE1YTVhOy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC10ZXh0LWNvbG9yLXNlbGVjdGVkOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLWljb24tY29sb3Itc2VsZWN0ZWQ6I2ZmZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtdGV4dC1jb2xvci1zZWxlY3RlZC1ob3ZlcjojZmZmOy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC1pY29uLWNvbG9yLXNlbGVjdGVkLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLXRleHQtY29sb3Itc2VsZWN0ZWQtZG93bjojZmZmOy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC1pY29uLWNvbG9yLXNlbGVjdGVkLWRvd246I2ZmZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtdGV4dC1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtaWNvbi1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtdGV4dC1jb2xvci1zZWxlY3RlZC1kaXNhYmxlZDojNmU2ZTZlOy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC1pY29uLWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiM1YTVhNWE7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLXRleHQtY29sb3I6I2I5YjliOTstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtaWNvbi1jb2xvcjojYjliOWI5Oy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC1zZWxlY3Rpb24taW5kaWNhdG9yLWNvbG9yOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLWZvY3VzLXJpbmctY29sb3I6IzI2ODBlYjstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtcnVsZS1jb2xvcjojM2UzZTNlOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC10ZXh0LWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLWljb24tY29sb3ItaG92ZXI6I2ZmZjstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtdGV4dC1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLWljb24tY29sb3ItZG93bjojZmZmOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC10ZXh0LWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC1pY29uLWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC10ZXh0LWNvbG9yLW1vdXNlLWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLXRleHQtY29sb3ItZGlzYWJsZWQ6IzZlNmU2ZTstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtaWNvbi1jb2xvci1kaXNhYmxlZDojNWE1YTVhOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC10ZXh0LWNvbG9yLXNlbGVjdGVkOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLWljb24tY29sb3Itc2VsZWN0ZWQ6I2ZmZjstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtdGV4dC1jb2xvci1zZWxlY3RlZC1ob3ZlcjojZmZmOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC1pY29uLWNvbG9yLXNlbGVjdGVkLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLXRleHQtY29sb3Itc2VsZWN0ZWQtZG93bjojZmZmOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC1pY29uLWNvbG9yLXNlbGVjdGVkLWRvd246I2ZmZjstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtdGV4dC1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtaWNvbi1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtdGV4dC1jb2xvci1zZWxlY3RlZC1kaXNhYmxlZDojNmU2ZTZlOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC1pY29uLWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiM1YTVhNWF9Omhvc3R7ZGlzcGxheTpibG9ja31cbmA7XG5leHBvcnQgZGVmYXVsdCBzdHlsZXM7IiwiLypcbkNvcHlyaWdodCAyMDE4IEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbm9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG50aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbk9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmltcG9ydCB7IExpdEVsZW1lbnQsIENTU1Jlc3VsdEFycmF5LCBodG1sLCBUZW1wbGF0ZVJlc3VsdCB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmltcG9ydCBkYXJrU3R5bGVzIGZyb20gJy4vdGhlbWUtZGFyay5jc3MnO1xuXG5leHBvcnQgY2xhc3MgVGhlbWVEYXJrIGV4dGVuZHMgTGl0RWxlbWVudCB7XG4gICAgcHVibGljIHN0YXRpYyBnZXQgc3R5bGVzKCk6IENTU1Jlc3VsdEFycmF5IHtcbiAgICAgICAgcmV0dXJuIFtkYXJrU3R5bGVzXTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcmVuZGVyKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICAgIGA7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuY29uc3Qgc3R5bGVzID0gY3NzYFxuOmhvc3QsOnJvb3R7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNjYWxlLWZhY3RvcjoxOy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTA6MHB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTEwOjFweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0yNToycHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNDA6M3B4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTUwOjRweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS02NTo1cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNzU6NnB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTg1OjdweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0xMDA6OHB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTExNTo5cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTI1OjEwcHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTMwOjExcHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTUwOjEycHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTYwOjEzcHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTc1OjE0cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMjAwOjE2cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMjI1OjE4cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMjUwOjIwcHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMzAwOjI0cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMzUwOjI4cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNDAwOjMycHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNDUwOjM2cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNTAwOjQwcHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNTUwOjQ0cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNjAwOjQ4cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNzAwOjU2cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtODAwOjY0cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtOTAwOjcycHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMTAwMDo4MHB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTEyMDA6OTZweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0xNjAwOjEyOHB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTE3MDA6MTM2cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMjQwMDoxOTJweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS0zMDAwOjI0MHB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTM0MDA6MjcycHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtMzYwMDoyODhweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc2l6ZS00NjAwOjM2OHB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zaXplLTUwMDA6NDAwcHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNjAwMDo0ODBweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tZm9udC1zaXplLTI1OjEwcHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLWZvbnQtc2l6ZS01MDoxMXB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1mb250LXNpemUtNzU6MTJweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tZm9udC1zaXplLTEwMDoxNHB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1mb250LXNpemUtMTUwOjE1cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLWZvbnQtc2l6ZS0yMDA6MTZweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tZm9udC1zaXplLTMwMDoxOHB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1mb250LXNpemUtNDAwOjIwcHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLWZvbnQtc2l6ZS01MDA6MjJweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tZm9udC1zaXplLTYwMDoyNXB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1mb250LXNpemUtNzAwOjI4cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLWZvbnQtc2l6ZS04MDA6MzJweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tZm9udC1zaXplLTkwMDozNnB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1mb250LXNpemUtMTAwMDo0MHB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1mb250LXNpemUtMTEwMDo0NXB4Oy0tc3BlY3RydW0tYWxpYXMtZHJvcHNoYWRvdy1ibHVyOjRweDstLXNwZWN0cnVtLWFsaWFzLWRyb3BzaGFkb3ctb2Zmc2V0LXk6MXB4Oy0tc3BlY3RydW0tYWxpYXMtZm9udC1zaXplLWRlZmF1bHQ6MTRweDstLXNwZWN0cnVtLWFsaWFzLWxpbmUtaGVpZ2h0LXNtYWxsOjE2cHg7LS1zcGVjdHJ1bS1hbGlhcy1saW5lLWhlaWdodC1tZWRpdW06MjBweDstLXNwZWN0cnVtLWFsaWFzLWxpbmUtaGVpZ2h0LWxhcmdlOjI0cHg7LS1zcGVjdHJ1bS1hbGlhcy1saW5lLWhlaWdodC14bGFyZ2U6MzJweDstLXNwZWN0cnVtLWFsaWFzLWxpbmUtaGVpZ2h0LXh4bGFyZ2U6NDhweDstLXNwZWN0cnVtLWFsaWFzLWxheW91dC1sYWJlbC1nYXAtc2l6ZTo4cHg7LS1zcGVjdHJ1bS1hbGlhcy1waWxsLWJ1dHRvbi10ZXh0LXNpemU6MTVweDstLXNwZWN0cnVtLWFsaWFzLXBpbGwtYnV0dG9uLXRleHQtYmFzZWxpbmU6MTFweDstLXNwZWN0cnVtLWFsaWFzLWJvcmRlci1yYWRpdXMteHNtYWxsOjFweDstLXNwZWN0cnVtLWFsaWFzLWJvcmRlci1yYWRpdXMtc21hbGw6MnB4Oy0tc3BlY3RydW0tYWxpYXMtYm9yZGVyLXJhZGl1cy1yZWd1bGFyOjRweDstLXNwZWN0cnVtLWFsaWFzLWJvcmRlci1yYWRpdXMtbWVkaXVtOjhweDstLXNwZWN0cnVtLWFsaWFzLWJvcmRlci1yYWRpdXMtbGFyZ2U6MTZweDstLXNwZWN0cnVtLWFsaWFzLXNpbmdsZS1saW5lLWhlaWdodDozMnB4Oy0tc3BlY3RydW0tYWxpYXMtc2luZ2xlLWxpbmUtd2lkdGg6MTkycHg7LS1zcGVjdHJ1bS1hbGlhcy13b3JrZmxvdy1pY29uLXNpemU6MThweDstLXNwZWN0cnVtLWFsaWFzLWhlYWRpbmctZGlzcGxheTEtdGV4dC1zaXplOjQ1cHg7LS1zcGVjdHJ1bS1hbGlhcy1oZWFkaW5nLWhhbi1kaXNwbGF5MS10ZXh0LXNpemU6NDBweDstLXNwZWN0cnVtLWFsaWFzLWhlYWRpbmctaGFuLWRpc3BsYXkxLW1hcmdpbi10b3A6MzZweDstLXNwZWN0cnVtLWFsaWFzLWhlYWRpbmctZGlzcGxheTEtbWFyZ2luLXRvcDo0MHB4Oy0tc3BlY3RydW0tYWxpYXMtaGVhZGluZy1kaXNwbGF5Mi10ZXh0LXNpemU6NDBweDstLXNwZWN0cnVtLWFsaWFzLWhlYWRpbmctZGlzcGxheTItbWFyZ2luLXRvcDozNnB4Oy0tc3BlY3RydW0tYWxpYXMtaGVhZGluZy1oYW4tZGlzcGxheTItdGV4dC1zaXplOjM2cHg7LS1zcGVjdHJ1bS1hbGlhcy1oZWFkaW5nLWhhbi1kaXNwbGF5Mi1tYXJnaW4tdG9wOjMycHg7LS1zcGVjdHJ1bS1hbGlhcy1oZWFkaW5nMS10ZXh0LXNpemU6MzZweDstLXNwZWN0cnVtLWFsaWFzLWhlYWRpbmcxLW1hcmdpbi10b3A6MzJweDstLXNwZWN0cnVtLWFsaWFzLWhlYWRpbmcxLWhhbi10ZXh0LXNpemU6MzJweDstLXNwZWN0cnVtLWFsaWFzLWhlYWRpbmcxLWhhbi1tYXJnaW4tdG9wOjI4cHg7LS1zcGVjdHJ1bS1hbGlhcy1oZWFkaW5nMi10ZXh0LXNpemU6MjhweDstLXNwZWN0cnVtLWFsaWFzLWhlYWRpbmcyLW1hcmdpbi10b3A6MjVweDstLXNwZWN0cnVtLWFsaWFzLWhlYWRpbmcyLWhhbi10ZXh0LXNpemU6MjVweDstLXNwZWN0cnVtLWFsaWFzLWhlYWRpbmcyLWhhbi1tYXJnaW4tdG9wOjIycHg7LS1zcGVjdHJ1bS1hbGlhcy1oZWFkaW5nMy10ZXh0LXNpemU6MjJweDstLXNwZWN0cnVtLWFsaWFzLWhlYWRpbmczLW1hcmdpbi10b3A6MjBweDstLXNwZWN0cnVtLWFsaWFzLWhlYWRpbmczLWhhbi10ZXh0LXNpemU6MjBweDstLXNwZWN0cnVtLWFsaWFzLWhlYWRpbmczLWhhbi1tYXJnaW4tdG9wOjE4cHg7LS1zcGVjdHJ1bS1hbGlhcy1oZWFkaW5nNC10ZXh0LXNpemU6MThweDstLXNwZWN0cnVtLWFsaWFzLWhlYWRpbmc0LW1hcmdpbi10b3A6MTZweDstLXNwZWN0cnVtLWFsaWFzLWhlYWRpbmc1LXRleHQtc2l6ZToxNnB4Oy0tc3BlY3RydW0tYWxpYXMtaGVhZGluZzUtbWFyZ2luLXRvcDoxNHB4Oy0tc3BlY3RydW0tYWxpYXMtaGVhZGluZzYtdGV4dC1zaXplOjE0cHg7LS1zcGVjdHJ1bS1hbGlhcy1oZWFkaW5nNi1tYXJnaW4tdG9wOjEycHg7LS1zcGVjdHJ1bS1iYW5uZXItYm9yZGVyLXJhZGl1czo4cHg7LS1zcGVjdHJ1bS1iYW5uZXItcGFkZGluZy15OjRweDstLXNwZWN0cnVtLWJhbm5lci1wYWRkaW5nLXg6OHB4Oy0tc3BlY3RydW0tYmFubmVyLXRleHQtc2l6ZToxMnB4Oy0tc3BlY3RydW0tYmFubmVyLXRleHQtbGluZS1oZWlnaHQ6MS4zOy0tc3BlY3RydW0tYnV0dG9uLWN0YS1oZWlnaHQ6MzJweDstLXNwZWN0cnVtLWJ1dHRvbi1jdGEtcGFkZGluZy14OjE2cHg7LS1zcGVjdHJ1bS1idXR0b24tY3RhLXRleHQtcGFkZGluZy14OjE2cHg7LS1zcGVjdHJ1bS1idXR0b24tY3RhLWljb24tcGFkZGluZy1sZWZ0OjE0cHg7LS1zcGVjdHJ1bS1idXR0b24tY3RhLWljb24tcGFkZGluZy1yaWdodDo4cHg7LS1zcGVjdHJ1bS1idXR0b24tY3RhLWJvcmRlci1yYWRpdXM6MTZweDstLXNwZWN0cnVtLWJ1dHRvbi1jdGEtYm9yZGVyLXNpemU6MnB4Oy0tc3BlY3RydW0tYnV0dG9uLWN0YS10ZXh0LWZvbnQtd2VpZ2h0OjcwMDstLXNwZWN0cnVtLWJ1dHRvbi1jdGEtdGV4dC1nYXA6OHB4Oy0tc3BlY3RydW0tYnV0dG9uLWN0YS10ZXh0LXNpemU6MTVweDstLXNwZWN0cnVtLWJ1dHRvbi1jdGEtdGV4dC1iYXNlbGluZToxMXB4Oy0tc3BlY3RydW0tYnV0dG9uLWN0YS1taW4td2lkdGg6NzJweDstLXNwZWN0cnVtLWJ1dHRvbi1jdGEtdG91Y2gtaGl0LXg6OHB4Oy0tc3BlY3RydW0tYnV0dG9uLWN0YS10b3VjaC1oaXQteTo4cHg7LS1zcGVjdHJ1bS1idXR0b24tY3RhLWJvcmRlci1zaXplLWluY3JlYXNlLWtleS1mb2N1czoxcHg7LS1zcGVjdHJ1bS1idXR0b24tb3Zlci1iYWNrZ3JvdW5kLWhlaWdodDozMnB4Oy0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC1wYWRkaW5nLXg6MTZweDstLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtdGV4dC1wYWRkaW5nLXg6MTZweDstLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtaWNvbi1wYWRkaW5nLWxlZnQ6MTRweDstLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtaWNvbi1wYWRkaW5nLXJpZ2h0OjhweDstLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtYm9yZGVyLXJhZGl1czoxNnB4Oy0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC1ib3JkZXItc2l6ZToycHg7LS1zcGVjdHJ1bS1idXR0b24tb3Zlci1iYWNrZ3JvdW5kLXRleHQtZm9udC13ZWlnaHQ6NzAwOy0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC10ZXh0LWdhcDo4cHg7LS1zcGVjdHJ1bS1idXR0b24tb3Zlci1iYWNrZ3JvdW5kLXRleHQtc2l6ZToxNXB4Oy0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC10ZXh0LWJhc2VsaW5lOjExcHg7LS1zcGVjdHJ1bS1idXR0b24tb3Zlci1iYWNrZ3JvdW5kLW1pbi13aWR0aDo3MnB4Oy0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC10b3VjaC1oaXQteDo4cHg7LS1zcGVjdHJ1bS1idXR0b24tb3Zlci1iYWNrZ3JvdW5kLXRvdWNoLWhpdC15OjhweDstLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtYm9yZGVyLXNpemUtaW5jcmVhc2Uta2V5LWZvY3VzOjFweDstLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWhlaWdodDozMnB4Oy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktcGFkZGluZy14OjE2cHg7LS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS10ZXh0LXBhZGRpbmcteDoxNnB4Oy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktaWNvbi1wYWRkaW5nLWxlZnQ6MTRweDstLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWljb24tcGFkZGluZy1yaWdodDo4cHg7LS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS1ib3JkZXItcmFkaXVzOjE2cHg7LS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS1ib3JkZXItc2l6ZToycHg7LS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS10ZXh0LWZvbnQtd2VpZ2h0OjcwMDstLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LXRleHQtZ2FwOjhweDstLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LXRleHQtc2l6ZToxNXB4Oy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktdGV4dC1iYXNlbGluZToxMXB4Oy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktbWluLXdpZHRoOjcycHg7LS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS10b3VjaC1oaXQteDo4cHg7LS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS10b3VjaC1oaXQteTo4cHg7LS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS1ib3JkZXItc2l6ZS1pbmNyZWFzZS1rZXktZm9jdXM6MXB4Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LW92ZXItYmFja2dyb3VuZC1oZWlnaHQ6MzJweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtcGFkZGluZy14OjE2cHg7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLXRleHQtcGFkZGluZy14OjE2cHg7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLWljb24tcGFkZGluZy1sZWZ0OjE0cHg7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLWljb24tcGFkZGluZy1yaWdodDo4cHg7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLWJvcmRlci1yYWRpdXM6MTZweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtYm9yZGVyLXNpemU6MDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtdGV4dC1mb250LXdlaWdodDo3MDA7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLXRleHQtZ2FwOjhweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtdGV4dC1zaXplOjE1cHg7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLXRleHQtYmFzZWxpbmU6MTFweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtbWluLXdpZHRoOjcycHg7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLXRvdWNoLWhpdC14OjE2cHg7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLXRvdWNoLWhpdC15OjhweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtY3Vyc29yLWhpdC14OjE2cHg7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLWJvcmRlci1zaXplLWluY3JlYXNlLWtleS1mb2N1czoxcHg7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1oZWlnaHQ6MzJweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1wcmltYXJ5LXBhZGRpbmcteDoxNnB4Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktdGV4dC1wYWRkaW5nLXg6MTZweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1wcmltYXJ5LWljb24tcGFkZGluZy1sZWZ0OjE0cHg7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1pY29uLXBhZGRpbmctcmlnaHQ6OHB4Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktYm9yZGVyLXJhZGl1czoxNnB4Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktYm9yZGVyLXNpemU6MDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1wcmltYXJ5LXRleHQtZm9udC13ZWlnaHQ6NzAwOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktdGV4dC1nYXA6OHB4Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktdGV4dC1zaXplOjE1cHg7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS10ZXh0LWJhc2VsaW5lOjExcHg7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1taW4td2lkdGg6NzJweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1wcmltYXJ5LXRvdWNoLWhpdC14OjE2cHg7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS10b3VjaC1oaXQteTo4cHg7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1jdXJzb3ItaGl0LXg6MTZweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1wcmltYXJ5LWJvcmRlci1zaXplLWluY3JlYXNlLWtleS1mb2N1czoxcHg7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWhlaWdodDozMnB4Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS1wYWRkaW5nLXg6MTZweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktdGV4dC1wYWRkaW5nLXg6MTZweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktaWNvbi1wYWRkaW5nLWxlZnQ6MTRweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktaWNvbi1wYWRkaW5nLXJpZ2h0OjhweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktYm9yZGVyLXJhZGl1czoxNnB4Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS1ib3JkZXItc2l6ZTowOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS10ZXh0LWZvbnQtd2VpZ2h0OjcwMDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktdGV4dC1nYXA6OHB4Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS10ZXh0LXNpemU6MTVweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktdGV4dC1iYXNlbGluZToxMXB4Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS1taW4td2lkdGg6NzJweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktdG91Y2gtaGl0LXg6MTZweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktdG91Y2gtaGl0LXk6OHB4Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS1jdXJzb3ItaGl0LXg6MTZweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktYm9yZGVyLXNpemUtaW5jcmVhc2Uta2V5LWZvY3VzOjFweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLWhlaWdodDozMnB4Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXdhcm5pbmctcGFkZGluZy14OjE2cHg7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy10ZXh0LXBhZGRpbmcteDoxNnB4Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXdhcm5pbmctaWNvbi1wYWRkaW5nLWxlZnQ6MTRweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLWljb24tcGFkZGluZy1yaWdodDo4cHg7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy1ib3JkZXItcmFkaXVzOjE2cHg7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy1ib3JkZXItc2l6ZTowOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXdhcm5pbmctdGV4dC1mb250LXdlaWdodDo3MDA7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy10ZXh0LWdhcDo4cHg7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy10ZXh0LXNpemU6MTVweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLXRleHQtYmFzZWxpbmU6MTFweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLW1pbi13aWR0aDo3MnB4Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXdhcm5pbmctdG91Y2gtaGl0LXg6MTZweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLXRvdWNoLWhpdC15OjhweDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLWN1cnNvci1oaXQteDoxNnB4Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXdhcm5pbmctYm9yZGVyLXNpemUtaW5jcmVhc2Uta2V5LWZvY3VzOjFweDstLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktaGVpZ2h0OjMycHg7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LXBhZGRpbmcteDoxNnB4Oy0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS10ZXh0LXBhZGRpbmcteDoxNnB4Oy0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS1pY29uLXBhZGRpbmctbGVmdDoxNHB4Oy0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS1pY29uLXBhZGRpbmctcmlnaHQ6OHB4Oy0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS1ib3JkZXItcmFkaXVzOjE2cHg7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LWJvcmRlci1zaXplOjJweDstLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktdGV4dC1mb250LXdlaWdodDo3MDA7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LXRleHQtZ2FwOjhweDstLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktdGV4dC1zaXplOjE1cHg7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LXRleHQtYmFzZWxpbmU6MTFweDstLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktbWluLXdpZHRoOjcycHg7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LXRvdWNoLWhpdC14OjhweDstLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktdG91Y2gtaGl0LXk6OHB4Oy0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS1ib3JkZXItc2l6ZS1pbmNyZWFzZS1rZXktZm9jdXM6MXB4Oy0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctaGVpZ2h0OjMycHg7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy1wYWRkaW5nLXg6MTZweDstLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLXRleHQtcGFkZGluZy14OjE2cHg7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy1pY29uLXBhZGRpbmctbGVmdDoxNHB4Oy0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctaWNvbi1wYWRkaW5nLXJpZ2h0OjhweDstLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLWJvcmRlci1yYWRpdXM6MTZweDstLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLWJvcmRlci1zaXplOjJweDstLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLXRleHQtZm9udC13ZWlnaHQ6NzAwOy0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctdGV4dC1nYXA6OHB4Oy0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctdGV4dC1zaXplOjE1cHg7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy10ZXh0LWJhc2VsaW5lOjExcHg7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy1taW4td2lkdGg6NzJweDstLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLXRvdWNoLWhpdC14OjhweDstLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLXRvdWNoLWhpdC15OjhweDstLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLWJvcmRlci1zaXplLWluY3JlYXNlLWtleS1mb2N1czoxcHg7LS1zcGVjdHJ1bS1jYXJkLW1pbi13aWR0aDoyNDBweDstLXNwZWN0cnVtLWNhcmQtYm9yZGVyLXJhZGl1czo0cHg7LS1zcGVjdHJ1bS1jYXJkLWNvdmVycGhvdG8taGVpZ2h0OjEzNnB4Oy0tc3BlY3RydW0tY2FyZC1jb3ZlcnBob3RvLWJvcmRlci1ib3R0b20tc2l6ZToxcHg7LS1zcGVjdHJ1bS1jYXJkLWJvZHktcGFkZGluZy10b3A6MjBweDstLXNwZWN0cnVtLWNhcmQtYm9keS1wYWRkaW5nLXJpZ2h0OjI0cHg7LS1zcGVjdHJ1bS1jYXJkLWJvZHktcGFkZGluZy1sZWZ0OjI0cHg7LS1zcGVjdHJ1bS1jYXJkLWJvZHktcGFkZGluZy1ib3R0b206MjBweDstLXNwZWN0cnVtLWNhcmQtY2hlY2tib3gtbWFyZ2luOjE2cHg7LS1zcGVjdHJ1bS1jYXJkLWJvZHktaGVhZGVyLWhlaWdodDoxOHB4Oy0tc3BlY3RydW0tY2FyZC1ib2R5LWNvbnRlbnQtaGVpZ2h0OjE0cHg7LS1zcGVjdHJ1bS1jYXJkLWJvZHktY29udGVudC1tYXJnaW4tdG9wOjZweDstLXNwZWN0cnVtLWNhcmQtdGl0bGUtcGFkZGluZy1yaWdodDo4cHg7LS1zcGVjdHJ1bS1jYXJkLXRpdGxlLXRleHQtc2l6ZToxNHB4Oy0tc3BlY3RydW0tY2FyZC1zdWJ0aXRsZS10ZXh0LXNpemU6MTFweDstLXNwZWN0cnVtLWNhcmQtc3VidGl0bGUtcGFkZGluZy10b3A6NHB4Oy0tc3BlY3RydW0tY2FyZC1zdWJ0aXRsZS1wYWRkaW5nLXJpZ2h0OjhweDstLXNwZWN0cnVtLWNhcmQtc3VidGl0bGUtbGV0dGVyLXNwYWNpbmc6MC4wNmVtOy0tc3BlY3RydW0tY2FyZC1hY3Rpb25zLW1hcmdpbjoxMHB4Oy0tc3BlY3RydW0tY2FyZC1mb290ZXItcGFkZGluZy10b3A6MTRweDstLXNwZWN0cnVtLWNhcmQtZm9vdGVyLWJvcmRlci10b3Atc2l6ZToxcHg7LS1zcGVjdHJ1bS1jYXJkLWJvcmRlci1zaXplOjFweDstLXNwZWN0cnVtLWNhcmQtYm9yZGVyLXNpemUta2V5LWZvY3VzOjJweDstLXNwZWN0cnVtLWNhcmQtcXVpZXQtYm9yZGVyLXJhZGl1czo0cHg7LS1zcGVjdHJ1bS1jYXJkLXF1aWV0LWJvcmRlci1zaXplOjFweDstLXNwZWN0cnVtLWNhcmQtcXVpZXQtbWluLXNpemU6MTM2cHg7LS1zcGVjdHJ1bS1jYXJkLXF1aWV0LWNoZWNrYm94LW1hcmdpbjoxNnB4Oy0tc3BlY3RydW0tY2FyZC1xdWlldC1wcmV2aWV3LXBhZGRpbmc6MjBweDstLXNwZWN0cnVtLWNhcmQtcXVpZXQtYm9keS1tYXJnaW4tdG9wOjE0cHg7LS1zcGVjdHJ1bS1jYXJkLXF1aWV0LWJvZHktaGVhZGVyLWhlaWdodDoxOHB4Oy0tc3BlY3RydW0tY2FyZC1xdWlldC1ib2R5LWhlYWRlci1tYXJnaW4tdG9wOjE0cHg7LS1zcGVjdHJ1bS1jYXJkLXF1aWV0LXNtYWxsLWJvcmRlci1yYWRpdXM6NHB4Oy0tc3BlY3RydW0tY2FyZC1xdWlldC1zbWFsbC1ib3JkZXItc2l6ZToxcHg7LS1zcGVjdHJ1bS1jYXJkLXF1aWV0LXNtYWxsLWJvZHktaGVhZGVyLWhlaWdodDoxMnB4Oy0tc3BlY3RydW0tY2FyZC1xdWlldC1zbWFsbC1ib2R5LW1hcmdpbi10b3A6OHB4Oy0tc3BlY3RydW0tY2FyZC1xdWlldC1zbWFsbC1wcmV2aWV3LXBhZGRpbmc6MTJweDstLXNwZWN0cnVtLWNhcmQtcXVpZXQtc21hbGwtY2hlY2tib3gtbWFyZ2luOjEwcHg7LS1zcGVjdHJ1bS1jYXJkLXF1aWV0LXNtYWxsLW1pbi1zaXplOjcycHg7LS1zcGVjdHJ1bS1jYXJkLXF1aWV0LXNtYWxsLXRpdGxlLXRleHQtc2l6ZToxNHB4Oy0tc3BlY3RydW0tY2FyZC1xdWlldC1zbWFsbC1ib2R5LWhlYWRlci1tYXJnaW4tdG9wOjE0cHg7LS1zcGVjdHJ1bS1kcm9wem9uZS1wYWRkaW5nOjcycHg7LS1zcGVjdHJ1bS1kcm9wem9uZS1ib3JkZXItd2lkdGg6MnB4Oy0tc3BlY3RydW0tZHJvcHpvbmUtYm9yZGVyLXJhZGl1czo0cHg7LS1zcGVjdHJ1bS1kcm9wem9uZS1jb250ZW50LXRleHQtc2l6ZToxNHB4Oy0tc3BlY3RydW0tZHJvcHpvbmUtaWNvbi1tYXJnaW4teToxNHB4Oy0tc3BlY3RydW0tZmllbGRsYWJlbC10ZXh0LWZvbnQtZmFtaWx5OmFkb2JlLWNsZWFuLFwiU291cmNlIFNhbnMgUHJvXCIsLWFwcGxlLXN5c3RlbSxCbGlua01hY1N5c3RlbUZvbnQsXCJTZWdvZSBVSVwiLFJvYm90byxVYnVudHUsXCJUcmVidWNoZXQgTVNcIixcIkx1Y2lkYSBHcmFuZGVcIixzYW5zLXNlcmlmOy0tc3BlY3RydW0tZmllbGRsYWJlbC10ZXh0LWZvbnQtc3R5bGU6bm9ybWFsOy0tc3BlY3RydW0tZmllbGRsYWJlbC10ZXh0LWZvbnQtd2VpZ2h0OjQwMDstLXNwZWN0cnVtLWZpZWxkbGFiZWwtdGV4dC1saW5lLWhlaWdodDoxLjM7LS1zcGVjdHJ1bS1maWVsZGxhYmVsLXRleHQtbGV0dGVyLXNwYWNpbmc6MDstLXNwZWN0cnVtLWZpZWxkbGFiZWwtdGV4dC10cmFuc2Zvcm06bm9uZTstLXNwZWN0cnVtLWZpZWxkbGFiZWwtdGV4dC1zaXplOjEycHg7LS1zcGVjdHJ1bS1maWVsZGxhYmVsLWFzdGVyaXNrLXNpemU6OHB4Oy0tc3BlY3RydW0tZmllbGRsYWJlbC1hc3Rlcmlzay1nYXA6MnB4Oy0tc3BlY3RydW0tZmllbGRsYWJlbC1hc3Rlcmlzay1tYXJnaW4teTo0cHg7LS1zcGVjdHJ1bS1maWVsZGxhYmVsLXBhZGRpbmctdG9wOjRweDstLXNwZWN0cnVtLWZpZWxkbGFiZWwtcGFkZGluZy1ib3R0b206NXB4Oy0tc3BlY3RydW0tZmllbGRsYWJlbC1zaWRlLXRleHQtZm9udC1mYW1pbHk6YWRvYmUtY2xlYW4sXCJTb3VyY2UgU2FucyBQcm9cIiwtYXBwbGUtc3lzdGVtLEJsaW5rTWFjU3lzdGVtRm9udCxcIlNlZ29lIFVJXCIsUm9ib3RvLFVidW50dSxcIlRyZWJ1Y2hldCBNU1wiLFwiTHVjaWRhIEdyYW5kZVwiLHNhbnMtc2VyaWY7LS1zcGVjdHJ1bS1maWVsZGxhYmVsLXNpZGUtdGV4dC1mb250LXN0eWxlOm5vcm1hbDstLXNwZWN0cnVtLWZpZWxkbGFiZWwtc2lkZS10ZXh0LWZvbnQtd2VpZ2h0OjQwMDstLXNwZWN0cnVtLWZpZWxkbGFiZWwtc2lkZS10ZXh0LWxpbmUtaGVpZ2h0OjEuMzstLXNwZWN0cnVtLWZpZWxkbGFiZWwtc2lkZS10ZXh0LWxldHRlci1zcGFjaW5nOjA7LS1zcGVjdHJ1bS1maWVsZGxhYmVsLXNpZGUtdGV4dC10cmFuc2Zvcm06bm9uZTstLXNwZWN0cnVtLWZpZWxkbGFiZWwtc2lkZS10ZXh0LXNpemU6MTJweDstLXNwZWN0cnVtLWZpZWxkbGFiZWwtc2lkZS1hc3Rlcmlzay1zaXplOjhweDstLXNwZWN0cnVtLWZpZWxkbGFiZWwtc2lkZS1hc3Rlcmlzay1nYXA6MnB4Oy0tc3BlY3RydW0tZmllbGRsYWJlbC1zaWRlLWFzdGVyaXNrLW1hcmdpbi15OjBweDstLXNwZWN0cnVtLWZpZWxkbGFiZWwtc2lkZS1wYWRkaW5nLXRvcDo4cHg7LS1zcGVjdHJ1bS1maWVsZGxhYmVsLXNpZGUtcGFkZGluZy14OjhweDstLXNwZWN0cnVtLWxhYmVsLXRleHQtZm9udC1mYW1pbHk6YWRvYmUtY2xlYW4sXCJTb3VyY2UgU2FucyBQcm9cIiwtYXBwbGUtc3lzdGVtLEJsaW5rTWFjU3lzdGVtRm9udCxcIlNlZ29lIFVJXCIsUm9ib3RvLFVidW50dSxcIlRyZWJ1Y2hldCBNU1wiLFwiTHVjaWRhIEdyYW5kZVwiLHNhbnMtc2VyaWY7LS1zcGVjdHJ1bS1sYWJlbC10ZXh0LWZvbnQtc3R5bGU6bm9ybWFsOy0tc3BlY3RydW0tbGFiZWwtdGV4dC1mb250LXdlaWdodDo0MDA7LS1zcGVjdHJ1bS1sYWJlbC10ZXh0LWxpbmUtaGVpZ2h0OjEuMzstLXNwZWN0cnVtLWxhYmVsLXRleHQtbGV0dGVyLXNwYWNpbmc6MDstLXNwZWN0cnVtLWxhYmVsLXRleHQtdHJhbnNmb3JtOm5vbmU7LS1zcGVjdHJ1bS1sYWJlbC10ZXh0LXNpemU6MTJweDstLXNwZWN0cnVtLWxhYmVsLW92ZXItYmFja2dyb3VuZC10ZXh0LWZvbnQtc3R5bGU6bm9ybWFsOy0tc3BlY3RydW0tbGFiZWwtb3Zlci1iYWNrZ3JvdW5kLXRleHQtZm9udC13ZWlnaHQ6NDAwOy0tc3BlY3RydW0tbGFiZWwtb3Zlci1iYWNrZ3JvdW5kLXRleHQtc2l6ZToxMnB4Oy0tc3BlY3RydW0tbGFiZWwtb3Zlci1iYWNrZ3JvdW5kLXRleHQtbGluZS1oZWlnaHQ6MS41Oy0tc3BlY3RydW0tbGFiZWwtbGFyZ2UtdGV4dC1mb250LWZhbWlseTphZG9iZS1jbGVhbixcIlNvdXJjZSBTYW5zIFByb1wiLC1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFwiU2Vnb2UgVUlcIixSb2JvdG8sVWJ1bnR1LFwiVHJlYnVjaGV0IE1TXCIsXCJMdWNpZGEgR3JhbmRlXCIsc2Fucy1zZXJpZjstLXNwZWN0cnVtLWxhYmVsLWxhcmdlLXRleHQtZm9udC1zdHlsZTpub3JtYWw7LS1zcGVjdHJ1bS1sYWJlbC1sYXJnZS10ZXh0LWZvbnQtd2VpZ2h0OjQwMDstLXNwZWN0cnVtLWxhYmVsLWxhcmdlLXRleHQtbGluZS1oZWlnaHQ6MS41Oy0tc3BlY3RydW0tbGFiZWwtbGFyZ2UtdGV4dC1sZXR0ZXItc3BhY2luZzowOy0tc3BlY3RydW0tbGFiZWwtbGFyZ2UtdGV4dC10cmFuc2Zvcm06bm9uZTstLXNwZWN0cnVtLWxhYmVsLWxhcmdlLXRleHQtc2l6ZToxNnB4Oy0tc3BlY3RydW0tbGFiZWwtbGFyZ2UtbWFyZ2luLWJvdHRvbToxMnB4Oy0tc3BlY3RydW0tbGFiZWwtbGFyZ2Utb3Zlci1iYWNrZ3JvdW5kLXRleHQtZm9udC1zdHlsZTpub3JtYWw7LS1zcGVjdHJ1bS1sYWJlbC1sYXJnZS1vdmVyLWJhY2tncm91bmQtdGV4dC1mb250LXdlaWdodDo0MDA7LS1zcGVjdHJ1bS1sYWJlbC1sYXJnZS1vdmVyLWJhY2tncm91bmQtdGV4dC1zaXplOjE2cHg7LS1zcGVjdHJ1bS1sYWJlbC1sYXJnZS1vdmVyLWJhY2tncm91bmQtbWFyZ2luLWJvdHRvbToxMnB4Oy0tc3BlY3RydW0tbGFiZWwtbGFyZ2Utb3Zlci1iYWNrZ3JvdW5kLXRleHQtbGluZS1oZWlnaHQ6MjRweDstLXNwZWN0cnVtLWxpbmstdGV4dC1mb250LWZhbWlseTphZG9iZS1jbGVhbixcIlNvdXJjZSBTYW5zIFByb1wiLC1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFwiU2Vnb2UgVUlcIixSb2JvdG8sVWJ1bnR1LFwiVHJlYnVjaGV0IE1TXCIsXCJMdWNpZGEgR3JhbmRlXCIsc2Fucy1zZXJpZjstLXNwZWN0cnVtLWxpbmstdGV4dC1mb250LXN0eWxlOm5vcm1hbDstLXNwZWN0cnVtLWxpbmstdGV4dC1mb250LXdlaWdodDo0MDA7LS1zcGVjdHJ1bS1saW5rLXRleHQtbGluZS1oZWlnaHQ6MS41Oy0tc3BlY3RydW0tbGluay10ZXh0LWxldHRlci1zcGFjaW5nOjA7LS1zcGVjdHJ1bS1saW5rLXRleHQtdHJhbnNmb3JtOm5vbmU7LS1zcGVjdHJ1bS1saW5rLXRleHQtc2l6ZToxNHB4Oy0tc3BlY3RydW0tbGluay11bmRlcmxpbmUtZ2FwOjFweDstLXNwZWN0cnVtLWxpbmstdW5kZXJsaW5lLXNpemU6MXB4Oy0tc3BlY3RydW0tbGluay1vdmVyLWJhY2tncm91bmQtdGV4dC1zaXplOjE0cHg7LS1zcGVjdHJ1bS1saW5rLW92ZXItYmFja2dyb3VuZC11bmRlcmxpbmUtZ2FwOjFweDstLXNwZWN0cnVtLWxpbmstb3Zlci1iYWNrZ3JvdW5kLXVuZGVybGluZS1zaXplOjFweDstLXNwZWN0cnVtLWxpbmstcXVpZXQtdGV4dC1mb250LWZhbWlseTphZG9iZS1jbGVhbixcIlNvdXJjZSBTYW5zIFByb1wiLC1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFwiU2Vnb2UgVUlcIixSb2JvdG8sVWJ1bnR1LFwiVHJlYnVjaGV0IE1TXCIsXCJMdWNpZGEgR3JhbmRlXCIsc2Fucy1zZXJpZjstLXNwZWN0cnVtLWxpbmstcXVpZXQtdGV4dC1mb250LXN0eWxlOm5vcm1hbDstLXNwZWN0cnVtLWxpbmstcXVpZXQtdGV4dC1mb250LXdlaWdodDo0MDA7LS1zcGVjdHJ1bS1saW5rLXF1aWV0LXRleHQtbGluZS1oZWlnaHQ6MS41Oy0tc3BlY3RydW0tbGluay1xdWlldC10ZXh0LWxldHRlci1zcGFjaW5nOjA7LS1zcGVjdHJ1bS1saW5rLXF1aWV0LXRleHQtdHJhbnNmb3JtOm5vbmU7LS1zcGVjdHJ1bS1saW5rLXF1aWV0LXRleHQtc2l6ZToxNHB4Oy0tc3BlY3RydW0tbGluay1xdWlldC11bmRlcmxpbmUtZ2FwOjFweDstLXNwZWN0cnVtLWxpbmstcXVpZXQtdW5kZXJsaW5lLXNpemU6MXB4Oy0tc3BlY3RydW0tcG9wb3Zlci1ib3JkZXItc2l6ZToxcHg7LS1zcGVjdHJ1bS1wb3BvdmVyLWJvcmRlci1yYWRpdXM6NHB4Oy0tc3BlY3RydW0tcG9wb3Zlci1zaGFkb3ctYmx1cjo0cHg7LS1zcGVjdHJ1bS1wb3BvdmVyLXNoYWRvdy1vZmZzZXQteToxcHg7LS1zcGVjdHJ1bS1wb3BvdmVyLXBhZGRpbmcteDowcHg7LS1zcGVjdHJ1bS1wb3BvdmVyLXBhZGRpbmcteTo0cHg7LS1zcGVjdHJ1bS1wb3BvdmVyLXRpcC13aWR0aDoyMHB4Oy0tc3BlY3RydW0tcG9wb3Zlci10aXAtaGVpZ2h0OjEwcHg7LS1zcGVjdHJ1bS1wb3BvdmVyLXNoYWRvdy15LW9mZnNldDoxcHg7LS1zcGVjdHJ1bS1wb3BvdmVyLXNvdXJjZS1nYXA6NnB4Oy0tc3BlY3RydW0tcG9wb3Zlci1taW4td2lkdGg6MzJweDstLXNwZWN0cnVtLXBvcG92ZXItbWluLWhlaWdodDozMnB4Oy0tc3BlY3RydW0tcmFkaW8tdGV4dC1mb250LWZhbWlseTphZG9iZS1jbGVhbixcIlNvdXJjZSBTYW5zIFByb1wiLC1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFwiU2Vnb2UgVUlcIixSb2JvdG8sVWJ1bnR1LFwiVHJlYnVjaGV0IE1TXCIsXCJMdWNpZGEgR3JhbmRlXCIsc2Fucy1zZXJpZjstLXNwZWN0cnVtLXJhZGlvLXRleHQtZm9udC1zdHlsZTpub3JtYWw7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWZvbnQtd2VpZ2h0OjQwMDstLXNwZWN0cnVtLXJhZGlvLXRleHQtbGluZS1oZWlnaHQ6MS41Oy0tc3BlY3RydW0tcmFkaW8tdGV4dC1sZXR0ZXItc3BhY2luZzowOy0tc3BlY3RydW0tcmFkaW8tdGV4dC10cmFuc2Zvcm06bm9uZTstLXNwZWN0cnVtLXJhZGlvLXRleHQtc2l6ZToxNHB4Oy0tc3BlY3RydW0tcmFkaW8tdGV4dC1nYXA6MTBweDstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1kb3Qtc2l6ZTo0cHg7LS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtYm9yZGVyLXNpemU6MnB4Oy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWRpYW1ldGVyOjE0cHg7LS1zcGVjdHJ1bS1yYWRpby1oZWlnaHQ6MzJweDstLXNwZWN0cnVtLXJhZGlvLW1hcmdpbi1ib3R0b206MHB4Oy0tc3BlY3RydW0tcmFkaW8tdGV4dC1iYXNlbGluZToxMnB4Oy0tc3BlY3RydW0tcmFkaW8tY3Vyc29yLWhpdC14OjhweDstLXNwZWN0cnVtLXJhZGlvLXRvdWNoLWhpdC14OjhweDstLXNwZWN0cnVtLXJhZGlvLXRvdWNoLWhpdC15OjhweDstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItc2l6ZS1ob3ZlcjoycHg7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWdhcC1ob3ZlcjoxMHB4Oy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1zaXplLWRvd246MnB4Oy0tc3BlY3RydW0tcmFkaW8tdGV4dC1nYXAtZG93bjoxMHB4Oy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1zaXplLWtleS1mb2N1czozcHg7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWdhcC1rZXktZm9jdXM6OXB4Oy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1zaXplLWRpc2FibGVkOjJweDstLXNwZWN0cnVtLXJhZGlvLXRleHQtZ2FwLWRpc2FibGVkOjEwcHg7LS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtYm9yZGVyLXNpemUtc2VsZWN0ZWQ6MnB4Oy0tc3BlY3RydW0tcmFkaW8tdGV4dC1nYXAtc2VsZWN0ZWQ6MTBweDstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItc2l6ZS1zZWxlY3RlZC1ob3ZlcjoycHg7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWdhcC1zZWxlY3RlZC1ob3ZlcjoxMHB4Oy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1zaXplLXNlbGVjdGVkLWRvd246MnB4Oy0tc3BlY3RydW0tcmFkaW8tdGV4dC1nYXAtc2VsZWN0ZWQtZG93bjoxMHB4Oy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1zaXplLXNlbGVjdGVkLWtleS1mb2N1czozcHg7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWdhcC1zZWxlY3RlZC1rZXktZm9jdXM6OXB4Oy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1zaXplLXNlbGVjdGVkLWRpc2FibGVkOjJweDstLXNwZWN0cnVtLXJhZGlvLXRleHQtZ2FwLXNlbGVjdGVkLWRpc2FibGVkOjEwcHg7LS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtYm9yZGVyLXNpemUtZXJyb3I6MnB4Oy0tc3BlY3RydW0tcmFkaW8tdGV4dC1nYXAtZXJyb3I6MTBweDstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItc2l6ZS1lcnJvci1ob3ZlcjoycHg7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWdhcC1lcnJvci1ob3ZlcjoxMHB4Oy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1zaXplLWVycm9yLWRvd246MnB4Oy0tc3BlY3RydW0tcmFkaW8tdGV4dC1nYXAtZXJyb3ItZG93bjoxMHB4Oy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1zaXplLWVycm9yLWtleS1mb2N1czozcHg7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWdhcC1lcnJvci1rZXktZm9jdXM6OXB4Oy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1zaXplLWVycm9yLWRpc2FibGVkOjJweDstLXNwZWN0cnVtLXJhZGlvLXRleHQtZ2FwLWVycm9yLWRpc2FibGVkOjEwcHg7LS1zcGVjdHJ1bS1yYWRpby1jaXJjbGUtYm9yZGVyLXNpemUtZXJyb3Itc2VsZWN0ZWQ6MnB4Oy0tc3BlY3RydW0tcmFkaW8tdGV4dC1nYXAtZXJyb3Itc2VsZWN0ZWQ6MTBweDstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItc2l6ZS1lcnJvci1zZWxlY3RlZC1ob3ZlcjoycHg7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWdhcC1lcnJvci1zZWxlY3RlZC1ob3ZlcjoxMHB4Oy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1zaXplLWVycm9yLXNlbGVjdGVkLWRvd246MnB4Oy0tc3BlY3RydW0tcmFkaW8tdGV4dC1nYXAtZXJyb3Itc2VsZWN0ZWQtZG93bjoxMHB4Oy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1zaXplLWVycm9yLXNlbGVjdGVkLWtleS1mb2N1czozcHg7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWdhcC1lcnJvci1zZWxlY3RlZC1rZXktZm9jdXM6OXB4Oy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1zaXplLWVycm9yLXNlbGVjdGVkLWRpc2FibGVkOjJweDstLXNwZWN0cnVtLXJhZGlvLXRleHQtZ2FwLWVycm9yLXNlbGVjdGVkLWRpc2FibGVkOjEwcHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWZvbnQtZmFtaWx5OmFkb2JlLWNsZWFuLFwiU291cmNlIFNhbnMgUHJvXCIsLWFwcGxlLXN5c3RlbSxCbGlua01hY1N5c3RlbUZvbnQsXCJTZWdvZSBVSVwiLFJvYm90byxVYnVudHUsXCJUcmVidWNoZXQgTVNcIixcIkx1Y2lkYSBHcmFuZGVcIixzYW5zLXNlcmlmOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1mb250LXN0eWxlOm5vcm1hbDstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LXRleHQtZm9udC13ZWlnaHQ6NDAwOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1saW5lLWhlaWdodDoxLjU7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWxldHRlci1zcGFjaW5nOjA7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LXRyYW5zZm9ybTpub25lOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1zaXplOjE0cHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWdhcDoxMHB4Oy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtY2lyY2xlLWRvdC1zaXplOjRweDstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LWNpcmNsZS1ib3JkZXItc2l6ZToycHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtZGlhbWV0ZXI6MTRweDstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LWhlaWdodDozMnB4Oy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtbWFyZ2luLWJvdHRvbTowcHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWJhc2VsaW5lOjEycHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jdXJzb3ItaGl0LXg6OHB4Oy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdG91Y2gtaGl0LXg6OHB4Oy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdG91Y2gtaGl0LXk6OHB4Oy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtY2lyY2xlLWJvcmRlci1zaXplLWhvdmVyOjJweDstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LXRleHQtZ2FwLWhvdmVyOjEwcHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLXNpemUtZG93bjoycHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWdhcC1kb3duOjEwcHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLXNpemUta2V5LWZvY3VzOjNweDstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LXRleHQtZ2FwLWtleS1mb2N1czo5cHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLXNpemUtZGlzYWJsZWQ6MnB4Oy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1nYXAtZGlzYWJsZWQ6MTBweDstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LWNpcmNsZS1ib3JkZXItc2l6ZS1zZWxlY3RlZDoycHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWdhcC1zZWxlY3RlZDoxMHB4Oy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtY2lyY2xlLWJvcmRlci1zaXplLXNlbGVjdGVkLWhvdmVyOjJweDstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LXRleHQtZ2FwLXNlbGVjdGVkLWhvdmVyOjEwcHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLXNpemUtc2VsZWN0ZWQtZG93bjoycHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWdhcC1zZWxlY3RlZC1kb3duOjEwcHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLXNpemUtc2VsZWN0ZWQta2V5LWZvY3VzOjNweDstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LXRleHQtZ2FwLXNlbGVjdGVkLWtleS1mb2N1czo5cHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLXNpemUtc2VsZWN0ZWQtZGlzYWJsZWQ6MnB4Oy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1nYXAtc2VsZWN0ZWQtZGlzYWJsZWQ6MTBweDstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LWNpcmNsZS1ib3JkZXItc2l6ZS1lcnJvcjoycHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWdhcC1lcnJvcjoxMHB4Oy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtY2lyY2xlLWJvcmRlci1zaXplLWVycm9yLWhvdmVyOjJweDstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LXRleHQtZ2FwLWVycm9yLWhvdmVyOjEwcHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLXNpemUtZXJyb3ItZG93bjoycHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWdhcC1lcnJvci1kb3duOjEwcHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLXNpemUtZXJyb3Ita2V5LWZvY3VzOjNweDstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LXRleHQtZ2FwLWVycm9yLWtleS1mb2N1czo5cHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLXNpemUtZXJyb3ItZGlzYWJsZWQ6MnB4Oy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1nYXAtZXJyb3ItZGlzYWJsZWQ6MTBweDstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LWNpcmNsZS1ib3JkZXItc2l6ZS1lcnJvci1zZWxlY3RlZDoycHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWdhcC1lcnJvci1zZWxlY3RlZDoxMHB4Oy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtY2lyY2xlLWJvcmRlci1zaXplLWVycm9yLXNlbGVjdGVkLWhvdmVyOjJweDstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LXRleHQtZ2FwLWVycm9yLXNlbGVjdGVkLWhvdmVyOjEwcHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLXNpemUtZXJyb3Itc2VsZWN0ZWQtZG93bjoycHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWdhcC1lcnJvci1zZWxlY3RlZC1kb3duOjEwcHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLXNpemUtZXJyb3Itc2VsZWN0ZWQta2V5LWZvY3VzOjNweDstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LXRleHQtZ2FwLWVycm9yLXNlbGVjdGVkLWtleS1mb2N1czo5cHg7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLXNpemUtZXJyb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6MnB4Oy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1nYXAtZXJyb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6MTBweDstLXNwZWN0cnVtLXNsaWRlci1jb2xvci1oYW5kbGUtb3V0c2V0LWJvcmRlci1zaXplOjFweDstLXNwZWN0cnVtLXNsaWRlci1jb2xvci1oYW5kbGUtaW5zZXQtYm9yZGVyLXNpemU6MXB4Oy0tc3BlY3RydW0tc2xpZGVyLWNvbG9yLXRyYWNrLWhlaWdodDoyNHB4Oy0tc3BlY3RydW0tc2xpZGVyLWNvbG9yLXRyYWNrLWJvcmRlci1zaXplOjFweDstLXNwZWN0cnVtLXNsaWRlci10cmFjay1ib3JkZXItcmFkaXVzOjFweDstLXNwZWN0cnVtLXNsaWRlci10cmFjay1oZWlnaHQ6MnB4Oy0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1ib3JkZXItc2l6ZToycHg7LS1zcGVjdHJ1bS1zbGlkZXItaGFuZGxlLWdhcDo0cHg7LS1zcGVjdHJ1bS1zbGlkZXItbGFiZWwtdGV4dC1hbGlnbm1lbnQ6bGVmdDstLXNwZWN0cnVtLXNsaWRlci1sYWJlbC1taW4td2lkdGg6NDhweDstLXNwZWN0cnVtLXNsaWRlci1hbmltYXRpb24tZHVyYXRpb246MTMwbXM7LS1zcGVjdHJ1bS1zbGlkZXItYW5pbWF0aW9uLWVhc2U6KDAuNDUsMCwwLjQsMSk7LS1zcGVjdHJ1bS1zbGlkZXItaGFuZGxlLXdpZHRoOjE2cHg7LS1zcGVjdHJ1bS1zbGlkZXItaGFuZGxlLWhlaWdodDoxNnB4Oy0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1ib3JkZXItcmFkaXVzOjhweDstLXNwZWN0cnVtLXNsaWRlci1oZWlnaHQ6MzJweDstLXNwZWN0cnVtLXNsaWRlci1taW4td2lkdGg6MTI4cHg7LS1zcGVjdHJ1bS1zbGlkZXItbGFiZWwtZ2FwLXk6MHB4Oy0tc3BlY3RydW0tc2xpZGVyLWxhYmVsLWdhcC14OjE2cHg7LS1zcGVjdHJ1bS1zbGlkZXItdGV4dC1iYXNlbGluZToxMnB4Oy0tc3BlY3RydW0tc2xpZGVyLXRyYWNrLWN1cnNvci1oaXQteDo4cHg7LS1zcGVjdHJ1bS1zbGlkZXItdHJhY2stY3Vyc29yLWhpdC15OjE2cHg7LS1zcGVjdHJ1bS1zbGlkZXItaG90LXRleHQtY3Vyc29yLWhpdC15OjhweDstLXNwZWN0cnVtLXNsaWRlci10cmFjay10b3VjaC1oaXQteDo4cHg7LS1zcGVjdHJ1bS1zbGlkZXItdHJhY2stdG91Y2gtaGl0LXk6OHB4Oy0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS10b3VjaC1oaXQteDoxNnB4Oy0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS10b3VjaC1oaXQteToxNnB4Oy0tc3BlY3RydW0tc2xpZGVyLXJhZGlhbC1yZWFjdGlvbi1zaXplOjQ0cHg7LS1zcGVjdHJ1bS1zbGlkZXItaGFuZGxlLWJvcmRlci1zaXplLWRvd246NnB4Oy0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1ib3JkZXItc2l6ZS1rZXktZm9jdXM6OHB4Oy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLXRyYWNrLWJvcmRlci1yYWRpdXM6MXB4Oy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLXRyYWNrLWhlaWdodDoycHg7LS1zcGVjdHJ1bS1zbGlkZXItZWRpdGFibGUtaGFuZGxlLWJvcmRlci1zaXplOjJweDstLXNwZWN0cnVtLXNsaWRlci1lZGl0YWJsZS1oYW5kbGUtZ2FwOjRweDstLXNwZWN0cnVtLXNsaWRlci1lZGl0YWJsZS1sYWJlbC10ZXh0LWFsaWdubWVudDpsZWZ0Oy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLWxhYmVsLW1pbi13aWR0aDo0OHB4Oy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLWFuaW1hdGlvbi1kdXJhdGlvbjoxMzBtczstLXNwZWN0cnVtLXNsaWRlci1lZGl0YWJsZS1hbmltYXRpb24tZWFzZTooMC40NSwwLDAuNCwxKTstLXNwZWN0cnVtLXNsaWRlci1lZGl0YWJsZS1oYW5kbGUtd2lkdGg6MTZweDstLXNwZWN0cnVtLXNsaWRlci1lZGl0YWJsZS1oYW5kbGUtaGVpZ2h0OjE2cHg7LS1zcGVjdHJ1bS1zbGlkZXItZWRpdGFibGUtaGFuZGxlLWJvcmRlci1yYWRpdXM6OHB4Oy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLWhlaWdodDozMnB4Oy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLW1pbi13aWR0aDoxMjhweDstLXNwZWN0cnVtLXNsaWRlci1lZGl0YWJsZS1sYWJlbC1nYXAteTowcHg7LS1zcGVjdHJ1bS1zbGlkZXItZWRpdGFibGUtbGFiZWwtZ2FwLXg6MTZweDstLXNwZWN0cnVtLXNsaWRlci1lZGl0YWJsZS10ZXh0LWJhc2VsaW5lOjEycHg7LS1zcGVjdHJ1bS1zbGlkZXItZWRpdGFibGUtdHJhY2stY3Vyc29yLWhpdC14OjhweDstLXNwZWN0cnVtLXNsaWRlci1lZGl0YWJsZS10cmFjay1jdXJzb3ItaGl0LXk6MTZweDstLXNwZWN0cnVtLXNsaWRlci1lZGl0YWJsZS1ob3QtdGV4dC1jdXJzb3ItaGl0LXk6OHB4Oy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLXRyYWNrLXRvdWNoLWhpdC14OjhweDstLXNwZWN0cnVtLXNsaWRlci1lZGl0YWJsZS10cmFjay10b3VjaC1oaXQteTo4cHg7LS1zcGVjdHJ1bS1zbGlkZXItZWRpdGFibGUtaGFuZGxlLXRvdWNoLWhpdC14OjE2cHg7LS1zcGVjdHJ1bS1zbGlkZXItZWRpdGFibGUtaGFuZGxlLXRvdWNoLWhpdC15OjE2cHg7LS1zcGVjdHJ1bS1zbGlkZXItZWRpdGFibGUtcmFkaWFsLXJlYWN0aW9uLXNpemU6NDRweDstLXNwZWN0cnVtLXNsaWRlci1lZGl0YWJsZS10ZXh0ZmllbGQtbWluLXdpZHRoOjQ4cHg7LS1zcGVjdHJ1bS1zbGlkZXItZWRpdGFibGUtaGFuZGxlLWJvcmRlci1zaXplLWRvd246NnB4Oy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLWhhbmRsZS1ib3JkZXItc2l6ZS1rZXktZm9jdXM6OHB4Oy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtdHJhY2stYm9yZGVyLXJhZGl1czoxcHg7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC10cmFjay1oZWlnaHQ6MnB4Oy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtaGFuZGxlLWJvcmRlci1zaXplOjJweDstLXNwZWN0cnVtLXNsaWRlci1maWxsLWhhbmRsZS1nYXA6NHB4Oy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtbGFiZWwtdGV4dC1hbGlnbm1lbnQ6bGVmdDstLXNwZWN0cnVtLXNsaWRlci1maWxsLWxhYmVsLW1pbi13aWR0aDo0OHB4Oy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtYW5pbWF0aW9uLWR1cmF0aW9uOjEzMG1zOy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtYW5pbWF0aW9uLWVhc2U6KDAuNDUsMCwwLjQsMSk7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC1oYW5kbGUtd2lkdGg6MTZweDstLXNwZWN0cnVtLXNsaWRlci1maWxsLWhhbmRsZS1oZWlnaHQ6MTZweDstLXNwZWN0cnVtLXNsaWRlci1maWxsLWhhbmRsZS1ib3JkZXItcmFkaXVzOjhweDstLXNwZWN0cnVtLXNsaWRlci1maWxsLWhlaWdodDozMnB4Oy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtbWluLXdpZHRoOjEyOHB4Oy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtbGFiZWwtZ2FwLXk6MHB4Oy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtbGFiZWwtZ2FwLXg6MTZweDstLXNwZWN0cnVtLXNsaWRlci1maWxsLXRleHQtYmFzZWxpbmU6MTJweDstLXNwZWN0cnVtLXNsaWRlci1maWxsLXRyYWNrLWN1cnNvci1oaXQteDo4cHg7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC10cmFjay1jdXJzb3ItaGl0LXk6MTZweDstLXNwZWN0cnVtLXNsaWRlci1maWxsLWhvdC10ZXh0LWN1cnNvci1oaXQteTo4cHg7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC10cmFjay10b3VjaC1oaXQteDo4cHg7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC10cmFjay10b3VjaC1oaXQteTo4cHg7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC1oYW5kbGUtdG91Y2gtaGl0LXg6MTZweDstLXNwZWN0cnVtLXNsaWRlci1maWxsLWhhbmRsZS10b3VjaC1oaXQteToxNnB4Oy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtcmFkaWFsLXJlYWN0aW9uLXNpemU6NDRweDstLXNwZWN0cnVtLXNsaWRlci1maWxsLWhhbmRsZS1ib3JkZXItc2l6ZS1kb3duOjZweDstLXNwZWN0cnVtLXNsaWRlci1maWxsLWhhbmRsZS1ib3JkZXItc2l6ZS1rZXktZm9jdXM6OHB4Oy0tc3BlY3RydW0tc2xpZGVyLXJhbXAtdHJhY2staGVpZ2h0OjE2cHg7LS1zcGVjdHJ1bS1zbGlkZXItdGljay1tYXJrLW1hcmdpbi14OjFweDstLXNwZWN0cnVtLXNsaWRlci10aWNrLW1hcmstaGVpZ2h0OjEwcHg7LS1zcGVjdHJ1bS1zbGlkZXItdGljay1tYXJrLXdpZHRoOjJweDstLXNwZWN0cnVtLXNsaWRlci10aWNrLW1hcmstYm9yZGVyLXJhZGl1czoxcHg7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1mb250LWZhbWlseTphZG9iZS1jbGVhbixcIlNvdXJjZSBTYW5zIFByb1wiLC1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFwiU2Vnb2UgVUlcIixSb2JvdG8sVWJ1bnR1LFwiVHJlYnVjaGV0IE1TXCIsXCJMdWNpZGEgR3JhbmRlXCIsc2Fucy1zZXJpZjstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWZvbnQtc3R5bGU6bm9ybWFsOy0tc3BlY3RydW0tc3dpdGNoLXRleHQtZm9udC13ZWlnaHQ6NDAwOy0tc3BlY3RydW0tc3dpdGNoLXRleHQtbGluZS1oZWlnaHQ6MS41Oy0tc3BlY3RydW0tc3dpdGNoLXRleHQtbGV0dGVyLXNwYWNpbmc6MDstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LXRyYW5zZm9ybTpub25lOy0tc3BlY3RydW0tc3dpdGNoLXRleHQtc2l6ZToxNHB4Oy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItc2l6ZToycHg7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2std2lkdGg6MjZweDstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtc2l6ZToxNHB4Oy0tc3BlY3RydW0tc3dpdGNoLXRleHQtZ2FwOjEwcHg7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2staGVpZ2h0OjE0cHg7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1yYWRpdXM6N3B4Oy0tc3BlY3RydW0tc3dpdGNoLWhlaWdodDozMnB4Oy0tc3BlY3RydW0tc3dpdGNoLXRleHQtYmFzZWxpbmU6MTJweDstLXNwZWN0cnVtLXN3aXRjaC1jdXJzb3ItaGl0LXg6OHB4Oy0tc3BlY3RydW0tc3dpdGNoLXRvdWNoLWhpdC14OjhweDstLXNwZWN0cnVtLXN3aXRjaC10b3VjaC1oaXQteTo4cHg7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1zaXplLWhvdmVyOjJweDstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWdhcC1ob3ZlcjoxMHB4Oy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItc2l6ZS1kb3duOjJweDstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWdhcC1kb3duOjEwcHg7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1zaXplLWtleS1mb2N1czozcHg7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1nYXAta2V5LWZvY3VzOjlweDstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLXNpemUtZGlzYWJsZWQ6MnB4Oy0tc3BlY3RydW0tc3dpdGNoLXRleHQtZ2FwLWRpc2FibGVkOjEwcHg7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1zaXplLXNlbGVjdGVkOjJweDstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWdhcC1zZWxlY3RlZDoxMHB4Oy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItc2l6ZS1zZWxlY3RlZC1ob3ZlcjoycHg7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1nYXAtc2VsZWN0ZWQtaG92ZXI6MTBweDstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLXNpemUtc2VsZWN0ZWQtZG93bjoycHg7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1nYXAtc2VsZWN0ZWQtZG93bjoxMHB4Oy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItc2l6ZS1zZWxlY3RlZC1rZXktZm9jdXM6M3B4Oy0tc3BlY3RydW0tc3dpdGNoLXRleHQtZ2FwLXNlbGVjdGVkLWtleS1mb2N1czo5cHg7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1zaXplLXNlbGVjdGVkLWRpc2FibGVkOjJweDstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWdhcC1zZWxlY3RlZC1kaXNhYmxlZDoxMHB4Oy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItc2l6ZS1lcnJvcjoycHg7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1nYXAtZXJyb3I6MTBweDstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLXNpemUtZXJyb3ItaG92ZXI6MnB4Oy0tc3BlY3RydW0tc3dpdGNoLXRleHQtZ2FwLWVycm9yLWhvdmVyOjEwcHg7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1zaXplLWVycm9yLWRvd246MnB4Oy0tc3BlY3RydW0tc3dpdGNoLXRleHQtZ2FwLWVycm9yLWRvd246MTBweDstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLXNpemUtZXJyb3Ita2V5LWZvY3VzOjNweDstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWdhcC1lcnJvci1rZXktZm9jdXM6OXB4Oy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItc2l6ZS1lcnJvci1kaXNhYmxlZDoycHg7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1nYXAtZXJyb3ItZGlzYWJsZWQ6MTBweDstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLXNpemUtZXJyb3Itc2VsZWN0ZWQ6MnB4Oy0tc3BlY3RydW0tc3dpdGNoLXRleHQtZ2FwLWVycm9yLXNlbGVjdGVkOjEwcHg7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1zaXplLWVycm9yLXNlbGVjdGVkLWhvdmVyOjJweDstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWdhcC1lcnJvci1zZWxlY3RlZC1ob3ZlcjoxMHB4Oy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1ib3JkZXItc2l6ZS1lcnJvci1zZWxlY3RlZC1kb3duOjJweDstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWdhcC1lcnJvci1zZWxlY3RlZC1kb3duOjEwcHg7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1zaXplLWVycm9yLXNlbGVjdGVkLWtleS1mb2N1czozcHg7LS1zcGVjdHJ1bS1zd2l0Y2gtdGV4dC1nYXAtZXJyb3Itc2VsZWN0ZWQta2V5LWZvY3VzOjlweDstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLXNpemUtZXJyb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6MnB4Oy0tc3BlY3RydW0tc3dpdGNoLXRleHQtZ2FwLWVycm9yLXNlbGVjdGVkLWRpc2FibGVkOjEwcHg7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdGV4dC1mb250LWZhbWlseTphZG9iZS1jbGVhbixcIlNvdXJjZSBTYW5zIFByb1wiLC1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFwiU2Vnb2UgVUlcIixSb2JvdG8sVWJ1bnR1LFwiVHJlYnVjaGV0IE1TXCIsXCJMdWNpZGEgR3JhbmRlXCIsc2Fucy1zZXJpZjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWZvbnQtc3R5bGU6bm9ybWFsOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtZm9udC13ZWlnaHQ6NDAwOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtbGluZS1oZWlnaHQ6MS41Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtbGV0dGVyLXNwYWNpbmc6MDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LXRyYW5zZm9ybTpub25lOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtc2l6ZToxNHB4Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1ib3JkZXItc2l6ZToycHg7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdHJhY2std2lkdGg6MjZweDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtc2l6ZToxNHB4Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtZ2FwOjEwcHg7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdHJhY2staGVpZ2h0OjE0cHg7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1yYWRpdXM6N3B4Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhlaWdodDozMnB4Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtYmFzZWxpbmU6MTJweDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1jdXJzb3ItaGl0LXg6OHB4Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRvdWNoLWhpdC14OjhweDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10b3VjaC1oaXQteTo4cHg7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1zaXplLWhvdmVyOjJweDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWdhcC1ob3ZlcjoxMHB4Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1ib3JkZXItc2l6ZS1kb3duOjJweDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWdhcC1kb3duOjEwcHg7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1zaXplLWtleS1mb2N1czozcHg7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdGV4dC1nYXAta2V5LWZvY3VzOjlweDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLXNpemUtZGlzYWJsZWQ6MnB4Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtZ2FwLWRpc2FibGVkOjEwcHg7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1zaXplLXNlbGVjdGVkOjJweDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWdhcC1zZWxlY3RlZDoxMHB4Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1ib3JkZXItc2l6ZS1zZWxlY3RlZC1ob3ZlcjoycHg7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdGV4dC1nYXAtc2VsZWN0ZWQtaG92ZXI6MTBweDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLXNpemUtc2VsZWN0ZWQtZG93bjoycHg7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdGV4dC1nYXAtc2VsZWN0ZWQtZG93bjoxMHB4Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1ib3JkZXItc2l6ZS1zZWxlY3RlZC1rZXktZm9jdXM6M3B4Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtZ2FwLXNlbGVjdGVkLWtleS1mb2N1czo5cHg7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1zaXplLXNlbGVjdGVkLWRpc2FibGVkOjJweDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWdhcC1zZWxlY3RlZC1kaXNhYmxlZDoxMHB4Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1ib3JkZXItc2l6ZS1lcnJvcjoycHg7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdGV4dC1nYXAtZXJyb3I6MTBweDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLXNpemUtZXJyb3ItaG92ZXI6MnB4Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtZ2FwLWVycm9yLWhvdmVyOjEwcHg7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1zaXplLWVycm9yLWRvd246MnB4Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtZ2FwLWVycm9yLWRvd246MTBweDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLXNpemUtZXJyb3Ita2V5LWZvY3VzOjNweDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWdhcC1lcnJvci1rZXktZm9jdXM6OXB4Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1ib3JkZXItc2l6ZS1lcnJvci1kaXNhYmxlZDoycHg7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdGV4dC1nYXAtZXJyb3ItZGlzYWJsZWQ6MTBweDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLXNpemUtZXJyb3Itc2VsZWN0ZWQ6MnB4Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtZ2FwLWVycm9yLXNlbGVjdGVkOjEwcHg7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1zaXplLWVycm9yLXNlbGVjdGVkLWhvdmVyOjJweDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWdhcC1lcnJvci1zZWxlY3RlZC1ob3ZlcjoxMHB4Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1ib3JkZXItc2l6ZS1lcnJvci1zZWxlY3RlZC1kb3duOjJweDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10ZXh0LWdhcC1lcnJvci1zZWxlY3RlZC1kb3duOjEwcHg7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJvcmRlci1zaXplLWVycm9yLXNlbGVjdGVkLWtleS1mb2N1czozcHg7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdGV4dC1nYXAtZXJyb3Itc2VsZWN0ZWQta2V5LWZvY3VzOjlweDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLXNpemUtZXJyb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6MnB4Oy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtZ2FwLWVycm9yLXNlbGVjdGVkLWRpc2FibGVkOjEwcHg7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdGV4dC1mb250LWZhbWlseTphZG9iZS1jbGVhbixcIlNvdXJjZSBTYW5zIFByb1wiLC1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFwiU2Vnb2UgVUlcIixSb2JvdG8sVWJ1bnR1LFwiVHJlYnVjaGV0IE1TXCIsXCJMdWNpZGEgR3JhbmRlXCIsc2Fucy1zZXJpZjstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC10ZXh0LWZvbnQtc3R5bGU6bm9ybWFsOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXRleHQtZm9udC13ZWlnaHQ6NDAwOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXRleHQtbGluZS1oZWlnaHQ6MS41Oy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXRleHQtbGV0dGVyLXNwYWNpbmc6MDstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC10ZXh0LXRyYW5zZm9ybTpub25lOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXRleHQtc2l6ZToxNHB4Oy0tc3BlY3RydW0tdGFicy1jb21wYWN0LWljb24tc2l6ZToxOHB4Oy0tc3BlY3RydW0tdGFicy1jb21wYWN0LWJhc2VsaW5lOjEycHg7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtaGVpZ2h0OjMycHg7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtaXRlbS1oZWlnaHQ6MzJweDstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC1pY29uLWdhcDo4cHg7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtcnVsZS1ib3JkZXItcmFkaXVzOjFweDstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC1mb2N1cy1yaW5nLWhlaWdodDozMnB4Oy0tc3BlY3RydW0tdGFicy1jb21wYWN0LWZvY3VzLXJpbmctc2l6ZToycHg7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtZm9jdXMtcmluZy1wYWRkaW5nLXg6OHB4Oy0tc3BlY3RydW0tdGFicy1jb21wYWN0LWZvY3VzLXJpbmctYm9yZGVyLXJhZGl1czo1cHg7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtcGFkZGluZy14OjBweDstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC1pdGVtLWdhcDoyNHB4Oy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXJ1bGUtaGVpZ2h0OjJweDstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC1tYXJnaW4tbGVmdDotOHB4Oy0tc3BlY3RydW0tdGFicy1jb21wYWN0LW1hcmdpbi1yaWdodDotOHB4Oy0tc3BlY3RydW0tdGFicy1jb21wYWN0LWZvY3VzLWFyZWEtZ2FwOjhweDstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC1zZWxlY3Rpb24taW5kaWNhdG9yLWFuaW1hdGlvbi1kdXJhdGlvbjoxMzBtczstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC1zZWxlY3Rpb24taW5kaWNhdG9yLWFuaW1hdGlvbi1lYXNlOigwLjQ1LDAsMC40LDEpOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLXRleHQtZm9udC1mYW1pbHk6YWRvYmUtY2xlYW4sXCJTb3VyY2UgU2FucyBQcm9cIiwtYXBwbGUtc3lzdGVtLEJsaW5rTWFjU3lzdGVtRm9udCxcIlNlZ29lIFVJXCIsUm9ib3RvLFVidW50dSxcIlRyZWJ1Y2hldCBNU1wiLFwiTHVjaWRhIEdyYW5kZVwiLHNhbnMtc2VyaWY7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtdGV4dC1mb250LXN0eWxlOm5vcm1hbDstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC10ZXh0LWZvbnQtd2VpZ2h0OjQwMDstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC10ZXh0LWxpbmUtaGVpZ2h0OjEuNTstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC10ZXh0LWxldHRlci1zcGFjaW5nOjA7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtdGV4dC10cmFuc2Zvcm06bm9uZTstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC10ZXh0LXNpemU6MTRweDstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC1pY29uLXNpemU6MThweDstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC1iYXNlbGluZToxMnB4Oy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLWhlaWdodDo0OHB4Oy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLWl0ZW0taGVpZ2h0OjMycHg7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtaWNvbi1nYXA6OHB4Oy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLXJ1bGUtYm9yZGVyLXJhZGl1czoxcHg7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtZm9jdXMtcmluZy1oZWlnaHQ6MzJweDstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC1mb2N1cy1yaW5nLXNpemU6MnB4Oy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLWZvY3VzLXJpbmctcGFkZGluZy14OjhweDstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC1mb2N1cy1yaW5nLWJvcmRlci1yYWRpdXM6NXB4Oy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLXBhZGRpbmcteDo4cHg7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtaXRlbS1nYXA6NHB4Oy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLWl0ZW0tbWFyZ2luLWxlZnQ6MTJweDstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC1ydWxlLXdpZHRoOjJweDstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC1tYXJnaW4tbGVmdDowcHg7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtbWFyZ2luLXJpZ2h0OjBweDstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC1mb2N1cy1hcmVhLWdhcDoxNnB4Oy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLXNlbGVjdGlvbi1pbmRpY2F0b3ItYW5pbWF0aW9uLWR1cmF0aW9uOjEzMG1zOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLXNlbGVjdGlvbi1pbmRpY2F0b3ItYW5pbWF0aW9uLWVhc2U6KDAuNDUsMCwwLjQsMSk7LS1zcGVjdHJ1bS10YWJzLXRleHQtZm9udC1mYW1pbHk6YWRvYmUtY2xlYW4sXCJTb3VyY2UgU2FucyBQcm9cIiwtYXBwbGUtc3lzdGVtLEJsaW5rTWFjU3lzdGVtRm9udCxcIlNlZ29lIFVJXCIsUm9ib3RvLFVidW50dSxcIlRyZWJ1Y2hldCBNU1wiLFwiTHVjaWRhIEdyYW5kZVwiLHNhbnMtc2VyaWY7LS1zcGVjdHJ1bS10YWJzLXRleHQtZm9udC1zdHlsZTpub3JtYWw7LS1zcGVjdHJ1bS10YWJzLXRleHQtZm9udC13ZWlnaHQ6NDAwOy0tc3BlY3RydW0tdGFicy10ZXh0LWxpbmUtaGVpZ2h0OjEuNTstLXNwZWN0cnVtLXRhYnMtdGV4dC1sZXR0ZXItc3BhY2luZzowOy0tc3BlY3RydW0tdGFicy10ZXh0LXRyYW5zZm9ybTpub25lOy0tc3BlY3RydW0tdGFicy10ZXh0LXNpemU6MTRweDstLXNwZWN0cnVtLXRhYnMtaWNvbi1zaXplOjE4cHg7LS1zcGVjdHJ1bS10YWJzLWJhc2VsaW5lOjE4cHg7LS1zcGVjdHJ1bS10YWJzLWhlaWdodDo0OHB4Oy0tc3BlY3RydW0tdGFicy1pdGVtLWhlaWdodDo0OHB4Oy0tc3BlY3RydW0tdGFicy1pY29uLWdhcDo4cHg7LS1zcGVjdHJ1bS10YWJzLXJ1bGUtYm9yZGVyLXJhZGl1czoxcHg7LS1zcGVjdHJ1bS10YWJzLWZvY3VzLXJpbmctaGVpZ2h0OjMycHg7LS1zcGVjdHJ1bS10YWJzLWZvY3VzLXJpbmctc2l6ZToycHg7LS1zcGVjdHJ1bS10YWJzLWZvY3VzLXJpbmctcGFkZGluZy14OjhweDstLXNwZWN0cnVtLXRhYnMtZm9jdXMtcmluZy1ib3JkZXItcmFkaXVzOjVweDstLXNwZWN0cnVtLXRhYnMtcGFkZGluZy14OjBweDstLXNwZWN0cnVtLXRhYnMtaXRlbS1nYXA6MjRweDstLXNwZWN0cnVtLXRhYnMtcnVsZS1oZWlnaHQ6MnB4Oy0tc3BlY3RydW0tdGFicy1tYXJnaW4tbGVmdDotOHB4Oy0tc3BlY3RydW0tdGFicy1tYXJnaW4tcmlnaHQ6LThweDstLXNwZWN0cnVtLXRhYnMtZm9jdXMtYXJlYS1nYXA6OHB4Oy0tc3BlY3RydW0tdGFicy1zZWxlY3Rpb24taW5kaWNhdG9yLWFuaW1hdGlvbi1kdXJhdGlvbjoxMzBtczstLXNwZWN0cnVtLXRhYnMtc2VsZWN0aW9uLWluZGljYXRvci1hbmltYXRpb24tZWFzZTooMC40NSwwLDAuNCwxKTstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdGV4dC1mb250LWZhbWlseTphZG9iZS1jbGVhbixcIlNvdXJjZSBTYW5zIFByb1wiLC1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFwiU2Vnb2UgVUlcIixSb2JvdG8sVWJ1bnR1LFwiVHJlYnVjaGV0IE1TXCIsXCJMdWNpZGEgR3JhbmRlXCIsc2Fucy1zZXJpZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdGV4dC1mb250LXN0eWxlOm5vcm1hbDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdGV4dC1mb250LXdlaWdodDo0MDA7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXRleHQtbGluZS1oZWlnaHQ6MS41Oy0tc3BlY3RydW0tdGFicy1xdWlldC10ZXh0LWxldHRlci1zcGFjaW5nOjA7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXRleHQtdHJhbnNmb3JtOm5vbmU7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXRleHQtc2l6ZToxNHB4Oy0tc3BlY3RydW0tdGFicy1xdWlldC1pY29uLXNpemU6MThweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtYmFzZWxpbmU6MThweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtaGVpZ2h0OjQ4cHg7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWl0ZW0taGVpZ2h0OjQ4cHg7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWljb24tZ2FwOjhweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtcnVsZS1ib3JkZXItcmFkaXVzOjFweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtZm9jdXMtcmluZy1oZWlnaHQ6MzJweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtZm9jdXMtcmluZy1zaXplOjJweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtZm9jdXMtcmluZy1wYWRkaW5nLXg6OHB4Oy0tc3BlY3RydW0tdGFicy1xdWlldC1mb2N1cy1yaW5nLWJvcmRlci1yYWRpdXM6NXB4Oy0tc3BlY3RydW0tdGFicy1xdWlldC1wYWRkaW5nLXg6MHB4Oy0tc3BlY3RydW0tdGFicy1xdWlldC1pdGVtLWdhcDoyNHB4Oy0tc3BlY3RydW0tdGFicy1xdWlldC1ydWxlLWhlaWdodDoycHg7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LW1hcmdpbi1sZWZ0Oi04cHg7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LW1hcmdpbi1yaWdodDotOHB4Oy0tc3BlY3RydW0tdGFicy1xdWlldC1mb2N1cy1hcmVhLWdhcDo4cHg7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXNlbGVjdGlvbi1pbmRpY2F0b3ItYW5pbWF0aW9uLWR1cmF0aW9uOjEzMG1zOy0tc3BlY3RydW0tdGFicy1xdWlldC1zZWxlY3Rpb24taW5kaWNhdG9yLWFuaW1hdGlvbi1lYXNlOigwLjQ1LDAsMC40LDEpOy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LXRleHQtZm9udC1mYW1pbHk6YWRvYmUtY2xlYW4sXCJTb3VyY2UgU2FucyBQcm9cIiwtYXBwbGUtc3lzdGVtLEJsaW5rTWFjU3lzdGVtRm9udCxcIlNlZ29lIFVJXCIsUm9ib3RvLFVidW50dSxcIlRyZWJ1Y2hldCBNU1wiLFwiTHVjaWRhIEdyYW5kZVwiLHNhbnMtc2VyaWY7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtdGV4dC1mb250LXN0eWxlOm5vcm1hbDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC10ZXh0LWZvbnQtd2VpZ2h0OjQwMDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC10ZXh0LWxpbmUtaGVpZ2h0OjEuNTstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC10ZXh0LWxldHRlci1zcGFjaW5nOjA7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtdGV4dC10cmFuc2Zvcm06bm9uZTstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC10ZXh0LXNpemU6MTRweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC1pY29uLXNpemU6MThweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC1iYXNlbGluZToxMnB4Oy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LWhlaWdodDozMnB4Oy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LWl0ZW0taGVpZ2h0OjQ4cHg7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtaWNvbi1nYXA6OHB4Oy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LXJ1bGUtYm9yZGVyLXJhZGl1czoxcHg7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtZm9jdXMtcmluZy1oZWlnaHQ6MzJweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC1mb2N1cy1yaW5nLXNpemU6MnB4Oy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LWZvY3VzLXJpbmctcGFkZGluZy14OjhweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC1mb2N1cy1yaW5nLWJvcmRlci1yYWRpdXM6NXB4Oy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LXBhZGRpbmcteDowcHg7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtaXRlbS1nYXA6MjRweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC1ydWxlLWhlaWdodDoycHg7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtbWFyZ2luLWxlZnQ6LThweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC1tYXJnaW4tcmlnaHQ6LThweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC1mb2N1cy1hcmVhLWdhcDo4cHg7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3Qtc2VsZWN0aW9uLWluZGljYXRvci1hbmltYXRpb24tZHVyYXRpb246MTMwbXM7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3Qtc2VsZWN0aW9uLWluZGljYXRvci1hbmltYXRpb24tZWFzZTooMC40NSwwLDAuNCwxKTstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtdGV4dC1mb250LWZhbWlseTphZG9iZS1jbGVhbixcIlNvdXJjZSBTYW5zIFByb1wiLC1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFwiU2Vnb2UgVUlcIixSb2JvdG8sVWJ1bnR1LFwiVHJlYnVjaGV0IE1TXCIsXCJMdWNpZGEgR3JhbmRlXCIsc2Fucy1zZXJpZjstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtdGV4dC1mb250LXN0eWxlOm5vcm1hbDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtdGV4dC1mb250LXdlaWdodDo0MDA7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLXRleHQtbGluZS1oZWlnaHQ6MS41Oy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC10ZXh0LWxldHRlci1zcGFjaW5nOjA7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLXRleHQtdHJhbnNmb3JtOm5vbmU7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLXRleHQtc2l6ZToxNHB4Oy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC1pY29uLXNpemU6MThweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtYmFzZWxpbmU6MThweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtaGVpZ2h0OjQ4cHg7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLWl0ZW0taGVpZ2h0OjQ0cHg7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLWljb24tZ2FwOjhweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtcnVsZS1ib3JkZXItcmFkaXVzOjFweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtZm9jdXMtcmluZy1oZWlnaHQ6MzJweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtZm9jdXMtcmluZy1zaXplOjJweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtZm9jdXMtcmluZy1wYWRkaW5nLXg6OHB4Oy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC1mb2N1cy1yaW5nLWJvcmRlci1yYWRpdXM6NXB4Oy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC1wYWRkaW5nLXg6MHB4Oy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC1pdGVtLWdhcDo0cHg7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLWl0ZW0tbWFyZ2luLWxlZnQ6MTJweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtcnVsZS13aWR0aDoycHg7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLW1hcmdpbi1sZWZ0OjBweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtbWFyZ2luLXJpZ2h0OjBweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtZm9jdXMtYXJlYS1nYXA6MTZweDstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtc2VsZWN0aW9uLWluZGljYXRvci1hbmltYXRpb24tZHVyYXRpb246MTMwbXM7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLXNlbGVjdGlvbi1pbmRpY2F0b3ItYW5pbWF0aW9uLWVhc2U6KDAuNDUsMCwwLjQsMSk7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLXRleHQtZm9udC1mYW1pbHk6YWRvYmUtY2xlYW4sXCJTb3VyY2UgU2FucyBQcm9cIiwtYXBwbGUtc3lzdGVtLEJsaW5rTWFjU3lzdGVtRm9udCxcIlNlZ29lIFVJXCIsUm9ib3RvLFVidW50dSxcIlRyZWJ1Y2hldCBNU1wiLFwiTHVjaWRhIEdyYW5kZVwiLHNhbnMtc2VyaWY7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLXRleHQtZm9udC1zdHlsZTpub3JtYWw7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLXRleHQtZm9udC13ZWlnaHQ6NDAwOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC10ZXh0LWxpbmUtaGVpZ2h0OjEuNTstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtdGV4dC1sZXR0ZXItc3BhY2luZzowOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC10ZXh0LXRyYW5zZm9ybTpub25lOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC10ZXh0LXNpemU6MTRweDstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtaWNvbi1zaXplOjE4cHg7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLWJhc2VsaW5lOjE4cHg7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLWhlaWdodDo0OHB4Oy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC1pdGVtLWhlaWdodDo0NHB4Oy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC1pY29uLWdhcDo4cHg7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLXJ1bGUtYm9yZGVyLXJhZGl1czoxcHg7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLWZvY3VzLXJpbmctaGVpZ2h0OjMycHg7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLWZvY3VzLXJpbmctc2l6ZToycHg7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLWZvY3VzLXJpbmctcGFkZGluZy14OjhweDstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtZm9jdXMtcmluZy1ib3JkZXItcmFkaXVzOjVweDstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtcGFkZGluZy14OjBweDstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtaXRlbS1nYXA6NHB4Oy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC1pdGVtLW1hcmdpbi1sZWZ0OjEycHg7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLXJ1bGUtd2lkdGg6MnB4Oy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC1tYXJnaW4tbGVmdDowcHg7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLW1hcmdpbi1yaWdodDowcHg7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLWZvY3VzLWFyZWEtZ2FwOjE2cHg7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLXNlbGVjdGlvbi1pbmRpY2F0b3ItYW5pbWF0aW9uLWR1cmF0aW9uOjEzMG1zOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC1zZWxlY3Rpb24taW5kaWNhdG9yLWFuaW1hdGlvbi1lYXNlOigwLjQ1LDAsMC40LDEpfTpob3N0e2Rpc3BsYXk6YmxvY2t9XG5gO1xuZXhwb3J0IGRlZmF1bHQgc3R5bGVzOyIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgeyBMaXRFbGVtZW50LCBDU1NSZXN1bHRBcnJheSwgaHRtbCwgVGVtcGxhdGVSZXN1bHQgfSBmcm9tICdsaXQtZWxlbWVudCc7XG5pbXBvcnQgbWVkaXVtU3R5bGVzIGZyb20gJy4vc2NhbGUtbWVkaXVtLmNzcyc7XG5cbmV4cG9ydCBjbGFzcyBTY2FsZU1lZGl1bSBleHRlbmRzIExpdEVsZW1lbnQge1xuICAgIHB1YmxpYyBzdGF0aWMgZ2V0IHN0eWxlcygpOiBDU1NSZXN1bHRBcnJheSB7XG4gICAgICAgIHJldHVybiBbbWVkaXVtU3R5bGVzXTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcmVuZGVyKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICAgIGA7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuY29uc3Qgc3R5bGVzID0gY3NzYFxuOmhvc3QsOnJvb3R7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItY2VsZXJ5LTQwMDojNDRiNTU2Oy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWNlbGVyeS01MDA6IzNkYTc0ZTstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1jZWxlcnktNjAwOiMzNzk5NDc7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItY2VsZXJ5LTcwMDojMzE4YjQwOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWNoYXJ0cmV1c2UtNDAwOiM4NWQwNDQ7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItY2hhcnRyZXVzZS01MDA6IzdjYzMzZjstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1jaGFydHJldXNlLTYwMDojNzNiNTNhOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWNoYXJ0cmV1c2UtNzAwOiM2YWE4MzQ7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3IteWVsbG93LTQwMDojZGZiZjAwOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXllbGxvdy01MDA6I2QyYjIwMDstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci15ZWxsb3ctNjAwOiNjNGE2MDA7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3IteWVsbG93LTcwMDojYjc5OTAwOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLW1hZ2VudGEtNDAwOiNkODM3OTA7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItbWFnZW50YS01MDA6I2NlMjc4MzstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1tYWdlbnRhLTYwMDojYmMxYzc0Oy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLW1hZ2VudGEtNzAwOiNhZTBlNjY7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZnVjaHNpYS00MDA6I2MwMzhjYzstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1mdWNoc2lhLTUwMDojYjEzMGJkOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWZ1Y2hzaWEtNjAwOiNhMjI4YWQ7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZnVjaHNpYS03MDA6IzkzMjE5ZTstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1wdXJwbGUtNDAwOiM5MjU2ZDk7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItcHVycGxlLTUwMDojODY0Y2NjOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXB1cnBsZS02MDA6IzdhNDJiZjstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1wdXJwbGUtNzAwOiM2ZjM4YjE7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItaW5kaWdvLTQwMDojNjc2N2VjOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWluZGlnby01MDA6IzVjNWNlMDstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1pbmRpZ28tNjAwOiM1MTUxZDM7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItaW5kaWdvLTcwMDojNDY0NmM2Oy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXNlYWZvYW0tNDAwOiMxYjk1OWE7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc2VhZm9hbS01MDA6IzE2ODc4YzstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1zZWFmb2FtLTYwMDojMGY3OTdkOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXNlYWZvYW0tNzAwOiMwOTZjNmY7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItcmVkLTQwMDojZTM0ODUwOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXJlZC01MDA6I2Q3MzczZjstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1yZWQtNjAwOiNjOTI1MmQ7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItcmVkLTcwMDojYmIxMjFhOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLW9yYW5nZS00MDA6I2U2ODYxOTstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1vcmFuZ2UtNTAwOiNkYTdiMTE7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itb3JhbmdlLTYwMDojY2I2ZjEwOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLW9yYW5nZS03MDA6I2JkNjQwZDstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmVlbi00MDA6IzJkOWQ3ODstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmVlbi01MDA6IzI2OGU2YzstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmVlbi02MDA6IzEyODA1YzstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmVlbi03MDA6IzEwNzE1NDstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ibHVlLTQwMDojMjY4MGViOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWJsdWUtNTAwOiMxNDczZTY7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItYmx1ZS02MDA6IzBkNjZkMDstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ibHVlLTcwMDojMDk1YWJhOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNTA6I2ZmZjstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTc1OiNmYWZhZmE7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS0xMDA6I2Y1ZjVmNTstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTIwMDojZWFlYWVhOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktMzAwOiNlMWUxZTE7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS00MDA6I2NhY2FjYTstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTUwMDojYjNiM2IzOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktNjAwOiM4ZThlOGU7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3ItZ3JheS03MDA6IzZlNmU2ZTstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1ncmF5LTgwMDojNGI0YjRiOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLWdyYXktOTAwOiMyYzJjMmM7LS1zcGVjdHJ1bS1hbGlhcy1iYWNrZ3JvdW5kLWNvbG9yLWRlZmF1bHQ6I2Y1ZjVmNTstLXNwZWN0cnVtLWFsaWFzLWJhY2tncm91bmQtY29sb3ItdHJhbnNwYXJlbnQ6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1hbGlhcy1iYWNrZ3JvdW5kLWNvbG9yLWxhYmVsLWdyYXk6IzcwNzA3MDstLXNwZWN0cnVtLWFsaWFzLWJhY2tncm91bmQtY29sb3ItbW9kYWwtb3ZlcmxheTpyZ2JhKDAsMCwwLDAuNCk7LS1zcGVjdHJ1bS1hbGlhcy1kcm9wc2hhZG93LWNvbG9yOnJnYmEoMCwwLDAsMC4xNSk7LS1zcGVjdHJ1bS1hbGlhcy1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyLW92ZXJsYXk6cmdiYSg0NCw0NCw0NCwwLjA0KTstLXNwZWN0cnVtLWFsaWFzLWhpZ2hsaWdodC1ob3ZlcjpyZ2JhKDQ0LDQ0LDQ0LDAuMDYpOy0tc3BlY3RydW0tYWxpYXMtaGlnaGxpZ2h0LWFjdGl2ZTpyZ2JhKDQ0LDQ0LDQ0LDAuMSk7LS1zcGVjdHJ1bS1hbGlhcy1oaWdobGlnaHQtc2VsZWN0ZWQ6cmdiYSgyMCwxMTUsMjMwLDAuMSk7LS1zcGVjdHJ1bS1hbGlhcy1oaWdobGlnaHQtc2VsZWN0ZWQtaG92ZXI6cmdiYSgyMCwxMTUsMjMwLDAuMik7LS1zcGVjdHJ1bS1hbGlhcy10ZXh0LWhpZ2hsaWdodC1jb2xvcjpyZ2JhKDIwLDExNSwyMzAsMC4yKTstLXNwZWN0cnVtLWFsaWFzLWJhY2tncm91bmQtY29sb3ItcXVpY2thY3Rpb25zOmhzbGEoMCwwJSw5Ni4xJSwwLjkpOy0tc3BlY3RydW0tYWxpYXMtYmFja2dyb3VuZC1jb2xvci1xdWlja2FjdGlvbnMtb3ZlcmxheTpyZ2JhKDAsMCwwLDAuMik7LS1zcGVjdHJ1bS1hbGlhcy1wbGFjZWhvbGRlci10ZXh0LWNvbG9yOiM4ZThlOGU7LS1zcGVjdHJ1bS1hbGlhcy1wbGFjZWhvbGRlci10ZXh0LWNvbG9yLWhvdmVyOiMyYzJjMmM7LS1zcGVjdHJ1bS1hbGlhcy1wbGFjZWhvbGRlci10ZXh0LWNvbG9yLWRvd246IzJjMmMyYzstLXNwZWN0cnVtLWFsaWFzLXBsYWNlaG9sZGVyLXRleHQtY29sb3Itc2VsZWN0ZWQ6IzRiNGI0YjstLXNwZWN0cnVtLWFsaWFzLWxhYmVsLXRleHQtY29sb3I6IzZlNmU2ZTstLXNwZWN0cnVtLWFsaWFzLXRleHQtY29sb3I6IzRiNGI0YjstLXNwZWN0cnVtLWFsaWFzLXRleHQtY29sb3ItaG92ZXI6IzJjMmMyYzstLXNwZWN0cnVtLWFsaWFzLXRleHQtY29sb3ItZG93bjojMmMyYzJjOy0tc3BlY3RydW0tYWxpYXMtdGV4dC1jb2xvci1rZXktZm9jdXM6IzBkNjZkMDstLXNwZWN0cnVtLWFsaWFzLXRleHQtY29sb3ItZGlzYWJsZWQ6I2IzYjNiMzstLXNwZWN0cnVtLWFsaWFzLXRleHQtY29sb3ItaW52YWxpZDojZDczNzNmOy0tc3BlY3RydW0tYWxpYXMtdGV4dC1jb2xvci1zZWxlY3RlZDojMGQ2NmQwOy0tc3BlY3RydW0tYWxpYXMtdGV4dC1jb2xvci1zZWxlY3RlZC1uZXV0cmFsOiMyYzJjMmM7LS1zcGVjdHJ1bS1hbGlhcy10aXRsZS10ZXh0LWNvbG9yOiMyYzJjMmM7LS1zcGVjdHJ1bS1hbGlhcy1oZWFkaW5nLXRleHQtY29sb3I6IzJjMmMyYzstLXNwZWN0cnVtLWFsaWFzLWJvcmRlci1jb2xvcjojZTFlMWUxOy0tc3BlY3RydW0tYWxpYXMtYm9yZGVyLWNvbG9yLWhvdmVyOiNjYWNhY2E7LS1zcGVjdHJ1bS1hbGlhcy1ib3JkZXItY29sb3ItZm9jdXM6IzI2ODBlYjstLXNwZWN0cnVtLWFsaWFzLWJvcmRlci1jb2xvci1kb3duOiMxNDczZTY7LS1zcGVjdHJ1bS1hbGlhcy1ib3JkZXItY29sb3ItZXh0cmFsaWdodDojZjVmNWY1Oy0tc3BlY3RydW0tYWxpYXMtYm9yZGVyLWNvbG9yLWxpZ2h0OiNlYWVhZWE7LS1zcGVjdHJ1bS1hbGlhcy1ib3JkZXItY29sb3ItbWlkOiNlMWUxZTE7LS1zcGVjdHJ1bS1hbGlhcy1ib3JkZXItY29sb3ItZGFyazojY2FjYWNhOy0tc3BlY3RydW0tYWxpYXMtYm9yZGVyLWNvbG9yLXRyYW5zcGFyZW50OnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tYWxpYXMtYm9yZGVyLWNvbG9yLXRyYW5zbHVjZW50LWRhcms6cmdiYSgwLDAsMCwwLjA1KTstLXNwZWN0cnVtLWFsaWFzLWJvcmRlci1jb2xvci10cmFuc2x1Y2VudC1kYXJrZXI6cmdiYSgwLDAsMCwwLjEpOy0tc3BlY3RydW0tYWxpYXMtZm9jdXMtY29sb3I6IzI2ODBlYjstLXNwZWN0cnVtLWFsaWFzLXRyYWNrLWNvbG9yLWRlZmF1bHQ6I2UxZTFlMTstLXNwZWN0cnVtLWFsaWFzLXRyYWNrLWNvbG9yLWRpc2FibGVkOiNlMWUxZTE7LS1zcGVjdHJ1bS1hbGlhcy10cmFjay1jb2xvci1vdmVyLWJhY2tncm91bmQ6aHNsYSgwLDAlLDEwMCUsMC4yKTstLXNwZWN0cnVtLWFsaWFzLWljb24tY29sb3I6IzZlNmU2ZTstLXNwZWN0cnVtLWFsaWFzLWljb24tY29sb3Itb3Zlci1iYWNrZ3JvdW5kOiNmZmY7LS1zcGVjdHJ1bS1hbGlhcy1pY29uLWNvbG9yLWhvdmVyOiMyYzJjMmM7LS1zcGVjdHJ1bS1hbGlhcy1pY29uLWNvbG9yLWRvd246IzJjMmMyYzstLXNwZWN0cnVtLWFsaWFzLWljb24tY29sb3ItZm9jdXM6IzJjMmMyYzstLXNwZWN0cnVtLWFsaWFzLWljb24tY29sb3ItZGlzYWJsZWQ6I2NhY2FjYTstLXNwZWN0cnVtLWFsaWFzLWljb24tY29sb3Itc2VsZWN0ZWQtbmV1dHJhbDojMmMyYzJjOy0tc3BlY3RydW0tYWxpYXMtaWNvbi1jb2xvci1zZWxlY3RlZDojMTQ3M2U2Oy0tc3BlY3RydW0tYWxpYXMtaWNvbi1jb2xvci1zZWxlY3RlZC1ob3ZlcjojMGQ2NmQwOy0tc3BlY3RydW0tYWxpYXMtaWNvbi1jb2xvci1zZWxlY3RlZC1kb3duOiMwOTVhYmE7LS1zcGVjdHJ1bS1hbGlhcy1pY29uLWNvbG9yLXNlbGVjdGVkLWZvY3VzOiMwZDY2ZDA7LS1zcGVjdHJ1bS1hbGlhcy1pY29uLWNvbG9yLWVycm9yOiNlMzQ4NTA7LS1zcGVjdHJ1bS1hbGlhcy1yYWRpYWwtcmVhY3Rpb24tY29sb3ItZGVmYXVsdDpyZ2JhKDc1LDc1LDc1LDAuNik7LS1zcGVjdHJ1bS1hbGlhcy1wYXN0ZWJvYXJkLWJhY2tncm91bmQtY29sb3I6I2UxZTFlMTstLXNwZWN0cnVtLWFsaWFzLWFwcGZyYW1lLWJvcmRlci1jb2xvcjojZTFlMWUxOy0tc3BlY3RydW0tYWxpYXMtYXBwZnJhbWUtc2VwYXJhdG9yLWNvbG9yOiNlMWUxZTE7LS1zcGVjdHJ1bS1hbGlhcy10b29sYmFyLWJhY2tncm91bmQtY29sb3I6I2Y1ZjVmNTstLXNwZWN0cnVtLXNlbWFudGljLW5lZ2F0aXZlLWNvbG9yLWJhY2tncm91bmQ6I2M5MjUyZDstLXNwZWN0cnVtLXNlbWFudGljLW5lZ2F0aXZlLWNvbG9yLWRlZmF1bHQ6I2Q3MzczZjstLXNwZWN0cnVtLXNlbWFudGljLW5lZ2F0aXZlLWNvbG9yLWRhcms6I2M5MjUyZDstLXNwZWN0cnVtLXNlbWFudGljLW5lZ2F0aXZlLWNvbG9yLWJvcmRlcjojZTM0ODUwOy0tc3BlY3RydW0tc2VtYW50aWMtbmVnYXRpdmUtY29sb3ItaWNvbjojYzkyNTJkOy0tc3BlY3RydW0tc2VtYW50aWMtbmVnYXRpdmUtY29sb3Itc3RhdHVzOiNlMzQ4NTA7LS1zcGVjdHJ1bS1zZW1hbnRpYy1uZWdhdGl2ZS1jb2xvci10ZXh0LWxhcmdlOiNkNzM3M2Y7LS1zcGVjdHJ1bS1zZW1hbnRpYy1uZWdhdGl2ZS1jb2xvci10ZXh0LXNtYWxsOiNjOTI1MmQ7LS1zcGVjdHJ1bS1zZW1hbnRpYy1uZWdhdGl2ZS1jb2xvci1zdGF0ZS1kb3duOiNiYjEyMWE7LS1zcGVjdHJ1bS1zZW1hbnRpYy1uZWdhdGl2ZS1jb2xvci1zdGF0ZS1mb2N1czojZTM0ODUwOy0tc3BlY3RydW0tc2VtYW50aWMtbm90aWNlLWNvbG9yLWJhY2tncm91bmQ6I2NiNmYxMDstLXNwZWN0cnVtLXNlbWFudGljLW5vdGljZS1jb2xvci1kZWZhdWx0OiNkYTdiMTE7LS1zcGVjdHJ1bS1zZW1hbnRpYy1ub3RpY2UtY29sb3ItZGFyazojY2I2ZjEwOy0tc3BlY3RydW0tc2VtYW50aWMtbm90aWNlLWNvbG9yLWJvcmRlcjojZTY4NjE5Oy0tc3BlY3RydW0tc2VtYW50aWMtbm90aWNlLWNvbG9yLWljb246I2NiNmYxMDstLXNwZWN0cnVtLXNlbWFudGljLW5vdGljZS1jb2xvci1zdGF0dXM6I2U2ODYxOTstLXNwZWN0cnVtLXNlbWFudGljLW5vdGljZS1jb2xvci10ZXh0LWxhcmdlOiNkYTdiMTE7LS1zcGVjdHJ1bS1zZW1hbnRpYy1ub3RpY2UtY29sb3ItdGV4dC1zbWFsbDojY2I2ZjEwOy0tc3BlY3RydW0tc2VtYW50aWMtbm90aWNlLWNvbG9yLXN0YXRlLWRvd246I2JkNjQwZDstLXNwZWN0cnVtLXNlbWFudGljLW5vdGljZS1jb2xvci1zdGF0ZS1mb2N1czojZTY4NjE5Oy0tc3BlY3RydW0tc2VtYW50aWMtcG9zaXRpdmUtY29sb3ItYmFja2dyb3VuZDojMTI4MDVjOy0tc3BlY3RydW0tc2VtYW50aWMtcG9zaXRpdmUtY29sb3ItZGVmYXVsdDojMjY4ZTZjOy0tc3BlY3RydW0tc2VtYW50aWMtcG9zaXRpdmUtY29sb3ItZGFyazojMTI4MDVjOy0tc3BlY3RydW0tc2VtYW50aWMtcG9zaXRpdmUtY29sb3ItYm9yZGVyOiMyZDlkNzg7LS1zcGVjdHJ1bS1zZW1hbnRpYy1wb3NpdGl2ZS1jb2xvci1pY29uOiMxMjgwNWM7LS1zcGVjdHJ1bS1zZW1hbnRpYy1wb3NpdGl2ZS1jb2xvci1zdGF0dXM6IzJkOWQ3ODstLXNwZWN0cnVtLXNlbWFudGljLXBvc2l0aXZlLWNvbG9yLXRleHQtbGFyZ2U6IzI2OGU2YzstLXNwZWN0cnVtLXNlbWFudGljLXBvc2l0aXZlLWNvbG9yLXRleHQtc21hbGw6IzEyODA1YzstLXNwZWN0cnVtLXNlbWFudGljLXBvc2l0aXZlLWNvbG9yLXN0YXRlLWRvd246IzEwNzE1NDstLXNwZWN0cnVtLXNlbWFudGljLXBvc2l0aXZlLWNvbG9yLXN0YXRlLWZvY3VzOiMyZDlkNzg7LS1zcGVjdHJ1bS1zZW1hbnRpYy1pbmZvcm1hdGl2ZS1jb2xvci1iYWNrZ3JvdW5kOiMwZDY2ZDA7LS1zcGVjdHJ1bS1zZW1hbnRpYy1pbmZvcm1hdGl2ZS1jb2xvci1kZWZhdWx0OiMxNDczZTY7LS1zcGVjdHJ1bS1zZW1hbnRpYy1pbmZvcm1hdGl2ZS1jb2xvci1kYXJrOiMwZDY2ZDA7LS1zcGVjdHJ1bS1zZW1hbnRpYy1pbmZvcm1hdGl2ZS1jb2xvci1ib3JkZXI6IzI2ODBlYjstLXNwZWN0cnVtLXNlbWFudGljLWluZm9ybWF0aXZlLWNvbG9yLWljb246IzBkNjZkMDstLXNwZWN0cnVtLXNlbWFudGljLWluZm9ybWF0aXZlLWNvbG9yLXN0YXR1czojMjY4MGViOy0tc3BlY3RydW0tc2VtYW50aWMtaW5mb3JtYXRpdmUtY29sb3ItdGV4dC1sYXJnZTojMTQ3M2U2Oy0tc3BlY3RydW0tc2VtYW50aWMtaW5mb3JtYXRpdmUtY29sb3ItdGV4dC1zbWFsbDojMGQ2NmQwOy0tc3BlY3RydW0tc2VtYW50aWMtaW5mb3JtYXRpdmUtY29sb3Itc3RhdGUtZG93bjojMDk1YWJhOy0tc3BlY3RydW0tc2VtYW50aWMtaW5mb3JtYXRpdmUtY29sb3Itc3RhdGUtZm9jdXM6IzI2ODBlYjstLXNwZWN0cnVtLXNlbWFudGljLWN0YS1jb2xvci1iYWNrZ3JvdW5kLWRlZmF1bHQ6IzE0NzNlNjstLXNwZWN0cnVtLXNlbWFudGljLWN0YS1jb2xvci1iYWNrZ3JvdW5kLWhvdmVyOiMwZDY2ZDA7LS1zcGVjdHJ1bS1zZW1hbnRpYy1jdGEtY29sb3ItYmFja2dyb3VuZC1kb3duOiMwZDY2ZDA7LS1zcGVjdHJ1bS1zZW1hbnRpYy1iYWNrZ3JvdW5kLWNvbG9yLWtleS1mb2N1czojMTQ3M2U2Oy0tc3BlY3RydW0tc2VtYW50aWMtbmV1dHJhbC1jb2xvci1iYWNrZ3JvdW5kOiM3NDc0NzQ7LS1zcGVjdHJ1bS1iYW5uZXItdGV4dC1jb2xvcjojZmZmOy0tc3BlY3RydW0tYmFubmVyLWVycm9yLWJhY2tncm91bmQtY29sb3I6I2Q3MzczZjstLXNwZWN0cnVtLWJhbm5lci1pbmZvLWJhY2tncm91bmQtY29sb3I6IzE0NzNlNjstLXNwZWN0cnVtLWJhbm5lci13YXJuaW5nLWJhY2tncm91bmQtY29sb3I6I2RhN2IxMTstLXNwZWN0cnVtLWJ1dHRvbi1jdGEtaWNvbi1jb2xvcjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLWN0YS1iYWNrZ3JvdW5kLWNvbG9yOiMxNDczZTY7LS1zcGVjdHJ1bS1idXR0b24tY3RhLWJvcmRlci1jb2xvcjojMTQ3M2U2Oy0tc3BlY3RydW0tYnV0dG9uLWN0YS10ZXh0LWNvbG9yOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tY3RhLWljb24tY29sb3ItaG92ZXI6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1jdGEtYmFja2dyb3VuZC1jb2xvci1ob3ZlcjojMGQ2NmQwOy0tc3BlY3RydW0tYnV0dG9uLWN0YS1ib3JkZXItY29sb3ItaG92ZXI6IzBkNjZkMDstLXNwZWN0cnVtLWJ1dHRvbi1jdGEtdGV4dC1jb2xvci1ob3ZlcjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLWN0YS1pY29uLWNvbG9yLWRvd246I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1jdGEtYmFja2dyb3VuZC1jb2xvci1kb3duOiMwZDY2ZDA7LS1zcGVjdHJ1bS1idXR0b24tY3RhLWJvcmRlci1jb2xvci1kb3duOiMwZDY2ZDA7LS1zcGVjdHJ1bS1idXR0b24tY3RhLXRleHQtY29sb3ItZG93bjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLWN0YS1pY29uLWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tYnV0dG9uLWN0YS1iYWNrZ3JvdW5kLWNvbG9yLWtleS1mb2N1czojMTQ3M2U2Oy0tc3BlY3RydW0tYnV0dG9uLWN0YS1ib3JkZXItY29sb3Ita2V5LWZvY3VzOiMxNDczZTY7LS1zcGVjdHJ1bS1idXR0b24tY3RhLXRleHQtY29sb3Ita2V5LWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tY3RhLWljb24tY29sb3ItZGlzYWJsZWQ6I2NhY2FjYTstLXNwZWN0cnVtLWJ1dHRvbi1jdGEtYmFja2dyb3VuZC1jb2xvci1kaXNhYmxlZDojZWFlYWVhOy0tc3BlY3RydW0tYnV0dG9uLWN0YS1ib3JkZXItY29sb3ItZGlzYWJsZWQ6I2VhZWFlYTstLXNwZWN0cnVtLWJ1dHRvbi1jdGEtdGV4dC1jb2xvci1kaXNhYmxlZDojYjNiM2IzOy0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC1pY29uLWNvbG9yOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tb3Zlci1iYWNrZ3JvdW5kLWJhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1idXR0b24tb3Zlci1iYWNrZ3JvdW5kLWJvcmRlci1jb2xvcjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC10ZXh0LWNvbG9yOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tb3Zlci1iYWNrZ3JvdW5kLWljb24tY29sb3ItaG92ZXI6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtYmFja2dyb3VuZC1jb2xvci1ob3ZlcjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC1ib3JkZXItY29sb3ItaG92ZXI6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtaWNvbi1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tb3Zlci1iYWNrZ3JvdW5kLWJhY2tncm91bmQtY29sb3ItZG93bjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC1ib3JkZXItY29sb3ItZG93bjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC1pY29uLWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC1iYWNrZ3JvdW5kLWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC1ib3JkZXItY29sb3Ita2V5LWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tb3Zlci1iYWNrZ3JvdW5kLWljb24tY29sb3ItZGlzYWJsZWQ6aHNsYSgwLDAlLDEwMCUsMC4zNSk7LS1zcGVjdHJ1bS1idXR0b24tb3Zlci1iYWNrZ3JvdW5kLWJhY2tncm91bmQtY29sb3ItZGlzYWJsZWQ6aHNsYSgwLDAlLDEwMCUsMC4xKTstLXNwZWN0cnVtLWJ1dHRvbi1vdmVyLWJhY2tncm91bmQtYm9yZGVyLWNvbG9yLWRpc2FibGVkOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tYnV0dG9uLW92ZXItYmFja2dyb3VuZC10ZXh0LWNvbG9yLWRpc2FibGVkOmhzbGEoMCwwJSwxMDAlLDAuMzUpOy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktaWNvbi1jb2xvcjojNGI0YjRiOy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktYmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWJvcmRlci1jb2xvcjojNGI0YjRiOy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktdGV4dC1jb2xvcjojNGI0YjRiOy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktaWNvbi1jb2xvci1ob3ZlcjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktYmFja2dyb3VuZC1jb2xvci1ob3ZlcjojNGI0YjRiOy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktYm9yZGVyLWNvbG9yLWhvdmVyOiM0YjRiNGI7LS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS10ZXh0LWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS1pY29uLWNvbG9yLWRvd246I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWJhY2tncm91bmQtY29sb3ItZG93bjojMmMyYzJjOy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktYm9yZGVyLWNvbG9yLWRvd246IzJjMmMyYzstLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LXRleHQtY29sb3ItZG93bjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktaWNvbi1jb2xvci1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1wcmltYXJ5LWJhY2tncm91bmQtY29sb3Ita2V5LWZvY3VzOiMxNDczZTY7LS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS1ib3JkZXItY29sb3Ita2V5LWZvY3VzOiMxNDczZTY7LS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS10ZXh0LWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktaWNvbi1jb2xvci1kaXNhYmxlZDojY2FjYWNhOy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktYmFja2dyb3VuZC1jb2xvci1kaXNhYmxlZDojZWFlYWVhOy0tc3BlY3RydW0tYnV0dG9uLXByaW1hcnktYm9yZGVyLWNvbG9yLWRpc2FibGVkOiNlYWVhZWE7LS1zcGVjdHJ1bS1idXR0b24tcHJpbWFyeS10ZXh0LWNvbG9yLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLWljb24tY29sb3I6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtYmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtYm9yZGVyLWNvbG9yOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LW92ZXItYmFja2dyb3VuZC10ZXh0LWNvbG9yOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLWljb24tY29sb3ItaG92ZXI6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtYmFja2dyb3VuZC1jb2xvci1ob3Zlcjpoc2xhKDAsMCUsMTAwJSwwLjEpOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LW92ZXItYmFja2dyb3VuZC1ib3JkZXItY29sb3ItaG92ZXI6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLXRleHQtY29sb3ItaG92ZXI6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtaWNvbi1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLWJhY2tncm91bmQtY29sb3ItZG93bjpoc2xhKDAsMCUsMTAwJSwwLjE1KTstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtYm9yZGVyLWNvbG9yLWRvd246dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLXRleHQtY29sb3ItZG93bjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LW92ZXItYmFja2dyb3VuZC1pY29uLWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LW92ZXItYmFja2dyb3VuZC1iYWNrZ3JvdW5kLWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LW92ZXItYmFja2dyb3VuZC1ib3JkZXItY29sb3Ita2V5LWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLWljb24tY29sb3ItZGlzYWJsZWQ6aHNsYSgwLDAlLDEwMCUsMC4xNSk7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLWJhY2tncm91bmQtY29sb3ItZGlzYWJsZWQ6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtb3Zlci1iYWNrZ3JvdW5kLWJvcmRlci1jb2xvci1kaXNhYmxlZDp0cmFuc3BhcmVudDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1vdmVyLWJhY2tncm91bmQtdGV4dC1jb2xvci1kaXNhYmxlZDpoc2xhKDAsMCUsMTAwJSwwLjE1KTstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1wcmltYXJ5LWljb24tY29sb3I6IzRiNGI0YjstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1wcmltYXJ5LWJhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1ib3JkZXItY29sb3I6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS10ZXh0LWNvbG9yOiM0YjRiNGI7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1pY29uLWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyOiNlYWVhZWE7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1ib3JkZXItY29sb3ItaG92ZXI6I2VhZWFlYTstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1wcmltYXJ5LXRleHQtY29sb3ItaG92ZXI6IzJjMmMyYzstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1wcmltYXJ5LWljb24tY29sb3ItZG93bjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktYmFja2dyb3VuZC1jb2xvci1kb3duOiNlMWUxZTE7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1ib3JkZXItY29sb3ItZG93bjojZTFlMWUxOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktdGV4dC1jb2xvci1kb3duOiMyYzJjMmM7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1pY29uLWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktYmFja2dyb3VuZC1jb2xvci1rZXktZm9jdXM6IzE0NzNlNjstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1wcmltYXJ5LWJvcmRlci1jb2xvci1rZXktZm9jdXM6IzE0NzNlNjstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1wcmltYXJ5LXRleHQtY29sb3Ita2V5LWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1pY29uLWNvbG9yLWRpc2FibGVkOiNjYWNhY2E7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtcHJpbWFyeS1iYWNrZ3JvdW5kLWNvbG9yLWRpc2FibGVkOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktYm9yZGVyLWNvbG9yLWRpc2FibGVkOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXByaW1hcnktdGV4dC1jb2xvci1kaXNhYmxlZDojYjNiM2IzOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS1pY29uLWNvbG9yOiM2ZTZlNmU7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3I6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWJvcmRlci1jb2xvcjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktdGV4dC1jb2xvcjojNmU2ZTZlOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS1pY29uLWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3ItaG92ZXI6I2VhZWFlYTstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktYm9yZGVyLWNvbG9yLWhvdmVyOiNlYWVhZWE7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LXRleHQtY29sb3ItaG92ZXI6IzRiNGI0YjstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktaWNvbi1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3ItZG93bjojZTFlMWUxOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS1ib3JkZXItY29sb3ItZG93bjojZTFlMWUxOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS10ZXh0LWNvbG9yLWRvd246IzRiNGI0YjstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktaWNvbi1jb2xvci1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktYmFja2dyb3VuZC1jb2xvci1rZXktZm9jdXM6IzE0NzNlNjstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktYm9yZGVyLWNvbG9yLWtleS1mb2N1czojMTQ3M2U2Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS10ZXh0LWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXNlY29uZGFyeS1pY29uLWNvbG9yLWRpc2FibGVkOiNjYWNhY2E7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3ItZGlzYWJsZWQ6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtc2Vjb25kYXJ5LWJvcmRlci1jb2xvci1kaXNhYmxlZDp0cmFuc3BhcmVudDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC1zZWNvbmRhcnktdGV4dC1jb2xvci1kaXNhYmxlZDojYjNiM2IzOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXdhcm5pbmctaWNvbi1jb2xvcjojZDczNzNmOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXdhcm5pbmctYmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLWJvcmRlci1jb2xvcjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLXRleHQtY29sb3I6I2Q3MzczZjstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLWljb24tY29sb3ItaG92ZXI6I2M5MjUyZDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLWJhY2tncm91bmQtY29sb3ItaG92ZXI6I2VhZWFlYTstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLWJvcmRlci1jb2xvci1ob3ZlcjojZWFlYWVhOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXdhcm5pbmctdGV4dC1jb2xvci1ob3ZlcjojYzkyNTJkOy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXdhcm5pbmctaWNvbi1jb2xvci1kb3duOiNjOTI1MmQ7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy1iYWNrZ3JvdW5kLWNvbG9yLWRvd246I2UxZTFlMTstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLWJvcmRlci1jb2xvci1kb3duOiNlMWUxZTE7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy10ZXh0LWNvbG9yLWRvd246I2M5MjUyZDstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLWljb24tY29sb3Ita2V5LWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy1iYWNrZ3JvdW5kLWNvbG9yLWtleS1mb2N1czojMTQ3M2U2Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXdhcm5pbmctYm9yZGVyLWNvbG9yLWtleS1mb2N1czojMTQ3M2U2Oy0tc3BlY3RydW0tYnV0dG9uLXF1aWV0LXdhcm5pbmctdGV4dC1jb2xvci1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLWljb24tY29sb3ItZGlzYWJsZWQ6I2NhY2FjYTstLXNwZWN0cnVtLWJ1dHRvbi1xdWlldC13YXJuaW5nLWJhY2tncm91bmQtY29sb3ItZGlzYWJsZWQ6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy1ib3JkZXItY29sb3ItZGlzYWJsZWQ6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1idXR0b24tcXVpZXQtd2FybmluZy10ZXh0LWNvbG9yLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LWljb24tY29sb3I6IzZlNmU2ZTstLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktYmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktYm9yZGVyLWNvbG9yOiM2ZTZlNmU7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LXRleHQtY29sb3I6IzZlNmU2ZTstLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktaWNvbi1jb2xvci1ob3ZlcjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyOiM2ZTZlNmU7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LWJvcmRlci1jb2xvci1ob3ZlcjojNmU2ZTZlOy0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS10ZXh0LWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LWljb24tY29sb3ItZG93bjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yLWRvd246IzRiNGI0YjstLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktYm9yZGVyLWNvbG9yLWRvd246IzRiNGI0YjstLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktdGV4dC1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LWljb24tY29sb3Ita2V5LWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LWJhY2tncm91bmQtY29sb3Ita2V5LWZvY3VzOiMxNDczZTY7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LWJvcmRlci1jb2xvci1rZXktZm9jdXM6IzE0NzNlNjstLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktdGV4dC1jb2xvci1rZXktZm9jdXM6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi1zZWNvbmRhcnktaWNvbi1jb2xvci1kaXNhYmxlZDojY2FjYWNhOy0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS1iYWNrZ3JvdW5kLWNvbG9yLWRpc2FibGVkOiNlYWVhZWE7LS1zcGVjdHJ1bS1idXR0b24tc2Vjb25kYXJ5LWJvcmRlci1jb2xvci1kaXNhYmxlZDojZWFlYWVhOy0tc3BlY3RydW0tYnV0dG9uLXNlY29uZGFyeS10ZXh0LWNvbG9yLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy1pY29uLWNvbG9yOiNjOTI1MmQ7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy1iYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctYm9yZGVyLWNvbG9yOiNjOTI1MmQ7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy10ZXh0LWNvbG9yOiNjOTI1MmQ7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy1pY29uLWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyOiNjOTI1MmQ7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy1ib3JkZXItY29sb3ItaG92ZXI6I2M5MjUyZDstLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLXRleHQtY29sb3ItaG92ZXI6I2ZmZjstLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLWljb24tY29sb3ItZG93bjojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctYmFja2dyb3VuZC1jb2xvci1kb3duOiNiYjEyMWE7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy1ib3JkZXItY29sb3ItZG93bjojYmIxMjFhOy0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctdGV4dC1jb2xvci1kb3duOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy1pY29uLWNvbG9yLWtleS1mb2N1czojZmZmOy0tc3BlY3RydW0tYnV0dG9uLXdhcm5pbmctYmFja2dyb3VuZC1jb2xvci1rZXktZm9jdXM6IzE0NzNlNjstLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLWJvcmRlci1jb2xvci1rZXktZm9jdXM6IzE0NzNlNjstLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLXRleHQtY29sb3Ita2V5LWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy1pY29uLWNvbG9yLWRpc2FibGVkOiNjYWNhY2E7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy1iYWNrZ3JvdW5kLWNvbG9yLWRpc2FibGVkOiNlYWVhZWE7LS1zcGVjdHJ1bS1idXR0b24td2FybmluZy1ib3JkZXItY29sb3ItZGlzYWJsZWQ6I2VhZWFlYTstLXNwZWN0cnVtLWJ1dHRvbi13YXJuaW5nLXRleHQtY29sb3ItZGlzYWJsZWQ6I2IzYjNiMzstLXNwZWN0cnVtLWNhcmQtYm9yZGVyLWNvbG9yOiNlYWVhZWE7LS1zcGVjdHJ1bS1jYXJkLWJvcmRlci1jb2xvci1rZXktZm9jdXM6IzI2ODBlYjstLXNwZWN0cnVtLWNhcmQtYm9yZGVyLWNvbG9yLWhvdmVyOiNjYWNhY2E7LS1zcGVjdHJ1bS1jYXJkLWNvdmVycGhvdG8tYmFja2dyb3VuZC1jb2xvcjojZWFlYWVhOy0tc3BlY3RydW0tY2FyZC1jb3ZlcnBob3RvLWJvcmRlci1jb2xvcjojZWFlYWVhOy0tc3BlY3RydW0tY2FyZC1kZXNjcmlwdGlvbi10ZXh0LWNvbG9yOiM2ZTZlNmU7LS1zcGVjdHJ1bS1jYXJkLWJhY2tncm91bmQtY29sb3I6I2ZmZjstLXNwZWN0cnVtLWNhcmQtcXVpZXQtcHJldmlldy1iYWNrZ3JvdW5kLWNvbG9yOiNlYWVhZWE7LS1zcGVjdHJ1bS1jYXJkLXF1aWV0LXByZXZpZXctYmFja2dyb3VuZC1jb2xvci1ob3ZlcjojZTFlMWUxOy0tc3BlY3RydW0tY2FyZC1xdWlldC1ib3JkZXItY29sb3Itc2VsZWN0ZWQ6IzE0NzNlNjstLXNwZWN0cnVtLWNhcmQtcXVpZXQtdGl0bGUtdGV4dC1jb2xvcjojNGI0YjRiOy0tc3BlY3RydW0tY2FyZC1xdWlldC1zdWJ0aXRsZS10ZXh0LWNvbG9yOiM2ZTZlNmU7LS1zcGVjdHJ1bS1kcm9wem9uZS1ib3JkZXItY29sb3I6I2UxZTFlMTstLXNwZWN0cnVtLWRyb3B6b25lLWJhY2tncm91bmQtY29sb3I6I2Y1ZjVmNTstLXNwZWN0cnVtLWRyb3B6b25lLWljb24tY29sb3I6I2IzYjNiMzstLXNwZWN0cnVtLWRyb3B6b25lLWJvcmRlci1jb2xvci1zZWxlY3RlZC1ob3ZlcjojMjY4MGViOy0tc3BlY3RydW0tZHJvcHpvbmUtYmFja2dyb3VuZC1jb2xvci1zZWxlY3RlZC1ob3ZlcjpyZ2JhKDIwLDExNSwyMzAsMC4xKTstLXNwZWN0cnVtLWRyb3B6b25lLWljb24tY29sb3Itc2VsZWN0ZWQtaG92ZXI6IzE0NzNlNjstLXNwZWN0cnVtLWZpZWxkbGFiZWwtYXN0ZXJpc2stY29sb3I6IzhlOGU4ZTstLXNwZWN0cnVtLWZpZWxkbGFiZWwtdGV4dC1jb2xvcjojNmU2ZTZlOy0tc3BlY3RydW0tZmllbGRsYWJlbC1hc3Rlcmlzay1jb2xvci1kaXNhYmxlZDojYjNiM2IzOy0tc3BlY3RydW0tZmllbGRsYWJlbC10ZXh0LWNvbG9yLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS1maWVsZGxhYmVsLXNpZGUtYXN0ZXJpc2stY29sb3I6IzhlOGU4ZTstLXNwZWN0cnVtLWZpZWxkbGFiZWwtc2lkZS10ZXh0LWNvbG9yOiM2ZTZlNmU7LS1zcGVjdHJ1bS1maWVsZGxhYmVsLXNpZGUtYXN0ZXJpc2stY29sb3ItZGlzYWJsZWQ6I2IzYjNiMzstLXNwZWN0cnVtLWZpZWxkbGFiZWwtc2lkZS10ZXh0LWNvbG9yLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS1sYWJlbC1jb2xvcmVkLWdyYXktYmFja2dyb3VuZC1jb2xvcjojNzQ3NDc0Oy0tc3BlY3RydW0tbGFiZWwtY29sb3JlZC1ncmVlbi1iYWNrZ3JvdW5kLWNvbG9yOiMyNjhlNmM7LS1zcGVjdHJ1bS1sYWJlbC1jb2xvcmVkLWJsdWUtYmFja2dyb3VuZC1jb2xvcjojMTQ3M2U2Oy0tc3BlY3RydW0tbGFiZWwtY29sb3JlZC1yZWQtYmFja2dyb3VuZC1jb2xvcjojZDczNzNmOy0tc3BlY3RydW0tbGFiZWwtY29sb3JlZC1zZWFmb2FtLWJhY2tncm91bmQtY29sb3I6IzFiOTU5YTstLXNwZWN0cnVtLWxhYmVsLWNvbG9yZWQtZnVjaHNpYS1iYWNrZ3JvdW5kLWNvbG9yOiNjMDM4Y2M7LS1zcGVjdHJ1bS1sYWJlbC1jb2xvcmVkLW9yYW5nZS1iYWNrZ3JvdW5kLWNvbG9yOiNkYTdiMTE7LS1zcGVjdHJ1bS1sYWJlbC1jb2xvcmVkLXllbGxvdy1iYWNrZ3JvdW5kLWNvbG9yOiNkZmJmMDA7LS1zcGVjdHJ1bS1sYWJlbC1jb2xvcmVkLXRleHQtY29sb3I6I2ZmZjstLXNwZWN0cnVtLWxhYmVsLWNvbG9yZWQtYmFja2dyb3VuZC1jb2xvci1kaXNhYmxlZDojZWFlYWVhOy0tc3BlY3RydW0tbGFiZWwtdGV4dC1jb2xvcjojNmU2ZTZlOy0tc3BlY3RydW0tbGFiZWwtdGV4dC1jb2xvci1kaXNhYmxlZDojYjNiM2IzOy0tc3BlY3RydW0tbGFiZWwtb3Zlci1iYWNrZ3JvdW5kLXRleHQtY29sb3I6I2ZmZjstLXNwZWN0cnVtLWxhYmVsLW92ZXItYmFja2dyb3VuZC10ZXh0LWNvbG9yLWRpc2FibGVkOiNmZmY7LS1zcGVjdHJ1bS1sYWJlbC1sYXJnZS10ZXh0LWNvbG9yOiM2ZTZlNmU7LS1zcGVjdHJ1bS1sYWJlbC1sYXJnZS10ZXh0LWNvbG9yLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS1sYWJlbC1sYXJnZS1vdmVyLWJhY2tncm91bmQtdGV4dC1jb2xvcjojZmZmOy0tc3BlY3RydW0tbGFiZWwtbGFyZ2Utb3Zlci1iYWNrZ3JvdW5kLXRleHQtY29sb3ItZGlzYWJsZWQ6I2ZmZjstLXNwZWN0cnVtLWxpbmstdGV4dC1jb2xvcjojMGQ2NmQwOy0tc3BlY3RydW0tbGluay11bmRlcmxpbmUtY29sb3I6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1saW5rLXRleHQtY29sb3ItaG92ZXI6IzBkNjZkMDstLXNwZWN0cnVtLWxpbmstdW5kZXJsaW5lLWNvbG9yLWhvdmVyOiMwZDY2ZDA7LS1zcGVjdHJ1bS1saW5rLXRleHQtY29sb3ItZG93bjojMDk1YWJhOy0tc3BlY3RydW0tbGluay11bmRlcmxpbmUtY29sb3ItZG93bjojMDk1YWJhOy0tc3BlY3RydW0tbGluay10ZXh0LWNvbG9yLWtleS1mb2N1czojMGQ2NmQwOy0tc3BlY3RydW0tbGluay11bmRlcmxpbmUtY29sb3Ita2V5LWZvY3VzOiMwZDY2ZDA7LS1zcGVjdHJ1bS1saW5rLXRleHQtY29sb3ItZGlzYWJsZWQ6I2IzYjNiMzstLXNwZWN0cnVtLWxpbmstdW5kZXJsaW5lLWNvbG9yLWRpc2FibGVkOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tbGluay1vdmVyLWJhY2tncm91bmQtdGV4dC1jb2xvcjojZmZmOy0tc3BlY3RydW0tbGluay1vdmVyLWJhY2tncm91bmQtdW5kZXJsaW5lLWNvbG9yOiNmZmY7LS1zcGVjdHJ1bS1saW5rLW92ZXItYmFja2dyb3VuZC10ZXh0LWNvbG9yLWhvdmVyOiNmZmY7LS1zcGVjdHJ1bS1saW5rLW92ZXItYmFja2dyb3VuZC11bmRlcmxpbmUtY29sb3ItaG92ZXI6I2ZmZjstLXNwZWN0cnVtLWxpbmstb3Zlci1iYWNrZ3JvdW5kLXRleHQtY29sb3ItZG93bjojZmZmOy0tc3BlY3RydW0tbGluay1vdmVyLWJhY2tncm91bmQtdW5kZXJsaW5lLWNvbG9yLWRvd246I2ZmZjstLXNwZWN0cnVtLWxpbmstb3Zlci1iYWNrZ3JvdW5kLXRleHQtY29sb3Ita2V5LWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS1saW5rLW92ZXItYmFja2dyb3VuZC11bmRlcmxpbmUtY29sb3Ita2V5LWZvY3VzOiNmZmY7LS1zcGVjdHJ1bS1saW5rLW92ZXItYmFja2dyb3VuZC10ZXh0LWNvbG9yLWRpc2FibGVkOmhzbGEoMCwwJSwxMDAlLDAuNSk7LS1zcGVjdHJ1bS1saW5rLW92ZXItYmFja2dyb3VuZC11bmRlcmxpbmUtY29sb3ItZGlzYWJsZWQ6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1saW5rLXF1aWV0LXRleHQtY29sb3I6IzRiNGI0YjstLXNwZWN0cnVtLWxpbmstcXVpZXQtdW5kZXJsaW5lLWNvbG9yOiM0YjRiNGI7LS1zcGVjdHJ1bS1saW5rLXF1aWV0LXRleHQtY29sb3ItaG92ZXI6IzJjMmMyYzstLXNwZWN0cnVtLWxpbmstcXVpZXQtdW5kZXJsaW5lLWNvbG9yLWhvdmVyOiMyYzJjMmM7LS1zcGVjdHJ1bS1saW5rLXF1aWV0LXRleHQtY29sb3ItZG93bjojMmMyYzJjOy0tc3BlY3RydW0tbGluay1xdWlldC11bmRlcmxpbmUtY29sb3ItZG93bjojMmMyYzJjOy0tc3BlY3RydW0tbGluay1xdWlldC10ZXh0LWNvbG9yLWtleS1mb2N1czojMmMyYzJjOy0tc3BlY3RydW0tbGluay1xdWlldC11bmRlcmxpbmUtY29sb3Ita2V5LWZvY3VzOiMyYzJjMmM7LS1zcGVjdHJ1bS1saW5rLXF1aWV0LXRleHQtY29sb3ItbW91c2UtZm9jdXM6IzJjMmMyYzstLXNwZWN0cnVtLWxpbmstcXVpZXQtdGV4dC1jb2xvci1kaXNhYmxlZDojYjNiM2IzOy0tc3BlY3RydW0tbGluay1xdWlldC11bmRlcmxpbmUtY29sb3ItZGlzYWJsZWQ6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1wb3BvdmVyLWJhY2tncm91bmQtY29sb3I6I2ZmZjstLXNwZWN0cnVtLXBvcG92ZXItYm9yZGVyLWNvbG9yOiNjYWNhY2E7LS1zcGVjdHJ1bS1wb3BvdmVyLXNoYWRvdy1jb2xvcjpyZ2JhKDAsMCwwLDAuMTUpOy0tc3BlY3RydW0tcmFkaW8tdGV4dC1jb2xvcjojNGI0YjRiOy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1jb2xvcjojOGU4ZThlOy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJhY2tncm91bmQtY29sb3I6I2ZhZmFmYTstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1kb3QtY29sb3I6I2ZhZmFmYTstLXNwZWN0cnVtLXJhZGlvLXRleHQtY29sb3ItaG92ZXI6IzJjMmMyYzstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3ItaG92ZXI6IzZlNmU2ZTstLXNwZWN0cnVtLXJhZGlvLXRleHQtY29sb3ItZG93bjojMmMyYzJjOy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1jb2xvci1kb3duOiM0YjRiNGI7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWNvbG9yLWtleS1mb2N1czojMGQ2NmQwOy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1jb2xvci1rZXktZm9jdXM6IzI2ODBlYjstLXNwZWN0cnVtLXJhZGlvLXRleHQtY29sb3ItZGlzYWJsZWQ6I2IzYjNiMzstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3ItZGlzYWJsZWQ6I2NhY2FjYTstLXNwZWN0cnVtLXJhZGlvLXRleHQtY29sb3Itc2VsZWN0ZWQ6IzRiNGI0YjstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3Itc2VsZWN0ZWQ6IzE0NzNlNjstLXNwZWN0cnVtLXJhZGlvLXRleHQtY29sb3Itc2VsZWN0ZWQtaG92ZXI6IzJjMmMyYzstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3Itc2VsZWN0ZWQtaG92ZXI6IzBkNjZkMDstLXNwZWN0cnVtLXJhZGlvLXRleHQtY29sb3Itc2VsZWN0ZWQtZG93bjojMmMyYzJjOy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1jb2xvci1zZWxlY3RlZC1kb3duOiMwOTVhYmE7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1czojMGQ2NmQwOy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXM6IzI2ODBlYjstLXNwZWN0cnVtLXJhZGlvLXRleHQtY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6I2IzYjNiMzstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6I2NhY2FjYTstLXNwZWN0cnVtLXJhZGlvLXRleHQtY29sb3ItZXJyb3I6I2M5MjUyZDstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3ItZXJyb3I6I2Q3MzczZjstLXNwZWN0cnVtLXJhZGlvLXRleHQtY29sb3ItZXJyb3ItaG92ZXI6I2JiMTIxYTstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3ItZXJyb3ItaG92ZXI6I2M5MjUyZDstLXNwZWN0cnVtLXJhZGlvLXRleHQtY29sb3ItZXJyb3ItZG93bjojYmIxMjFhOy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1jb2xvci1lcnJvci1kb3duOiNiYjEyMWE7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWNvbG9yLWVycm9yLWtleS1mb2N1czojMGQ2NmQwOy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1jb2xvci1lcnJvci1rZXktZm9jdXM6IzI2ODBlYjstLXNwZWN0cnVtLXJhZGlvLXRleHQtY29sb3ItZXJyb3ItZGlzYWJsZWQ6I2IzYjNiMzstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3ItZXJyb3ItZGlzYWJsZWQ6I2NhY2FjYTstLXNwZWN0cnVtLXJhZGlvLXRleHQtY29sb3ItZXJyb3Itc2VsZWN0ZWQ6I2M5MjUyZDstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3ItZXJyb3Itc2VsZWN0ZWQ6I2Q3MzczZjstLXNwZWN0cnVtLXJhZGlvLXRleHQtY29sb3ItZXJyb3Itc2VsZWN0ZWQtaG92ZXI6I2JiMTIxYTstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3ItZXJyb3Itc2VsZWN0ZWQtaG92ZXI6I2M5MjUyZDstLXNwZWN0cnVtLXJhZGlvLXRleHQtY29sb3ItZXJyb3Itc2VsZWN0ZWQtZG93bjojYmIxMjFhOy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1jb2xvci1lcnJvci1zZWxlY3RlZC1kb3duOiNiYjEyMWE7LS1zcGVjdHJ1bS1yYWRpby10ZXh0LWNvbG9yLWVycm9yLXNlbGVjdGVkLWtleS1mb2N1czojMGQ2NmQwOy0tc3BlY3RydW0tcmFkaW8tY2lyY2xlLWJvcmRlci1jb2xvci1lcnJvci1zZWxlY3RlZC1rZXktZm9jdXM6IzI2ODBlYjstLXNwZWN0cnVtLXJhZGlvLXRleHQtY29sb3ItZXJyb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6I2IzYjNiMzstLXNwZWN0cnVtLXJhZGlvLWNpcmNsZS1ib3JkZXItY29sb3ItZXJyb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6I2NhY2FjYTstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LXRleHQtY29sb3I6IzRiNGI0YjstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LWNpcmNsZS1ib3JkZXItY29sb3I6IzhlOGU4ZTstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LWNpcmNsZS1iYWNrZ3JvdW5kLWNvbG9yOiNmYWZhZmE7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtZG90LWNvbG9yOiNmYWZhZmE7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWNvbG9yLWhvdmVyOiMyYzJjMmM7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLWhvdmVyOiM2ZTZlNmU7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWNvbG9yLWRvd246IzJjMmMyYzstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LWNpcmNsZS1ib3JkZXItY29sb3ItZG93bjojNGI0YjRiOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1jb2xvci1rZXktZm9jdXM6IzBkNjZkMDstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LWNpcmNsZS1ib3JkZXItY29sb3Ita2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWNvbG9yLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLWRpc2FibGVkOiNjYWNhY2E7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWNvbG9yLXNlbGVjdGVkOiM0YjRiNGI7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkOiM2ZTZlNmU7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWNvbG9yLXNlbGVjdGVkLWhvdmVyOiMyYzJjMmM7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWhvdmVyOiM0YjRiNGI7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWNvbG9yLXNlbGVjdGVkLWRvd246IzJjMmMyYzstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LWNpcmNsZS1ib3JkZXItY29sb3Itc2VsZWN0ZWQtZG93bjojMmMyYzJjOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXM6IzBkNjZkMDstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LWNpcmNsZS1ib3JkZXItY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiNjYWNhY2E7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWNvbG9yLWVycm9yOiNjOTI1MmQ7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLWVycm9yOiNkNzM3M2Y7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWNvbG9yLWVycm9yLWhvdmVyOiNiYjEyMWE7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLWVycm9yLWhvdmVyOiNjOTI1MmQ7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWNvbG9yLWVycm9yLWRvd246I2JiMTIxYTstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LWNpcmNsZS1ib3JkZXItY29sb3ItZXJyb3ItZG93bjojYmIxMjFhOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1jb2xvci1lcnJvci1rZXktZm9jdXM6IzBkNjZkMDstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LWNpcmNsZS1ib3JkZXItY29sb3ItZXJyb3Ita2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWNvbG9yLWVycm9yLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLWVycm9yLWRpc2FibGVkOiNjYWNhY2E7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWNvbG9yLWVycm9yLXNlbGVjdGVkOiNjOTI1MmQ7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLWVycm9yLXNlbGVjdGVkOiNkNzM3M2Y7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWNvbG9yLWVycm9yLXNlbGVjdGVkLWhvdmVyOiNiYjEyMWE7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLWVycm9yLXNlbGVjdGVkLWhvdmVyOiNjOTI1MmQ7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWNvbG9yLWVycm9yLXNlbGVjdGVkLWRvd246I2JiMTIxYTstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LWNpcmNsZS1ib3JkZXItY29sb3ItZXJyb3Itc2VsZWN0ZWQtZG93bjojYmIxMjFhOy0tc3BlY3RydW0tcmFkaW8tcXVpZXQtdGV4dC1jb2xvci1lcnJvci1zZWxlY3RlZC1rZXktZm9jdXM6IzBkNjZkMDstLXNwZWN0cnVtLXJhZGlvLXF1aWV0LWNpcmNsZS1ib3JkZXItY29sb3ItZXJyb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC10ZXh0LWNvbG9yLWVycm9yLXNlbGVjdGVkLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS1yYWRpby1xdWlldC1jaXJjbGUtYm9yZGVyLWNvbG9yLWVycm9yLXNlbGVjdGVkLWRpc2FibGVkOiNjYWNhY2E7LS1zcGVjdHJ1bS1zbGlkZXItY29sb3ItaGFuZGxlLW91dHNldC1ib3JkZXItY29sb3I6cmdiYSgwLDAsMCwwLjA1KTstLXNwZWN0cnVtLXNsaWRlci1jb2xvci1oYW5kbGUtaW5zZXQtYm9yZGVyLWNvbG9yOnJnYmEoMCwwLDAsMC4wNSk7LS1zcGVjdHJ1bS1zbGlkZXItY29sb3ItaGFuZGxlLWJvcmRlci1jb2xvcjojZmZmOy0tc3BlY3RydW0tc2xpZGVyLWNvbG9yLWhhbmRsZS1jb2xvcjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLXNsaWRlci1jb2xvci10cmFjay1iYWNrZ3JvdW5kLWNvbG9yLWdyYWRpZW50LXN0YXJ0OiMyNjgwZWI7LS1zcGVjdHJ1bS1zbGlkZXItY29sb3ItdHJhY2stYmFja2dyb3VuZC1jb2xvci1ncmFkaWVudC1lbmQ6IzA5NWFiYTstLXNwZWN0cnVtLXNsaWRlci1jb2xvci10cmFjay1ib3JkZXItY29sb3I6cmdiYSgwLDAsMCwwLjA1KTstLXNwZWN0cnVtLXNsaWRlci1jb2xvci1oYW5kbGUtb3V0c2V0LWJvcmRlci1jb2xvci1rZXktZm9jdXM6cmdiYSgwLDAsMCwwLjA1KTstLXNwZWN0cnVtLXNsaWRlci1jb2xvci10cmFjay1jb2xvci1kaXNhYmxlZDojZWFlYWVhOy0tc3BlY3RydW0tc2xpZGVyLWNvbG9yLWhhbmRsZS1ib3JkZXItY29sb3ItZGlzYWJsZWQ6I2NhY2FjYTstLXNwZWN0cnVtLXNsaWRlci1jb2xvci1oYW5kbGUtY29sb3ItZGlzYWJsZWQ6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1zbGlkZXItaGFuZGxlLWJvcmRlci1jb2xvcjojNmU2ZTZlOy0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tc2xpZGVyLXRyYWNrLWNvbG9yOiNlMWUxZTE7LS1zcGVjdHJ1bS1zbGlkZXItaGFuZGxlLWJvcmRlci1jb2xvci1ob3ZlcjojNGI0YjRiOy0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tc2xpZGVyLXRyYWNrLWNvbG9yLWhvdmVyOiNlMWUxZTE7LS1zcGVjdHJ1bS1zbGlkZXItaGFuZGxlLWJvcmRlci1jb2xvci1kb3duOiM0YjRiNGI7LS1zcGVjdHJ1bS1zbGlkZXItaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZG93bjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLXNsaWRlci10cmFjay1jb2xvci1kb3duOiNlMWUxZTE7LS1zcGVjdHJ1bS1zbGlkZXItcmFkaWFsLXJlYWN0aW9uLWNvbG9yLWRvd246cmdiYSg3NSw3NSw3NSwwLjYpOy0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1ib3JkZXItY29sb3Ita2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1zbGlkZXItaGFuZGxlLWJhY2tncm91bmQtY29sb3Ita2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1zbGlkZXItdHJhY2stY29sb3Ita2V5LWZvY3VzOiNlMWUxZTE7LS1zcGVjdHJ1bS1zbGlkZXItaGFuZGxlLWJvcmRlci1jb2xvci1kaXNhYmxlZDojY2FjYWNhOy0tc3BlY3RydW0tc2xpZGVyLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWRpc2FibGVkOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tc2xpZGVyLXRyYWNrLWNvbG9yLWRpc2FibGVkOiNlMWUxZTE7LS1zcGVjdHJ1bS1zbGlkZXItZWRpdGFibGUtaGFuZGxlLWJvcmRlci1jb2xvcjojNmU2ZTZlOy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLXRyYWNrLWNvbG9yOiNlMWUxZTE7LS1zcGVjdHJ1bS1zbGlkZXItZWRpdGFibGUtaGFuZGxlLWJvcmRlci1jb2xvci1ob3ZlcjojNGI0YjRiOy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLXRyYWNrLWNvbG9yLWhvdmVyOiNlMWUxZTE7LS1zcGVjdHJ1bS1zbGlkZXItZWRpdGFibGUtaGFuZGxlLWJvcmRlci1jb2xvci1kb3duOiM0YjRiNGI7LS1zcGVjdHJ1bS1zbGlkZXItZWRpdGFibGUtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZG93bjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLXNsaWRlci1lZGl0YWJsZS10cmFjay1jb2xvci1kb3duOiNlMWUxZTE7LS1zcGVjdHJ1bS1zbGlkZXItZWRpdGFibGUtcmFkaWFsLXJlYWN0aW9uLWNvbG9yLWRvd246cmdiYSg3NSw3NSw3NSwwLjYpOy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLWhhbmRsZS1ib3JkZXItY29sb3Ita2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1zbGlkZXItZWRpdGFibGUtaGFuZGxlLWJhY2tncm91bmQtY29sb3Ita2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1zbGlkZXItZWRpdGFibGUtdHJhY2stY29sb3Ita2V5LWZvY3VzOiNlMWUxZTE7LS1zcGVjdHJ1bS1zbGlkZXItZWRpdGFibGUtaGFuZGxlLWJvcmRlci1jb2xvci1kaXNhYmxlZDojY2FjYWNhOy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWRpc2FibGVkOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tc2xpZGVyLWVkaXRhYmxlLXRyYWNrLWNvbG9yLWRpc2FibGVkOiNlMWUxZTE7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC1oYW5kbGUtYm9yZGVyLWNvbG9yOiM2ZTZlNmU7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLXNsaWRlci1maWxsLXRyYWNrLWNvbG9yOiM2ZTZlNmU7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC1oYW5kbGUtYm9yZGVyLWNvbG9yLWhvdmVyOiM0YjRiNGI7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1ob3Zlcjp0cmFuc3BhcmVudDstLXNwZWN0cnVtLXNsaWRlci1maWxsLXRyYWNrLWNvbG9yLWhvdmVyOiNlMWUxZTE7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC1oYW5kbGUtYm9yZGVyLWNvbG9yLWRvd246IzRiNGI0YjstLXNwZWN0cnVtLXNsaWRlci1maWxsLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWRvd246dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC10cmFjay1jb2xvci1kb3duOiNlMWUxZTE7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC1yYWRpYWwtcmVhY3Rpb24tY29sb3ItZG93bjpyZ2JhKDc1LDc1LDc1LDAuNik7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC1oYW5kbGUtYm9yZGVyLWNvbG9yLWtleS1mb2N1czojMjY4MGViOy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtaGFuZGxlLWJhY2tncm91bmQtY29sb3Ita2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1zbGlkZXItZmlsbC10cmFjay1jb2xvci1rZXktZm9jdXM6I2UxZTFlMTstLXNwZWN0cnVtLXNsaWRlci1maWxsLWhhbmRsZS1ib3JkZXItY29sb3ItZGlzYWJsZWQ6I2NhY2FjYTstLXNwZWN0cnVtLXNsaWRlci1maWxsLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWRpc2FibGVkOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tc2xpZGVyLWZpbGwtdHJhY2stY29sb3ItZGlzYWJsZWQ6I2UxZTFlMTstLXNwZWN0cnVtLXNsaWRlci1wbGF5ZXItdHJhY2stYnVmZmVyLWNvbG9yOiNiM2IzYjM7LS1zcGVjdHJ1bS1zbGlkZXItcGxheWVyLXRyYWNrLWJ1ZmZlci1jb2xvci1kaXNhYmxlZDojZTFlMWUxOy0tc3BlY3RydW0tc2xpZGVyLXJhbXAtdHJhY2stY29sb3ItZGlzYWJsZWQ6I2VhZWFlYTstLXNwZWN0cnVtLXNsaWRlci10aWNrLW1hcmstY29sb3I6I2UxZTFlMTstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yOiM0YjRiNGI7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvcjojOGU4ZThlOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yOiNmYWZhZmE7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3I6I2UxZTFlMTstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLWhvdmVyOiMyYzJjMmM7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1ob3ZlcjojNmU2ZTZlOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWhvdmVyOiNmYWZhZmE7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3ItaG92ZXI6I2UxZTFlMTstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLWRvd246IzJjMmMyYzstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLWNvbG9yLWRvd246IzRiNGI0YjstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1kb3duOiNmYWZhZmE7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3ItZG93bjojZTFlMWUxOy0tc3BlY3RydW0tc3dpdGNoLXRleHQtY29sb3Ita2V5LWZvY3VzOiMwZDY2ZDA7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1rZXktZm9jdXM6IzI2ODBlYjstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1rZXktZm9jdXM6I2ZhZmFmYTstLXNwZWN0cnVtLXN3aXRjaC10cmFjay1jb2xvci1rZXktZm9jdXM6I2UxZTFlMTstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1kaXNhYmxlZDojY2FjYWNhOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWRpc2FibGVkOiNmYWZhZmE7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3ItZGlzYWJsZWQ6I2UxZTFlMTstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLXNlbGVjdGVkOiM0YjRiNGI7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1zZWxlY3RlZDojMTQ3M2U2Oy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkOiNmYWZhZmE7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3Itc2VsZWN0ZWQ6IzE0NzNlNjstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLXNlbGVjdGVkLWhvdmVyOiMyYzJjMmM7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1zZWxlY3RlZC1ob3ZlcjojMGQ2NmQwOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkLWhvdmVyOiNmYWZhZmE7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3Itc2VsZWN0ZWQtaG92ZXI6IzBkNjZkMDstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLXNlbGVjdGVkLWRvd246IzJjMmMyYzstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWRvd246IzA5NWFiYTstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1zZWxlY3RlZC1kb3duOiNmYWZhZmE7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3Itc2VsZWN0ZWQtZG93bjojMDk1YWJhOy0tc3BlY3RydW0tc3dpdGNoLXRleHQtY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiMwZDY2ZDA7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiMyNjgwZWI7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiNmYWZhZmE7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXM6IzI2ODBlYjstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6I2NhY2FjYTstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiNjYWNhY2E7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6I2ZhZmFmYTstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLWVycm9yOiNjOTI1MmQ7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3ItZXJyb3I6I2Q3MzczZjstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLWNvbG9yLWVycm9yOiNkNzM3M2Y7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZXJyb3I6I2ZhZmFmYTstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLWVycm9yLWhvdmVyOiNiYjEyMWE7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3ItZXJyb3ItaG92ZXI6I2M5MjUyZDstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLWNvbG9yLWVycm9yLWhvdmVyOiNjOTI1MmQ7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZXJyb3ItaG92ZXI6I2ZhZmFmYTstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLWVycm9yLWRvd246I2JiMTIxYTstLXNwZWN0cnVtLXN3aXRjaC10cmFjay1jb2xvci1lcnJvci1kb3duOiNiYjEyMWE7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1lcnJvci1kb3duOiNiYjEyMWE7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZXJyb3ItZG93bjojZmFmYWZhOy0tc3BlY3RydW0tc3dpdGNoLXRleHQtY29sb3ItZXJyb3Ita2V5LWZvY3VzOiMwZDY2ZDA7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1lcnJvci1rZXktZm9jdXM6IzI2ODBlYjstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1lcnJvci1rZXktZm9jdXM6I2ZhZmFmYTstLXNwZWN0cnVtLXN3aXRjaC10cmFjay1jb2xvci1lcnJvci1rZXktZm9jdXM6I2UxZTFlMTstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLWVycm9yLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1lcnJvci1kaXNhYmxlZDojY2FjYWNhOy0tc3BlY3RydW0tc3dpdGNoLWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWVycm9yLWRpc2FibGVkOiNmYWZhZmE7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3ItZXJyb3ItZGlzYWJsZWQ6I2UxZTFlMTstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLWVycm9yLXNlbGVjdGVkOiNjOTI1MmQ7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3ItZXJyb3Itc2VsZWN0ZWQ6I2Q3MzczZjstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLWNvbG9yLWVycm9yLXNlbGVjdGVkOiNkNzM3M2Y7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZXJyb3Itc2VsZWN0ZWQ6I2ZhZmFmYTstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLWVycm9yLXNlbGVjdGVkLWhvdmVyOiNiYjEyMWE7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3ItZXJyb3Itc2VsZWN0ZWQtaG92ZXI6I2M5MjUyZDstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLWNvbG9yLWVycm9yLXNlbGVjdGVkLWhvdmVyOiNjOTI1MmQ7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZXJyb3Itc2VsZWN0ZWQtaG92ZXI6I2ZhZmFmYTstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLWVycm9yLXNlbGVjdGVkLWRvd246I2JiMTIxYTstLXNwZWN0cnVtLXN3aXRjaC10cmFjay1jb2xvci1lcnJvci1zZWxlY3RlZC1kb3duOiNiYjEyMWE7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1lcnJvci1zZWxlY3RlZC1kb3duOiNiYjEyMWE7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZXJyb3Itc2VsZWN0ZWQtZG93bjojZmFmYWZhOy0tc3BlY3RydW0tc3dpdGNoLXRleHQtY29sb3ItZXJyb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiMwZDY2ZDA7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJvcmRlci1jb2xvci1lcnJvci1zZWxlY3RlZC1rZXktZm9jdXM6IzI2ODBlYjstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1lcnJvci1zZWxlY3RlZC1rZXktZm9jdXM6I2ZhZmFmYTstLXNwZWN0cnVtLXN3aXRjaC10cmFjay1jb2xvci1lcnJvci1zZWxlY3RlZC1rZXktZm9jdXM6I2UxZTFlMTstLXNwZWN0cnVtLXN3aXRjaC10ZXh0LWNvbG9yLWVycm9yLXNlbGVjdGVkLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS1zd2l0Y2gtdHJhY2stY29sb3ItZXJyb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6I2NhY2FjYTstLXNwZWN0cnVtLXN3aXRjaC1oYW5kbGUtYm9yZGVyLWNvbG9yLWVycm9yLXNlbGVjdGVkLWRpc2FibGVkOiNjYWNhY2E7LS1zcGVjdHJ1bS1zd2l0Y2gtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZXJyb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6I2ZhZmFmYTstLXNwZWN0cnVtLXN3aXRjaC10cmFjay1jb2xvci1kaXNhYmxlZC1zZWxlY3RlZDojY2FjYWNhOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3I6IzRiNGI0YjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yOiM4ZThlOGU7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJhY2tncm91bmQtY29sb3I6I2ZhZmFmYTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvcjojZTFlMWUxOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3ItaG92ZXI6IzJjMmMyYzstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLWhvdmVyOiM2ZTZlNmU7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItaG92ZXI6I2ZhZmFmYTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1ob3ZlcjojZTFlMWUxOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3ItZG93bjojMmMyYzJjOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1ib3JkZXItY29sb3ItZG93bjojNGI0YjRiOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWRvd246I2ZhZmFmYTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1kb3duOiNlMWUxZTE7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdGV4dC1jb2xvci1rZXktZm9jdXM6IzBkNjZkMDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLWtleS1mb2N1czojMjY4MGViOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWtleS1mb2N1czojZmFmYWZhOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRyYWNrLWNvbG9yLWtleS1mb2N1czojZTFlMWUxOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3ItZGlzYWJsZWQ6I2IzYjNiMzstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLWRpc2FibGVkOiNjYWNhY2E7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZGlzYWJsZWQ6I2ZhZmFmYTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1kaXNhYmxlZDojZTFlMWUxOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3Itc2VsZWN0ZWQ6IzRiNGI0YjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkOiM2ZTZlNmU7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQ6I2ZhZmFmYTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1zZWxlY3RlZDojNmU2ZTZlOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3Itc2VsZWN0ZWQtaG92ZXI6IzJjMmMyYzstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWhvdmVyOiM0YjRiNGI7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJhY2tncm91bmQtY29sb3Itc2VsZWN0ZWQtaG92ZXI6I2ZhZmFmYTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1zZWxlY3RlZC1ob3ZlcjojNGI0YjRiOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3Itc2VsZWN0ZWQtZG93bjojMmMyYzJjOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1ib3JkZXItY29sb3Itc2VsZWN0ZWQtZG93bjojMmMyYzJjOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLXNlbGVjdGVkLWRvd246I2ZhZmFmYTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1zZWxlY3RlZC1kb3duOiMyYzJjMmM7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdGV4dC1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXM6IzBkNjZkMDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXM6IzI2ODBlYjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXM6I2ZhZmFmYTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1czojMjY4MGViOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6I2IzYjNiMzstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1zZWxlY3RlZC1kaXNhYmxlZDojY2FjYWNhOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1ib3JkZXItY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6I2NhY2FjYTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1zZWxlY3RlZC1kaXNhYmxlZDojZmFmYWZhOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3ItZXJyb3I6I2M5MjUyZDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1lcnJvcjojZDczNzNmOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1ib3JkZXItY29sb3ItZXJyb3I6I2Q3MzczZjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1lcnJvcjojZmFmYWZhOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3ItZXJyb3ItaG92ZXI6I2JiMTIxYTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1lcnJvci1ob3ZlcjojYzkyNTJkOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1ib3JkZXItY29sb3ItZXJyb3ItaG92ZXI6I2M5MjUyZDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1lcnJvci1ob3ZlcjojZmFmYWZhOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3ItZXJyb3ItZG93bjojYmIxMjFhOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRyYWNrLWNvbG9yLWVycm9yLWRvd246I2JiMTIxYTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLWVycm9yLWRvd246I2JiMTIxYTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1lcnJvci1kb3duOiNmYWZhZmE7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdGV4dC1jb2xvci1lcnJvci1rZXktZm9jdXM6IzBkNjZkMDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLWVycm9yLWtleS1mb2N1czojMjY4MGViOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWVycm9yLWtleS1mb2N1czojZmFmYWZhOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRyYWNrLWNvbG9yLWVycm9yLWtleS1mb2N1czojZTFlMWUxOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3ItZXJyb3ItZGlzYWJsZWQ6I2IzYjNiMzstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLWVycm9yLWRpc2FibGVkOiNjYWNhY2E7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtaGFuZGxlLWJhY2tncm91bmQtY29sb3ItZXJyb3ItZGlzYWJsZWQ6I2ZhZmFmYTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1lcnJvci1kaXNhYmxlZDojZTFlMWUxOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3ItZXJyb3Itc2VsZWN0ZWQ6I2M5MjUyZDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1lcnJvci1zZWxlY3RlZDojZDczNzNmOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1ib3JkZXItY29sb3ItZXJyb3Itc2VsZWN0ZWQ6I2Q3MzczZjstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1lcnJvci1zZWxlY3RlZDojZmFmYWZhOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3ItZXJyb3Itc2VsZWN0ZWQtaG92ZXI6I2JiMTIxYTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1lcnJvci1zZWxlY3RlZC1ob3ZlcjojYzkyNTJkOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1ib3JkZXItY29sb3ItZXJyb3Itc2VsZWN0ZWQtaG92ZXI6I2M5MjUyZDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1lcnJvci1zZWxlY3RlZC1ob3ZlcjojZmFmYWZhOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3ItZXJyb3Itc2VsZWN0ZWQtZG93bjojYmIxMjFhOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRyYWNrLWNvbG9yLWVycm9yLXNlbGVjdGVkLWRvd246I2JiMTIxYTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLWVycm9yLXNlbGVjdGVkLWRvd246I2JiMTIxYTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1lcnJvci1zZWxlY3RlZC1kb3duOiNmYWZhZmE7LS1zcGVjdHJ1bS1zd2l0Y2gtcXVpZXQtdGV4dC1jb2xvci1lcnJvci1zZWxlY3RlZC1rZXktZm9jdXM6IzBkNjZkMDstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYm9yZGVyLWNvbG9yLWVycm9yLXNlbGVjdGVkLWtleS1mb2N1czojMjY4MGViOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1iYWNrZ3JvdW5kLWNvbG9yLWVycm9yLXNlbGVjdGVkLWtleS1mb2N1czojZmFmYWZhOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRyYWNrLWNvbG9yLWVycm9yLXNlbGVjdGVkLWtleS1mb2N1czojZTFlMWUxOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRleHQtY29sb3ItZXJyb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6I2IzYjNiMzstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC10cmFjay1jb2xvci1lcnJvci1zZWxlY3RlZC1kaXNhYmxlZDojY2FjYWNhOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LWhhbmRsZS1ib3JkZXItY29sb3ItZXJyb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6I2NhY2FjYTstLXNwZWN0cnVtLXN3aXRjaC1xdWlldC1oYW5kbGUtYmFja2dyb3VuZC1jb2xvci1lcnJvci1zZWxlY3RlZC1kaXNhYmxlZDojZmFmYWZhOy0tc3BlY3RydW0tc3dpdGNoLXF1aWV0LXRyYWNrLWNvbG9yLWRpc2FibGVkLXNlbGVjdGVkOiNjYWNhY2E7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdGV4dC1jb2xvcjojNmU2ZTZlOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LWljb24tY29sb3I6IzZlNmU2ZTstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC1zZWxlY3Rpb24taW5kaWNhdG9yLWNvbG9yOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtZm9jdXMtcmluZy1jb2xvcjojMjY4MGViOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXJ1bGUtY29sb3I6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdGV4dC1jb2xvci1ob3ZlcjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LWljb24tY29sb3ItaG92ZXI6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC10ZXh0LWNvbG9yLWRvd246IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC1pY29uLWNvbG9yLWRvd246IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC10ZXh0LWNvbG9yLWtleS1mb2N1czojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LWljb24tY29sb3Ita2V5LWZvY3VzOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdGV4dC1jb2xvci1tb3VzZS1mb2N1czojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXRleHQtY29sb3ItZGlzYWJsZWQ6I2IzYjNiMzstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC1pY29uLWNvbG9yLWRpc2FibGVkOiNjYWNhY2E7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdGV4dC1jb2xvci1zZWxlY3RlZDojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LWljb24tY29sb3Itc2VsZWN0ZWQ6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC10ZXh0LWNvbG9yLXNlbGVjdGVkLWhvdmVyOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtaWNvbi1jb2xvci1zZWxlY3RlZC1ob3ZlcjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXRleHQtY29sb3Itc2VsZWN0ZWQtZG93bjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LWljb24tY29sb3Itc2VsZWN0ZWQtZG93bjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXRleHQtY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtaWNvbi1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXM6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC10ZXh0LWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtaWNvbi1jb2xvci1zZWxlY3RlZC1kaXNhYmxlZDojY2FjYWNhOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLXRleHQtY29sb3I6IzZlNmU2ZTstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC1pY29uLWNvbG9yOiM2ZTZlNmU7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtc2VsZWN0aW9uLWluZGljYXRvci1jb2xvcjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLWZvY3VzLXJpbmctY29sb3I6IzI2ODBlYjstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC1ydWxlLWNvbG9yOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLXRleHQtY29sb3ItaG92ZXI6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC1pY29uLWNvbG9yLWhvdmVyOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtdGV4dC1jb2xvci1kb3duOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtaWNvbi1jb2xvci1kb3duOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtdGV4dC1jb2xvci1rZXktZm9jdXM6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC1pY29uLWNvbG9yLWtleS1mb2N1czojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLXRleHQtY29sb3ItbW91c2UtZm9jdXM6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC10ZXh0LWNvbG9yLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtaWNvbi1jb2xvci1kaXNhYmxlZDojY2FjYWNhOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLXRleHQtY29sb3Itc2VsZWN0ZWQ6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC1pY29uLWNvbG9yLXNlbGVjdGVkOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtdGV4dC1jb2xvci1zZWxlY3RlZC1ob3ZlcjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLWljb24tY29sb3Itc2VsZWN0ZWQtaG92ZXI6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC10ZXh0LWNvbG9yLXNlbGVjdGVkLWRvd246IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC1pY29uLWNvbG9yLXNlbGVjdGVkLWRvd246IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtY29tcGFjdC12ZXJ0aWNhbC10ZXh0LWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1czojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLWljb24tY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLWNvbXBhY3QtdmVydGljYWwtdGV4dC1jb2xvci1zZWxlY3RlZC1kaXNhYmxlZDojYjNiM2IzOy0tc3BlY3RydW0tdGFicy1jb21wYWN0LXZlcnRpY2FsLWljb24tY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6I2NhY2FjYTstLXNwZWN0cnVtLXRhYnMtdGV4dC1jb2xvcjojNmU2ZTZlOy0tc3BlY3RydW0tdGFicy1pY29uLWNvbG9yOiM2ZTZlNmU7LS1zcGVjdHJ1bS10YWJzLXNlbGVjdGlvbi1pbmRpY2F0b3ItY29sb3I6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtZm9jdXMtcmluZy1jb2xvcjojMjY4MGViOy0tc3BlY3RydW0tdGFicy1ydWxlLWNvbG9yOiNlYWVhZWE7LS1zcGVjdHJ1bS10YWJzLXRleHQtY29sb3ItaG92ZXI6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtaWNvbi1jb2xvci1ob3ZlcjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy10ZXh0LWNvbG9yLWRvd246IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtaWNvbi1jb2xvci1kb3duOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXRleHQtY29sb3Ita2V5LWZvY3VzOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLWljb24tY29sb3Ita2V5LWZvY3VzOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXRleHQtY29sb3ItbW91c2UtZm9jdXM6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtdGV4dC1jb2xvci1kaXNhYmxlZDojYjNiM2IzOy0tc3BlY3RydW0tdGFicy1pY29uLWNvbG9yLWRpc2FibGVkOiNjYWNhY2E7LS1zcGVjdHJ1bS10YWJzLXRleHQtY29sb3Itc2VsZWN0ZWQ6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtaWNvbi1jb2xvci1zZWxlY3RlZDojMmMyYzJjOy0tc3BlY3RydW0tdGFicy10ZXh0LWNvbG9yLXNlbGVjdGVkLWhvdmVyOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLWljb24tY29sb3Itc2VsZWN0ZWQtaG92ZXI6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtdGV4dC1jb2xvci1zZWxlY3RlZC1kb3duOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLWljb24tY29sb3Itc2VsZWN0ZWQtZG93bjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy10ZXh0LWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1czojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1pY29uLWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1czojMmMyYzJjOy0tc3BlY3RydW0tdGFicy10ZXh0LWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS10YWJzLWljb24tY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6I2NhY2FjYTstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdGV4dC1jb2xvcjojNmU2ZTZlOy0tc3BlY3RydW0tdGFicy1xdWlldC1pY29uLWNvbG9yOiM2ZTZlNmU7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXNlbGVjdGlvbi1pbmRpY2F0b3ItY29sb3I6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtcXVpZXQtZm9jdXMtcmluZy1jb2xvcjojMjY4MGViOy0tc3BlY3RydW0tdGFicy1xdWlldC1ydWxlLWNvbG9yOnRyYW5zcGFyZW50Oy0tc3BlY3RydW0tdGFicy1xdWlldC10ZXh0LWNvbG9yLWhvdmVyOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWljb24tY29sb3ItaG92ZXI6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdGV4dC1jb2xvci1kb3duOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWljb24tY29sb3ItZG93bjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1xdWlldC10ZXh0LWNvbG9yLWtleS1mb2N1czojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1xdWlldC1pY29uLWNvbG9yLWtleS1mb2N1czojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1xdWlldC10ZXh0LWNvbG9yLW1vdXNlLWZvY3VzOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXRleHQtY29sb3ItZGlzYWJsZWQ6I2IzYjNiMzstLXNwZWN0cnVtLXRhYnMtcXVpZXQtaWNvbi1jb2xvci1kaXNhYmxlZDojY2FjYWNhOy0tc3BlY3RydW0tdGFicy1xdWlldC10ZXh0LWNvbG9yLXNlbGVjdGVkOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWljb24tY29sb3Itc2VsZWN0ZWQ6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdGV4dC1jb2xvci1zZWxlY3RlZC1ob3ZlcjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1xdWlldC1pY29uLWNvbG9yLXNlbGVjdGVkLWhvdmVyOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXRleHQtY29sb3Itc2VsZWN0ZWQtZG93bjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1xdWlldC1pY29uLWNvbG9yLXNlbGVjdGVkLWRvd246IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdGV4dC1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXM6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtcXVpZXQtaWNvbi1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXM6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdGV4dC1jb2xvci1zZWxlY3RlZC1kaXNhYmxlZDojYjNiM2IzOy0tc3BlY3RydW0tdGFicy1xdWlldC1pY29uLWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiNjYWNhY2E7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtdGV4dC1jb2xvcjojNmU2ZTZlOy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LWljb24tY29sb3I6IzZlNmU2ZTstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC1zZWxlY3Rpb24taW5kaWNhdG9yLWNvbG9yOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtZm9jdXMtcmluZy1jb2xvcjojMjY4MGViOy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LXJ1bGUtY29sb3I6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtdGV4dC1jb2xvci1ob3ZlcjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LWljb24tY29sb3ItaG92ZXI6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC10ZXh0LWNvbG9yLWRvd246IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC1pY29uLWNvbG9yLWRvd246IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC10ZXh0LWNvbG9yLWtleS1mb2N1czojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LWljb24tY29sb3Ita2V5LWZvY3VzOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtdGV4dC1jb2xvci1tb3VzZS1mb2N1czojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LXRleHQtY29sb3ItZGlzYWJsZWQ6I2IzYjNiMzstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC1pY29uLWNvbG9yLWRpc2FibGVkOiNjYWNhY2E7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtdGV4dC1jb2xvci1zZWxlY3RlZDojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LWljb24tY29sb3Itc2VsZWN0ZWQ6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC10ZXh0LWNvbG9yLXNlbGVjdGVkLWhvdmVyOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtaWNvbi1jb2xvci1zZWxlY3RlZC1ob3ZlcjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LXRleHQtY29sb3Itc2VsZWN0ZWQtZG93bjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LWljb24tY29sb3Itc2VsZWN0ZWQtZG93bjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1xdWlldC1jb21wYWN0LXRleHQtY29sb3Itc2VsZWN0ZWQta2V5LWZvY3VzOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtaWNvbi1jb2xvci1zZWxlY3RlZC1rZXktZm9jdXM6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtcXVpZXQtY29tcGFjdC10ZXh0LWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LWNvbXBhY3QtaWNvbi1jb2xvci1zZWxlY3RlZC1kaXNhYmxlZDojY2FjYWNhOy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC10ZXh0LWNvbG9yOiM2ZTZlNmU7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLWljb24tY29sb3I6IzZlNmU2ZTstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtc2VsZWN0aW9uLWluZGljYXRvci1jb2xvcjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC1mb2N1cy1yaW5nLWNvbG9yOiMyNjgwZWI7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLXJ1bGUtY29sb3I6dHJhbnNwYXJlbnQ7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLXRleHQtY29sb3ItaG92ZXI6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtaWNvbi1jb2xvci1ob3ZlcjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC10ZXh0LWNvbG9yLWRvd246IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtaWNvbi1jb2xvci1kb3duOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLXRleHQtY29sb3Ita2V5LWZvY3VzOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLWljb24tY29sb3Ita2V5LWZvY3VzOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLXRleHQtY29sb3ItbW91c2UtZm9jdXM6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtdGV4dC1jb2xvci1kaXNhYmxlZDojYjNiM2IzOy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC1pY29uLWNvbG9yLWRpc2FibGVkOiNjYWNhY2E7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLXRleHQtY29sb3Itc2VsZWN0ZWQ6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtaWNvbi1jb2xvci1zZWxlY3RlZDojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC10ZXh0LWNvbG9yLXNlbGVjdGVkLWhvdmVyOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLWljb24tY29sb3Itc2VsZWN0ZWQtaG92ZXI6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtcXVpZXQtdmVydGljYWwtdGV4dC1jb2xvci1zZWxlY3RlZC1kb3duOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLWljb24tY29sb3Itc2VsZWN0ZWQtZG93bjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC10ZXh0LWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1czojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC1pY29uLWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1czojMmMyYzJjOy0tc3BlY3RydW0tdGFicy1xdWlldC12ZXJ0aWNhbC10ZXh0LWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS10YWJzLXF1aWV0LXZlcnRpY2FsLWljb24tY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6I2NhY2FjYTstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtdGV4dC1jb2xvcjojNmU2ZTZlOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC1pY29uLWNvbG9yOiM2ZTZlNmU7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLXNlbGVjdGlvbi1pbmRpY2F0b3ItY29sb3I6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtZm9jdXMtcmluZy1jb2xvcjojMjY4MGViOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC1ydWxlLWNvbG9yOiNlYWVhZWE7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLXRleHQtY29sb3ItaG92ZXI6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtaWNvbi1jb2xvci1ob3ZlcjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC10ZXh0LWNvbG9yLWRvd246IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtaWNvbi1jb2xvci1kb3duOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLXRleHQtY29sb3Ita2V5LWZvY3VzOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLWljb24tY29sb3Ita2V5LWZvY3VzOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLXRleHQtY29sb3ItbW91c2UtZm9jdXM6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtdGV4dC1jb2xvci1kaXNhYmxlZDojYjNiM2IzOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC1pY29uLWNvbG9yLWRpc2FibGVkOiNjYWNhY2E7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLXRleHQtY29sb3Itc2VsZWN0ZWQ6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtaWNvbi1jb2xvci1zZWxlY3RlZDojMmMyYzJjOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC10ZXh0LWNvbG9yLXNlbGVjdGVkLWhvdmVyOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLWljb24tY29sb3Itc2VsZWN0ZWQtaG92ZXI6IzJjMmMyYzstLXNwZWN0cnVtLXRhYnMtdmVydGljYWwtdGV4dC1jb2xvci1zZWxlY3RlZC1kb3duOiMyYzJjMmM7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLWljb24tY29sb3Itc2VsZWN0ZWQtZG93bjojMmMyYzJjOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC10ZXh0LWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1czojMmMyYzJjOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC1pY29uLWNvbG9yLXNlbGVjdGVkLWtleS1mb2N1czojMmMyYzJjOy0tc3BlY3RydW0tdGFicy12ZXJ0aWNhbC10ZXh0LWNvbG9yLXNlbGVjdGVkLWRpc2FibGVkOiNiM2IzYjM7LS1zcGVjdHJ1bS10YWJzLXZlcnRpY2FsLWljb24tY29sb3Itc2VsZWN0ZWQtZGlzYWJsZWQ6I2NhY2FjYX06aG9zdHtkaXNwbGF5OmJsb2NrfVxuYDtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlczsiLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHsgTGl0RWxlbWVudCwgQ1NTUmVzdWx0QXJyYXksIGh0bWwsIFRlbXBsYXRlUmVzdWx0IH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuaW1wb3J0IGxpZ2h0U3R5bGVzIGZyb20gJy4vdGhlbWUtbGlnaHQuY3NzJztcblxuZXhwb3J0IGNsYXNzIFRoZW1lTGlnaHQgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgICBwdWJsaWMgc3RhdGljIGdldCBzdHlsZXMoKTogQ1NTUmVzdWx0QXJyYXkge1xuICAgICAgICByZXR1cm4gW2xpZ2h0U3R5bGVzXTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcmVuZGVyKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICAgIGA7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuY29uc3Qgc3R5bGVzID0gY3NzYFxuOmhvc3QsOnJvb3R7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLWJsYWNrOiMwMDA7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLXdoaXRlOiNmZmY7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLWJsdWU6IzE0NzNlNjstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1zdGF0aWMtZ3JheS01MDojZmZmOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXN0YXRpYy1ncmF5LTc1OiNmZmY7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLWdyYXktMTAwOiNmZmY7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLWdyYXktMjAwOiNmNGY0ZjQ7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLWdyYXktMzAwOiNlYWVhZWE7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLWdyYXktNDAwOiNkM2QzZDM7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLWdyYXktNTAwOiNiY2JjYmM7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLWdyYXktNjAwOiM5NTk1OTU7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLWdyYXktNzAwOiM3NDc0NzQ7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLWdyYXktODAwOiM1MDUwNTA7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLWdyYXktOTAwOiMzMjMyMzI7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLWJsdWUtNDAwOiMzNzhlZjA7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLWJsdWUtNTAwOiMyNjgwZWI7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLWJsdWUtNjAwOiMxNDczZTY7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLWJsdWUtNzAwOiMwZDY2ZDA7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLXJlZC00MDA6I2VjNWI2MjstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1zdGF0aWMtcmVkLTUwMDojZTM0ODUwOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXN0YXRpYy1yZWQtNjAwOiNkNzM3M2Y7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLXJlZC03MDA6I2M5MjUyZDstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1zdGF0aWMtb3JhbmdlLTQwMDojZjI5NDIzOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXN0YXRpYy1vcmFuZ2UtNTAwOiNlNjg2MTk7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLW9yYW5nZS02MDA6I2RhN2IxMTstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1zdGF0aWMtb3JhbmdlLTcwMDojY2I2ZjEwOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXN0YXRpYy1ncmVlbi00MDA6IzMzYWI4NDstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1zdGF0aWMtZ3JlZW4tNTAwOiMyZDlkNzg7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itc3RhdGljLWdyZWVuLTYwMDojMjY4ZTZjOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLXN0YXRpYy1ncmVlbi03MDA6IzEyODA1YzstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1vcGFjaXR5LTEwMDoxOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLW9wYWNpdHktOTA6MC45Oy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLW9wYWNpdHktODA6MC44Oy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLW9wYWNpdHktNjA6MC42Oy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLW9wYWNpdHktNTA6MC41Oy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLW9wYWNpdHktNDA6MC40Oy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLW9wYWNpdHktMzA6MC4zOy0tc3BlY3RydW0tZ2xvYmFsLWNvbG9yLW9wYWNpdHktMjU6MC4yNTstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1vcGFjaXR5LTIwOjAuMjstLXNwZWN0cnVtLWdsb2JhbC1jb2xvci1vcGFjaXR5LTE1OjAuMTU7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itb3BhY2l0eS0xMDowLjE7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itb3BhY2l0eS04OjAuMDg7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itb3BhY2l0eS03OjAuMDc7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itb3BhY2l0eS02OjAuMDY7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itb3BhY2l0eS01OjAuMDU7LS1zcGVjdHJ1bS1nbG9iYWwtY29sb3Itb3BhY2l0eS00OjAuMDQ7LS1zcGVjdHJ1bS1nbG9iYWwtZm9udC1mYW1pbHktYmFzZTphZG9iZS1jbGVhbixcIlNvdXJjZSBTYW5zIFByb1wiLC1hcHBsZS1zeXN0ZW0sQmxpbmtNYWNTeXN0ZW1Gb250LFwiU2Vnb2UgVUlcIixSb2JvdG8sVWJ1bnR1LFwiVHJlYnVjaGV0IE1TXCIsXCJMdWNpZGEgR3JhbmRlXCIsc2Fucy1zZXJpZjstLXNwZWN0cnVtLWdsb2JhbC1mb250LWZhbWlseS1zZXJpZjphZG9iZS1jbGVhbi1zZXJpZixcIlNvdXJjZSBTZXJpZiBQcm9cIixHZW9yZ2lhLHNlcmlmOy0tc3BlY3RydW0tZ2xvYmFsLWZvbnQtZmFtaWx5LWNvZGU6XCJTb3VyY2UgQ29kZSBQcm9cIixNb25hY28sbW9ub3NwYWNlOy0tc3BlY3RydW0tZ2xvYmFsLWZvbnQtd2VpZ2h0LXRoaW46MTAwOy0tc3BlY3RydW0tZ2xvYmFsLWZvbnQtd2VpZ2h0LXVsdHJhLWxpZ2h0OjIwMDstLXNwZWN0cnVtLWdsb2JhbC1mb250LXdlaWdodC1saWdodDozMDA7LS1zcGVjdHJ1bS1nbG9iYWwtZm9udC13ZWlnaHQtcmVndWxhcjo0MDA7LS1zcGVjdHJ1bS1nbG9iYWwtZm9udC13ZWlnaHQtbWVkaXVtOjUwMDstLXNwZWN0cnVtLWdsb2JhbC1mb250LXdlaWdodC1zZW1pLWJvbGQ6NjAwOy0tc3BlY3RydW0tZ2xvYmFsLWZvbnQtd2VpZ2h0LWJvbGQ6NzAwOy0tc3BlY3RydW0tZ2xvYmFsLWZvbnQtd2VpZ2h0LWV4dHJhLWJvbGQ6ODAwOy0tc3BlY3RydW0tZ2xvYmFsLWZvbnQtd2VpZ2h0LWJsYWNrOjkwMDstLXNwZWN0cnVtLWdsb2JhbC1mb250LXN0eWxlLXJlZ3VsYXI6bm9ybWFsOy0tc3BlY3RydW0tZ2xvYmFsLWZvbnQtc3R5bGUtaXRhbGljOml0YWxpYzstLXNwZWN0cnVtLWdsb2JhbC1mb250LWxldHRlci1zcGFjaW5nLW5vbmU6MDstLXNwZWN0cnVtLWdsb2JhbC1mb250LWxldHRlci1zcGFjaW5nLXNtYWxsOjAuMDEyNWVtOy0tc3BlY3RydW0tZ2xvYmFsLWZvbnQtbGV0dGVyLXNwYWNpbmctaGFuOjAuMDVlbTstLXNwZWN0cnVtLWdsb2JhbC1mb250LWxldHRlci1zcGFjaW5nLW1lZGl1bTowLjA2ZW07LS1zcGVjdHJ1bS1nbG9iYWwtZm9udC1saW5lLWhlaWdodC1sYXJnZToxLjc7LS1zcGVjdHJ1bS1nbG9iYWwtZm9udC1saW5lLWhlaWdodC1tZWRpdW06MS41Oy0tc3BlY3RydW0tZ2xvYmFsLWZvbnQtbGluZS1oZWlnaHQtc21hbGw6MS4zOy0tc3BlY3RydW0tZ2xvYmFsLWZvbnQtbXVsdGlwbGllci0yNTowLjI1ZW07LS1zcGVjdHJ1bS1nbG9iYWwtZm9udC1tdWx0aXBsaWVyLTc1OjAuNzVlbTstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc3RhdGljLXNpemUtMDowcHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1zaXplLTEwOjFweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc3RhdGljLXNpemUtMjU6MnB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zdGF0aWMtc2l6ZS01MDo0cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1zaXplLTQwOjNweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc3RhdGljLXNpemUtNjU6NXB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zdGF0aWMtc2l6ZS0xMDA6OHB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zdGF0aWMtc2l6ZS0xMTU6OXB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zdGF0aWMtc2l6ZS0xMjU6MTBweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc3RhdGljLXNpemUtMTUwOjEycHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1zaXplLTE3NToxNHB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zdGF0aWMtc2l6ZS0yMDA6MTZweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc3RhdGljLXNpemUtMjI1OjE4cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1zaXplLTI1MDoyMHB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zdGF0aWMtc2l6ZS0zMDA6MjRweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc3RhdGljLXNpemUtNDAwOjMycHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1zaXplLTQ1MDozNnB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zdGF0aWMtc2l6ZS01MDA6NDBweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc3RhdGljLXNpemUtNTUwOjQ0cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1zaXplLTYwMDo0OHB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zdGF0aWMtc2l6ZS03MDA6NTZweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc3RhdGljLXNpemUtODAwOjY0cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1zaXplLTkwMDo3MnB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zdGF0aWMtc2l6ZS0xMDAwOjgwcHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1zaXplLTEyMDA6OTZweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc3RhdGljLXNpemUtMTcwMDoxMzZweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc3RhdGljLXNpemUtMjQwMDoxOTJweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc3RhdGljLXNpemUtMjYwMDoyMDhweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc3RhdGljLXNpemUtMzQwMDoyNzJweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc3RhdGljLXNpemUtMzYwMDoyODhweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc3RhdGljLXNpemUtNDYwMDozNjhweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc3RhdGljLXNpemUtNTAwMDo0MDBweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc3RhdGljLXNpemUtNjAwMDo0ODBweDstLXNwZWN0cnVtLWdsb2JhbC1kaW1lbnNpb24tc3RhdGljLWZvbnQtc2l6ZS01MDoxMXB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zdGF0aWMtZm9udC1zaXplLTc1OjEycHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1mb250LXNpemUtMTAwOjE0cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1mb250LXNpemUtMTUwOjE1cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1mb250LXNpemUtMjAwOjE2cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1mb250LXNpemUtMzAwOjE4cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1mb250LXNpemUtNDAwOjIwcHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1mb250LXNpemUtNTAwOjIycHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1mb250LXNpemUtNjAwOjI1cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1mb250LXNpemUtNzAwOjI4cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1mb250LXNpemUtODAwOjMycHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1mb250LXNpemUtOTAwOjM2cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1mb250LXNpemUtMTAwMDo0MHB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zdGF0aWMtcGVyY2VudC01MDo1MCU7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1wZXJjZW50LTEwMDoxMDAlOy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zdGF0aWMtYnJlYWtwb2ludC14c21hbGw6MzA0cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1icmVha3BvaW50LXNtYWxsOjc2OHB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zdGF0aWMtYnJlYWtwb2ludC1tZWRpdW06MTI4MHB4Oy0tc3BlY3RydW0tZ2xvYmFsLWRpbWVuc2lvbi1zdGF0aWMtYnJlYWtwb2ludC1sYXJnZToxNzY4cHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1icmVha3BvaW50LXhsYXJnZToyMTYwcHg7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1ncmlkLWNvbHVtbnM6MTI7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1ncmlkLWZsdWlkLXdpZHRoOjEwMCU7LS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXN0YXRpYy1ncmlkLWZpeGVkLW1heC13aWR0aDoxMjgwcHg7LS1zcGVjdHJ1bS1nbG9iYWwtYW5pbWF0aW9uLWR1cmF0aW9uLTA6MG1zOy0tc3BlY3RydW0tZ2xvYmFsLWFuaW1hdGlvbi1kdXJhdGlvbi0xMDA6MTMwbXM7LS1zcGVjdHJ1bS1nbG9iYWwtYW5pbWF0aW9uLWR1cmF0aW9uLTIwMDoxNjBtczstLXNwZWN0cnVtLWdsb2JhbC1hbmltYXRpb24tZHVyYXRpb24tMzAwOjE5MG1zOy0tc3BlY3RydW0tZ2xvYmFsLWFuaW1hdGlvbi1kdXJhdGlvbi00MDA6MjIwbXM7LS1zcGVjdHJ1bS1nbG9iYWwtYW5pbWF0aW9uLWR1cmF0aW9uLTUwMDoyNTBtczstLXNwZWN0cnVtLWdsb2JhbC1hbmltYXRpb24tZHVyYXRpb24tNjAwOjMwMG1zOy0tc3BlY3RydW0tZ2xvYmFsLWFuaW1hdGlvbi1kdXJhdGlvbi03MDA6MzUwbXM7LS1zcGVjdHJ1bS1nbG9iYWwtYW5pbWF0aW9uLWR1cmF0aW9uLTgwMDo0MDBtczstLXNwZWN0cnVtLWdsb2JhbC1hbmltYXRpb24tZHVyYXRpb24tOTAwOjQ1MG1zOy0tc3BlY3RydW0tZ2xvYmFsLWFuaW1hdGlvbi1kdXJhdGlvbi0xMDAwOjUwMG1zOy0tc3BlY3RydW0tZ2xvYmFsLWFuaW1hdGlvbi1kdXJhdGlvbi0yMDAwOjEwMDBtczstLXNwZWN0cnVtLWdsb2JhbC1hbmltYXRpb24tZHVyYXRpb24tNDAwMDoyMDAwbXM7LS1zcGVjdHJ1bS1nbG9iYWwtYW5pbWF0aW9uLWVhc2UtaW4tb3V0OigwLjQ1LDAsMC40LDEpOy0tc3BlY3RydW0tZ2xvYmFsLWFuaW1hdGlvbi1lYXNlLWluOigwLjUsMCwxLDEpOy0tc3BlY3RydW0tZ2xvYmFsLWFuaW1hdGlvbi1lYXNlLW91dDooMCwwLDAuNCwxKTstLXNwZWN0cnVtLWdsb2JhbC1hbmltYXRpb24tbGluZWFyOigwLDAsMSwxKTtmb250LWZhbWlseTp2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZm9udC1mYW1pbHktYmFzZSk7Zm9udC1zaXplOnZhcigtLXNwZWN0cnVtLWFsaWFzLWZvbnQtc2l6ZS1kZWZhdWx0KTstLXNwZWN0cnVtLWZvbnQtZmFsbGJhY2tzLXNhbnM6LWFwcGxlLXN5c3RlbSxCbGlua01hY1N5c3RlbUZvbnQsXCJTZWdvZSBVSVwiLFJvYm90byxzYW5zLXNlcmlmOy0tc3BlY3RydW0tZm9udC1mYWxsYmFja3Mtc2VyaWY6c2VyaWY7LS1zcGVjdHJ1bS1mb250LWZhbGxiYWNrcy1tb25vOm1vbm9zcGFjZTstLXNwZWN0cnVtLWZvbnQtZmFtaWx5LWFyOm15cmlhZC1hcmFiaWMsdmFyKC0tc3BlY3RydW0tZm9udC1mYWxsYmFja3Mtc2Fucyk7LS1zcGVjdHJ1bS1mb250LWZhbWlseS1hcnRpY2xlOmFkb2JlLWNsZWFuLXNlcmlmLFwiU291cmNlIFNlcmlmXCIsdmFyKC0tc3BlY3RydW0tZm9udC1mYWxsYmFja3Mtc2VyaWYpOy0tc3BlY3RydW0tZm9udC1mYW1pbHktYXJ0aWNsZS1hcjphZG9iZS1hcmFiaWMsdmFyKC0tc3BlY3RydW0tZm9udC1mYWxsYmFja3Mtc2VyaWYpOy0tc3BlY3RydW0tZm9udC1mYW1pbHktYXJ0aWNsZS1oZTphZG9iZS1oZWJyZXcsdmFyKC0tc3BlY3RydW0tZm9udC1mYWxsYmFja3Mtc2VyaWYpOy0tc3BlY3RydW0tZm9udC1mYW1pbHktYXJ0aWNsZS1qYTpzb3VyY2UtaGFuLXNlcmlmLWphcGFuZXNlLHZhcigtLXNwZWN0cnVtLWZvbnQtZmFsbGJhY2tzLXNlcmlmKTstLXNwZWN0cnVtLWZvbnQtZmFtaWx5LWFydGljbGUta286c291cmNlLWhhbi1zZXJpZi1rb3JlYW4sdmFyKC0tc3BlY3RydW0tZm9udC1mYWxsYmFja3Mtc2VyaWYpOy0tc3BlY3RydW0tZm9udC1mYW1pbHktYXJ0aWNsZS16aC1oYW5zOnNvdXJjZS1oYW4tc2VyaWYtc2MsdmFyKC0tc3BlY3RydW0tZm9udC1mYWxsYmFja3Mtc2VyaWYpOy0tc3BlY3RydW0tZm9udC1mYW1pbHktYXJ0aWNsZS16aC1oYW50OnNvdXJjZS1oYW4tc2VyaWYtdGMsdmFyKC0tc3BlY3RydW0tZm9udC1mYWxsYmFja3Mtc2VyaWYpOy0tc3BlY3RydW0tZm9udC1mYW1pbHktYmFzZTphZG9iZS1jbGVhbixcIlNvdXJjZSBTYW5zIFByb1wiLHZhcigtLXNwZWN0cnVtLWZvbnQtZmFsbGJhY2tzLXNhbnMpOy0tc3BlY3RydW0tZm9udC1mYW1pbHktY29kZTpzb3VyY2UtY29kZS1wcm8sXCJTb3VyY2UgQ29kZSBQcm9cIix2YXIoLS1zcGVjdHJ1bS1mb250LWZhbGxiYWNrcy1tb25vKTstLXNwZWN0cnVtLWZvbnQtZmFtaWx5LWhhbjphZG9iZS1jbGVhbi1oYW4tamFwYW5lc2UsdmFyKC0tc3BlY3RydW0tZm9udC1mYWxsYmFja3Mtc2Fucyk7LS1zcGVjdHJ1bS1mb250LWZhbWlseS1oZTp2YXIoLS1zcGVjdHJ1bS1mb250LWZhbGxiYWNrcy1zYW5zKTstLXNwZWN0cnVtLWZvbnQtZmFtaWx5LXpoOnZhcigtLXNwZWN0cnVtLWZvbnQtZmFtaWx5LWhhbik7LS1zcGVjdHJ1bS1mb250LWZhbWlseS16aGhhbnM6dmFyKC0tc3BlY3RydW0tZm9udC1mYW1pbHktaGFuKTstLXNwZWN0cnVtLWZvbnQtZmFtaWx5LWtvOnZhcigtLXNwZWN0cnVtLWZvbnQtZmFtaWx5LWhhbik7LS1zcGVjdHJ1bS1mb250LWZhbWlseS1qYTp2YXIoLS1zcGVjdHJ1bS1mb250LWZhbWlseS1oYW4pOy0tc3BlY3RydW0tZm9udC1mYW1pbHktY29uZGVuc2VkOmFkb2JlLWNsZWFuLWNvbmRlbnNlZCx2YXIoLS1zcGVjdHJ1bS1mb250LWZhbWlseS1iYXNlKTstLXNwZWN0cnVtLXRleHQtc2l6ZTp2YXIoLS1zcGVjdHJ1bS1hbGlhcy1mb250LXNpemUtZGVmYXVsdCk7LS1zcGVjdHJ1bS10ZXh0LWJvZHktbGluZS1oZWlnaHQ6dmFyKC0tc3BlY3RydW0tYWxpYXMtbGluZS1oZWlnaHQtbWVkaXVtKTstLXNwZWN0cnVtLXRleHQtc2l6ZS10ZXh0LWxhYmVsOnZhcigtLXNwZWN0cnVtLWxhYmVsLXRleHQtc2l6ZSk7LS1zcGVjdHJ1bS1saW5lLWhlaWdodC10ZXh0LWxhYmVsOnZhcigtLXNwZWN0cnVtLWxhYmVsLXRleHQtbGluZS1oZWlnaHQpfTpob3N0e3Bvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2t9I3NjYWxlLCN0aGVtZXt3aWR0aDoxMDAlO2hlaWdodDoxMDAlfVxuYDtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlczsiLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHtcbiAgICBMaXRFbGVtZW50LFxuICAgIENTU1Jlc3VsdEFycmF5LFxuICAgIGh0bWwsXG4gICAgVGVtcGxhdGVSZXN1bHQsXG4gICAgcHJvcGVydHksXG59IGZyb20gJ2xpdC1lbGVtZW50JztcbmltcG9ydCBjb21tb25TdHlsZXMgZnJvbSAnLi90aGVtZS5jc3MnO1xuXG5leHBvcnQgY2xhc3MgVGhlbWUgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgICAvKipcbiAgICAgKiBUaGUgY29sb3IgdGhlbWUgdG8gYXBwbHkgdG8gU3BlY3RydW0gY29udHJvbHNcbiAgICAgKi9cbiAgICBAcHJvcGVydHkoeyByZWZsZWN0OiB0cnVlIH0pXG4gICAgcHVibGljIGNvbG9yOiAnbGlnaHQnIHwgJ2RhcmsnID0gJ2xpZ2h0JztcblxuICAgIC8qKlxuICAgICAqIFRoZSBzY2FsZSB0byBhcHBseSB0byBTcGVjdHJ1bSBjb250cm9scy4gQ3VycmVudGx5IG9ubHkgbWVkaXVtIGlzIHN1cHBvcnRlZFxuICAgICAqL1xuICAgIEBwcm9wZXJ0eSh7IHJlZmxlY3Q6IHRydWUgfSlcbiAgICBwdWJsaWMgc2NhbGU6ICdtZWRpdW0nID0gJ21lZGl1bSc7XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldCBzdHlsZXMoKTogQ1NTUmVzdWx0QXJyYXkge1xuICAgICAgICByZXR1cm4gW2NvbW1vblN0eWxlc107XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJUaGVtZShjaGlsZHJlbjogVGVtcGxhdGVSZXN1bHQpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIGlmICh0aGlzLmNvbG9yID09PSAnbGlnaHQnKSB7XG4gICAgICAgICAgICByZXN1bHQgPSBodG1sYFxuICAgICAgICAgICAgICAgIDxzcC10aGVtZS1saWdodCBpZD1cInRoZW1lXCI+JHtjaGlsZHJlbn08L3NwLXRoZW1lLWxpZ2h0PlxuICAgICAgICAgICAgYDtcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLmNvbG9yID09PSAnZGFyaycpIHtcbiAgICAgICAgICAgIHJlc3VsdCA9IGh0bWxgXG4gICAgICAgICAgICAgICAgPHNwLXRoZW1lLWRhcmsgaWQ9XCJ0aGVtZVwiPiR7Y2hpbGRyZW59PC9zcC10aGVtZS1kYXJrPlxuICAgICAgICAgICAgYDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgVW5rbm93biBjb2xvciAke3RoaXMuY29sb3J9IGZvciBzcC10aGVtZWApO1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY3VzdG9tRWxlbWVudHMuZ2V0KGBzcC10aGVtZS0ke3RoaXMuY29sb3J9YCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICBgVGhlbWUgY29tcG9uZW50IHNwLXRoZW1lLSR7dGhpcy5jb2xvcn0gaGFzIG5vdCBiZWVuIHJlZ2lzdGVyZWRgXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSByZW5kZXJTY2FsZShjaGlsZHJlbjogVGVtcGxhdGVSZXN1bHQpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgICAgIGxldCByZXN1bHQ7XG4gICAgICAgIGlmICh0aGlzLnNjYWxlID09PSAnbWVkaXVtJykge1xuICAgICAgICAgICAgcmVzdWx0ID0gaHRtbGBcbiAgICAgICAgICAgICAgICA8c3Atc2NhbGUtbWVkaXVtIGlkPVwic2NhbGVcIj4ke2NoaWxkcmVufTwvc3Atc2NhbGUtbWVkaXVtPlxuICAgICAgICAgICAgYDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihgVW5rbm93biBzY2FsZSAke3RoaXMuc2NhbGV9IGZvciBzcC10aGVtZWApO1xuICAgICAgICAgICAgcmV0dXJuIGNoaWxkcmVuO1xuICAgICAgICB9XG4gICAgICAgIGlmICghY3VzdG9tRWxlbWVudHMuZ2V0KGBzcC10aGVtZS0ke3RoaXMuY29sb3J9YCkpIHtcbiAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICBgVGhlbWUgY29tcG9uZW50IHNwLXNjYWxlLSR7dGhpcy5zY2FsZX0gaGFzIG5vdCBiZWVuIHJlZ2lzdGVyZWRgXG4gICAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHJlbmRlcigpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgICAgIHJldHVybiB0aGlzLnJlbmRlclRoZW1lKFxuICAgICAgICAgICAgdGhpcy5yZW5kZXJTY2FsZShcbiAgICAgICAgICAgICAgICBodG1sYFxuICAgICAgICAgICAgICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICAgICAgICAgICAgYFxuICAgICAgICAgICAgKVxuICAgICAgICApO1xuICAgIH1cbn1cbiIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuZXhwb3J0ICogZnJvbSAnLi90aGVtZS1kYXJrJztcbmV4cG9ydCAqIGZyb20gJy4vc2NhbGUtbWVkaXVtJztcblxuaW1wb3J0IHsgVGhlbWVEYXJrIH0gZnJvbSAnLi90aGVtZS1kYXJrJztcbmltcG9ydCB7IFRoZW1lTGlnaHQgfSBmcm9tICcuL3RoZW1lLWxpZ2h0JztcbmltcG9ydCB7IFNjYWxlTWVkaXVtIH0gZnJvbSAnLi9zY2FsZS1tZWRpdW0nO1xuaW1wb3J0IHsgVGhlbWUgfSBmcm9tICcuL3RoZW1lJztcblxuaWYgKCFjdXN0b21FbGVtZW50cy5nZXQoJ3NwLXRoZW1lLWRhcmsnKSkge1xuICAgIGN1c3RvbUVsZW1lbnRzLmRlZmluZSgnc3AtdGhlbWUtZGFyaycsIFRoZW1lRGFyayk7XG59XG5cbmlmICghY3VzdG9tRWxlbWVudHMuZ2V0KCdzcC10aGVtZS1saWdodCcpKSB7XG4gICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKCdzcC10aGVtZS1saWdodCcsIFRoZW1lTGlnaHQpO1xufVxuXG5pZiAoIWN1c3RvbUVsZW1lbnRzLmdldCgnc3Atc2NhbGUtbWVkaXVtJykpIHtcbiAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ3NwLXNjYWxlLW1lZGl1bScsIFNjYWxlTWVkaXVtKTtcbn1cblxuaWYgKCFjdXN0b21FbGVtZW50cy5nZXQoJ3NwLXRoZW1lJykpIHtcbiAgICBjdXN0b21FbGVtZW50cy5kZWZpbmUoJ3NwLXRoZW1lJywgVGhlbWUpO1xufVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgaW50ZXJmYWNlIEhUTUxFbGVtZW50VGFnTmFtZU1hcCB7XG4gICAgICAgICdzcC10aGVtZS1kYXJrJzogVGhlbWVEYXJrO1xuICAgICAgICAnc3AtdGhlbWUtbGlnaHQnOiBUaGVtZUxpZ2h0O1xuICAgICAgICAnc3Atc2NhbGUtbWVkaXVtJzogU2NhbGVNZWRpdW07XG4gICAgICAgICdzcC10aGVtZSc6IFRoZW1lO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmNvbnN0IHN0eWxlcyA9IGNzc2Bcbjpob3N0e2Rpc3BsYXk6ZmxleDtmbGV4LWRpcmVjdGlvbjpjb2x1bW47d2lkdGg6MTAwJTtoZWlnaHQ6MTAwJX0jb3ZlcmxheXt6LWluZGV4OjI7cG9zaXRpb246YWJzb2x1dGU7ZGlzcGxheTpub25lO29wYWNpdHk6MDtiYWNrZ3JvdW5kOnJlZH0jb3ZlcmxheVthY3RpdmVde2Rpc3BsYXk6YmxvY2t9I292ZXJsYXlbdmlzaWJsZV17b3BhY2l0eToxO3RyYW5zZm9ybTp0cmFuc2xhdGUoMCkhaW1wb3J0YW50O3Zpc2liaWxpdHk6dmlzaWJsZTtwb2ludGVyLWV2ZW50czphbGw7dHJhbnNpdGlvbjp0cmFuc2Zvcm0gdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWFuaW1hdGlvbi1kdXJhdGlvbi0xMDApIGVhc2UtaW4tb3V0LG9wYWNpdHkgdmFyKC0tc3BlY3RydW0tZ2xvYmFsLWFuaW1hdGlvbi1kdXJhdGlvbi0xMDApIGVhc2UtaW4tb3V0LHZpc2liaWxpdHkgMG1zIGxpbmVhciB2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtYW5pbWF0aW9uLWR1cmF0aW9uLTEwMCl9Omhvc3QoW3BsYWNlbWVudD10b3BdKSAjb3ZlcmxheXt0cmFuc2Zvcm06dHJhbnNsYXRlWSg2cHgpfTpob3N0KFtwbGFjZW1lbnQ9cmlnaHRdKSAjb3ZlcmxheXt0cmFuc2Zvcm06dHJhbnNsYXRlKC02cHgpfTpob3N0KFtwbGFjZW1lbnQ9Ym90dG9tXSkgI292ZXJsYXl7dHJhbnNmb3JtOnRyYW5zbGF0ZVkoLTZweCl9Omhvc3QoW3BsYWNlbWVudD1sZWZ0XSkgI292ZXJsYXl7dHJhbnNmb3JtOnRyYW5zbGF0ZSg2cHgpfVxuYDtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlczsiLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuLy8gQm9ycm93ZWQgZnJvbSByZWFjdC1zcGVjdHJ1bSBwcm9qZWN0XG5cbmludGVyZmFjZSBTY3JvbGwge1xuICAgIHRvcDogbnVtYmVyO1xuICAgIGxlZnQ6IG51bWJlcjtcbiAgICBbaW5kZXg6IHN0cmluZ106IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIENvbnRhaW5lckRpbWVuc2lvbnMge1xuICAgIHdpZHRoOiBudW1iZXI7XG4gICAgaGVpZ2h0OiBudW1iZXI7XG4gICAgc2Nyb2xsOiBTY3JvbGw7XG4gICAgdG9wOiBudW1iZXI7XG4gICAgbGVmdDogbnVtYmVyO1xuICAgIFtpbmRleDogc3RyaW5nXTogbnVtYmVyIHwgU2Nyb2xsO1xufVxuXG5pbnRlcmZhY2UgT2Zmc2V0IHtcbiAgICBib3R0b206IG51bWJlcjtcbiAgICBoZWlnaHQ6IG51bWJlcjtcbiAgICBsZWZ0OiBudW1iZXI7XG4gICAgcmlnaHQ6IG51bWJlcjtcbiAgICB0b3A6IG51bWJlcjtcbiAgICB3aWR0aDogbnVtYmVyO1xuICAgIHg6IG51bWJlcjtcbiAgICB5OiBudW1iZXI7XG4gICAgW2luZGV4OiBzdHJpbmddOiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBQbGFjZW1lbnRJbmZvIHtcbiAgICBheGlzOiBzdHJpbmc7XG4gICAgY3Jvc3NBeGlzOiBzdHJpbmc7XG4gICAgY3Jvc3NQbGFjZW1lbnQ6IHN0cmluZztcbiAgICBjcm9zc1NpemU6IHN0cmluZztcbiAgICBzaXplOiBzdHJpbmc7XG4gICAgcGxhY2VtZW50OiBzdHJpbmc7XG59XG5cbmludGVyZmFjZSBNYXJnaW5zIHtcbiAgICB0b3A6IG51bWJlcjtcbiAgICBib3R0b206IG51bWJlcjtcbiAgICBsZWZ0OiBudW1iZXI7XG4gICAgcmlnaHQ6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIFBvc2l0aW9uIHtcbiAgICB0b3A6IG51bWJlcjtcbiAgICBib3R0b206IG51bWJlcjtcbiAgICBsZWZ0OiBudW1iZXI7XG4gICAgcmlnaHQ6IG51bWJlcjtcbiAgICBbaW5kZXg6IHN0cmluZ106IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIFBvc3NpYmxlUG9zaXRpb24ge1xuICAgIHRvcDogbnVtYmVyIHwgbnVsbDtcbiAgICBib3R0b206IG51bWJlciB8IG51bGw7XG4gICAgbGVmdDogbnVtYmVyIHwgbnVsbDtcbiAgICByaWdodDogbnVtYmVyIHwgbnVsbDtcbiAgICBbaW5kZXg6IHN0cmluZ106IG51bWJlciB8IG51bGw7XG59XG5cbmludGVyZmFjZSBQYXJzZWRQbGFjZW1lbnRDYWNoZSB7XG4gICAgW3Byb3BOYW1lOiBzdHJpbmddOiBQbGFjZW1lbnRJbmZvO1xufVxuXG5pbnRlcmZhY2UgRGlyZWN0aW9uTWFwIHtcbiAgICBsZWZ0OiBzdHJpbmc7XG4gICAgdG9wOiBzdHJpbmc7XG4gICAgcmlnaHQ6IHN0cmluZztcbiAgICBib3R0b206IHN0cmluZztcbiAgICBbaW5kZXg6IHN0cmluZ106IHN0cmluZztcbn1cblxuaW50ZXJmYWNlIE9yaWVudGF0aW9uTWFwIHtcbiAgICB0b3A6IHN0cmluZztcbiAgICBsZWZ0OiBzdHJpbmc7XG4gICAgW2luZGV4OiBzdHJpbmddOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgUG9zaXRpb25SZXN1bHQge1xuICAgIGFycm93T2Zmc2V0TGVmdDogbnVtYmVyO1xuICAgIGFycm93T2Zmc2V0VG9wOiBudW1iZXI7XG4gICAgbWF4SGVpZ2h0OiBudW1iZXI7XG4gICAgcGxhY2VtZW50OiBzdHJpbmc7XG4gICAgcG9zaXRpb25MZWZ0OiBudW1iZXI7XG4gICAgcG9zaXRpb25Ub3A6IG51bWJlcjtcbn1cblxuY29uc3QgQVhJUzogRGlyZWN0aW9uTWFwID0ge1xuICAgIGJvdHRvbTogJ3RvcCcsXG4gICAgbGVmdDogJ2xlZnQnLFxuICAgIHJpZ2h0OiAnbGVmdCcsXG4gICAgdG9wOiAndG9wJyxcbn07XG5cbmNvbnN0IEZMSVBQRURfRElSRUNUSU9OOiBEaXJlY3Rpb25NYXAgPSB7XG4gICAgYm90dG9tOiAndG9wJyxcbiAgICBsZWZ0OiAncmlnaHQnLFxuICAgIHJpZ2h0OiAnbGVmdCcsXG4gICAgdG9wOiAnYm90dG9tJyxcbn07XG5cbmNvbnN0IENST1NTX0FYSVM6IE9yaWVudGF0aW9uTWFwID0ge1xuICAgIGxlZnQ6ICd0b3AnLFxuICAgIHRvcDogJ2xlZnQnLFxufTtcblxuY29uc3QgQVhJU19TSVpFOiBPcmllbnRhdGlvbk1hcCA9IHtcbiAgICBsZWZ0OiAnd2lkdGgnLFxuICAgIHRvcDogJ2hlaWdodCcsXG59O1xuXG5jb25zdCBQQVJTRURfUExBQ0VNRU5UX0NBQ0hFOiBQYXJzZWRQbGFjZW1lbnRDYWNoZSA9IHt9O1xuXG5mdW5jdGlvbiBnZXRDb250YWluZXJEaW1lbnNpb25zKFxuICAgIGNvbnRhaW5lckRPTU5vZGU6IEVsZW1lbnRcbik6IENvbnRhaW5lckRpbWVuc2lvbnMge1xuICAgIGxldCB3aWR0aDtcbiAgICBsZXQgaGVpZ2h0O1xuICAgIGxldCB0b3AgPSAwO1xuICAgIGxldCBsZWZ0ID0gMDtcbiAgICBjb25zdCBzY3JvbGw6IFNjcm9sbCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cbiAgICBpZiAoY29udGFpbmVyRE9NTm9kZS50YWdOYW1lID09PSAnQk9EWScpIHtcbiAgICAgICAgd2lkdGggPSB3aW5kb3cuaW5uZXJXaWR0aDtcbiAgICAgICAgaGVpZ2h0ID0gd2luZG93LmlubmVySGVpZ2h0O1xuXG4gICAgICAgIGlmIChjb250YWluZXJET01Ob2RlLm93bmVyRG9jdW1lbnQpIHtcbiAgICAgICAgICAgIHNjcm9sbC50b3AgPVxuICAgICAgICAgICAgICAgIGNvbnRhaW5lckRPTU5vZGUub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsVG9wO1xuICAgICAgICAgICAgc2Nyb2xsLmxlZnQgPVxuICAgICAgICAgICAgICAgIGNvbnRhaW5lckRPTU5vZGUub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsTGVmdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHNjcm9sbC50b3AgPSBjb250YWluZXJET01Ob2RlLnNjcm9sbFRvcDtcbiAgICAgICAgICAgIHNjcm9sbC5sZWZ0ID0gY29udGFpbmVyRE9NTm9kZS5zY3JvbGxMZWZ0O1xuICAgICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgICAgKHtcbiAgICAgICAgICAgIHdpZHRoLFxuICAgICAgICAgICAgaGVpZ2h0LFxuICAgICAgICAgICAgdG9wLFxuICAgICAgICAgICAgbGVmdCxcbiAgICAgICAgfSA9IGNvbnRhaW5lckRPTU5vZGUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgYXMgRE9NUmVjdCk7XG4gICAgICAgIHNjcm9sbC50b3AgPSBjb250YWluZXJET01Ob2RlLnNjcm9sbFRvcDtcbiAgICAgICAgc2Nyb2xsLmxlZnQgPSBjb250YWluZXJET01Ob2RlLnNjcm9sbExlZnQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHsgd2lkdGgsIGhlaWdodCwgc2Nyb2xsLCB0b3AsIGxlZnQgfTtcbn1cblxuZnVuY3Rpb24gZ2V0RGVsdGEoXG4gICAgYXhpczogc3RyaW5nLFxuICAgIG9mZnNldDogbnVtYmVyLFxuICAgIHNpemU6IG51bWJlcixcbiAgICBjb250YWluZXJEaW1lbnNpb25zOiBDb250YWluZXJEaW1lbnNpb25zLFxuICAgIHBhZGRpbmc6IG51bWJlclxuKTogbnVtYmVyIHtcbiAgICBjb25zdCBjb250YWluZXJTY3JvbGwgPSBjb250YWluZXJEaW1lbnNpb25zLnNjcm9sbFtheGlzXTtcbiAgICBjb25zdCBjb250YWluZXJIZWlnaHQ6IG51bWJlciA9IGNvbnRhaW5lckRpbWVuc2lvbnNbXG4gICAgICAgIEFYSVNfU0laRVtheGlzXVxuICAgIF0gYXMgbnVtYmVyO1xuXG4gICAgY29uc3Qgc3RhcnRFZGdlT2Zmc2V0ID0gb2Zmc2V0IC0gcGFkZGluZyAtIGNvbnRhaW5lclNjcm9sbDtcbiAgICBjb25zdCBlbmRFZGdlT2Zmc2V0OiBudW1iZXIgPSBvZmZzZXQgKyBwYWRkaW5nIC0gY29udGFpbmVyU2Nyb2xsICsgc2l6ZTtcblxuICAgIGlmIChzdGFydEVkZ2VPZmZzZXQgPCAwKSB7XG4gICAgICAgIHJldHVybiAtc3RhcnRFZGdlT2Zmc2V0O1xuICAgIH0gZWxzZSBpZiAoZW5kRWRnZU9mZnNldCA+IGNvbnRhaW5lckhlaWdodCkge1xuICAgICAgICByZXR1cm4gTWF0aC5tYXgoY29udGFpbmVySGVpZ2h0IC0gZW5kRWRnZU9mZnNldCwgLXN0YXJ0RWRnZU9mZnNldCk7XG4gICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBzaG91bGRGbGlwKFxuICAgIGF4aXM6IHN0cmluZyxcbiAgICBvZmZzZXQ6IG51bWJlcixcbiAgICBzaXplOiBudW1iZXIsXG4gICAgcGFkZGluZzogbnVtYmVyLFxuICAgIHBsYWNlbWVudDogc3RyaW5nLFxuICAgIGZsaXBDb250YWluZXJEaW1lbnNpb25zOiBDb250YWluZXJEaW1lbnNpb25zLFxuICAgIGNvbnRhaW5lck9mZnNldFdpdGhCb3VuZGFyeTogT2Zmc2V0XG4pOiBib29sZWFuIHtcbiAgICBjb25zdCBjb250YWluZXJTY3JvbGwgPSBmbGlwQ29udGFpbmVyRGltZW5zaW9ucy5zY3JvbGxbYXhpc107XG4gICAgY29uc3QgY29udGFpbmVySGVpZ2h0ID0gZmxpcENvbnRhaW5lckRpbWVuc2lvbnNbQVhJU19TSVpFW2F4aXNdXTtcblxuICAgIGNvbnN0IHN0YXJ0RWRnZU9mZnNldCA9XG4gICAgICAgIGNvbnRhaW5lck9mZnNldFdpdGhCb3VuZGFyeVtheGlzXSArIG9mZnNldCAtIHBhZGRpbmcgLSBjb250YWluZXJTY3JvbGw7XG4gICAgY29uc3QgZW5kRWRnZU9mZnNldCA9XG4gICAgICAgIGNvbnRhaW5lck9mZnNldFdpdGhCb3VuZGFyeVtheGlzXSArXG4gICAgICAgIG9mZnNldCArXG4gICAgICAgIHBhZGRpbmcgLVxuICAgICAgICBjb250YWluZXJTY3JvbGwgK1xuICAgICAgICBzaXplO1xuXG4gICAgaWYgKHN0YXJ0RWRnZU9mZnNldCA8IDAgJiYgKHBsYWNlbWVudCA9PT0gJ3RvcCcgfHwgcGxhY2VtZW50ID09PSAnbGVmdCcpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIGVuZEVkZ2VPZmZzZXQgPiBjb250YWluZXJIZWlnaHQgJiZcbiAgICAgICAgKHBsYWNlbWVudCA9PT0gJ2JvdHRvbScgfHwgcGxhY2VtZW50ID09PSAncmlnaHQnKVxuICAgICkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxufVxuXG5mdW5jdGlvbiBnZXRNYXJnaW5zKG5vZGU6IEVsZW1lbnQpOiBNYXJnaW5zIHtcbiAgICBjb25zdCBzdHlsZSA9IHdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKG5vZGUpO1xuICAgIHJldHVybiB7XG4gICAgICAgIGJvdHRvbTogcGFyc2VJbnQoc3R5bGUubWFyZ2luQm90dG9tIGFzIHN0cmluZywgMTApIHx8IDAsXG4gICAgICAgIGxlZnQ6IHBhcnNlSW50KHN0eWxlLm1hcmdpbkxlZnQgYXMgc3RyaW5nLCAxMCkgfHwgMCxcbiAgICAgICAgcmlnaHQ6IHBhcnNlSW50KHN0eWxlLm1hcmdpblJpZ2h0IGFzIHN0cmluZywgMTApIHx8IDAsXG4gICAgICAgIHRvcDogcGFyc2VJbnQoc3R5bGUubWFyZ2luVG9wIGFzIHN0cmluZywgMTApIHx8IDAsXG4gICAgfTtcbn1cblxuZnVuY3Rpb24gcGFyc2VQbGFjZW1lbnQoaW5wdXQ6IHN0cmluZyk6IFBsYWNlbWVudEluZm8ge1xuICAgIGlmIChQQVJTRURfUExBQ0VNRU5UX0NBQ0hFW2lucHV0XSkge1xuICAgICAgICByZXR1cm4gUEFSU0VEX1BMQUNFTUVOVF9DQUNIRVtpbnB1dF07XG4gICAgfVxuICAgIGNvbnN0IFtwbGFjZW1lbnRdID0gaW5wdXQuc3BsaXQoJyAnKTtcbiAgICBsZXQgWywgY3Jvc3NQbGFjZW1lbnRdID0gaW5wdXQuc3BsaXQoJyAnKTtcbiAgICBjb25zdCBheGlzID0gQVhJU1twbGFjZW1lbnRdIHx8ICdyaWdodCc7XG4gICAgY29uc3QgY3Jvc3NBeGlzID0gQ1JPU1NfQVhJU1theGlzXTtcblxuICAgIGlmICghQVhJU1tjcm9zc1BsYWNlbWVudF0pIHtcbiAgICAgICAgY3Jvc3NQbGFjZW1lbnQgPSAnY2VudGVyJztcbiAgICB9XG5cbiAgICBjb25zdCBzaXplID0gQVhJU19TSVpFW2F4aXNdO1xuICAgIGNvbnN0IGNyb3NzU2l6ZSA9IEFYSVNfU0laRVtjcm9zc0F4aXNdO1xuICAgIFBBUlNFRF9QTEFDRU1FTlRfQ0FDSEVbaW5wdXRdID0ge1xuICAgICAgICBheGlzLFxuICAgICAgICBjcm9zc0F4aXMsXG4gICAgICAgIGNyb3NzUGxhY2VtZW50LFxuICAgICAgICBjcm9zc1NpemUsXG4gICAgICAgIHBsYWNlbWVudCxcbiAgICAgICAgc2l6ZSxcbiAgICB9O1xuICAgIHJldHVybiBQQVJTRURfUExBQ0VNRU5UX0NBQ0hFW2lucHV0XTtcbn1cblxuZnVuY3Rpb24gY29tcHV0ZVBvc2l0aW9uKFxuICAgIGNoaWxkT2Zmc2V0OiBPZmZzZXQsXG4gICAgY29udGFpbmVyRGltZW5zaW9uczogQ29udGFpbmVyRGltZW5zaW9ucyxcbiAgICBvdmVybGF5U2l6ZTogT2Zmc2V0LFxuICAgIHBsYWNlbWVudEluZm86IFBsYWNlbWVudEluZm8sXG4gICAgb2Zmc2V0OiBudW1iZXIsXG4gICAgY3Jvc3NPZmZzZXQ6IG51bWJlclxuKTogUG9zaXRpb24ge1xuICAgIGNvbnN0IHtcbiAgICAgICAgYXhpcyxcbiAgICAgICAgY3Jvc3NBeGlzLFxuICAgICAgICBjcm9zc1BsYWNlbWVudCxcbiAgICAgICAgY3Jvc3NTaXplLFxuICAgICAgICBzaXplLFxuICAgICAgICBwbGFjZW1lbnQsXG4gICAgfSA9IHBsYWNlbWVudEluZm87XG5cbiAgICBjb25zdCBwb3NpdGlvbjogUG9zaXRpb24gPSB7XG4gICAgICAgIHRvcDogMCxcbiAgICAgICAgbGVmdDogMCxcbiAgICAgICAgYm90dG9tOiAwLFxuICAgICAgICByaWdodDogMCxcbiAgICB9O1xuXG4gICAgcG9zaXRpb25bY3Jvc3NBeGlzXSA9IGNoaWxkT2Zmc2V0W2Nyb3NzQXhpc10gKyBjcm9zc09mZnNldDtcbiAgICBpZiAoY3Jvc3NQbGFjZW1lbnQgPT09ICdjZW50ZXInKSB7XG4gICAgICAgIHBvc2l0aW9uW2Nyb3NzQXhpc10gKz1cbiAgICAgICAgICAgIChjaGlsZE9mZnNldFtjcm9zc1NpemVdIC0gb3ZlcmxheVNpemVbY3Jvc3NTaXplXSkgLyAyO1xuICAgIH0gZWxzZSBpZiAoY3Jvc3NQbGFjZW1lbnQgIT09IGNyb3NzQXhpcykge1xuICAgICAgICBwb3NpdGlvbltjcm9zc0F4aXNdICs9IGNoaWxkT2Zmc2V0W2Nyb3NzU2l6ZV0gLSBvdmVybGF5U2l6ZVtjcm9zc1NpemVdO1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSBvdmVybGF5IHN0aWNrcyB0byB0YXJnZXQoaWdub3JlIGZvciBvdmVybGF5cyBzbWFsbGVyIHRoYW4gdGFyZ2V0KVxuICAgIGlmIChjaGlsZE9mZnNldFtjcm9zc1NpemVdIDwgb3ZlcmxheVNpemVbY3Jvc3NTaXplXSkge1xuICAgICAgICBjb25zdCBwb3NpdGlvbkZvclBvc2l0aXZlU2lkZU92ZXJmbG93ID0gTWF0aC5taW4oXG4gICAgICAgICAgICBwb3NpdGlvbltjcm9zc0F4aXNdLFxuICAgICAgICAgICAgY2hpbGRPZmZzZXRbY3Jvc3NBeGlzXVxuICAgICAgICApO1xuICAgICAgICBwb3NpdGlvbltjcm9zc0F4aXNdID0gTWF0aC5tYXgoXG4gICAgICAgICAgICBwb3NpdGlvbkZvclBvc2l0aXZlU2lkZU92ZXJmbG93LFxuICAgICAgICAgICAgY2hpbGRPZmZzZXRbY3Jvc3NBeGlzXSAtXG4gICAgICAgICAgICAgICAgb3ZlcmxheVNpemVbY3Jvc3NTaXplXSArXG4gICAgICAgICAgICAgICAgY2hpbGRPZmZzZXRbY3Jvc3NTaXplXVxuICAgICAgICApO1xuICAgIH1cblxuICAgIHBvc2l0aW9uW2F4aXNdID1cbiAgICAgICAgcGxhY2VtZW50ID09PSBheGlzXG4gICAgICAgICAgICA/IGNoaWxkT2Zmc2V0W2F4aXNdIC0gb3ZlcmxheVNpemVbc2l6ZV0gLSBvZmZzZXRcbiAgICAgICAgICAgIDogY2hpbGRPZmZzZXRbYXhpc10gKyBjaGlsZE9mZnNldFtzaXplXSArIG9mZnNldDtcblxuICAgIHJldHVybiBwb3NpdGlvbjtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNhbGN1bGF0ZVBvc2l0aW9uSW50ZXJuYWwoXG4gICAgcGxhY2VtZW50SW5wdXQ6IHN0cmluZyxcbiAgICBjb250YWluZXJEaW1lbnNpb25zOiBDb250YWluZXJEaW1lbnNpb25zLFxuICAgIGNoaWxkT2Zmc2V0OiBPZmZzZXQsXG4gICAgb3ZlcmxheVNpemU6IE9mZnNldCxcbiAgICBtYXJnaW5zOiBNYXJnaW5zLFxuICAgIHBhZGRpbmc6IG51bWJlcixcbiAgICBmbGlwOiBib29sZWFuLFxuICAgIGJvdW5kYXJ5RGltZW5zaW9uczogQ29udGFpbmVyRGltZW5zaW9ucyxcbiAgICBjb250YWluZXJPZmZzZXRXaXRoQm91bmRhcnk6IE9mZnNldCxcbiAgICBvZmZzZXQ6IG51bWJlcixcbiAgICBjcm9zc09mZnNldDogbnVtYmVyXG4pOiBQb3NpdGlvblJlc3VsdCB7XG4gICAgbGV0IHBsYWNlbWVudEluZm8gPSBwYXJzZVBsYWNlbWVudChwbGFjZW1lbnRJbnB1dCk7XG4gICAgY29uc3Qge1xuICAgICAgICBheGlzLFxuICAgICAgICBzaXplLFxuICAgICAgICBjcm9zc0F4aXMsXG4gICAgICAgIGNyb3NzU2l6ZSxcbiAgICAgICAgcGxhY2VtZW50LFxuICAgICAgICBjcm9zc1BsYWNlbWVudCxcbiAgICB9ID0gcGxhY2VtZW50SW5mbztcbiAgICBsZXQgcG9zaXRpb24gPSBjb21wdXRlUG9zaXRpb24oXG4gICAgICAgIGNoaWxkT2Zmc2V0LFxuICAgICAgICBjb250YWluZXJEaW1lbnNpb25zLFxuICAgICAgICBvdmVybGF5U2l6ZSxcbiAgICAgICAgcGxhY2VtZW50SW5mbyxcbiAgICAgICAgb2Zmc2V0LFxuICAgICAgICBjcm9zc09mZnNldFxuICAgICk7XG4gICAgbGV0IG5vcm1hbGl6ZWRPZmZzZXQgPSBvZmZzZXQ7XG5cbiAgICAvLyBGaXJzdCBjaGVjayBpZiBwbGFjZW1lbnQgc2hvdWxkIGJlIGZsaXBwZWRcbiAgICBpZiAoXG4gICAgICAgIGZsaXAgJiZcbiAgICAgICAgc2hvdWxkRmxpcChcbiAgICAgICAgICAgIGF4aXMsXG4gICAgICAgICAgICBwb3NpdGlvbltheGlzXSxcbiAgICAgICAgICAgIG92ZXJsYXlTaXplW3NpemVdLFxuICAgICAgICAgICAgcGFkZGluZyxcbiAgICAgICAgICAgIHBsYWNlbWVudCxcbiAgICAgICAgICAgIGJvdW5kYXJ5RGltZW5zaW9ucyxcbiAgICAgICAgICAgIGNvbnRhaW5lck9mZnNldFdpdGhCb3VuZGFyeVxuICAgICAgICApXG4gICAgKSB7XG4gICAgICAgIGNvbnN0IGZsaXBwZWRQbGFjZW1lbnRJbmZvID0gcGFyc2VQbGFjZW1lbnQoXG4gICAgICAgICAgICBgJHtGTElQUEVEX0RJUkVDVElPTltwbGFjZW1lbnRdfSAke2Nyb3NzUGxhY2VtZW50fWBcbiAgICAgICAgKTtcbiAgICAgICAgY29uc3QgZmxpcHBlZEF4aXMgPSBmbGlwcGVkUGxhY2VtZW50SW5mby5heGlzO1xuICAgICAgICBjb25zdCBmbGlwcGVkU2l6ZSA9IGZsaXBwZWRQbGFjZW1lbnRJbmZvLnNpemU7XG5cbiAgICAgICAgY29uc3QgZmxpcHBlZFBvc2l0aW9uID0gY29tcHV0ZVBvc2l0aW9uKFxuICAgICAgICAgICAgY2hpbGRPZmZzZXQsXG4gICAgICAgICAgICBjb250YWluZXJEaW1lbnNpb25zLFxuICAgICAgICAgICAgb3ZlcmxheVNpemUsXG4gICAgICAgICAgICBmbGlwcGVkUGxhY2VtZW50SW5mbyxcbiAgICAgICAgICAgIC0xICogb2Zmc2V0LFxuICAgICAgICAgICAgY3Jvc3NPZmZzZXRcbiAgICAgICAgKTtcblxuICAgICAgICAvLyBDaGVjayBpZiBmbGlwcGVkIHBsYWNlbWVudCBoYXMgZW5vdWdoIHNwYWNlIG90aGVyd2lzZSBmbGlwIGlzIG5vdCBwb3NzaWJsZVxuICAgICAgICBpZiAoXG4gICAgICAgICAgICAhc2hvdWxkRmxpcChcbiAgICAgICAgICAgICAgICBmbGlwcGVkQXhpcyxcbiAgICAgICAgICAgICAgICBmbGlwcGVkUG9zaXRpb25bZmxpcHBlZEF4aXNdLFxuICAgICAgICAgICAgICAgIG92ZXJsYXlTaXplW2ZsaXBwZWRTaXplXSxcbiAgICAgICAgICAgICAgICBwYWRkaW5nLFxuICAgICAgICAgICAgICAgIEZMSVBQRURfRElSRUNUSU9OW3BsYWNlbWVudF0sXG4gICAgICAgICAgICAgICAgYm91bmRhcnlEaW1lbnNpb25zLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lck9mZnNldFdpdGhCb3VuZGFyeVxuICAgICAgICAgICAgKVxuICAgICAgICApIHtcbiAgICAgICAgICAgIHBsYWNlbWVudEluZm8gPSBmbGlwcGVkUGxhY2VtZW50SW5mbztcbiAgICAgICAgICAgIHBvc2l0aW9uID0gZmxpcHBlZFBvc2l0aW9uO1xuICAgICAgICAgICAgbm9ybWFsaXplZE9mZnNldCA9IC0xICogb2Zmc2V0O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGRlbHRhID0gZ2V0RGVsdGEoXG4gICAgICAgIGNyb3NzQXhpcyxcbiAgICAgICAgcG9zaXRpb25bY3Jvc3NBeGlzXSxcbiAgICAgICAgb3ZlcmxheVNpemVbY3Jvc3NTaXplXSxcbiAgICAgICAgYm91bmRhcnlEaW1lbnNpb25zLFxuICAgICAgICBwYWRkaW5nXG4gICAgKTtcbiAgICBwb3NpdGlvbltjcm9zc0F4aXNdICs9IGRlbHRhO1xuXG4gICAgY29uc3QgbWF4SGVpZ2h0ID0gTWF0aC5tYXgoXG4gICAgICAgIDAsXG4gICAgICAgIGJvdW5kYXJ5RGltZW5zaW9ucy5oZWlnaHQgK1xuICAgICAgICAgICAgYm91bmRhcnlEaW1lbnNpb25zLnRvcCArXG4gICAgICAgICAgICBib3VuZGFyeURpbWVuc2lvbnMuc2Nyb2xsLnRvcCAtXG4gICAgICAgICAgICBjb250YWluZXJPZmZzZXRXaXRoQm91bmRhcnkudG9wIC1cbiAgICAgICAgICAgIHBvc2l0aW9uLnRvcCAtXG4gICAgICAgICAgICBtYXJnaW5zLnRvcCAtXG4gICAgICAgICAgICBtYXJnaW5zLmJvdHRvbSAtXG4gICAgICAgICAgICBwYWRkaW5nXG4gICAgKTtcbiAgICBvdmVybGF5U2l6ZS5oZWlnaHQgPSBNYXRoLm1pbihvdmVybGF5U2l6ZS5oZWlnaHQsIG1heEhlaWdodCk7XG5cbiAgICBwb3NpdGlvbiA9IGNvbXB1dGVQb3NpdGlvbihcbiAgICAgICAgY2hpbGRPZmZzZXQsXG4gICAgICAgIGNvbnRhaW5lckRpbWVuc2lvbnMsXG4gICAgICAgIG92ZXJsYXlTaXplLFxuICAgICAgICBwbGFjZW1lbnRJbmZvLFxuICAgICAgICBub3JtYWxpemVkT2Zmc2V0LFxuICAgICAgICBjcm9zc09mZnNldFxuICAgICk7XG4gICAgZGVsdGEgPSBkZWx0YSA9IGdldERlbHRhKFxuICAgICAgICBjcm9zc0F4aXMsXG4gICAgICAgIHBvc2l0aW9uW2Nyb3NzQXhpc10sXG4gICAgICAgIG92ZXJsYXlTaXplW2Nyb3NzU2l6ZV0sXG4gICAgICAgIGJvdW5kYXJ5RGltZW5zaW9ucyxcbiAgICAgICAgcGFkZGluZ1xuICAgICk7XG5cbiAgICBwb3NpdGlvbltjcm9zc0F4aXNdICs9IGRlbHRhO1xuXG4gICAgY29uc3QgYXJyb3dQb3NpdGlvbjogUG9zc2libGVQb3NpdGlvbiA9IHtcbiAgICAgICAgdG9wOiAwLFxuICAgICAgICBib3R0b206IDAsXG4gICAgICAgIGxlZnQ6IDAsXG4gICAgICAgIHJpZ2h0OiAwLFxuICAgIH07XG4gICAgYXJyb3dQb3NpdGlvbltjcm9zc0F4aXNdID1cbiAgICAgICAgY2hpbGRPZmZzZXRbY3Jvc3NTaXplXSA+IG92ZXJsYXlTaXplW2Nyb3NzU2l6ZV1cbiAgICAgICAgICAgID8gbnVsbFxuICAgICAgICAgICAgOiBjaGlsZE9mZnNldFtjcm9zc0F4aXNdIC1cbiAgICAgICAgICAgICAgcG9zaXRpb25bY3Jvc3NBeGlzXSArXG4gICAgICAgICAgICAgIGNoaWxkT2Zmc2V0W2Nyb3NzU2l6ZV0gLyAyO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgICAgYXJyb3dPZmZzZXRMZWZ0OiBhcnJvd1Bvc2l0aW9uLmxlZnQgfHwgMCxcbiAgICAgICAgYXJyb3dPZmZzZXRUb3A6IGFycm93UG9zaXRpb24udG9wIHx8IDAsXG4gICAgICAgIG1heEhlaWdodCxcbiAgICAgICAgcGxhY2VtZW50OiBwbGFjZW1lbnRJbmZvLnBsYWNlbWVudCxcbiAgICAgICAgcG9zaXRpb25MZWZ0OiBwb3NpdGlvbi5sZWZ0IHx8IDAsXG4gICAgICAgIHBvc2l0aW9uVG9wOiBwb3NpdGlvbi50b3AgfHwgMCxcbiAgICB9O1xufVxuXG5mdW5jdGlvbiBnZXRTaGFkb3dQb3NpdGlvbihcbiAgICB0YXJnZXQ6IEhUTUxFbGVtZW50LFxuICAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnRcbik6IE9mZnNldCB7XG4gICAgY29uc3QgdGFyZ2V0UG9zaXRpb24gPSB0YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgYXMgT2Zmc2V0O1xuICAgIGNvbnN0IGNvbnRhaW5lclBvc2l0aW9uID0gY29udGFpbmVyLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIGFzIE9mZnNldDtcbiAgICByZXR1cm4ge1xuICAgICAgICBib3R0b206IHRhcmdldFBvc2l0aW9uLmJvdHRvbSAtIGNvbnRhaW5lclBvc2l0aW9uLmJvdHRvbSxcbiAgICAgICAgaGVpZ2h0OiB0YXJnZXRQb3NpdGlvbi5oZWlnaHQsXG4gICAgICAgIGxlZnQ6IHRhcmdldFBvc2l0aW9uLmxlZnQgLSBjb250YWluZXJQb3NpdGlvbi5sZWZ0LFxuICAgICAgICByaWdodDogdGFyZ2V0UG9zaXRpb24ucmlnaHQgLSBjb250YWluZXJQb3NpdGlvbi5yaWdodCxcbiAgICAgICAgdG9wOiB0YXJnZXRQb3NpdGlvbi50b3AgLSBjb250YWluZXJQb3NpdGlvbi50b3AsXG4gICAgICAgIHdpZHRoOiB0YXJnZXRQb3NpdGlvbi53aWR0aCxcbiAgICAgICAgeDogdGFyZ2V0UG9zaXRpb24ueCxcbiAgICAgICAgeTogdGFyZ2V0UG9zaXRpb24ueSxcbiAgICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjYWxjdWxhdGVQb3NpdGlvbihcbiAgICBwbGFjZW1lbnRJbnB1dDogc3RyaW5nLFxuICAgIG92ZXJsYXlOb2RlOiBIVE1MRWxlbWVudCxcbiAgICB0YXJnZXQ6IEhUTUxFbGVtZW50LFxuICAgIGNvbnRhaW5lcjogSFRNTEVsZW1lbnQsXG4gICAgcGFkZGluZzogbnVtYmVyLFxuICAgIGZsaXA6IGJvb2xlYW4sXG4gICAgYm91bmRhcmllc0VsZW1lbnQ6IEhUTUxFbGVtZW50LFxuICAgIG9mZnNldDogbnVtYmVyLFxuICAgIGNyb3NzT2Zmc2V0OiBudW1iZXJcbik6IFBvc2l0aW9uUmVzdWx0IHtcbiAgICBjb25zdCBpc0JvZHlDb250YWluZXIgPSBjb250YWluZXIudGFnTmFtZSA9PT0gJ0JPRFknO1xuICAgIGNvbnN0IGNoaWxkT2Zmc2V0ID0gaXNCb2R5Q29udGFpbmVyXG4gICAgICAgID8gKHRhcmdldC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKSBhcyBPZmZzZXQpXG4gICAgICAgIDogKGdldFNoYWRvd1Bvc2l0aW9uKHRhcmdldCwgY29udGFpbmVyKSBhcyBPZmZzZXQpO1xuXG4gICAgaWYgKCFpc0JvZHlDb250YWluZXIpIHtcbiAgICAgICAgY2hpbGRPZmZzZXQudG9wICs9IHBhcnNlSW50KHRhcmdldC5zdHlsZS5tYXJnaW5Ub3AgYXMgc3RyaW5nLCAxMCkgfHwgMDtcbiAgICAgICAgY2hpbGRPZmZzZXQubGVmdCArPVxuICAgICAgICAgICAgcGFyc2VJbnQodGFyZ2V0LnN0eWxlLm1hcmdpbkxlZnQgYXMgc3RyaW5nLCAxMCkgfHwgMDtcbiAgICB9XG5cbiAgICBjb25zdCBvdmVybGF5U2l6ZSA9IG92ZXJsYXlOb2RlLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIGFzIE9mZnNldDtcbiAgICBjb25zdCBtYXJnaW5zID0gZ2V0TWFyZ2lucyhvdmVybGF5Tm9kZSk7XG4gICAgb3ZlcmxheVNpemUud2lkdGggKz0gbWFyZ2lucy5sZWZ0ICsgbWFyZ2lucy5yaWdodDtcbiAgICBvdmVybGF5U2l6ZS5oZWlnaHQgKz0gbWFyZ2lucy50b3AgKyBtYXJnaW5zLmJvdHRvbTtcblxuICAgIGNvbnN0IGNvbnRhaW5lckRpbWVuc2lvbnMgPSBnZXRDb250YWluZXJEaW1lbnNpb25zKGNvbnRhaW5lcik7XG4gICAgY29uc3QgYm91bmRhcnlDb250YWluZXIgPSBjb250YWluZXI7XG4gICAgY29uc3QgYm91bmRhcnlEaW1lbnNpb25zID0gZ2V0Q29udGFpbmVyRGltZW5zaW9ucyhib3VuZGFyeUNvbnRhaW5lcik7XG4gICAgY29uc3QgY29udGFpbmVyT2Zmc2V0V2l0aEJvdW5kYXJ5ID1cbiAgICAgICAgYm91bmRhcnlDb250YWluZXIudGFnTmFtZSA9PT0gJ0JPRFknXG4gICAgICAgICAgICA/IChjb250YWluZXIuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkgYXMgT2Zmc2V0KVxuICAgICAgICAgICAgOiAoZ2V0U2hhZG93UG9zaXRpb24oY29udGFpbmVyLCBib3VuZGFyeUNvbnRhaW5lcikgYXMgT2Zmc2V0KTtcbiAgICByZXR1cm4gY2FsY3VsYXRlUG9zaXRpb25JbnRlcm5hbChcbiAgICAgICAgcGxhY2VtZW50SW5wdXQsXG4gICAgICAgIGNvbnRhaW5lckRpbWVuc2lvbnMsXG4gICAgICAgIGNoaWxkT2Zmc2V0LFxuICAgICAgICBvdmVybGF5U2l6ZSxcbiAgICAgICAgbWFyZ2lucyxcbiAgICAgICAgcGFkZGluZyxcbiAgICAgICAgZmxpcCxcbiAgICAgICAgYm91bmRhcnlEaW1lbnNpb25zLFxuICAgICAgICBjb250YWluZXJPZmZzZXRXaXRoQm91bmRhcnksXG4gICAgICAgIG9mZnNldCxcbiAgICAgICAgY3Jvc3NPZmZzZXRcbiAgICApO1xufVxuIiwiLypcbkNvcHlyaWdodCAyMDE4IEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbm9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG50aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbk9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbi8vVE9ETzogQ2xvc2luZyBvdmVybGF5IHNob3VsZCBhbHNvIGhhdmUgdHJhbnNpdGlvblxuXG5pbXBvcnQge1xuICAgIGh0bWwsXG4gICAgTGl0RWxlbWVudCxcbiAgICBwcm9wZXJ0eSxcbiAgICBUZW1wbGF0ZVJlc3VsdCxcbiAgICBDU1NSZXN1bHRBcnJheSxcbn0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuXG5pbXBvcnQgb3ZlcmxheVN0eWxlcyBmcm9tICcuL292ZXJsYXktcm9vdC5jc3MnO1xuXG5pbXBvcnQgY2FsY3VsYXRlUG9zaXRpb24sIHsgUG9zaXRpb25SZXN1bHQgfSBmcm9tICcuL2NhbGN1bGF0ZS1wb3NpdGlvbic7XG5pbXBvcnQgeyBzdHJpY3RDdXN0b21FdmVudCwgU3RyaWN0Q3VzdG9tRXZlbnQgfSBmcm9tICcuLi9ldmVudHMnO1xuXG5leHBvcnQgdHlwZSBUcmlnZ2VySW50ZXJhY3Rpb25zID0gJ2NsaWNrJyB8ICdob3Zlcic7XG5cbmV4cG9ydCB0eXBlIFBsYWNlbWVudCA9ICd0b3AnIHwgJ3JpZ2h0JyB8ICdib3R0b20nIHwgJ2xlZnQnO1xuXG5leHBvcnQgaW50ZXJmYWNlIE92ZXJsYXlPcGVuRGV0YWlsIHtcbiAgICBjb250ZW50OiBIVE1MRWxlbWVudDtcbiAgICBkZWxheTogbnVtYmVyO1xuICAgIG9mZnNldDogbnVtYmVyO1xuICAgIHBsYWNlbWVudDogUGxhY2VtZW50O1xuICAgIHRyaWdnZXI6IEhUTUxFbGVtZW50O1xuICAgIGludGVyYWN0aW9uOiBUcmlnZ2VySW50ZXJhY3Rpb25zO1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIE92ZXJsYXlDbG9zZURldGFpbCB7XG4gICAgY29udGVudDogSFRNTEVsZW1lbnQ7XG59XG5cbmludGVyZmFjZSBDYWxjdWxhdGVQb3NpdGlvbk9wdGlvbnMge1xuICAgIGNvbnRhaW5lclBhZGRpbmc6IG51bWJlcjtcbiAgICBjcm9zc09mZnNldDogbnVtYmVyO1xuICAgIGZsaXA6IGJvb2xlYW47XG4gICAgb2Zmc2V0OiBudW1iZXI7XG4gICAgcGxhY2VtZW50OiBzdHJpbmc7XG59XG5cbmNvbnN0IGRlZmF1bHRPcHRpb25zOiBDYWxjdWxhdGVQb3NpdGlvbk9wdGlvbnMgPSB7XG4gICAgY29udGFpbmVyUGFkZGluZzogMTAsXG4gICAgY3Jvc3NPZmZzZXQ6IDAsXG4gICAgZmxpcDogdHJ1ZSxcbiAgICBvZmZzZXQ6IDAsXG4gICAgcGxhY2VtZW50OiAnbGVmdCcsXG59O1xuXG5leHBvcnQgY2xhc3MgT3ZlcmxheVJvb3QgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgICBwdWJsaWMgc3RhdGljIGlzID0gJ292ZXJsYXktcm9vdCc7XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldCBzdHlsZXMoKTogQ1NTUmVzdWx0QXJyYXkge1xuICAgICAgICByZXR1cm4gW292ZXJsYXlTdHlsZXNdO1xuICAgIH1cblxuICAgIEBwcm9wZXJ0eSh7IHR5cGU6IEJvb2xlYW4sIHJlZmxlY3Q6IHRydWUgfSlcbiAgICBwdWJsaWMgdmlzaWJsZSA9IGZhbHNlO1xuXG4gICAgQHByb3BlcnR5KHsgcmVmbGVjdDogdHJ1ZSB9KVxuICAgIHB1YmxpYyBwbGFjZW1lbnQ6IFBsYWNlbWVudCA9ICdib3R0b20nO1xuXG4gICAgQHByb3BlcnR5KHsgdHlwZTogTnVtYmVyLCByZWZsZWN0OiB0cnVlIH0pXG4gICAgcHVibGljIG9mZnNldCA9IDY7XG5cbiAgICBAcHJvcGVydHkoKVxuICAgIHByaXZhdGUgaW50ZXJhY3Rpb246IFRyaWdnZXJJbnRlcmFjdGlvbnMgPSAnaG92ZXInO1xuXG4gICAgQHByb3BlcnR5KHsgdHlwZTogQm9vbGVhbiwgcmVmbGVjdDogdHJ1ZSB9KVxuICAgIHByaXZhdGUgYWN0aXZlID0gZmFsc2U7XG5cbiAgICBAcHJvcGVydHkoKVxuICAgIHByaXZhdGUgcG9zaXRpb24/OiBQb3NpdGlvblJlc3VsdDtcblxuICAgIEBwcm9wZXJ0eSgpXG4gICAgcHJpdmF0ZSB0cmlnZ2VyPzogSFRNTEVsZW1lbnQ7XG5cbiAgICBAcHJvcGVydHkoKVxuICAgIHByaXZhdGUgb3ZlcmxheUNvbnRlbnQ/OiBIVE1MRWxlbWVudDtcblxuICAgIHByaXZhdGUgdGltZW91dD86IG51bWJlcjtcblxuICAgIHB1YmxpYyBvbk1hc2tDbGljayhldjogRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgY29uc3Qgc2Vjb25kQ2xpY2sgPSB0aGlzLmRldGVjdFNlY29uZENsaWNrKGV2KTtcblxuICAgICAgICBpZiAoIXRoaXMuYWN0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBpZiAodGhpcy5pbnRlcmFjdGlvbiA9PT0gJ2NsaWNrJyAmJiBzZWNvbmRDbGljaykge1xuICAgICAgICAgICAgLy9QcmV2ZW50IHNlY29uZCBjbGlja3MgZnJvbSByZW9wZW5pbmcgdGhlIG92ZXJsYXlcbiAgICAgICAgICAgIGV2LnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgICB9XG5cbiAgICAgICAgdGhpcy5yZW1vdmVPdmVybGF5KCk7XG5cbiAgICAgICAgY29uc3QgY2xpY2tPdXRFdmVudCA9IHN0cmljdEN1c3RvbUV2ZW50KCdzcC1vdmVybGF5OmNsaWNrLW91dCcsIHtcbiAgICAgICAgICAgIGJ1YmJsZXM6IHRydWUsXG4gICAgICAgICAgICBjb21wb3NlZDogdHJ1ZSxcbiAgICAgICAgICAgIGRldGFpbDogZXYsXG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLmRpc3BhdGNoRXZlbnQoY2xpY2tPdXRFdmVudCk7XG4gICAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbk92ZXJsYXlPcGVuKGV2OiBTdHJpY3RDdXN0b21FdmVudDwnc3Atb3ZlcmxheTpvcGVuJz4pOiB2b2lkIHtcbiAgICAgICAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hY3RpdmUgPSB0cnVlO1xuICAgICAgICB0aGlzLnJlbW92ZU92ZXJsYXkoKTtcbiAgICAgICAgdGhpcy5leHRyYWN0RXZlbnREZXRhaWwoZXYpO1xuICAgICAgICBpZiAodGhpcy5vdmVybGF5Q29udGVudCkge1xuICAgICAgICAgICAgdGhpcy5vdmVybGF5Q29udGVudC5zZXRBdHRyaWJ1dGUoJ3Nsb3QnLCAnb3ZlcmxheScpO1xuICAgICAgICAgICAgdGhpcy5hcHBlbmRDaGlsZCh0aGlzLm92ZXJsYXlDb250ZW50KTtcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMudGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgIHRoaXMudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLnVwZGF0ZU92ZXJsYXlQb3NpdGlvbigpO1xuICAgICAgICB9LCBldi5kZXRhaWwuZGVsYXkpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbk92ZXJsYXlDbG9zZShldjogU3RyaWN0Q3VzdG9tRXZlbnQ8J3NwLW92ZXJsYXk6Y2xvc2UnPik6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy50aW1lb3V0KSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy50aW1lb3V0KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZXYuZGV0YWlsLmNvbnRlbnQgPT09IHRoaXMub3ZlcmxheUNvbnRlbnQpIHtcbiAgICAgICAgICAgIHRoaXMucmVtb3ZlT3ZlcmxheSgpO1xuICAgICAgICAgICAgdGhpcy5hY3RpdmUgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMudmlzaWJsZSA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHJlbmRlcigpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgICAgIGNvbnN0IG1hc2tDbGlja0xpc3RlbmVyID0ge1xuICAgICAgICAgICAgaGFuZGxlRXZlbnQ6IChldjogRXZlbnQpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm9uTWFza0NsaWNrKGV2KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjYXB0dXJlOiB0cnVlLFxuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgPHNsb3RcbiAgICAgICAgICAgICAgICBAc3Atb3ZlcmxheTpvcGVuPSR7dGhpcy5vbk92ZXJsYXlPcGVufVxuICAgICAgICAgICAgICAgIEBzcC1vdmVybGF5OmNsb3NlPSR7dGhpcy5vbk92ZXJsYXlDbG9zZX1cbiAgICAgICAgICAgICAgICBAY2xpY2s9JHttYXNrQ2xpY2tMaXN0ZW5lcn1cbiAgICAgICAgICAgID48L3Nsb3Q+XG4gICAgICAgICAgICA8ZGl2XG4gICAgICAgICAgICAgICAgaWQ9XCJvdmVybGF5XCJcbiAgICAgICAgICAgICAgICA/YWN0aXZlPSR7dGhpcy5hY3RpdmV9XG4gICAgICAgICAgICAgICAgP3Zpc2libGU9JHt0aGlzLnZpc2libGV9XG4gICAgICAgICAgICAgICAgc3R5bGU9JHt0aGlzLm92ZXJsYXlTdHlsZXN9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgPHNsb3QgbmFtZT1cIm92ZXJsYXlcIj48L3Nsb3Q+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgYDtcbiAgICB9XG5cbiAgICBwcml2YXRlIGRldGVjdFNlY29uZENsaWNrKGV2OiBFdmVudCk6IGJvb2xlYW4ge1xuICAgICAgICAvL1RPRE86IGV2ZW50LmNvbXBvc2VkUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIGludGVybmV0IGV4cGxvcmVyIG9yIGVkZ2UuXG4gICAgICAgIC8vIENvbnNpZGVyIHVzaW5nIGFub3RoZXIgaW1wbGVtZW50YXRpb24gZm9yIHRoZSBmdXR1cmVcblxuICAgICAgICBjb25zdCBwYXRoID0gQXJyYXkuZnJvbShldi5jb21wb3NlZFBhdGgoKSk7XG5cbiAgICAgICAgaWYgKHBhdGggJiYgcGF0aC5sZW5ndGgpIHtcbiAgICAgICAgICAgIC8vQ2hlY2sgaWYgY3VycmVudCBhY3RpdmUgdHJpZ2dlciBpcyBpbiB0aGUgZXZlbnQgcGF0aFxuICAgICAgICAgICAgZm9yIChjb25zdCBldmVudFRhcmdldCBvZiBwYXRoKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgZWxlbWVudCA9IGV2ZW50VGFyZ2V0IGFzIEhUTUxFbGVtZW50O1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50ID09PSB0aGlzLnRyaWdnZXIpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG5cbiAgICBwcml2YXRlIHJlbW92ZU92ZXJsYXkoKTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLm92ZXJsYXlDb250ZW50ICYmIHRoaXMub3ZlcmxheUNvbnRlbnQucGFyZW50Tm9kZSkge1xuICAgICAgICAgICAgdGhpcy5vdmVybGF5Q29udGVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMub3ZlcmxheUNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBleHRyYWN0RXZlbnREZXRhaWwoZXY6IEN1c3RvbUV2ZW50PE92ZXJsYXlPcGVuRGV0YWlsPik6IHZvaWQge1xuICAgICAgICB0aGlzLm92ZXJsYXlDb250ZW50ID0gZXYuZGV0YWlsLmNvbnRlbnQ7XG4gICAgICAgIHRoaXMudHJpZ2dlciA9IGV2LmRldGFpbC50cmlnZ2VyO1xuICAgICAgICB0aGlzLnBsYWNlbWVudCA9IGV2LmRldGFpbC5wbGFjZW1lbnQ7XG4gICAgICAgIHRoaXMub2Zmc2V0ID0gZXYuZGV0YWlsLm9mZnNldDtcbiAgICAgICAgdGhpcy5pbnRlcmFjdGlvbiA9IGV2LmRldGFpbC5pbnRlcmFjdGlvbjtcbiAgICB9XG5cbiAgICBwcml2YXRlIHVwZGF0ZU92ZXJsYXlQb3NpdGlvbigpOiB2b2lkIHtcbiAgICAgICAgaWYgKCF0aGlzLnRyaWdnZXIgfHwgIXRoaXMub3ZlcmxheUNvbnRlbnQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGNvbnN0IG9wdGlvbnM6IENhbGN1bGF0ZVBvc2l0aW9uT3B0aW9ucyA9IHtcbiAgICAgICAgICAgIGNvbnRhaW5lclBhZGRpbmc6IDAsXG4gICAgICAgICAgICBjcm9zc09mZnNldDogMCxcbiAgICAgICAgICAgIGZsaXA6IGZhbHNlLFxuICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgIHBsYWNlbWVudDogdGhpcy5wbGFjZW1lbnQsXG4gICAgICAgIH07XG5cbiAgICAgICAgY29uc3QgcG9zaXRpb25PcHRpb25zID0geyAuLi5kZWZhdWx0T3B0aW9ucywgLi4ub3B0aW9ucyB9O1xuXG4gICAgICAgIHRoaXMucG9zaXRpb24gPSBjYWxjdWxhdGVQb3NpdGlvbihcbiAgICAgICAgICAgIHBvc2l0aW9uT3B0aW9ucy5wbGFjZW1lbnQsXG4gICAgICAgICAgICB0aGlzLm92ZXJsYXlDb250ZW50LFxuICAgICAgICAgICAgdGhpcy50cmlnZ2VyLFxuICAgICAgICAgICAgdGhpcyxcbiAgICAgICAgICAgIHBvc2l0aW9uT3B0aW9ucy5jb250YWluZXJQYWRkaW5nLFxuICAgICAgICAgICAgcG9zaXRpb25PcHRpb25zLmZsaXAsXG4gICAgICAgICAgICB0aGlzLFxuICAgICAgICAgICAgcG9zaXRpb25PcHRpb25zLm9mZnNldCxcbiAgICAgICAgICAgIHBvc2l0aW9uT3B0aW9ucy5jcm9zc09mZnNldFxuICAgICAgICApO1xuICAgIH1cblxuICAgIHByaXZhdGUgZ2V0IG92ZXJsYXlTdHlsZXMoKTogc3RyaW5nIHtcbiAgICAgICAgaWYgKHRoaXMucG9zaXRpb24pIHtcbiAgICAgICAgICAgIHJldHVybiBgdG9wOiAke3RoaXMucG9zaXRpb24ucG9zaXRpb25Ub3B9cHg7IGxlZnQ6ICR7XG4gICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbi5wb3NpdGlvbkxlZnRcbiAgICAgICAgICAgIH1weGA7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gJyc7XG4gICAgfVxufVxuXG5kZWNsYXJlIGdsb2JhbCB7XG4gICAgaW50ZXJmYWNlIEdsb2JhbEV2ZW50SGFuZGxlcnNFdmVudE1hcCB7XG4gICAgICAgICdzcC1vdmVybGF5OmNsaWNrLW91dCc6IEN1c3RvbUV2ZW50PEV2ZW50PjtcbiAgICAgICAgJ3NwLW92ZXJsYXk6b3Blbic6IEN1c3RvbUV2ZW50PE92ZXJsYXlPcGVuRGV0YWlsPjtcbiAgICAgICAgJ3NwLW92ZXJsYXk6Y2xvc2UnOiBDdXN0b21FdmVudDxPdmVybGF5Q2xvc2VEZXRhaWw+O1xuICAgIH1cbn1cbiIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuZXhwb3J0ICogZnJvbSAnLi9vdmVybGF5LXJvb3QnO1xuIiwiaW1wb3J0IHsgY3NzIH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuY29uc3Qgc3R5bGVzID0gY3NzYFxuI2NsaWNrLWNvbnRlbnQsI2hvdmVyLWNvbnRlbnR7ZGlzcGxheTpub25lfVxuYDtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlczsiLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHtcbiAgICBodG1sLFxuICAgIExpdEVsZW1lbnQsXG4gICAgcHJvcGVydHksXG4gICAgQ1NTUmVzdWx0QXJyYXksXG4gICAgVGVtcGxhdGVSZXN1bHQsXG59IGZyb20gJ2xpdC1lbGVtZW50JztcblxuaW1wb3J0IG92ZXJsYXlUcmlnZ2VyU3R5bGVzIGZyb20gJy4vb3ZlcmxheS10cmlnZ2VyLmNzcyc7XG5cbmltcG9ydCB7XG4gICAgT3ZlcmxheUNsb3NlRGV0YWlsLFxuICAgIE92ZXJsYXlPcGVuRGV0YWlsLFxuICAgIFRyaWdnZXJJbnRlcmFjdGlvbnMsXG4gICAgUGxhY2VtZW50LFxufSBmcm9tICcuLi9vdmVybGF5LXJvb3QnO1xuaW1wb3J0IHsgc3RyaWN0Q3VzdG9tRXZlbnQgfSBmcm9tICcuLi9ldmVudHMnO1xuXG5leHBvcnQgY2xhc3MgT3ZlcmxheVRyaWdnZXIgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgICBwdWJsaWMgc3RhdGljIGlzID0gJ292ZXJsYXktdHJpZ2dlcic7XG5cbiAgICBwdWJsaWMgc3RhdGljIGdldCBzdHlsZXMoKTogQ1NTUmVzdWx0QXJyYXkge1xuICAgICAgICByZXR1cm4gW292ZXJsYXlUcmlnZ2VyU3R5bGVzXTtcbiAgICB9XG5cbiAgICBAcHJvcGVydHkoeyByZWZsZWN0OiB0cnVlIH0pXG4gICAgcHVibGljIHBsYWNlbWVudDogUGxhY2VtZW50ID0gJ2JvdHRvbSc7XG5cbiAgICBAcHJvcGVydHkoeyB0eXBlOiBOdW1iZXIsIHJlZmxlY3Q6IHRydWUgfSlcbiAgICBwdWJsaWMgb2Zmc2V0ID0gNjtcblxuICAgIHByaXZhdGUgY2xpY2tDb250ZW50PzogSFRNTEVsZW1lbnQ7XG5cbiAgICBwcml2YXRlIGhvdmVyQ29udGVudD86IEhUTUxFbGVtZW50O1xuXG4gICAgcHVibGljIG9uT3ZlcmxheU9wZW4oZXY6IEV2ZW50LCBpbnRlcmFjdGlvbjogVHJpZ2dlckludGVyYWN0aW9ucyk6IHZvaWQge1xuICAgICAgICBjb25zdCBpc0NsaWNrID0gaW50ZXJhY3Rpb24gPT09ICdjbGljayc7XG4gICAgICAgIGNvbnN0IG92ZXJsYXlFbGVtZW50ID0gaXNDbGljayA/IHRoaXMuY2xpY2tDb250ZW50IDogdGhpcy5ob3ZlckNvbnRlbnQ7XG4gICAgICAgIGNvbnN0IGRlbGF5QXR0cmlidXRlID0gb3ZlcmxheUVsZW1lbnRcbiAgICAgICAgICAgID8gb3ZlcmxheUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdkZWxheScpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIGNvbnN0IGRlbGF5ID0gZGVsYXlBdHRyaWJ1dGUgPyBwYXJzZUZsb2F0KGRlbGF5QXR0cmlidXRlKSA6IDA7XG5cbiAgICAgICAgaWYgKCFvdmVybGF5RWxlbWVudCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG92ZXJsYXlPcGVuRGV0YWlsOiBPdmVybGF5T3BlbkRldGFpbCA9IHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IG92ZXJsYXlFbGVtZW50LFxuICAgICAgICAgICAgZGVsYXk6IGRlbGF5LFxuICAgICAgICAgICAgb2Zmc2V0OiB0aGlzLm9mZnNldCxcbiAgICAgICAgICAgIHBsYWNlbWVudDogdGhpcy5wbGFjZW1lbnQsXG4gICAgICAgICAgICB0cmlnZ2VyOiB0aGlzLFxuICAgICAgICAgICAgaW50ZXJhY3Rpb246IGludGVyYWN0aW9uLFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IG92ZXJsYXlPcGVuRXZlbnQgPSBzdHJpY3RDdXN0b21FdmVudCgnc3Atb3ZlcmxheTpvcGVuJywge1xuICAgICAgICAgICAgYnViYmxlczogdHJ1ZSxcbiAgICAgICAgICAgIGNvbXBvc2VkOiB0cnVlLFxuICAgICAgICAgICAgZGV0YWlsOiBvdmVybGF5T3BlbkRldGFpbCxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG92ZXJsYXlPcGVuRXZlbnQpO1xuICAgIH1cblxuICAgIHB1YmxpYyBvbk92ZXJsYXlDbG9zZShldjogRXZlbnQsIGludGVyYWN0aW9uOiBUcmlnZ2VySW50ZXJhY3Rpb25zKTogdm9pZCB7XG4gICAgICAgIGNvbnN0IGlzQ2xpY2sgPSBpbnRlcmFjdGlvbiA9PT0gJ2NsaWNrJztcbiAgICAgICAgY29uc3Qgb3ZlcmxheUVsZW1lbnQgPSBpc0NsaWNrID8gdGhpcy5jbGlja0NvbnRlbnQgOiB0aGlzLmhvdmVyQ29udGVudDtcblxuICAgICAgICBpZiAoIW92ZXJsYXlFbGVtZW50KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBjb25zdCBvdmVybGF5Q2xvc2VEZXRhaWw6IE92ZXJsYXlDbG9zZURldGFpbCA9IHtcbiAgICAgICAgICAgIGNvbnRlbnQ6IG92ZXJsYXlFbGVtZW50LFxuICAgICAgICB9O1xuXG4gICAgICAgIGNvbnN0IG92ZXJsYXlDbG9zZUV2ZW50ID0gc3RyaWN0Q3VzdG9tRXZlbnQoJ3NwLW92ZXJsYXk6Y2xvc2UnLCB7XG4gICAgICAgICAgICBidWJibGVzOiB0cnVlLFxuICAgICAgICAgICAgY29tcG9zZWQ6IHRydWUsXG4gICAgICAgICAgICBkZXRhaWw6IG92ZXJsYXlDbG9zZURldGFpbCxcbiAgICAgICAgfSk7XG5cbiAgICAgICAgdGhpcy5kaXNwYXRjaEV2ZW50KG92ZXJsYXlDbG9zZUV2ZW50KTtcbiAgICB9XG5cbiAgICBwdWJsaWMgb25UcmlnZ2VyQ2xpY2soZXY6IEV2ZW50KTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmNsaWNrQ29udGVudCkge1xuICAgICAgICAgICAgdGhpcy5vbk92ZXJsYXlPcGVuKGV2LCAnY2xpY2snKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBvblRyaWdnZXJNb3VzZU92ZXIoZXY6IEV2ZW50KTogdm9pZCB7XG4gICAgICAgIGlmICh0aGlzLmhvdmVyQ29udGVudCkge1xuICAgICAgICAgICAgdGhpcy5vbk92ZXJsYXlPcGVuKGV2LCAnaG92ZXInKTtcbiAgICAgICAgfVxuICAgIH1cblxuICAgIHB1YmxpYyBvblRyaWdnZXJNb3VzZUxlYXZlKGV2OiBFdmVudCk6IHZvaWQge1xuICAgICAgICBpZiAodGhpcy5ob3ZlckNvbnRlbnQpIHtcbiAgICAgICAgICAgIHRoaXMub25PdmVybGF5Q2xvc2UoZXYsICdob3ZlcicpO1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJvdGVjdGVkIHJlbmRlcigpOiBUZW1wbGF0ZVJlc3VsdCB7XG4gICAgICAgIHJldHVybiBodG1sYFxuICAgICAgICAgICAgPGRpdlxuICAgICAgICAgICAgICAgIGlkPVwidHJpZ2dlclwiXG4gICAgICAgICAgICAgICAgQGNsaWNrPSR7dGhpcy5vblRyaWdnZXJDbGlja31cbiAgICAgICAgICAgICAgICBAbW91c2VlbnRlcj0ke3RoaXMub25UcmlnZ2VyTW91c2VPdmVyfVxuICAgICAgICAgICAgICAgIEBtb3VzZWxlYXZlPSR7dGhpcy5vblRyaWdnZXJNb3VzZUxlYXZlfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIDxzbG90IG5hbWU9XCJ0cmlnZ2VyXCI+PC9zbG90PlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8c2xvdFxuICAgICAgICAgICAgICAgIEBzbG90Y2hhbmdlPSR7dGhpcy5vbkNsaWNrU2xvdENoYW5nZX1cbiAgICAgICAgICAgICAgICBuYW1lPVwiY2xpY2stY29udGVudFwiXG4gICAgICAgICAgICAgICAgaWQ9XCJjbGljay1jb250ZW50XCJcbiAgICAgICAgICAgID48L3Nsb3Q+XG4gICAgICAgICAgICA8c2xvdFxuICAgICAgICAgICAgICAgIEBzbG90Y2hhbmdlPSR7dGhpcy5vbkhvdmVyU2xvdENoYW5nZX1cbiAgICAgICAgICAgICAgICBuYW1lPVwiaG92ZXItY29udGVudFwiXG4gICAgICAgICAgICAgICAgaWQ9XCJob3Zlci1jb250ZW50XCJcbiAgICAgICAgICAgID48L3Nsb3Q+XG4gICAgICAgIGA7XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkNsaWNrU2xvdENoYW5nZShldjogRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKGV2LnRhcmdldCkge1xuICAgICAgICAgICAgY29uc3Qgc2xvdCA9IGV2LnRhcmdldCBhcyBIVE1MU2xvdEVsZW1lbnQ7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gdGhpcy5leHRyYWN0U2xvdENvbnRlbnQoc2xvdCk7XG5cbiAgICAgICAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbGlja0NvbnRlbnQgPSBjb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBvbkhvdmVyU2xvdENoYW5nZShldjogRXZlbnQpOiB2b2lkIHtcbiAgICAgICAgaWYgKGV2LnRhcmdldCkge1xuICAgICAgICAgICAgY29uc3Qgc2xvdCA9IGV2LnRhcmdldCBhcyBIVE1MU2xvdEVsZW1lbnQ7XG4gICAgICAgICAgICBjb25zdCBjb250ZW50ID0gdGhpcy5leHRyYWN0U2xvdENvbnRlbnQoc2xvdCk7XG5cbiAgICAgICAgICAgIGlmIChjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5ob3ZlckNvbnRlbnQgPSBjb250ZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuXG4gICAgcHJpdmF0ZSBleHRyYWN0U2xvdENvbnRlbnQoc2xvdDogSFRNTFNsb3RFbGVtZW50KTogSFRNTEVsZW1lbnQgfCBudWxsIHtcbiAgICAgICAgY29uc3Qgbm9kZXMgPSBzbG90LmFzc2lnbmVkTm9kZXMoKTtcblxuICAgICAgICBpZiAobm9kZXMubGVuZ3RoKSB7XG4gICAgICAgICAgICByZXR1cm4gbm9kZXNbMF0gYXMgSFRNTEVsZW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG59XG4iLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbmV4cG9ydCAqIGZyb20gJy4vb3ZlcmxheS10cmlnZ2VyJztcbiIsImltcG9ydCB7IGNzcyB9IGZyb20gJ2xpdC1lbGVtZW50JztcbmNvbnN0IHN0eWxlcyA9IGNzc2Bcbjpob3N0e2JveC1zaGFkb3c6MCAxcHggNHB4IHZhcigtLXNwZWN0cnVtLXBvcG92ZXItc2hhZG93LWNvbG9yKX0jdGlwOmFmdGVyLDpob3N0e2JhY2tncm91bmQtY29sb3I6dmFyKC0tc3BlY3RydW0tcG9wb3Zlci1iYWNrZ3JvdW5kLWNvbG9yKTtib3JkZXItY29sb3I6dmFyKC0tc3BlY3RydW0tcG9wb3Zlci1ib3JkZXItY29sb3IpfSN0aXA6YWZ0ZXJ7Ym94LXNoYWRvdzotMXB4IC0xcHggNHB4IHZhcigtLXNwZWN0cnVtLXBvcG92ZXItc2hhZG93LWNvbG9yKX06aG9zdHstLXNwZWN0cnVtLXBvcG92ZXItdGFyZ2V0LW9mZnNldDoxM3B4Oy0tc3BlY3RydW0tcG9wb3Zlci1kaWFsb2ctcGFkZGluZzozMHB4IDI5cHg7LS1zcGVjdHJ1bS1wb3BvdmVyLWRpYWxvZy1taW4td2lkdGg6MjcwcHg7LS1zcGVjdHJ1bS1wb3BvdmVyLW1pbi13aWR0aDp2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNDAwKTstLXNwZWN0cnVtLXBvcG92ZXItbWluLWhlaWdodDp2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtZGltZW5zaW9uLXNpemUtNDAwKTt0cmFuc2l0aW9uOnRyYW5zZm9ybSB2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtYW5pbWF0aW9uLWR1cmF0aW9uLTEwMCkgZWFzZS1pbi1vdXQsb3BhY2l0eSB2YXIoLS1zcGVjdHJ1bS1nbG9iYWwtYW5pbWF0aW9uLWR1cmF0aW9uLTEwMCkgZWFzZS1pbi1vdXQsdmlzaWJpbGl0eSAwbXMgbGluZWFyIHZhcigtLXNwZWN0cnVtLWdsb2JhbC1hbmltYXRpb24tZHVyYXRpb24tMTAwKTtkaXNwbGF5OmlubGluZS1mbGV4O2ZsZXgtZGlyZWN0aW9uOmNvbHVtbjtib3gtc2l6aW5nOmJvcmRlci1ib3g7bWluLXdpZHRoOnZhcigtLXNwZWN0cnVtLXBvcG92ZXItbWluLXdpZHRoKTttaW4taGVpZ2h0OnZhcigtLXNwZWN0cnVtLXBvcG92ZXItbWluLWhlaWdodCk7Ym9yZGVyLXN0eWxlOnNvbGlkO2JvcmRlci13aWR0aDp2YXIoLS1zcGVjdHJ1bS1wb3BvdmVyLWJvcmRlci1zaXplKTtib3JkZXItcmFkaXVzOnZhcigtLXNwZWN0cnVtLXBvcG92ZXItYm9yZGVyLXJhZGl1cyk7b3V0bGluZTpub25lfSN0aXAsOmhvc3R7cG9zaXRpb246YWJzb2x1dGV9I3RpcHtkaXNwbGF5Om5vbmU7b3ZlcmZsb3c6aGlkZGVuO3dpZHRoOmNhbGModmFyKC0tc3BlY3RydW0tcG9wb3Zlci10aXAtd2lkdGgpICsgMXB4KTtoZWlnaHQ6Y2FsYyh2YXIoLS1zcGVjdHJ1bS1wb3BvdmVyLXRpcC13aWR0aCkvMiArIHZhcigtLXNwZWN0cnVtLXBvcG92ZXItYm9yZGVyLXNpemUpKX0jdGlwOmFmdGVye2NvbnRlbnQ6XCJcIjt3aWR0aDp2YXIoLS1zcGVjdHJ1bS1wb3BvdmVyLXRpcC13aWR0aCk7aGVpZ2h0OnZhcigtLXNwZWN0cnVtLXBvcG92ZXItdGlwLXdpZHRoKTtib3JkZXItd2lkdGg6dmFyKC0tc3BlY3RydW0tcG9wb3Zlci1ib3JkZXItc2l6ZSk7Ym9yZGVyLXN0eWxlOnNvbGlkO3Bvc2l0aW9uOmFic29sdXRlO3RyYW5zZm9ybTpyb3RhdGUoNDVkZWcpO3RvcDotMThweDtsZWZ0Oi0xcHh9Omhvc3QoW2JvdHRvbV0pICN0aXAsOmhvc3QoW2xlZnRdKSAjdGlwLDpob3N0KFtyaWdodF0pICN0aXAsOmhvc3QoW3RvcF0pICN0aXB7ZGlzcGxheTpibG9ja306aG9zdChbbGVmdF0sW3RpcF0pe21hcmdpbi1yaWdodDp2YXIoLS1zcGVjdHJ1bS1wb3BvdmVyLXRhcmdldC1vZmZzZXQpfTpob3N0KFtsZWZ0XSkgI3RpcHtyaWdodDotMTZweDt0cmFuc2Zvcm06cm90YXRlKC05MGRlZyl9Omhvc3QoW3JpZ2h0XSxbdGlwXSl7bWFyZ2luLWxlZnQ6dmFyKC0tc3BlY3RydW0tcG9wb3Zlci10YXJnZXQtb2Zmc2V0KX06aG9zdChbcmlnaHRdKSAjdGlwe2xlZnQ6LTE2cHg7dHJhbnNmb3JtOnJvdGF0ZSg5MGRlZyl9Omhvc3QoW2xlZnRdKSAjdGlwLDpob3N0KFtyaWdodF0pICN0aXB7dG9wOjUwJTttYXJnaW4tdG9wOi02cHh9Omhvc3QoW2JvdHRvbV0sW3RpcF0pe21hcmdpbi10b3A6dmFyKC0tc3BlY3RydW0tcG9wb3Zlci10YXJnZXQtb2Zmc2V0KX06aG9zdChbYm90dG9tXSkgI3RpcHt0b3A6LTExcHg7dHJhbnNmb3JtOnJvdGF0ZSgxODBkZWcpfTpob3N0KFt0b3BdLFt0aXBdKXttYXJnaW4tYm90dG9tOnZhcigtLXNwZWN0cnVtLXBvcG92ZXItdGFyZ2V0LW9mZnNldCl9Omhvc3QoW3RvcF0pICN0aXB7Ym90dG9tOi0xMXB4fTpob3N0KFtib3R0b21dKSAjdGlwLDpob3N0KFt0b3BdKSAjdGlwe2xlZnQ6NTAlO21hcmdpbi1sZWZ0Oi0xMnB4fVxuYDtcbmV4cG9ydCBkZWZhdWx0IHN0eWxlczsiLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHsgaHRtbCwgTGl0RWxlbWVudCwgQ1NTUmVzdWx0QXJyYXksIFRlbXBsYXRlUmVzdWx0IH0gZnJvbSAnbGl0LWVsZW1lbnQnO1xuXG5pbXBvcnQgcG9wb3ZlclN0eWxlcyBmcm9tICcuL3BvcG92ZXIuY3NzJztcblxuZXhwb3J0IGNsYXNzIFBvcG92ZXIgZXh0ZW5kcyBMaXRFbGVtZW50IHtcbiAgICBwdWJsaWMgc3RhdGljIGlzID0gJ3NwLXBvcG92ZXInO1xuXG4gICAgcHVibGljIHN0YXRpYyBnZXQgc3R5bGVzKCk6IENTU1Jlc3VsdEFycmF5IHtcbiAgICAgICAgcmV0dXJuIFtwb3BvdmVyU3R5bGVzXTtcbiAgICB9XG5cbiAgICBwcm90ZWN0ZWQgcmVuZGVyKCk6IFRlbXBsYXRlUmVzdWx0IHtcbiAgICAgICAgcmV0dXJuIGh0bWxgXG4gICAgICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICAgICAgICA8ZGl2IGlkPVwidGlwXCI+PC9kaXY+XG4gICAgICAgIGA7XG4gICAgfVxufVxuIiwiLypcbkNvcHlyaWdodCAyMDE4IEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbm9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG50aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbk9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5leHBvcnQgKiBmcm9tICcuL3BvcG92ZXInO1xuIiwiLypcbkNvcHlyaWdodCAyMDE4IEFkb2JlLiBBbGwgcmlnaHRzIHJlc2VydmVkLlxuVGhpcyBmaWxlIGlzIGxpY2Vuc2VkIHRvIHlvdSB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgXCJMaWNlbnNlXCIpO1xueW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLiBZb3UgbWF5IG9idGFpbiBhIGNvcHlcbm9mIHRoZSBMaWNlbnNlIGF0IGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMFxuXG5Vbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlIGRpc3RyaWJ1dGVkIHVuZGVyXG50aGUgTGljZW5zZSBpcyBkaXN0cmlidXRlZCBvbiBhbiBcIkFTIElTXCIgQkFTSVMsIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBSRVBSRVNFTlRBVElPTlNcbk9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZVxuZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZCBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cbiovXG5cbmV4cG9ydCB0eXBlIElFbGVtZW50Q29uc3RydWN0b3IgPSBuZXcgKCkgPT4gSFRNTEVsZW1lbnQ7XG5leHBvcnQgdHlwZSBJUmVnaXN0ZXJhYmxlRWxlbWVudCA9IElFbGVtZW50Q29uc3RydWN0b3IgJiB7IGlzOiBzdHJpbmcgfTtcblxuLyoqXG4gKiBBIGhlbHBlciBmdW5jdGlvbiBmb3IgcmVnaXN0ZXJpbmcgY3VzdG9tIGVsZW1lbnRzIGFuZCBmaXJzdCBjaGVja2luZyBjb25kaXRpb25hbGx5IGlmIHRoZXkgYXJlIGFscmVhZHkgcmVnaXN0ZXJlZC5cbiAqXG4gKiBAcGFyYW0gY2xhc3NDdG9yIEEgSFRNTEVsZW1lbnQgY29uc3RydWN0b3IgdGhhdCBoYXMgYSBzdGF0aWMgJ2lzJyBwcm9wZXJ0eSBkZWZpbmluZyB0aGUgZGVzaXJlZCB0YWcgbmFtZS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGRlZmluZUN1c3RvbUVsZW1lbnQoY2xhc3NDdG9yOiBJUmVnaXN0ZXJhYmxlRWxlbWVudCk6IHZvaWQge1xuICAgIGlmICghY3VzdG9tRWxlbWVudHMuZ2V0KGNsYXNzQ3Rvci5pcykpIHtcbiAgICAgICAgY3VzdG9tRWxlbWVudHMuZGVmaW5lKGNsYXNzQ3Rvci5pcywgY2xhc3NDdG9yKTtcbiAgICB9XG59XG5cbi8qKlxuICogUmVnaXN0ZXJzIGFsbCBnaXZlbiBjbGFzcyBjb25zdHJ1Y3RvcnMgd2l0aCB0aGUgY3VzdG9tIGVsZW1lbnRzIHJlZ2lzdHJ5LCBhdm9pZGluZyBkdXBsaWNhdGUgcmVnaXN0cmF0aW9uIGVycm9ycy5cbiAqXG4gKiBAcGFyYW0gY2xhc3NDdG9ycyAtIEFueSBudW1iZXIgb2YgYXJndW1lbnRzIGVhY2ggZGVmaW5pbmcgYSBjdXN0b20gZWxlbWVudCB3aXRoIGFuICdpcycgc3RhdGljIHByb3BlcnR5LlxuICovXG5leHBvcnQgZnVuY3Rpb24gZGVmaW5lQ3VzdG9tRWxlbWVudHMoXG4gICAgLi4uY2xhc3NDdG9yczogSVJlZ2lzdGVyYWJsZUVsZW1lbnRbXVxuKTogdm9pZCB7XG4gICAgZm9yIChjb25zdCBjdG9yIG9mIGNsYXNzQ3RvcnMpIHtcbiAgICAgICAgZGVmaW5lQ3VzdG9tRWxlbWVudChjdG9yKTtcbiAgICB9XG59XG4iLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cbmV4cG9ydCAqIGZyb20gJy4vYmFubmVyJztcbmV4cG9ydCAqIGZyb20gJy4vYnV0dG9uJztcbmV4cG9ydCAqIGZyb20gJy4vY2FyZCc7XG5leHBvcnQgKiBmcm9tICcuL2NoZWNrYm94JztcbmV4cG9ydCAqIGZyb20gJy4vZHJvcHpvbmUnO1xuZXhwb3J0ICogZnJvbSAnLi9pbGx1c3RyYXRlZC1tZXNzYWdlJztcbmV4cG9ydCAqIGZyb20gJy4vbGluayc7XG5leHBvcnQgKiBmcm9tICcuL3JhZGlvJztcbmV4cG9ydCAqIGZyb20gJy4vcmFkaW8tZ3JvdXAnO1xuZXhwb3J0ICogZnJvbSAnLi9zbGlkZXInO1xuZXhwb3J0ICogZnJvbSAnLi9pY29uJztcbmV4cG9ydCAqIGZyb20gJy4vaWNvbnMnO1xuZXhwb3J0ICogZnJvbSAnLi9pY29uc2V0JztcbmV4cG9ydCAqIGZyb20gJy4vc2lkZW5hdic7XG5leHBvcnQgKiBmcm9tICcuL3N3aXRjaCc7XG5leHBvcnQgKiBmcm9tICcuL3RhYic7XG5leHBvcnQgKiBmcm9tICcuL3RhYi1saXN0JztcbmV4cG9ydCAqIGZyb20gJy4vdGhlbWVzJztcbmV4cG9ydCAqIGZyb20gJy4vb3ZlcmxheS1yb290JztcbmV4cG9ydCAqIGZyb20gJy4vb3ZlcmxheS10cmlnZ2VyJztcbmV4cG9ydCAqIGZyb20gJy4vcG9wb3Zlcic7XG5cbmV4cG9ydCAqIGZyb20gJy4vZGVmaW5lJztcbmV4cG9ydCAqIGZyb20gJy4vZXZlbnRzJztcblxuLy8gTk9URTogd2UgZG8gbm90IGV4cG9ydCBkZW1vLXBhZ2UgYmVjYXVzZSBpdCBoYXMgZGVwZW5kZW5jaWVzIG9uIG90aGVyIG1vZHVsZXMgd2UgZG9uJ3Qgd2FudCB0byBmb3JjZSBvbiB1c2Vyc1xuIiwiaW1wb3J0ICogYXMgU3BlY3RydW0gZnJvbSAnLi4vLi4vLi4vc3JjL2luZGV4JztcbmltcG9ydCAqIGFzIE1lZGl1bUljb25zIGZyb20gJy4uLy4uLy4uL3NyYy9pY29ucy9pY29ucy1tZWRpdW0nO1xuXG5jb25zdCB7IGRlZmluZUN1c3RvbUVsZW1lbnQsIGRlZmluZUN1c3RvbUVsZW1lbnRzLCAuLi5FbGVtZW50cyB9ID0gU3BlY3RydW07XG5jb25zdCBjdXN0b21FbGVtZW50cyA9IE9iamVjdC52YWx1ZXMoRWxlbWVudHMpLmZpbHRlcigoZWxlbWVudCkgPT4ge1xuICAgIHJldHVybiAhIWVsZW1lbnQuaXM7XG59KTtcblxuZGVmaW5lQ3VzdG9tRWxlbWVudHMoLi4uY3VzdG9tRWxlbWVudHMsIC4uLk9iamVjdC52YWx1ZXMoTWVkaXVtSWNvbnMpKTtcbiIsIi8qKlxuICogV2ViIGNvbXBvbmVudCBwb2x5ZmlsbHMgbG9hZGVyLCBiYXNlZCBvbjogaHR0cHM6Ly9naXRodWIuY29tL3dlYmNvbXBvbmVudHMvd2ViY29tcG9uZW50c2pzL2Jsb2IvbWFzdGVyL3dlYmNvbXBvbmVudHMtbG9hZGVyLmpzXG4gKlxuICogQWRhcHRlZCB0byBub3QgbG9hZCBsYW5ndWFnZSBwb2x5ZmlsbHMgYW5kIHVzZSBkeW5hbWljIGltcG9ydHNcbiAqL1xuZnVuY3Rpb24gbmVlZHNUZW1wbGF0ZVBvbHlmaWxsKCkge1xuICAvLyBubyByZWFsIDx0ZW1wbGF0ZT4gYmVjYXVzZSBubyBgY29udGVudGAgcHJvcGVydHkgKElFIGFuZCBvbGRlciBicm93c2VycylcbiAgY29uc3QgdGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuICBpZiAoISgnY29udGVudCcgaW4gdGVtcGxhdGUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gYnJva2VuIGRvYyBmcmFnbWVudCAob2xkZXIgRWRnZSlcbiAgaWYgKCEodGVtcGxhdGUuY29udGVudC5jbG9uZU5vZGUoKSBpbnN0YW5jZW9mIERvY3VtZW50RnJhZ21lbnQpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgLy8gYnJva2VuIDx0ZW1wbGF0ZT4gY2xvbmluZyAoRWRnZSB1cCB0byBhdCBsZWFzdCB2ZXJzaW9uIDE3KVxuICBjb25zdCB0ZW1wbGF0ZTIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuICB0ZW1wbGF0ZTIuY29udGVudC5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKSk7XG4gIHRlbXBsYXRlLmNvbnRlbnQuYXBwZW5kQ2hpbGQodGVtcGxhdGUyKTtcbiAgY29uc3QgY2xvbmUgPSB0ZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gIHJldHVybiAoXG4gICAgLy8gQHRzLWlnbm9yZVxuICAgIGNsb25lLmNvbnRlbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDAgfHxcbiAgICAvLyBAdHMtaWdub3JlXG4gICAgY2xvbmUuY29udGVudC5maXJzdENoaWxkLmNvbnRlbnQuY2hpbGROb2Rlcy5sZW5ndGggPT09IDBcbiAgKTtcbn1cblxuLyoqXG4gKiBMb2FkcyB3ZWIgY29tcG9uZW50IHBvbHlmaWxscyBpZiBuZWVkZWRcbiAqXG4gKiBAcmV0dXJucyB7UHJvbWlzZX0gcmVzb2x2ZXMgd2hlbiBwb2x5ZmlsbHMgYXJlIGxvYWRlZFxuICovXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBsb2FkUG9seWZpbGxzKCkge1xuICBjb25zdCBwb2x5ZmlsbHMgPSBbXTtcbiAgY29uc3QgbmVlZHNUZW1wbGF0ZSA9IG5lZWRzVGVtcGxhdGVQb2x5ZmlsbCgpO1xuICBjb25zdCBuZWVkc1NoYWRvd0RvbSA9XG4gICAgISgnYXR0YWNoU2hhZG93JyBpbiBFbGVtZW50LnByb3RvdHlwZSkgfHxcbiAgICAhKCdnZXRSb290Tm9kZScgaW4gRWxlbWVudC5wcm90b3R5cGUpIHx8XG4gICAgLy8gQHRzLWlnbm9yZVxuICAgICh3aW5kb3cuU2hhZHlET00gJiYgd2luZG93LlNoYWR5RE9NLmZvcmNlKTtcbiAgLy8gQHRzLWlnbm9yZVxuICBjb25zdCBuZWVkc0N1c3RvbUVsZW1lbnRzID0gIXdpbmRvdy5jdXN0b21FbGVtZW50cyB8fCB3aW5kb3cuY3VzdG9tRWxlbWVudHMuZm9yY2VQb2x5ZmlsbDtcblxuICAvLyBVUkwgaXMgcmVxdWlyZWQgYnkgd2ViY29tcG9uZW50cyBwb2x5ZmlsbFxuICAvLyBXZSBjYW4gdXNlIFVSTFNlYXJjaFBhcmFtcyBhcyBhIHdhdGVybWFyayBmb3IgVVJMIHN1cHBvcnRcbiAgaWYgKCEoJ1VSTFNlYXJjaFBhcmFtcycgaW4gd2luZG93KSkge1xuICAgIC8vIEB0cy1pZ25vcmVcbiAgICBwb2x5ZmlsbHMucHVzaChpbXBvcnQoJ0BidW5kbGVkLWVzLW1vZHVsZXMvdXJsLXBvbHlmaWxsJykpO1xuICB9XG5cbiAgaWYgKG5lZWRzVGVtcGxhdGUpIHtcbiAgICAvLyB0ZW1wbGF0ZSBpcyBhIHdhdGVybWFyayBmb3IgcmVxdWlyaW5nIGFsbCBwb2x5ZmlsbHMgKElFMTEgYW5kIEVkZ2UpXG4gICAgcG9seWZpbGxzLnB1c2goaW1wb3J0KCcuL3NyYy93ZWJjb21wb25lbnRzLWFsbC5qcycpKTtcbiAgfSBlbHNlIGlmIChuZWVkc1NoYWRvd0RvbSB8fCBuZWVkc0N1c3RvbUVsZW1lbnRzKSB7XG4gICAgLy8gb25seSBjaHJvbWUgNTMgc3VwcG9ydHMgc2hhZG93IGRvbSBidXQgbm90IGN1c3RvbSBlbGVtZW50cy4gdGhpcyBpcyBhbiBvbGRlciBicm93c2VyLCB0aGVyZSBpcyBubyBuZWVkXG4gICAgLy8gZm9yIGNvbXBsaWNhdGluZyB0aGUgc2V0dXAgaGVyZS4gdGhlcmUgaXMgbm8gaGFybSBpbiBsb2FkaW5nIHRoZSBwb2x5ZmlsbHMgdGhlcmVcbiAgICBwb2x5ZmlsbHMucHVzaChpbXBvcnQoJy4vc3JjL3dlYmNvbXBvbmVudHMtc2QtY2UuanMnKSk7XG4gIH1cblxuICByZXR1cm4gUHJvbWlzZS5hbGwocG9seWZpbGxzKTtcbn1cbiIsImZ1bmN0aW9uIHBvbHlmaWxsKHdpbmRvdykge1xuICBjb25zdCBFbGVtZW50UHJvdG90eXBlID0gd2luZG93LkVsZW1lbnQucHJvdG90eXBlO1xuXG4gIGlmICh0eXBlb2YgRWxlbWVudFByb3RvdHlwZS5tYXRjaGVzICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgRWxlbWVudFByb3RvdHlwZS5tYXRjaGVzID0gRWxlbWVudFByb3RvdHlwZS5tc01hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50UHJvdG90eXBlLm1vek1hdGNoZXNTZWxlY3RvciB8fCBFbGVtZW50UHJvdG90eXBlLndlYmtpdE1hdGNoZXNTZWxlY3RvciB8fCBmdW5jdGlvbiBtYXRjaGVzKHNlbGVjdG9yKSB7XG4gICAgICBsZXQgZWxlbWVudCA9IHRoaXM7XG4gICAgICBjb25zdCBlbGVtZW50cyA9IChlbGVtZW50LmRvY3VtZW50IHx8IGVsZW1lbnQub3duZXJEb2N1bWVudCkucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XG4gICAgICBsZXQgaW5kZXggPSAwO1xuXG4gICAgICB3aGlsZSAoZWxlbWVudHNbaW5kZXhdICYmIGVsZW1lbnRzW2luZGV4XSAhPT0gZWxlbWVudCkge1xuICAgICAgICArK2luZGV4O1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gQm9vbGVhbihlbGVtZW50c1tpbmRleF0pO1xuICAgIH07XG4gIH1cblxuICBpZiAodHlwZW9mIEVsZW1lbnRQcm90b3R5cGUuY2xvc2VzdCAhPT0gJ2Z1bmN0aW9uJykge1xuICAgIEVsZW1lbnRQcm90b3R5cGUuY2xvc2VzdCA9IGZ1bmN0aW9uIGNsb3Nlc3Qoc2VsZWN0b3IpIHtcbiAgICAgIGxldCBlbGVtZW50ID0gdGhpcztcblxuICAgICAgd2hpbGUgKGVsZW1lbnQgJiYgZWxlbWVudC5ub2RlVHlwZSA9PT0gMSkge1xuICAgICAgICBpZiAoZWxlbWVudC5tYXRjaGVzKHNlbGVjdG9yKSkge1xuICAgICAgICAgIHJldHVybiBlbGVtZW50O1xuICAgICAgICB9XG5cbiAgICAgICAgZWxlbWVudCA9IGVsZW1lbnQucGFyZW50Tm9kZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBwb2x5ZmlsbDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiIsIi8qXG5Db3B5cmlnaHQgMjAxOCBBZG9iZS4gQWxsIHJpZ2h0cyByZXNlcnZlZC5cblRoaXMgZmlsZSBpcyBsaWNlbnNlZCB0byB5b3UgdW5kZXIgdGhlIEFwYWNoZSBMaWNlbnNlLCBWZXJzaW9uIDIuMCAodGhlIFwiTGljZW5zZVwiKTtcbnlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS4gWW91IG1heSBvYnRhaW4gYSBjb3B5XG5vZiB0aGUgTGljZW5zZSBhdCBodHRwOi8vd3d3LmFwYWNoZS5vcmcvbGljZW5zZXMvTElDRU5TRS0yLjBcblxuVW5sZXNzIHJlcXVpcmVkIGJ5IGFwcGxpY2FibGUgbGF3IG9yIGFncmVlZCB0byBpbiB3cml0aW5nLCBzb2Z0d2FyZSBkaXN0cmlidXRlZCB1bmRlclxudGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLCBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgUkVQUkVTRU5UQVRJT05TXG5PRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC4gU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2VcbmdvdmVybmluZyBwZXJtaXNzaW9ucyBhbmQgbGltaXRhdGlvbnMgdW5kZXIgdGhlIExpY2Vuc2UuXG4qL1xuXG5pbXBvcnQgbG9hZFBvbHlmaWxscyBmcm9tICdAb3Blbi13Yy9wb2x5ZmlsbHMtbG9hZGVyJztcbmltcG9ydCBwb2x5ZmlsbCBmcm9tICdlbGVtZW50LWNsb3Nlc3QnO1xuXG5sb2FkUG9seWZpbGxzKCkudGhlbigoKSA9PiB7XG4gICAgcG9seWZpbGwod2luZG93KTtcbiAgICByZXF1aXJlKCcuL3V0aWxzL3NwZWN0cnVtJyk7XG4gICAgcmVxdWlyZSgnLi9jb21wb25lbnRzJyk7XG4gICAgcmVxdWlyZSgnLi9yb3V0ZXInKTtcbiAgICByZXF1aXJlKCcuL21haW4uY3NzJyk7XG59KTtcbiIsImV4cG9ydCBmdW5jdGlvbiB0b0FycmF5KG9iamVjdE9yQXJyYXkpIHtcbiAgb2JqZWN0T3JBcnJheSA9IG9iamVjdE9yQXJyYXkgfHwgW107XG4gIHJldHVybiBBcnJheS5pc0FycmF5KG9iamVjdE9yQXJyYXkpID8gb2JqZWN0T3JBcnJheSA6IFtvYmplY3RPckFycmF5XTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvZyhtc2cpIHtcbiAgcmV0dXJuIGBbVmFhZGluLlJvdXRlcl0gJHttc2d9YDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvZ1ZhbHVlKHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgIT09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIFN0cmluZyh2YWx1ZSk7XG4gIH1cblxuICBjb25zdCBzdHJpbmdUeXBlID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKHZhbHVlKS5tYXRjaCgvICguKilcXF0kLylbMV07XG4gIGlmIChzdHJpbmdUeXBlID09PSAnT2JqZWN0JyB8fCBzdHJpbmdUeXBlID09PSAnQXJyYXknKSB7XG4gICAgcmV0dXJuIGAke3N0cmluZ1R5cGV9ICR7SlNPTi5zdHJpbmdpZnkodmFsdWUpfWA7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHN0cmluZ1R5cGU7XG4gIH1cbn1cblxuY29uc3QgTU9EVUxFID0gJ21vZHVsZSc7XG5jb25zdCBOT01PRFVMRSA9ICdub21vZHVsZSc7XG5jb25zdCBidW5kbGVLZXlzID0gW01PRFVMRSwgTk9NT0RVTEVdO1xuXG5mdW5jdGlvbiBlbnN1cmVCdW5kbGUoc3JjKSB7XG4gIGlmICghc3JjLm1hdGNoKC8uK1xcLlttXT9qcyQvKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGxvZyhgVW5zdXBwb3J0ZWQgdHlwZSBmb3IgYnVuZGxlIFwiJHtzcmN9XCI6IC5qcyBvciAubWpzIGV4cGVjdGVkLmApXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlUm91dGUocm91dGUpIHtcbiAgaWYgKCFyb3V0ZSB8fCAhaXNTdHJpbmcocm91dGUucGF0aCkpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBsb2coYEV4cGVjdGVkIHJvdXRlIGNvbmZpZyB0byBiZSBhbiBvYmplY3Qgd2l0aCBhIFwicGF0aFwiIHN0cmluZyBwcm9wZXJ0eSwgb3IgYW4gYXJyYXkgb2Ygc3VjaCBvYmplY3RzYClcbiAgICApO1xuICB9XG5cbiAgY29uc3QgYnVuZGxlID0gcm91dGUuYnVuZGxlO1xuXG4gIGNvbnN0IHN0cmluZ0tleXMgPSBbJ2NvbXBvbmVudCcsICdyZWRpcmVjdCcsICdidW5kbGUnXTtcbiAgaWYgKFxuICAgICFpc0Z1bmN0aW9uKHJvdXRlLmFjdGlvbikgJiZcbiAgICAhQXJyYXkuaXNBcnJheShyb3V0ZS5jaGlsZHJlbikgJiZcbiAgICAhaXNGdW5jdGlvbihyb3V0ZS5jaGlsZHJlbikgJiZcbiAgICAhaXNPYmplY3QoYnVuZGxlKSAmJlxuICAgICFzdHJpbmdLZXlzLnNvbWUoa2V5ID0+IGlzU3RyaW5nKHJvdXRlW2tleV0pKVxuICApIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBsb2coXG4gICAgICAgIGBFeHBlY3RlZCByb3V0ZSBjb25maWcgXCIke3JvdXRlLnBhdGh9XCIgdG8gaW5jbHVkZSBlaXRoZXIgXCIke3N0cmluZ0tleXMuam9pbignXCIsIFwiJyl9XCIgYCArXG4gICAgICAgIGBvciBcImFjdGlvblwiIGZ1bmN0aW9uIGJ1dCBub25lIGZvdW5kLmBcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgaWYgKGJ1bmRsZSkge1xuICAgIGlmIChpc1N0cmluZyhidW5kbGUpKSB7XG4gICAgICBlbnN1cmVCdW5kbGUoYnVuZGxlKTtcbiAgICB9IGVsc2UgaWYgKCFidW5kbGVLZXlzLnNvbWUoa2V5ID0+IGtleSBpbiBidW5kbGUpKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGxvZygnRXhwZWN0ZWQgcm91dGUgYnVuZGxlIHRvIGluY2x1ZGUgZWl0aGVyIFwiJyArIE5PTU9EVUxFICsgJ1wiIG9yIFwiJyArIE1PRFVMRSArICdcIiBrZXlzLCBvciBib3RoJylcbiAgICAgICk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGJ1bmRsZUtleXMuZm9yRWFjaChrZXkgPT4ga2V5IGluIGJ1bmRsZSAmJiBlbnN1cmVCdW5kbGUoYnVuZGxlW2tleV0pKTtcbiAgICB9XG4gIH1cblxuICBpZiAocm91dGUucmVkaXJlY3QpIHtcbiAgICBbJ2J1bmRsZScsICdjb21wb25lbnQnXS5mb3JFYWNoKG92ZXJyaWRkZW5Qcm9wID0+IHtcbiAgICAgIGlmIChvdmVycmlkZGVuUHJvcCBpbiByb3V0ZSkge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgbG9nKFxuICAgICAgICAgICAgYFJvdXRlIGNvbmZpZyBcIiR7cm91dGUucGF0aH1cIiBoYXMgYm90aCBcInJlZGlyZWN0XCIgYW5kIFwiJHtvdmVycmlkZGVuUHJvcH1cIiBwcm9wZXJ0aWVzLCBgICtcbiAgICAgICAgICAgIGBhbmQgXCJyZWRpcmVjdFwiIHdpbGwgYWx3YXlzIG92ZXJyaWRlIHRoZSBsYXR0ZXIuIERpZCB5b3UgbWVhbiB0byBvbmx5IHVzZSBcIiR7b3ZlcnJpZGRlblByb3B9XCI/YFxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gZW5zdXJlUm91dGVzKHJvdXRlcykge1xuICB0b0FycmF5KHJvdXRlcykuZm9yRWFjaChyb3V0ZSA9PiBlbnN1cmVSb3V0ZShyb3V0ZSkpO1xufVxuXG5mdW5jdGlvbiBsb2FkU2NyaXB0KHNyYywga2V5KSB7XG4gIGxldCBzY3JpcHQgPSBkb2N1bWVudC5oZWFkLnF1ZXJ5U2VsZWN0b3IoJ3NjcmlwdFtzcmM9XCInICsgc3JjICsgJ1wiXVthc3luY10nKTtcbiAgaWYgKCFzY3JpcHQpIHtcbiAgICBzY3JpcHQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTtcbiAgICBzY3JpcHQuc2V0QXR0cmlidXRlKCdzcmMnLCBzcmMpO1xuICAgIGlmIChrZXkgPT09IE1PRFVMRSkge1xuICAgICAgc2NyaXB0LnNldEF0dHJpYnV0ZSgndHlwZScsIE1PRFVMRSk7XG4gICAgfSBlbHNlIGlmIChrZXkgPT09IE5PTU9EVUxFKSB7XG4gICAgICBzY3JpcHQuc2V0QXR0cmlidXRlKE5PTU9EVUxFLCAnJyk7XG4gICAgfVxuICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gIH1cbiAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcbiAgICBzY3JpcHQub25yZWFkeXN0YXRlY2hhbmdlID0gc2NyaXB0Lm9ubG9hZCA9IGUgPT4ge1xuICAgICAgc2NyaXB0Ll9fZHluYW1pY0ltcG9ydExvYWRlZCA9IHRydWU7XG4gICAgICByZXNvbHZlKGUpO1xuICAgIH07XG4gICAgc2NyaXB0Lm9uZXJyb3IgPSBlID0+IHtcbiAgICAgIGlmIChzY3JpcHQucGFyZW50Tm9kZSkge1xuICAgICAgICBzY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZChzY3JpcHQpO1xuICAgICAgfVxuICAgICAgcmVqZWN0KGUpO1xuICAgIH07XG4gICAgaWYgKHNjcmlwdC5wYXJlbnROb2RlID09PSBudWxsKSB7XG4gICAgICBkb2N1bWVudC5oZWFkLmFwcGVuZENoaWxkKHNjcmlwdCk7XG4gICAgfSBlbHNlIGlmIChzY3JpcHQuX19keW5hbWljSW1wb3J0TG9hZGVkKSB7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGxvYWRCdW5kbGUoYnVuZGxlKSB7XG4gIGlmIChpc1N0cmluZyhidW5kbGUpKSB7XG4gICAgcmV0dXJuIGxvYWRTY3JpcHQoYnVuZGxlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yYWNlKFxuICAgICAgYnVuZGxlS2V5c1xuICAgICAgICAuZmlsdGVyKGtleSA9PiBrZXkgaW4gYnVuZGxlKVxuICAgICAgICAubWFwKGtleSA9PiBsb2FkU2NyaXB0KGJ1bmRsZVtrZXldLCBrZXkpKVxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGZpcmVSb3V0ZXJFdmVudCh0eXBlLCBkZXRhaWwpIHtcbiAgcmV0dXJuICF3aW5kb3cuZGlzcGF0Y2hFdmVudChuZXcgQ3VzdG9tRXZlbnQoXG4gICAgYHZhYWRpbi1yb3V0ZXItJHt0eXBlfWAsXG4gICAge2NhbmNlbGFibGU6IHR5cGUgPT09ICdnbycsIGRldGFpbH1cbiAgKSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc09iamVjdChvKSB7XG4gIC8vIGd1YXJkIGFnYWluc3QgbnVsbCBwYXNzaW5nIHRoZSB0eXBlb2YgY2hlY2tcbiAgcmV0dXJuIHR5cGVvZiBvID09PSAnb2JqZWN0JyAmJiAhIW87XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc0Z1bmN0aW9uKGYpIHtcbiAgcmV0dXJuIHR5cGVvZiBmID09PSAnZnVuY3Rpb24nO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNTdHJpbmcocykge1xuICByZXR1cm4gdHlwZW9mIHMgPT09ICdzdHJpbmcnO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gZ2V0Tm90Rm91bmRFcnJvcihjb250ZXh0KSB7XG4gIGNvbnN0IGVycm9yID0gbmV3IEVycm9yKGxvZyhgUGFnZSBub3QgZm91bmQgKCR7Y29udGV4dC5wYXRobmFtZX0pYCkpO1xuICBlcnJvci5jb250ZXh0ID0gY29udGV4dDtcbiAgZXJyb3IuY29kZSA9IDQwNDtcbiAgcmV0dXJuIGVycm9yO1xufVxuXG5leHBvcnQgY29uc3Qgbm90Rm91bmRSZXN1bHQgPSBuZXcgKGNsYXNzIE5vdEZvdW5kUmVzdWx0IHt9KSgpO1xuIiwiaW1wb3J0IHtmaXJlUm91dGVyRXZlbnR9IGZyb20gJy4uL3V0aWxzLmpzJztcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IGNvdmVyYWdlIGlzIGNhbGN1bGF0ZWQgaW4gQ2hyb21lLCB0aGlzIGNvZGUgaXMgZm9yIElFICovXG5mdW5jdGlvbiBnZXRBbmNob3JPcmlnaW4oYW5jaG9yKSB7XG4gIC8vIElFMTE6IG9uIEhUVFAgYW5kIEhUVFBTIHRoZSBkZWZhdWx0IHBvcnQgaXMgbm90IGluY2x1ZGVkIGludG9cbiAgLy8gd2luZG93LmxvY2F0aW9uLm9yaWdpbiwgc28gd29uJ3QgaW5jbHVkZSBpdCBoZXJlIGVpdGhlci5cbiAgY29uc3QgcG9ydCA9IGFuY2hvci5wb3J0O1xuICBjb25zdCBwcm90b2NvbCA9IGFuY2hvci5wcm90b2NvbDtcbiAgY29uc3QgZGVmYXVsdEh0dHAgPSBwcm90b2NvbCA9PT0gJ2h0dHA6JyAmJiBwb3J0ID09PSAnODAnO1xuICBjb25zdCBkZWZhdWx0SHR0cHMgPSBwcm90b2NvbCA9PT0gJ2h0dHBzOicgJiYgcG9ydCA9PT0gJzQ0Myc7XG4gIGNvbnN0IGhvc3QgPSAoZGVmYXVsdEh0dHAgfHwgZGVmYXVsdEh0dHBzKVxuICAgID8gYW5jaG9yLmhvc3RuYW1lIC8vIGRvZXMgbm90IGluY2x1ZGUgdGhlIHBvcnQgbnVtYmVyIChlLmcuIHd3dy5leGFtcGxlLm9yZylcbiAgICA6IGFuY2hvci5ob3N0OyAvLyBkb2VzIGluY2x1ZGUgdGhlIHBvcnQgbnVtYmVyIChlLmcuIHd3dy5leGFtcGxlLm9yZzo4MClcbiAgcmV0dXJuIGAke3Byb3RvY29sfS8vJHtob3N0fWA7XG59XG5cbi8vIFRoZSBsaXN0IG9mIGNoZWNrcyBpcyBub3QgY29tcGxldGU6XG4vLyAgLSBTVkcgc3VwcG9ydCBpcyBtaXNzaW5nXG4vLyAgLSB0aGUgJ3JlbCcgYXR0cmlidXRlIGlzIG5vdCBjb25zaWRlcmVkXG5mdW5jdGlvbiB2YWFkaW5Sb3V0ZXJHbG9iYWxDbGlja0hhbmRsZXIoZXZlbnQpIHtcbiAgLy8gaWdub3JlIHRoZSBjbGljayBpZiB0aGUgZGVmYXVsdCBhY3Rpb24gaXMgcHJldmVudGVkXG4gIGlmIChldmVudC5kZWZhdWx0UHJldmVudGVkKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gaWdub3JlIHRoZSBjbGljayBpZiBub3Qgd2l0aCB0aGUgcHJpbWFyeSBtb3VzZSBidXR0b25cbiAgaWYgKGV2ZW50LmJ1dHRvbiAhPT0gMCkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGlnbm9yZSB0aGUgY2xpY2sgaWYgYSBtb2RpZmllciBrZXkgaXMgcHJlc3NlZFxuICBpZiAoZXZlbnQuc2hpZnRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQubWV0YUtleSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGZpbmQgdGhlIDxhPiBlbGVtZW50IHRoYXQgdGhlIGNsaWNrIGlzIGF0IChvciB3aXRoaW4pXG4gIGxldCBhbmNob3IgPSBldmVudC50YXJnZXQ7XG4gIGNvbnN0IHBhdGggPSBldmVudC5jb21wb3NlZFBhdGhcbiAgICA/IGV2ZW50LmNvbXBvc2VkUGF0aCgpXG4gICAgOiAoZXZlbnQucGF0aCB8fCBbXSk7XG5cbiAgLy8gRklYTUUod2ViLXBhZGF3YW4pOiBgU3ltYm9sLml0ZXJhdG9yYCB1c2VkIGJ5IHdlYmNvbXBvbmVudHNqcyBpcyBicm9rZW4gZm9yIGFycmF5c1xuICAvLyBleGFtcGxlIHRvIGNoZWNrOiBgZm9yLi4ub2ZgIGxvb3AgaGVyZSB0aHJvd3MgdGhlIFwiTm90IHlldCBpbXBsZW1lbnRlZFwiIGVycm9yXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgcGF0aC5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IHRhcmdldCA9IHBhdGhbaV07XG4gICAgaWYgKHRhcmdldC5ub2RlTmFtZSAmJiB0YXJnZXQubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gJ2EnKSB7XG4gICAgICBhbmNob3IgPSB0YXJnZXQ7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cblxuICB3aGlsZSAoYW5jaG9yICYmIGFuY2hvci5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnYScpIHtcbiAgICBhbmNob3IgPSBhbmNob3IucGFyZW50Tm9kZTtcbiAgfVxuXG4gIC8vIGlnbm9yZSB0aGUgY2xpY2sgaWYgbm90IGF0IGFuIDxhPiBlbGVtZW50XG4gIGlmICghYW5jaG9yIHx8IGFuY2hvci5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpICE9PSAnYScpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBpZ25vcmUgdGhlIGNsaWNrIGlmIHRoZSA8YT4gZWxlbWVudCBoYXMgYSBub24tZGVmYXVsdCB0YXJnZXRcbiAgaWYgKGFuY2hvci50YXJnZXQgJiYgYW5jaG9yLnRhcmdldC50b0xvd2VyQ2FzZSgpICE9PSAnX3NlbGYnKSB7XG4gICAgcmV0dXJuO1xuICB9XG5cbiAgLy8gaWdub3JlIHRoZSBjbGljayBpZiB0aGUgPGE+IGVsZW1lbnQgaGFzIHRoZSAnZG93bmxvYWQnIGF0dHJpYnV0ZVxuICBpZiAoYW5jaG9yLmhhc0F0dHJpYnV0ZSgnZG93bmxvYWQnKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIC8vIGlnbm9yZSB0aGUgY2xpY2sgaWYgdGhlIHRhcmdldCBVUkwgaXMgYSBmcmFnbWVudCBvbiB0aGUgY3VycmVudCBwYWdlXG4gIGlmIChhbmNob3IucGF0aG5hbWUgPT09IHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSAmJiBhbmNob3IuaGFzaCAhPT0gJycpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBpZ25vcmUgdGhlIGNsaWNrIGlmIHRoZSB0YXJnZXQgaXMgZXh0ZXJuYWwgdG8gdGhlIGFwcFxuICAvLyBJbiBJRTExIEhUTUxBbmNob3JFbGVtZW50IGRvZXMgbm90IGhhdmUgdGhlIGBvcmlnaW5gIHByb3BlcnR5XG4gIGNvbnN0IG9yaWdpbiA9IGFuY2hvci5vcmlnaW4gfHwgZ2V0QW5jaG9yT3JpZ2luKGFuY2hvcik7XG4gIGlmIChvcmlnaW4gIT09IHdpbmRvdy5sb2NhdGlvbi5vcmlnaW4pIHtcbiAgICByZXR1cm47XG4gIH1cblxuICAvLyBpZiBub25lIG9mIHRoZSBhYm92ZSwgY29udmVydCB0aGUgY2xpY2sgaW50byBhIG5hdmlnYXRpb24gZXZlbnRcbiAgaWYgKGZpcmVSb3V0ZXJFdmVudCgnZ28nLCB7cGF0aG5hbWU6IGFuY2hvci5wYXRobmFtZX0pKSB7XG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgfVxufVxuXG4vKipcbiAqIEEgbmF2aWdhdGlvbiB0cmlnZ2VyIGZvciBWYWFkaW4gUm91dGVyIHRoYXQgdHJhbnNsYXRlZCBjbGlja3Mgb24gYDxhPmAgbGlua3NcbiAqIGludG8gVmFhZGluIFJvdXRlciBuYXZpZ2F0aW9uIGV2ZW50cy5cbiAqXG4gKiBPbmx5IHJlZ3VsYXIgY2xpY2tzIG9uIGluLWFwcCBsaW5rcyBhcmUgdHJhbnNsYXRlZCAocHJpbWFyeSBtb3VzZSBidXR0b24sIG5vXG4gKiBtb2RpZmllciBrZXlzLCB0aGUgdGFyZ2V0IGhyZWYgaXMgd2l0aGluIHRoZSBhcHAncyBVUkwgc3BhY2UpLlxuICpcbiAqIEBtZW1iZXJPZiBWYWFkaW4uUm91dGVyLlRyaWdnZXJzXG4gKiBAdHlwZSB7TmF2aWdhdGlvblRyaWdnZXJ9XG4gKi9cbmNvbnN0IENMSUNLID0ge1xuICBhY3RpdmF0ZSgpIHtcbiAgICB3aW5kb3cuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB2YWFkaW5Sb3V0ZXJHbG9iYWxDbGlja0hhbmRsZXIpO1xuICB9LFxuXG4gIGluYWN0aXZhdGUoKSB7XG4gICAgd2luZG93LmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdmFhZGluUm91dGVyR2xvYmFsQ2xpY2tIYW5kbGVyKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgQ0xJQ0s7XG4iLCJpbXBvcnQge2ZpcmVSb3V0ZXJFdmVudCwgaXNGdW5jdGlvbn0gZnJvbSAnLi4vdXRpbHMuanMnO1xuXG4vLyBQb3BTdGF0ZUV2ZW50IGNvbnN0cnVjdG9yIHNoaW1cbmNvbnN0IGlzSUUgPSAvVHJpZGVudC8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KTtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQ6IGNvdmVyYWdlIGlzIGNhbGN1bGF0ZWQgaW4gQ2hyb21lLCB0aGlzIGNvZGUgaXMgZm9yIElFICovXG5pZiAoaXNJRSAmJiAhaXNGdW5jdGlvbih3aW5kb3cuUG9wU3RhdGVFdmVudCkpIHtcbiAgd2luZG93LlBvcFN0YXRlRXZlbnQgPSBmdW5jdGlvbihpblR5cGUsIHBhcmFtcykge1xuICAgIHBhcmFtcyA9IHBhcmFtcyB8fCB7fTtcbiAgICB2YXIgZSA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgIGUuaW5pdEV2ZW50KGluVHlwZSwgQm9vbGVhbihwYXJhbXMuYnViYmxlcyksIEJvb2xlYW4ocGFyYW1zLmNhbmNlbGFibGUpKTtcbiAgICBlLnN0YXRlID0gcGFyYW1zLnN0YXRlIHx8IG51bGw7XG4gICAgcmV0dXJuIGU7XG4gIH07XG4gIHdpbmRvdy5Qb3BTdGF0ZUV2ZW50LnByb3RvdHlwZSA9IHdpbmRvdy5FdmVudC5wcm90b3R5cGU7XG59XG5cbmZ1bmN0aW9uIHZhYWRpblJvdXRlckdsb2JhbFBvcHN0YXRlSGFuZGxlcihldmVudCkge1xuICBpZiAoZXZlbnQuc3RhdGUgPT09ICd2YWFkaW4tcm91dGVyLWlnbm9yZScpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgZmlyZVJvdXRlckV2ZW50KCdnbycsIHtwYXRobmFtZTogd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lfSk7XG59XG5cbi8qKlxuICogQSBuYXZpZ2F0aW9uIHRyaWdnZXIgZm9yIFZhYWRpbiBSb3V0ZXIgdGhhdCB0cmFuc2xhdGVzIHBvcHN0YXRlIGV2ZW50cyBpbnRvXG4gKiBWYWFkaW4gUm91dGVyIG5hdmlnYXRpb24gZXZlbnRzLlxuICpcbiAqIEBtZW1iZXJPZiBWYWFkaW4uUm91dGVyLlRyaWdnZXJzXG4gKiBAdHlwZSB7TmF2aWdhdGlvblRyaWdnZXJ9XG4gKi9cbmNvbnN0IFBPUFNUQVRFID0ge1xuICBhY3RpdmF0ZSgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigncG9wc3RhdGUnLCB2YWFkaW5Sb3V0ZXJHbG9iYWxQb3BzdGF0ZUhhbmRsZXIpO1xuICB9LFxuXG4gIGluYWN0aXZhdGUoKSB7XG4gICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvcHN0YXRlJywgdmFhZGluUm91dGVyR2xvYmFsUG9wc3RhdGVIYW5kbGVyKTtcbiAgfVxufTtcblxuZXhwb3J0IGRlZmF1bHQgUE9QU1RBVEU7XG4iLCIvKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIERlZmF1bHQgY29uZmlncy5cbiAqL1xudmFyIERFRkFVTFRfREVMSU1JVEVSID0gJy8nXG52YXIgREVGQVVMVF9ERUxJTUlURVJTID0gJy4vJ1xuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCJdXG4gIC8vIFwiL3JvdXRlKFxcXFxkKylcIiAgPT4gW3VuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFwiXFxkK1wiLCB1bmRlZmluZWRdXG4gICcoPzpcXFxcOihcXFxcdyspKD86XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSk/fFxcXFwoKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcKCldKSspXFxcXCkpKFsrKj9dKT8nXG5dLmpvaW4oJ3wnKSwgJ2cnKVxuXG4vKipcbiAqIFBhcnNlIGEgc3RyaW5nIGZvciB0aGUgcmF3IHRva2Vucy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICBzdHJcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFBcnJheX1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwgb3B0aW9ucykge1xuICB2YXIgdG9rZW5zID0gW11cbiAgdmFyIGtleSA9IDBcbiAgdmFyIGluZGV4ID0gMFxuICB2YXIgcGF0aCA9ICcnXG4gIHZhciBkZWZhdWx0RGVsaW1pdGVyID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXIpIHx8IERFRkFVTFRfREVMSU1JVEVSXG4gIHZhciBkZWxpbWl0ZXJzID0gKG9wdGlvbnMgJiYgb3B0aW9ucy5kZWxpbWl0ZXJzKSB8fCBERUZBVUxUX0RFTElNSVRFUlNcbiAgdmFyIHBhdGhFc2NhcGVkID0gZmFsc2VcbiAgdmFyIHJlc1xuXG4gIHdoaWxlICgocmVzID0gUEFUSF9SRUdFWFAuZXhlYyhzdHIpKSAhPT0gbnVsbCkge1xuICAgIHZhciBtID0gcmVzWzBdXG4gICAgdmFyIGVzY2FwZWQgPSByZXNbMV1cbiAgICB2YXIgb2Zmc2V0ID0gcmVzLmluZGV4XG4gICAgcGF0aCArPSBzdHIuc2xpY2UoaW5kZXgsIG9mZnNldClcbiAgICBpbmRleCA9IG9mZnNldCArIG0ubGVuZ3RoXG5cbiAgICAvLyBJZ25vcmUgYWxyZWFkeSBlc2NhcGVkIHNlcXVlbmNlcy5cbiAgICBpZiAoZXNjYXBlZCkge1xuICAgICAgcGF0aCArPSBlc2NhcGVkWzFdXG4gICAgICBwYXRoRXNjYXBlZCA9IHRydWVcbiAgICAgIGNvbnRpbnVlXG4gICAgfVxuXG4gICAgdmFyIHByZXYgPSAnJ1xuICAgIHZhciBuZXh0ID0gc3RyW2luZGV4XVxuICAgIHZhciBuYW1lID0gcmVzWzJdXG4gICAgdmFyIGNhcHR1cmUgPSByZXNbM11cbiAgICB2YXIgZ3JvdXAgPSByZXNbNF1cbiAgICB2YXIgbW9kaWZpZXIgPSByZXNbNV1cblxuICAgIGlmICghcGF0aEVzY2FwZWQgJiYgcGF0aC5sZW5ndGgpIHtcbiAgICAgIHZhciBrID0gcGF0aC5sZW5ndGggLSAxXG5cbiAgICAgIGlmIChkZWxpbWl0ZXJzLmluZGV4T2YocGF0aFtrXSkgPiAtMSkge1xuICAgICAgICBwcmV2ID0gcGF0aFtrXVxuICAgICAgICBwYXRoID0gcGF0aC5zbGljZSgwLCBrKVxuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFB1c2ggdGhlIGN1cnJlbnQgcGF0aCBvbnRvIHRoZSB0b2tlbnMuXG4gICAgaWYgKHBhdGgpIHtcbiAgICAgIHRva2Vucy5wdXNoKHBhdGgpXG4gICAgICBwYXRoID0gJydcbiAgICAgIHBhdGhFc2NhcGVkID0gZmFsc2VcbiAgICB9XG5cbiAgICB2YXIgcGFydGlhbCA9IHByZXYgIT09ICcnICYmIG5leHQgIT09IHVuZGVmaW5lZCAmJiBuZXh0ICE9PSBwcmV2XG4gICAgdmFyIHJlcGVhdCA9IG1vZGlmaWVyID09PSAnKycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBvcHRpb25hbCA9IG1vZGlmaWVyID09PSAnPycgfHwgbW9kaWZpZXIgPT09ICcqJ1xuICAgIHZhciBkZWxpbWl0ZXIgPSBwcmV2IHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZXYsXG4gICAgICBkZWxpbWl0ZXI6IGRlbGltaXRlcixcbiAgICAgIG9wdGlvbmFsOiBvcHRpb25hbCxcbiAgICAgIHJlcGVhdDogcmVwZWF0LFxuICAgICAgcGFydGlhbDogcGFydGlhbCxcbiAgICAgIHBhdHRlcm46IHBhdHRlcm4gPyBlc2NhcGVHcm91cChwYXR0ZXJuKSA6ICdbXicgKyBlc2NhcGVTdHJpbmcoZGVsaW1pdGVyKSArICddKz8nXG4gICAgfSlcbiAgfVxuXG4gIC8vIFB1c2ggYW55IHJlbWFpbmluZyBjaGFyYWN0ZXJzLlxuICBpZiAocGF0aCB8fCBpbmRleCA8IHN0ci5sZW5ndGgpIHtcbiAgICB0b2tlbnMucHVzaChwYXRoICsgc3RyLnN1YnN0cihpbmRleCkpXG4gIH1cblxuICByZXR1cm4gdG9rZW5zXG59XG5cbi8qKlxuICogQ29tcGlsZSBhIHN0cmluZyB0byBhIHRlbXBsYXRlIGZ1bmN0aW9uIGZvciB0aGUgcGF0aC5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9ICAgICAgICAgICAgIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshZnVuY3Rpb24oT2JqZWN0PSwgT2JqZWN0PSl9XG4gKi9cbmZ1bmN0aW9uIGNvbXBpbGUgKHN0ciwgb3B0aW9ucykge1xuICByZXR1cm4gdG9rZW5zVG9GdW5jdGlvbihwYXJzZShzdHIsIG9wdGlvbnMpKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIG1ldGhvZCBmb3IgdHJhbnNmb3JtaW5nIHRva2VucyBpbnRvIHRoZSBwYXRoIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiB0b2tlbnNUb0Z1bmN0aW9uICh0b2tlbnMpIHtcbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHRva2VucyBpbnRvIHJlZ2V4cHMuXG4gIHZhciBtYXRjaGVzID0gbmV3IEFycmF5KHRva2Vucy5sZW5ndGgpXG5cbiAgLy8gQ29tcGlsZSBhbGwgdGhlIHBhdHRlcm5zIGJlZm9yZSBjb21waWxhdGlvbi5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0b2tlbnMubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAodHlwZW9mIHRva2Vuc1tpXSA9PT0gJ29iamVjdCcpIHtcbiAgICAgIG1hdGNoZXNbaV0gPSBuZXcgUmVnRXhwKCdeKD86JyArIHRva2Vuc1tpXS5wYXR0ZXJuICsgJykkJylcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKGRhdGEsIG9wdGlvbnMpIHtcbiAgICB2YXIgcGF0aCA9ICcnXG4gICAgdmFyIGVuY29kZSA9IChvcHRpb25zICYmIG9wdGlvbnMuZW5jb2RlKSB8fCBlbmNvZGVVUklDb21wb25lbnRcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgdG9rZW4gPSB0b2tlbnNbaV1cblxuICAgICAgaWYgKHR5cGVvZiB0b2tlbiA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgcGF0aCArPSB0b2tlblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhID8gZGF0YVt0b2tlbi5uYW1lXSA6IHVuZGVmaW5lZFxuICAgICAgdmFyIHNlZ21lbnRcblxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgZ290IGFycmF5JylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh2YWx1ZS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIGNvbnRpbnVlXG5cbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgIH1cblxuICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHZhbHVlLmxlbmd0aDsgaisrKSB7XG4gICAgICAgICAgc2VnbWVudCA9IGVuY29kZSh2YWx1ZVtqXSwgdG9rZW4pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIicpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJyB8fCB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nKSB7XG4gICAgICAgIHNlZ21lbnQgPSBlbmNvZGUoU3RyaW5nKHZhbHVlKSwgdG9rZW4pXG5cbiAgICAgICAgaWYgKCFtYXRjaGVzW2ldLnRlc3Qoc2VnbWVudCkpIHtcbiAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG1hdGNoIFwiJyArIHRva2VuLnBhdHRlcm4gKyAnXCIsIGJ1dCBnb3QgXCInICsgc2VnbWVudCArICdcIicpXG4gICAgICAgIH1cblxuICAgICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICAgICAgY29udGludWVcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIC8vIFByZXBlbmQgcGFydGlhbCBzZWdtZW50IHByZWZpeGVzLlxuICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkgcGF0aCArPSB0b2tlbi5wcmVmaXhcblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIGJlICcgKyAodG9rZW4ucmVwZWF0ID8gJ2FuIGFycmF5JyA6ICdhIHN0cmluZycpKVxuICAgIH1cblxuICAgIHJldHVybiBwYXRoXG4gIH1cbn1cblxuLyoqXG4gKiBFc2NhcGUgYSByZWd1bGFyIGV4cHJlc3Npb24gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gc3RyXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZVN0cmluZyAoc3RyKSB7XG4gIHJldHVybiBzdHIucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokLygpXSkvZywgJ1xcXFwkMScpXG59XG5cbi8qKlxuICogR2V0IHRoZSBmbGFncyBmb3IgYSByZWdleHAgZnJvbSB0aGUgb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gIHtPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZmxhZ3MgKG9wdGlvbnMpIHtcbiAgcmV0dXJuIG9wdGlvbnMgJiYgb3B0aW9ucy5zZW5zaXRpdmUgPyAnJyA6ICdpJ1xufVxuXG4vKipcbiAqIFB1bGwgb3V0IGtleXMgZnJvbSBhIHJlZ2V4cC5cbiAqXG4gKiBAcGFyYW0gIHshUmVnRXhwfSBwYXRoXG4gKiBAcGFyYW0gIHtBcnJheT19ICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiByZWdleHBUb1JlZ2V4cCAocGF0aCwga2V5cykge1xuICBpZiAoIWtleXMpIHJldHVybiBwYXRoXG5cbiAgLy8gVXNlIGEgbmVnYXRpdmUgbG9va2FoZWFkIHRvIG1hdGNoIG9ubHkgY2FwdHVyaW5nIGdyb3Vwcy5cbiAgdmFyIGdyb3VwcyA9IHBhdGguc291cmNlLm1hdGNoKC9cXCgoPyFcXD8pL2cpXG5cbiAgaWYgKGdyb3Vwcykge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZ3JvdXBzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBrZXlzLnB1c2goe1xuICAgICAgICBuYW1lOiBpLFxuICAgICAgICBwcmVmaXg6IG51bGwsXG4gICAgICAgIGRlbGltaXRlcjogbnVsbCxcbiAgICAgICAgb3B0aW9uYWw6IGZhbHNlLFxuICAgICAgICByZXBlYXQ6IGZhbHNlLFxuICAgICAgICBwYXJ0aWFsOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcGF0aFxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5PX0gIGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICByZXR1cm4gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG59XG5cbi8qKlxuICogQ3JlYXRlIGEgcGF0aCByZWdleHAgZnJvbSBzdHJpbmcgaW5wdXQuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfSAgcGF0aFxuICogQHBhcmFtICB7QXJyYXk9fSAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgcmV0dXJuIHRva2Vuc1RvUmVnRXhwKHBhcnNlKHBhdGgsIG9wdGlvbnMpLCBrZXlzLCBvcHRpb25zKVxufVxuXG4vKipcbiAqIEV4cG9zZSBhIGZ1bmN0aW9uIGZvciB0YWtpbmcgdG9rZW5zIGFuZCByZXR1cm5pbmcgYSBSZWdFeHAuXG4gKlxuICogQHBhcmFtICB7IUFycmF5fSAgdG9rZW5zXG4gKiBAcGFyYW0gIHtBcnJheT19ICBrZXlzXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiB0b2tlbnNUb1JlZ0V4cCAodG9rZW5zLCBrZXlzLCBvcHRpb25zKSB7XG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgdmFyIHN0cmljdCA9IG9wdGlvbnMuc3RyaWN0XG4gIHZhciBlbmQgPSBvcHRpb25zLmVuZCAhPT0gZmFsc2VcbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCBERUZBVUxUX0RFTElNSVRFUilcbiAgdmFyIGRlbGltaXRlcnMgPSBvcHRpb25zLmRlbGltaXRlcnMgfHwgREVGQVVMVF9ERUxJTUlURVJTXG4gIHZhciBlbmRzV2l0aCA9IFtdLmNvbmNhdChvcHRpb25zLmVuZHNXaXRoIHx8IFtdKS5tYXAoZXNjYXBlU3RyaW5nKS5jb25jYXQoJyQnKS5qb2luKCd8JylcbiAgdmFyIHJvdXRlID0gJydcbiAgdmFyIGlzRW5kRGVsaW1pdGVkID0gdG9rZW5zLmxlbmd0aCA9PT0gMFxuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgICAgaXNFbmREZWxpbWl0ZWQgPSBpID09PSB0b2tlbnMubGVuZ3RoIC0gMSAmJiBkZWxpbWl0ZXJzLmluZGV4T2YodG9rZW5bdG9rZW4ubGVuZ3RoIC0gMV0pID4gLTFcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByZWZpeCA9IGVzY2FwZVN0cmluZyh0b2tlbi5wcmVmaXgpXG4gICAgICB2YXIgY2FwdHVyZSA9IHRva2VuLnJlcGVhdFxuICAgICAgICA/ICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpKD86JyArIHByZWZpeCArICcoPzonICsgdG9rZW4ucGF0dGVybiArICcpKSonXG4gICAgICAgIDogdG9rZW4ucGF0dGVyblxuXG4gICAgICBpZiAoa2V5cykga2V5cy5wdXNoKHRva2VuKVxuXG4gICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgaWYgKHRva2VuLnBhcnRpYWwpIHtcbiAgICAgICAgICByb3V0ZSArPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJvdXRlICs9ICcoPzonICsgcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpKT8nXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJvdXRlICs9IHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSdcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpZiAoZW5kKSB7XG4gICAgaWYgKCFzdHJpY3QpIHJvdXRlICs9ICcoPzonICsgZGVsaW1pdGVyICsgJyk/J1xuXG4gICAgcm91dGUgKz0gZW5kc1dpdGggPT09ICckJyA/ICckJyA6ICcoPz0nICsgZW5kc1dpdGggKyAnKSdcbiAgfSBlbHNlIHtcbiAgICBpZiAoIXN0cmljdCkgcm91dGUgKz0gJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JyArIGVuZHNXaXRoICsgJykpPydcbiAgICBpZiAoIWlzRW5kRGVsaW1pdGVkKSByb3V0ZSArPSAnKD89JyArIGRlbGltaXRlciArICd8JyArIGVuZHNXaXRoICsgJyknXG4gIH1cblxuICByZXR1cm4gbmV3IFJlZ0V4cCgnXicgKyByb3V0ZSwgZmxhZ3Mob3B0aW9ucykpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAge0FycmF5PX0gICAgICAgICAgICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwga2V5cylcbiAgfVxuXG4gIGlmIChBcnJheS5pc0FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwga2V5cywgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCBrZXlzLCBvcHRpb25zKVxufVxuIiwiLyoqXG4gKiBVbml2ZXJzYWwgUm91dGVyIChodHRwczovL3d3dy5rcmlhc29mdC5jb20vdW5pdmVyc2FsLXJvdXRlci8pXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQgS3JpYXNvZnQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAnLi9wYXRoLXRvLXJlZ2V4cC5qcyc7XG5cbmNvbnN0IHtoYXNPd25Qcm9wZXJ0eX0gPSBPYmplY3QucHJvdG90eXBlO1xuY29uc3QgY2FjaGUgPSBuZXcgTWFwKCk7XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2lzc3Vlcy8xNDhcbmNhY2hlLnNldCgnfGZhbHNlJywge1xuICBrZXlzOiBbXSxcbiAgcGF0dGVybjogLyg/OikvXG59KTtcblxuZnVuY3Rpb24gZGVjb2RlUGFyYW0odmFsKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudCh2YWwpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICByZXR1cm4gdmFsO1xuICB9XG59XG5cbmZ1bmN0aW9uIG1hdGNoUGF0aChyb3V0ZXBhdGgsIHBhdGgsIGV4YWN0LCBwYXJlbnRLZXlzLCBwYXJlbnRQYXJhbXMpIHtcbiAgZXhhY3QgPSAhIWV4YWN0O1xuICBjb25zdCBjYWNoZUtleSA9IGAke3JvdXRlcGF0aH18JHtleGFjdH1gO1xuICBsZXQgcmVnZXhwID0gY2FjaGUuZ2V0KGNhY2hlS2V5KTtcblxuICBpZiAoIXJlZ2V4cCkge1xuICAgIGNvbnN0IGtleXMgPSBbXTtcbiAgICByZWdleHAgPSB7XG4gICAgICBrZXlzLFxuICAgICAgcGF0dGVybjogcGF0aFRvUmVnZXhwKHJvdXRlcGF0aCwga2V5cywge1xuICAgICAgICBlbmQ6IGV4YWN0LFxuICAgICAgICBzdHJpY3Q6IHJvdXRlcGF0aCA9PT0gJydcbiAgICAgIH0pLFxuICAgIH07XG4gICAgY2FjaGUuc2V0KGNhY2hlS2V5LCByZWdleHApO1xuICB9XG5cbiAgY29uc3QgbSA9IHJlZ2V4cC5wYXR0ZXJuLmV4ZWMocGF0aCk7XG4gIGlmICghbSkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgY29uc3QgcGFyYW1zID0gT2JqZWN0LmFzc2lnbih7fSwgcGFyZW50UGFyYW1zKTtcblxuICBmb3IgKGxldCBpID0gMTsgaSA8IG0ubGVuZ3RoOyBpKyspIHtcbiAgICBjb25zdCBrZXkgPSByZWdleHAua2V5c1tpIC0gMV07XG4gICAgY29uc3QgcHJvcCA9IGtleS5uYW1lO1xuICAgIGNvbnN0IHZhbHVlID0gbVtpXTtcbiAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChwYXJhbXMsIHByb3ApKSB7XG4gICAgICBpZiAoa2V5LnJlcGVhdCkge1xuICAgICAgICBwYXJhbXNbcHJvcF0gPSB2YWx1ZSA/IHZhbHVlLnNwbGl0KGtleS5kZWxpbWl0ZXIpLm1hcChkZWNvZGVQYXJhbSkgOiBbXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHBhcmFtc1twcm9wXSA9IHZhbHVlID8gZGVjb2RlUGFyYW0odmFsdWUpIDogdmFsdWU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBwYXRoOiBtWzBdLFxuICAgIGtleXM6IChwYXJlbnRLZXlzIHx8IFtdKS5jb25jYXQocmVnZXhwLmtleXMpLFxuICAgIHBhcmFtcyxcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoO1xuIiwiLyoqXG4gKiBVbml2ZXJzYWwgUm91dGVyIChodHRwczovL3d3dy5rcmlhc29mdC5jb20vdW5pdmVyc2FsLXJvdXRlci8pXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQgS3JpYXNvZnQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBtYXRjaFBhdGggZnJvbSAnLi9tYXRjaFBhdGguanMnO1xuXG4vKipcbiAqIFRyYXZlcnNlcyB0aGUgcm91dGVzIHRyZWUgYW5kIG1hdGNoZXMgaXRzIG5vZGVzIHRvIHRoZSBnaXZlbiBwYXRobmFtZSBmcm9tXG4gKiB0aGUgcm9vdCBkb3duIHRvIHRoZSBsZWF2ZXMuIEVhY2ggbWF0Y2ggY29uc3VtZXMgYSBwYXJ0IG9mIHRoZSBwYXRobmFtZSBhbmRcbiAqIHRoZSBtYXRjaGluZyBwcm9jZXNzIGNvbnRpbnVlcyBmb3IgYXMgbG9uZyBhcyB0aGVyZSBpcyBhIG1hdGNoaW5nIGNoaWxkXG4gKiByb3V0ZSBmb3IgdGhlIHJlbWFpbmluZyBwYXJ0IG9mIHRoZSBwYXRobmFtZS5cbiAqXG4gKiBUaGUgcmV0dXJuZWQgdmFsdWUgaXMgYSBsYXppbHkgZXZhbHVhdGVkIGl0ZXJhdG9yLlxuICpcbiAqIFRoZSBsZWFkaW5nIFwiL1wiIGluIGEgcm91dGUgcGF0aCBtYXR0ZXJzIG9ubHkgZm9yIHRoZSByb290IG9mIHRoZSByb3V0ZXNcbiAqIHRyZWUgKG9yIGlmIGFsbCBwYXJlbnQgcm91dGVzIGFyZSBcIlwiKS4gSW4gYWxsIG90aGVyIGNhc2VzIGEgbGVhZGluZyBcIi9cIiBpblxuICogYSBjaGlsZCByb3V0ZSBwYXRoIGhhcyBubyBzaWduaWZpY2FuY2UuXG4gKlxuICogVGhlIHRyYWlsaW5nIFwiL1wiIGluIGEgX3JvdXRlIHBhdGhfIG1hdHRlcnMgb25seSBmb3IgdGhlIGxlYXZlcyBvZiB0aGVcbiAqIHJvdXRlcyB0cmVlLiBBIGxlYWYgcm91dGUgd2l0aCBhIHRyYWlsaW5nIFwiL1wiIG1hdGNoZXMgb25seSBhIHBhdGhuYW1lIHRoYXRcbiAqIGFsc28gaGFzIGEgdHJhaWxpbmcgXCIvXCIuXG4gKlxuICogVGhlIHRyYWlsaW5nIFwiL1wiIGluIGEgcm91dGUgcGF0aCBkb2VzIG5vdCBhZmZlY3QgbWF0Y2hpbmcgb2YgY2hpbGQgcm91dGVzXG4gKiBpbiBhbnkgd2F5LlxuICpcbiAqIFRoZSB0cmFpbGluZyBcIi9cIiBpbiBhIF9wYXRobmFtZV8gZ2VuZXJhbGx5IGRvZXMgbm90IG1hdHRlciAoZXhjZXB0IGZvclxuICogdGhlIGNhc2Ugb2YgbGVhZiBub2RlcyBkZXNjcmliZWQgYWJvdmUpLlxuICpcbiAqIFRoZSBcIlwiIGFuZCBcIi9cIiByb3V0ZXMgaGF2ZSBzcGVjaWFsIHRyZWF0bWVudDpcbiAqICAxLiBhcyBhIHNpbmdsZSByb3V0ZVxuICogICAgIHRoZSBcIlwiIGFuZCBcIi9cIiByb3V0ZXMgbWF0Y2ggb25seSB0aGUgXCJcIiBhbmQgXCIvXCIgcGF0aG5hbWVzIHJlc3BlY3RpdmVseVxuICogIDIuIGFzIGEgcGFyZW50IGluIHRoZSByb3V0ZXMgdHJlZVxuICogICAgIHRoZSBcIlwiIHJvdXRlIG1hdGNoZXMgYW55IHBhdGhuYW1lIHdpdGhvdXQgY29uc3VtaW5nIGFueSBwYXJ0IG9mIGl0XG4gKiAgICAgdGhlIFwiL1wiIHJvdXRlIG1hdGNoZXMgYW55IGFic29sdXRlIHBhdGhuYW1lIGNvbnN1bWluZyBpdHMgbGVhZGluZyBcIi9cIlxuICogIDMuIGFzIGEgbGVhZiBpbiB0aGUgcm91dGVzIHRyZWVcbiAqICAgICB0aGUgXCJcIiBhbmQgXCIvXCIgcm91dGVzIG1hdGNoIG9ubHkgaWYgdGhlIGVudGlyZSBwYXRobmFtZSBpcyBjb25zdW1lZCBieVxuICogICAgICAgICB0aGUgcGFyZW50IHJvdXRlcyBjaGFpbi4gSW4gdGhpcyBjYXNlIFwiXCIgYW5kIFwiL1wiIGFyZSBlcXVpdmFsZW50LlxuICogIDQuIHNldmVyYWwgZGlyZWN0bHkgbmVzdGVkIFwiXCIgb3IgXCIvXCIgcm91dGVzXG4gKiAgICAgLSBkaXJlY3RseSBuZXN0ZWQgXCJcIiBvciBcIi9cIiByb3V0ZXMgYXJlICdzcXVhc2hlZCcgKGkuZS4gbmVzdGluZyB0d29cbiAqICAgICAgIFwiL1wiIHJvdXRlcyBkb2VzIG5vdCByZXF1aXJlIGEgZG91YmxlIFwiL1wiIGluIHRoZSBwYXRobmFtZSB0byBtYXRjaClcbiAqICAgICAtIGlmIHRoZXJlIGFyZSBvbmx5IFwiXCIgaW4gdGhlIHBhcmVudCByb3V0ZXMgY2hhaW4sIG5vIHBhcnQgb2YgdGhlXG4gKiAgICAgICBwYXRobmFtZSBpcyBjb25zdW1lZCwgYW5kIHRoZSBsZWFkaW5nIFwiL1wiIGluIHRoZSBjaGlsZCByb3V0ZXMnIHBhdGhzXG4gKiAgICAgICByZW1haW5zIHNpZ25pZmljYW50XG4gKlxuICogU2lkZSBlZmZlY3Q6XG4gKiAgIC0gdGhlIHJvdXRlcyB0cmVlIHsgcGF0aDogJycgfSBtYXRjaGVzIG9ubHkgdGhlICcnIHBhdGhuYW1lXG4gKiAgIC0gdGhlIHJvdXRlcyB0cmVlIHsgcGF0aDogJycsIGNoaWxkcmVuOiBbIHsgcGF0aDogJycgfSBdIH0gbWF0Y2hlcyBhbnlcbiAqICAgICBwYXRobmFtZSAoZm9yIHRoZSB0cmVlIHJvb3QpXG4gKlxuICogUHJlZml4IG1hdGNoaW5nIGNhbiBiZSBlbmFibGVkIGFsc28gYnkgYGNoaWxkcmVuOiB0cnVlYC5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hSb3V0ZShyb3V0ZSwgcGF0aG5hbWUsIGlnbm9yZUxlYWRpbmdTbGFzaCwgcGFyZW50S2V5cywgcGFyZW50UGFyYW1zKSB7XG4gIGxldCBtYXRjaDtcbiAgbGV0IGNoaWxkTWF0Y2hlcztcbiAgbGV0IGNoaWxkSW5kZXggPSAwO1xuICBsZXQgcm91dGVwYXRoID0gcm91dGUucGF0aCB8fCAnJztcbiAgaWYgKHJvdXRlcGF0aC5jaGFyQXQoMCkgPT09ICcvJykge1xuICAgIGlmIChpZ25vcmVMZWFkaW5nU2xhc2gpIHtcbiAgICAgIHJvdXRlcGF0aCA9IHJvdXRlcGF0aC5zdWJzdHIoMSk7XG4gICAgfVxuICAgIGlnbm9yZUxlYWRpbmdTbGFzaCA9IHRydWU7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIG5leHQocm91dGVUb1NraXApIHtcbiAgICAgIGlmIChyb3V0ZSA9PT0gcm91dGVUb1NraXApIHtcbiAgICAgICAgcmV0dXJuIHtkb25lOiB0cnVlfTtcbiAgICAgIH1cblxuICAgICAgY29uc3QgY2hpbGRyZW4gPSByb3V0ZS5fX2NoaWxkcmVuID0gcm91dGUuX19jaGlsZHJlbiB8fCByb3V0ZS5jaGlsZHJlbjtcblxuICAgICAgaWYgKCFtYXRjaCkge1xuICAgICAgICBtYXRjaCA9IG1hdGNoUGF0aChyb3V0ZXBhdGgsIHBhdGhuYW1lLCAhY2hpbGRyZW4sIHBhcmVudEtleXMsIHBhcmVudFBhcmFtcyk7XG5cbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IHtcbiAgICAgICAgICAgICAgcm91dGUsXG4gICAgICAgICAgICAgIGtleXM6IG1hdGNoLmtleXMsXG4gICAgICAgICAgICAgIHBhcmFtczogbWF0Y2gucGFyYW1zLFxuICAgICAgICAgICAgICBwYXRoOiBtYXRjaC5wYXRoXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1hdGNoICYmIGNoaWxkcmVuKSB7XG4gICAgICAgIHdoaWxlIChjaGlsZEluZGV4IDwgY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgaWYgKCFjaGlsZE1hdGNoZXMpIHtcbiAgICAgICAgICAgIGNvbnN0IGNoaWxkUm91dGUgPSBjaGlsZHJlbltjaGlsZEluZGV4XTtcbiAgICAgICAgICAgIGNoaWxkUm91dGUucGFyZW50ID0gcm91dGU7XG5cbiAgICAgICAgICAgIGxldCBtYXRjaGVkTGVuZ3RoID0gbWF0Y2gucGF0aC5sZW5ndGg7XG4gICAgICAgICAgICBpZiAobWF0Y2hlZExlbmd0aCA+IDAgJiYgcGF0aG5hbWUuY2hhckF0KG1hdGNoZWRMZW5ndGgpID09PSAnLycpIHtcbiAgICAgICAgICAgICAgbWF0Y2hlZExlbmd0aCArPSAxO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBjaGlsZE1hdGNoZXMgPSBtYXRjaFJvdXRlKFxuICAgICAgICAgICAgICBjaGlsZFJvdXRlLFxuICAgICAgICAgICAgICBwYXRobmFtZS5zdWJzdHIobWF0Y2hlZExlbmd0aCksXG4gICAgICAgICAgICAgIGlnbm9yZUxlYWRpbmdTbGFzaCxcbiAgICAgICAgICAgICAgbWF0Y2gua2V5cyxcbiAgICAgICAgICAgICAgbWF0Y2gucGFyYW1zXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGNvbnN0IGNoaWxkTWF0Y2ggPSBjaGlsZE1hdGNoZXMubmV4dChyb3V0ZVRvU2tpcCk7XG4gICAgICAgICAgaWYgKCFjaGlsZE1hdGNoLmRvbmUpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgICAgICB2YWx1ZTogY2hpbGRNYXRjaC52YWx1ZSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hpbGRNYXRjaGVzID0gbnVsbDtcbiAgICAgICAgICBjaGlsZEluZGV4Kys7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtkb25lOiB0cnVlfTtcbiAgICB9LFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXRjaFJvdXRlO1xuIiwiLyoqXG4gKiBVbml2ZXJzYWwgUm91dGVyIChodHRwczovL3d3dy5rcmlhc29mdC5jb20vdW5pdmVyc2FsLXJvdXRlci8pXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQgS3JpYXNvZnQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCB7aXNGdW5jdGlvbn0gZnJvbSAnLi4vdXRpbHMuanMnO1xuXG5mdW5jdGlvbiByZXNvbHZlUm91dGUoY29udGV4dCkge1xuICBpZiAoaXNGdW5jdGlvbihjb250ZXh0LnJvdXRlLmFjdGlvbikpIHtcbiAgICByZXR1cm4gY29udGV4dC5yb3V0ZS5hY3Rpb24oY29udGV4dCk7XG4gIH1cbiAgcmV0dXJuIHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVJvdXRlO1xuIiwiLyoqXG4gKiBVbml2ZXJzYWwgUm91dGVyIChodHRwczovL3d3dy5rcmlhc29mdC5jb20vdW5pdmVyc2FsLXJvdXRlci8pXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDE1LXByZXNlbnQgS3JpYXNvZnQuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFLnR4dCBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbmltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSAnLi9wYXRoLXRvLXJlZ2V4cC5qcyc7XG5pbXBvcnQgbWF0Y2hSb3V0ZSBmcm9tICcuL21hdGNoUm91dGUuanMnO1xuaW1wb3J0IHJlc29sdmVSb3V0ZSBmcm9tICcuL3Jlc29sdmVSb3V0ZS5qcyc7XG5pbXBvcnQge3RvQXJyYXksIGVuc3VyZVJvdXRlcywgaXNTdHJpbmcsIGdldE5vdEZvdW5kRXJyb3IsIG5vdEZvdW5kUmVzdWx0fSBmcm9tICcuLi91dGlscy5qcyc7XG5cbmZ1bmN0aW9uIGlzQ2hpbGRSb3V0ZShwYXJlbnRSb3V0ZSwgY2hpbGRSb3V0ZSkge1xuICBsZXQgcm91dGUgPSBjaGlsZFJvdXRlO1xuICB3aGlsZSAocm91dGUpIHtcbiAgICByb3V0ZSA9IHJvdXRlLnBhcmVudDtcbiAgICBpZiAocm91dGUgPT09IHBhcmVudFJvdXRlKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5mdW5jdGlvbiBnZW5lcmF0ZUVycm9yTWVzc2FnZShjdXJyZW50Q29udGV4dCkge1xuICBsZXQgZXJyb3JNZXNzYWdlID0gYFBhdGggJyR7Y3VycmVudENvbnRleHQucGF0aG5hbWV9JyBpcyBub3QgcHJvcGVybHkgcmVzb2x2ZWQgZHVlIHRvIGFuIGVycm9yLmA7XG4gIGNvbnN0IHJvdXRlUGF0aCA9IChjdXJyZW50Q29udGV4dC5yb3V0ZSB8fCB7fSkucGF0aDtcbiAgaWYgKHJvdXRlUGF0aCkge1xuICAgIGVycm9yTWVzc2FnZSArPSBgIFJlc29sdXRpb24gaGFkIGZhaWxlZCBvbiByb3V0ZTogJyR7cm91dGVQYXRofSdgO1xuICB9XG4gIHJldHVybiBlcnJvck1lc3NhZ2U7XG59XG5cbmZ1bmN0aW9uIGFkZFJvdXRlVG9DaGFpbihjb250ZXh0LCBtYXRjaCkge1xuICBjb25zdCB7cm91dGUsIHBhdGh9ID0gbWF0Y2g7XG4gIGZ1bmN0aW9uIHNob3VsZERpc2NhcmRPbGRDaGFpbihvbGRDaGFpbiwgcm91dGUpIHtcbiAgICByZXR1cm4gIXJvdXRlLnBhcmVudCB8fCAhb2xkQ2hhaW4gfHwgIW9sZENoYWluLmxlbmd0aCB8fCBvbGRDaGFpbltvbGRDaGFpbi5sZW5ndGggLSAxXS5yb3V0ZSAhPT0gcm91dGUucGFyZW50O1xuICB9XG5cbiAgaWYgKHJvdXRlICYmICFyb3V0ZS5fX3N5bnRoZXRpYykge1xuICAgIGNvbnN0IGl0ZW0gPSB7cGF0aCwgcm91dGV9O1xuICAgIGlmIChzaG91bGREaXNjYXJkT2xkQ2hhaW4oY29udGV4dC5jaGFpbiwgcm91dGUpKSB7XG4gICAgICBjb250ZXh0LmNoYWluID0gW2l0ZW1dO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb250ZXh0LmNoYWluLnB1c2goaXRlbSk7XG4gICAgfVxuICB9XG59XG5cbi8qKlxuICogQG1lbWJlcm9mIFZhYWRpblxuICovXG5jbGFzcyBSZXNvbHZlciB7XG4gIGNvbnN0cnVjdG9yKHJvdXRlcywgb3B0aW9ucyA9IHt9KSB7XG4gICAgaWYgKE9iamVjdChyb3V0ZXMpICE9PSByb3V0ZXMpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0ludmFsaWQgcm91dGVzJyk7XG4gICAgfVxuXG4gICAgdGhpcy5iYXNlVXJsID0gb3B0aW9ucy5iYXNlVXJsIHx8ICcnO1xuICAgIHRoaXMuZXJyb3JIYW5kbGVyID0gb3B0aW9ucy5lcnJvckhhbmRsZXI7XG4gICAgdGhpcy5yZXNvbHZlUm91dGUgPSBvcHRpb25zLnJlc29sdmVSb3V0ZSB8fCByZXNvbHZlUm91dGU7XG4gICAgdGhpcy5jb250ZXh0ID0gT2JqZWN0LmFzc2lnbih7cmVzb2x2ZXI6IHRoaXN9LCBvcHRpb25zLmNvbnRleHQpO1xuICAgIHRoaXMucm9vdCA9IEFycmF5LmlzQXJyYXkocm91dGVzKSA/IHtwYXRoOiAnJywgX19jaGlsZHJlbjogcm91dGVzLCBwYXJlbnQ6IG51bGwsIF9fc3ludGhldGljOiB0cnVlfSA6IHJvdXRlcztcbiAgICB0aGlzLnJvb3QucGFyZW50ID0gbnVsbDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IGxpc3Qgb2Ygcm91dGVzIChhcyBhIHNoYWxsb3cgY29weSkuIEFkZGluZyAvIHJlbW92aW5nXG4gICAqIHJvdXRlcyB0byAvIGZyb20gdGhlIHJldHVybmVkIGFycmF5IGRvZXMgbm90IGFmZmVjdCB0aGUgcm91dGluZyBjb25maWcsXG4gICAqIGJ1dCBtb2RpZnlpbmcgdGhlIHJvdXRlIG9iamVjdHMgZG9lcy5cbiAgICpcbiAgICogQHJldHVybiB7IUFycmF5PCFSb3V0ZT59XG4gICAqL1xuICBnZXRSb3V0ZXMoKSB7XG4gICAgcmV0dXJuIFsuLi50aGlzLnJvb3QuX19jaGlsZHJlbl07XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcm91dGluZyBjb25maWcgKHJlcGxhY2luZyB0aGUgZXhpc3Rpbmcgb25lKS5cbiAgICpcbiAgICogQHBhcmFtIHshQXJyYXk8IVJvdXRlPnwhUm91dGV9IHJvdXRlcyBhIHNpbmdsZSByb3V0ZSBvciBhbiBhcnJheSBvZiB0aG9zZVxuICAgKiAgICAodGhlIGFycmF5IGlzIHNoYWxsb3cgY29waWVkKVxuICAgKi9cbiAgc2V0Um91dGVzKHJvdXRlcykge1xuICAgIGVuc3VyZVJvdXRlcyhyb3V0ZXMpO1xuICAgIGNvbnN0IG5ld1JvdXRlcyA9IFsuLi50b0FycmF5KHJvdXRlcyldO1xuICAgIHRoaXMucm9vdC5fX2NoaWxkcmVuID0gbmV3Um91dGVzO1xuICB9XG5cbiAgLyoqXG4gICAqIEFwcGVuZHMgb25lIG9yIHNldmVyYWwgcm91dGVzIHRvIHRoZSByb3V0aW5nIGNvbmZpZyBhbmQgcmV0dXJucyB0aGVcbiAgICogZWZmZWN0aXZlIHJvdXRpbmcgY29uZmlnIGFmdGVyIHRoZSBvcGVyYXRpb24uXG4gICAqXG4gICAqIEBwYXJhbSB7IUFycmF5PCFSb3V0ZT58IVJvdXRlfSByb3V0ZXMgYSBzaW5nbGUgcm91dGUgb3IgYW4gYXJyYXkgb2YgdGhvc2VcbiAgICogICAgKHRoZSBhcnJheSBpcyBzaGFsbG93IGNvcGllZClcbiAgICogQHJldHVybiB7IUFycmF5PCFSb3V0ZT59XG4gICAqIEBwcm90ZWN0ZWRcbiAgICovXG4gIGFkZFJvdXRlcyhyb3V0ZXMpIHtcbiAgICBlbnN1cmVSb3V0ZXMocm91dGVzKTtcbiAgICB0aGlzLnJvb3QuX19jaGlsZHJlbi5wdXNoKC4uLnRvQXJyYXkocm91dGVzKSk7XG4gICAgcmV0dXJuIHRoaXMuZ2V0Um91dGVzKCk7XG4gIH1cblxuICAvKipcbiAgICogUmVtb3ZlcyBhbGwgZXhpc3Rpbmcgcm91dGVzIGZyb20gdGhlIHJvdXRpbmcgY29uZmlnLlxuICAgKi9cbiAgcmVtb3ZlUm91dGVzKCkge1xuICAgIHRoaXMuc2V0Um91dGVzKFtdKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBBc3luY2hyb25vdXNseSByZXNvbHZlcyB0aGUgZ2l2ZW4gcGF0aG5hbWUsIGkuZS4gZmluZHMgYWxsIHJvdXRlcyBtYXRjaGluZ1xuICAgKiB0aGUgcGF0aG5hbWUgYW5kIHRyaWVzIHJlc29sdmluZyB0aGVtIG9uZSBhZnRlciBhbm90aGVyIGluIHRoZSBvcmRlciB0aGV5XG4gICAqIGFyZSBsaXN0ZWQgaW4gdGhlIHJvdXRlcyBjb25maWcgdW50aWwgdGhlIGZpcnN0IG5vbi1udWxsIHJlc3VsdC5cbiAgICpcbiAgICogUmV0dXJucyBhIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2l0aCB0aGUgcmV0dXJuIHZhbHVlIG9mIGFuIG9iamVjdCB0aGF0IGNvbnNpc3RzIG9mIHRoZSBmaXJzdFxuICAgKiByb3V0ZSBoYW5kbGVyIHJlc3VsdCB0aGF0IHJldHVybnMgc29tZXRoaW5nIG90aGVyIHRoYW4gYG51bGxgIG9yIGB1bmRlZmluZWRgIGFuZCBjb250ZXh0IHVzZWQgdG8gZ2V0IHRoaXMgcmVzdWx0LlxuICAgKlxuICAgKiBJZiBubyByb3V0ZSBoYW5kbGVycyByZXR1cm4gYSBub24tbnVsbCByZXN1bHQsIG9yIGlmIG5vIHJvdXRlIG1hdGNoZXMgdGhlXG4gICAqIGdpdmVuIHBhdGhuYW1lIHRoZSByZXR1cm5lZCBwcm9taXNlIGlzIHJlamVjdGVkIHdpdGggYSAncGFnZSBub3QgZm91bmQnXG4gICAqIGBFcnJvcmAuXG4gICAqXG4gICAqIEBwYXJhbSB7IXN0cmluZ3whe3BhdGhuYW1lOiAhc3RyaW5nfX0gcGF0aG5hbWVPckNvbnRleHQgdGhlIHBhdGhuYW1lIHRvXG4gICAqICAgIHJlc29sdmUgb3IgYSBjb250ZXh0IG9iamVjdCB3aXRoIGEgYHBhdGhuYW1lYCBwcm9wZXJ0eSBhbmQgb3RoZXJcbiAgICogICAgcHJvcGVydGllcyB0byBwYXNzIHRvIHRoZSByb3V0ZSByZXNvbHZlciBmdW5jdGlvbnMuXG4gICAqIEByZXR1cm4geyFQcm9taXNlPGFueT59XG4gICAqL1xuICByZXNvbHZlKHBhdGhuYW1lT3JDb250ZXh0KSB7XG4gICAgY29uc3QgY29udGV4dCA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIHRoaXMuY29udGV4dCxcbiAgICAgIGlzU3RyaW5nKHBhdGhuYW1lT3JDb250ZXh0KSA/IHtwYXRobmFtZTogcGF0aG5hbWVPckNvbnRleHR9IDogcGF0aG5hbWVPckNvbnRleHRcbiAgICApO1xuICAgIGNvbnN0IG1hdGNoID0gbWF0Y2hSb3V0ZShcbiAgICAgIHRoaXMucm9vdCxcbiAgICAgIHRoaXMuX19ub3JtYWxpemVQYXRobmFtZShjb250ZXh0LnBhdGhuYW1lKSxcbiAgICAgIHRoaXMuYmFzZVVybFxuICAgICk7XG4gICAgY29uc3QgcmVzb2x2ZSA9IHRoaXMucmVzb2x2ZVJvdXRlO1xuICAgIGxldCBtYXRjaGVzID0gbnVsbDtcbiAgICBsZXQgbmV4dE1hdGNoZXMgPSBudWxsO1xuICAgIGxldCBjdXJyZW50Q29udGV4dCA9IGNvbnRleHQ7XG5cbiAgICBmdW5jdGlvbiBuZXh0KHJlc3VtZSwgcGFyZW50ID0gbWF0Y2hlcy52YWx1ZS5yb3V0ZSwgcHJldlJlc3VsdCkge1xuICAgICAgY29uc3Qgcm91dGVUb1NraXAgPSBwcmV2UmVzdWx0ID09PSBudWxsICYmIG1hdGNoZXMudmFsdWUucm91dGU7XG4gICAgICBtYXRjaGVzID0gbmV4dE1hdGNoZXMgfHwgbWF0Y2gubmV4dChyb3V0ZVRvU2tpcCk7XG4gICAgICBuZXh0TWF0Y2hlcyA9IG51bGw7XG5cbiAgICAgIGlmICghcmVzdW1lKSB7XG4gICAgICAgIGlmIChtYXRjaGVzLmRvbmUgfHwgIWlzQ2hpbGRSb3V0ZShwYXJlbnQsIG1hdGNoZXMudmFsdWUucm91dGUpKSB7XG4gICAgICAgICAgbmV4dE1hdGNoZXMgPSBtYXRjaGVzO1xuICAgICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobm90Rm91bmRSZXN1bHQpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChtYXRjaGVzLmRvbmUpIHtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVqZWN0KGdldE5vdEZvdW5kRXJyb3IoY29udGV4dCkpO1xuICAgICAgfVxuXG4gICAgICBhZGRSb3V0ZVRvQ2hhaW4oY29udGV4dCwgbWF0Y2hlcy52YWx1ZSk7XG4gICAgICBjdXJyZW50Q29udGV4dCA9IE9iamVjdC5hc3NpZ24oe30sIGNvbnRleHQsIG1hdGNoZXMudmFsdWUpO1xuXG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHJlc29sdmUoY3VycmVudENvbnRleHQpKS50aGVuKHJlc29sdXRpb24gPT4ge1xuICAgICAgICBpZiAocmVzb2x1dGlvbiAhPT0gbnVsbCAmJiByZXNvbHV0aW9uICE9PSB1bmRlZmluZWQgJiYgcmVzb2x1dGlvbiAhPT0gbm90Rm91bmRSZXN1bHQpIHtcbiAgICAgICAgICBjdXJyZW50Q29udGV4dC5yZXN1bHQgPSByZXNvbHV0aW9uLnJlc3VsdCB8fCByZXNvbHV0aW9uO1xuICAgICAgICAgIHJldHVybiBjdXJyZW50Q29udGV4dDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV4dChyZXN1bWUsIHBhcmVudCwgcmVzb2x1dGlvbik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBjb250ZXh0Lm5leHQgPSBuZXh0O1xuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpXG4gICAgICAudGhlbigoKSA9PiBuZXh0KHRydWUsIHRoaXMucm9vdCkpXG4gICAgICAuY2F0Y2goKGVycm9yKSA9PiB7XG4gICAgICAgIGNvbnN0IGVycm9yTWVzc2FnZSA9IGdlbmVyYXRlRXJyb3JNZXNzYWdlKGN1cnJlbnRDb250ZXh0KTtcbiAgICAgICAgaWYgKCFlcnJvcikge1xuICAgICAgICAgIGVycm9yID0gbmV3IEVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY29uc29sZS53YXJuKGVycm9yTWVzc2FnZSk7XG4gICAgICAgIH1cbiAgICAgICAgZXJyb3IuY29udGV4dCA9IGVycm9yLmNvbnRleHQgfHwgY3VycmVudENvbnRleHQ7XG4gICAgICAgIC8vIERPTUV4Y2VwdGlvbiBoYXMgaXRzIG93biBjb2RlIHdoaWNoIGlzIHJlYWQtb25seVxuICAgICAgICBpZiAoIShlcnJvciBpbnN0YW5jZW9mIERPTUV4Y2VwdGlvbikpIHtcbiAgICAgICAgICBlcnJvci5jb2RlID0gZXJyb3IuY29kZSB8fCA1MDA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZXJyb3JIYW5kbGVyKSB7XG4gICAgICAgICAgY3VycmVudENvbnRleHQucmVzdWx0ID0gdGhpcy5lcnJvckhhbmRsZXIoZXJyb3IpO1xuICAgICAgICAgIHJldHVybiBjdXJyZW50Q29udGV4dDtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFVSTCBjb25zdHJ1Y3RvciBwb2x5ZmlsbCBob29rLiBDcmVhdGVzIGFuZCByZXR1cm5zIGFuIFVSTCBpbnN0YW5jZS5cbiAgICovXG4gIHN0YXRpYyBfX2NyZWF0ZVVybCh1cmwsIGJhc2UpIHtcbiAgICByZXR1cm4gbmV3IFVSTCh1cmwsIGJhc2UpO1xuICB9XG5cbiAgLyoqXG4gICAqIElmIHRoZSBiYXNlVXJsIHByb3BlcnR5IGlzIHNldCwgdHJhbnNmb3JtcyB0aGUgYmFzZVVybCBhbmQgcmV0dXJucyB0aGUgZnVsbFxuICAgKiBhY3R1YWwgYGJhc2VgIHN0cmluZyBmb3IgdXNpbmcgaW4gdGhlIGBuZXcgVVJMKHBhdGgsIGJhc2UpO2AgYW5kIGZvclxuICAgKiBwcmVwZXJuZGluZyB0aGUgcGF0aHMgd2l0aC4gVGhlIHJldHVybmVkIGJhc2UgZW5kcyB3aXRoIGEgdHJhaWxpbmcgc2xhc2guXG4gICAqXG4gICAqIE90aGVyd2lzZSwgcmV0dXJucyBlbXB0eSBzdHJpbmcuXG4gICAqL1xuICBnZXQgX19lZmZlY3RpdmVCYXNlVXJsKCkge1xuICAgIHJldHVybiB0aGlzLmJhc2VVcmxcbiAgICAgID8gdGhpcy5jb25zdHJ1Y3Rvci5fX2NyZWF0ZVVybChcbiAgICAgICAgdGhpcy5iYXNlVXJsLFxuICAgICAgICBkb2N1bWVudC5iYXNlVVJJIHx8IGRvY3VtZW50LlVSTFxuICAgICAgKS5ocmVmLnJlcGxhY2UoL1teXFwvXSokLywgJycpXG4gICAgICA6ICcnO1xuICB9XG5cbiAgLyoqXG4gICAqIElmIHRoZSBiYXNlVXJsIGlzIHNldCwgbWF0Y2hlcyB0aGUgcGF0aG5hbWUgd2l0aCB0aGUgcm91dGVy4oCZcyBiYXNlVXJsLFxuICAgKiBhbmQgcmV0dXJucyB0aGUgbG9jYWwgcGF0aG5hbWUgd2l0aCB0aGUgYmFzZVVybCBzdHJpcHBlZCBvdXQuXG4gICAqXG4gICAqIElmIHRoZSBwYXRobmFtZSBkb2VzIG5vdCBtYXRjaCB0aGUgYmFzZVVybCwgcmV0dXJucyB1bmRlZmluZWQuXG4gICAqXG4gICAqIElmIHRoZSBgYmFzZVVybGAgaXMgbm90IHNldCwgcmV0dXJucyB0aGUgdW5tb2RpZmllZCBwYXRobmFtZSBhcmd1bWVudC5cbiAgICovXG4gIF9fbm9ybWFsaXplUGF0aG5hbWUocGF0aG5hbWUpIHtcbiAgICBpZiAoIXRoaXMuYmFzZVVybCkge1xuICAgICAgLy8gTm8gYmFzZSBVUkwsIG5vIG5lZWQgdG8gdHJhbnNmb3JtIHRoZSBwYXRobmFtZS5cbiAgICAgIHJldHVybiBwYXRobmFtZTtcbiAgICB9XG5cbiAgICBjb25zdCBiYXNlID0gdGhpcy5fX2VmZmVjdGl2ZUJhc2VVcmw7XG4gICAgY29uc3Qgbm9ybWFsaXplZFVybCA9IHRoaXMuY29uc3RydWN0b3IuX19jcmVhdGVVcmwocGF0aG5hbWUsIGJhc2UpLmhyZWY7XG4gICAgaWYgKG5vcm1hbGl6ZWRVcmwuc2xpY2UoMCwgYmFzZS5sZW5ndGgpID09PSBiYXNlKSB7XG4gICAgICByZXR1cm4gbm9ybWFsaXplZFVybC5zbGljZShiYXNlLmxlbmd0aCk7XG4gICAgfVxuICB9XG59XG5cblJlc29sdmVyLnBhdGhUb1JlZ2V4cCA9IHBhdGhUb1JlZ2V4cDtcblxuZXhwb3J0IGRlZmF1bHQgUmVzb2x2ZXI7XG4iLCIvKipcbiAqIFVuaXZlcnNhbCBSb3V0ZXIgKGh0dHBzOi8vd3d3LmtyaWFzb2Z0LmNvbS91bml2ZXJzYWwtcm91dGVyLylcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTUtcHJlc2VudCBLcmlhc29mdC5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UudHh0IGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaW1wb3J0IFJlc29sdmVyIGZyb20gJy4vcmVzb2x2ZXIuanMnO1xuaW1wb3J0IHtpc1N0cmluZ30gZnJvbSAnLi4vdXRpbHMuanMnO1xuXG5jb25zdCB7cGF0aFRvUmVnZXhwfSA9IFJlc29sdmVyO1xuY29uc3QgY2FjaGUgPSBuZXcgTWFwKCk7XG5cbmZ1bmN0aW9uIGNhY2hlUm91dGVzKHJvdXRlc0J5TmFtZSwgcm91dGUsIHJvdXRlcykge1xuICBjb25zdCBuYW1lID0gcm91dGUubmFtZSB8fCByb3V0ZS5jb21wb25lbnQ7XG4gIGlmIChuYW1lKSB7XG4gICAgaWYgKHJvdXRlc0J5TmFtZS5oYXMobmFtZSkpIHtcbiAgICAgIHJvdXRlc0J5TmFtZS5nZXQobmFtZSkucHVzaChyb3V0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJvdXRlc0J5TmFtZS5zZXQobmFtZSwgW3JvdXRlXSk7XG4gICAgfVxuICB9XG5cbiAgaWYgKEFycmF5LmlzQXJyYXkocm91dGVzKSkge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcm91dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBjaGlsZFJvdXRlID0gcm91dGVzW2ldO1xuICAgICAgY2hpbGRSb3V0ZS5wYXJlbnQgPSByb3V0ZTtcbiAgICAgIGNhY2hlUm91dGVzKHJvdXRlc0J5TmFtZSwgY2hpbGRSb3V0ZSwgY2hpbGRSb3V0ZS5fX2NoaWxkcmVuIHx8IGNoaWxkUm91dGUuY2hpbGRyZW4pO1xuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBnZXRSb3V0ZUJ5TmFtZShyb3V0ZXNCeU5hbWUsIHJvdXRlTmFtZSkge1xuICBjb25zdCByb3V0ZXMgPSByb3V0ZXNCeU5hbWUuZ2V0KHJvdXRlTmFtZSk7XG4gIGlmIChyb3V0ZXMgJiYgcm91dGVzLmxlbmd0aCA+IDEpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgRHVwbGljYXRlIHJvdXRlIHdpdGggbmFtZSBcIiR7cm91dGVOYW1lfVwiLmBcbiAgICAgICsgYCBUcnkgc2V0aW5nIHVuaXF1ZSAnbmFtZScgcm91dGUgcHJvcGVydGllcy5gXG4gICAgKTtcbiAgfVxuICByZXR1cm4gcm91dGVzICYmIHJvdXRlc1swXTtcbn1cblxuZnVuY3Rpb24gZ2V0Um91dGVQYXRoKHJvdXRlKSB7XG4gIGxldCBwYXRoID0gcm91dGUucGF0aDtcbiAgcGF0aCA9IEFycmF5LmlzQXJyYXkocGF0aCkgPyBwYXRoWzBdIDogcGF0aDtcbiAgcmV0dXJuIHBhdGggIT09IHVuZGVmaW5lZCA/IHBhdGggOiAnJztcbn1cblxuZnVuY3Rpb24gZ2VuZXJhdGVVcmxzKHJvdXRlciwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmICghKHJvdXRlciBpbnN0YW5jZW9mIFJlc29sdmVyKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0FuIGluc3RhbmNlIG9mIFJlc29sdmVyIGlzIGV4cGVjdGVkJyk7XG4gIH1cblxuICBjb25zdCByb3V0ZXNCeU5hbWUgPSBuZXcgTWFwKCk7XG5cbiAgcmV0dXJuIChyb3V0ZU5hbWUsIHBhcmFtcykgPT4ge1xuICAgIGxldCByb3V0ZSA9IGdldFJvdXRlQnlOYW1lKHJvdXRlc0J5TmFtZSwgcm91dGVOYW1lKTtcbiAgICBpZiAoIXJvdXRlKSB7XG4gICAgICByb3V0ZXNCeU5hbWUuY2xlYXIoKTsgLy8gY2xlYXIgY2FjaGVcbiAgICAgIGNhY2hlUm91dGVzKHJvdXRlc0J5TmFtZSwgcm91dGVyLnJvb3QsIHJvdXRlci5yb290Ll9fY2hpbGRyZW4pO1xuXG4gICAgICByb3V0ZSA9IGdldFJvdXRlQnlOYW1lKHJvdXRlc0J5TmFtZSwgcm91dGVOYW1lKTtcbiAgICAgIGlmICghcm91dGUpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBSb3V0ZSBcIiR7cm91dGVOYW1lfVwiIG5vdCBmb3VuZGApO1xuICAgICAgfVxuICAgIH1cblxuICAgIGxldCByZWdleHAgPSBjYWNoZS5nZXQocm91dGUuZnVsbFBhdGgpO1xuICAgIGlmICghcmVnZXhwKSB7XG4gICAgICBsZXQgZnVsbFBhdGggPSBnZXRSb3V0ZVBhdGgocm91dGUpO1xuICAgICAgbGV0IHJ0ID0gcm91dGUucGFyZW50O1xuICAgICAgd2hpbGUgKHJ0KSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBnZXRSb3V0ZVBhdGgocnQpO1xuICAgICAgICBpZiAocGF0aCkge1xuICAgICAgICAgIGZ1bGxQYXRoID0gcGF0aC5yZXBsYWNlKC9cXC8kLywgJycpICsgJy8nICsgZnVsbFBhdGgucmVwbGFjZSgvXlxcLy8sICcnKTtcbiAgICAgICAgfVxuICAgICAgICBydCA9IHJ0LnBhcmVudDtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHRva2VucyA9IHBhdGhUb1JlZ2V4cC5wYXJzZShmdWxsUGF0aCk7XG4gICAgICBjb25zdCB0b1BhdGggPSBwYXRoVG9SZWdleHAudG9rZW5zVG9GdW5jdGlvbih0b2tlbnMpO1xuICAgICAgY29uc3Qga2V5cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgICBpZiAoIWlzU3RyaW5nKHRva2Vuc1tpXSkpIHtcbiAgICAgICAgICBrZXlzW3Rva2Vuc1tpXS5uYW1lXSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlZ2V4cCA9IHt0b1BhdGgsIGtleXN9O1xuICAgICAgY2FjaGUuc2V0KGZ1bGxQYXRoLCByZWdleHApO1xuICAgICAgcm91dGUuZnVsbFBhdGggPSBmdWxsUGF0aDtcbiAgICB9XG5cbiAgICBsZXQgdXJsID0gcmVnZXhwLnRvUGF0aChwYXJhbXMsIG9wdGlvbnMpIHx8ICcvJztcblxuICAgIGlmIChvcHRpb25zLnN0cmluZ2lmeVF1ZXJ5UGFyYW1zICYmIHBhcmFtcykge1xuICAgICAgY29uc3QgcXVlcnlQYXJhbXMgPSB7fTtcbiAgICAgIGNvbnN0IGtleXMgPSBPYmplY3Qua2V5cyhwYXJhbXMpO1xuICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGNvbnN0IGtleSA9IGtleXNbaV07XG4gICAgICAgIGlmICghcmVnZXhwLmtleXNba2V5XSkge1xuICAgICAgICAgIHF1ZXJ5UGFyYW1zW2tleV0gPSBwYXJhbXNba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgY29uc3QgcXVlcnkgPSBvcHRpb25zLnN0cmluZ2lmeVF1ZXJ5UGFyYW1zKHF1ZXJ5UGFyYW1zKTtcbiAgICAgIGlmIChxdWVyeSkge1xuICAgICAgICB1cmwgKz0gcXVlcnkuY2hhckF0KDApID09PSAnPycgPyBxdWVyeSA6IGA/JHtxdWVyeX1gO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB1cmw7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdlbmVyYXRlVXJscztcbiIsIi8qKlxuICogQHR5cGVkZWYgTmF2aWdhdGlvblRyaWdnZXJcbiAqIEB0eXBlIHtvYmplY3R9XG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCl9IGFjdGl2YXRlXG4gKiBAcHJvcGVydHkge2Z1bmN0aW9uKCl9IGluYWN0aXZhdGVcbiAqL1xuXG4vKiogQHR5cGUge0FycmF5PE5hdmlnYXRpb25UcmlnZ2VyPn0gKi9cbmxldCB0cmlnZ2VycyA9IFtdO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzZXROYXZpZ2F0aW9uVHJpZ2dlcnMobmV3VHJpZ2dlcnMpIHtcbiAgdHJpZ2dlcnMuZm9yRWFjaCh0cmlnZ2VyID0+IHRyaWdnZXIuaW5hY3RpdmF0ZSgpKTtcblxuICBuZXdUcmlnZ2Vycy5mb3JFYWNoKHRyaWdnZXIgPT4gdHJpZ2dlci5hY3RpdmF0ZSgpKTtcblxuICB0cmlnZ2VycyA9IG5ld1RyaWdnZXJzO1xufVxuIiwiY29uc3Qgd2lsbEFuaW1hdGUgPSBlbGVtID0+IHtcbiAgY29uc3QgbmFtZSA9IGdldENvbXB1dGVkU3R5bGUoZWxlbSkuZ2V0UHJvcGVydHlWYWx1ZSgnYW5pbWF0aW9uLW5hbWUnKTtcbiAgcmV0dXJuIG5hbWUgJiYgbmFtZSAhPT0gJ25vbmUnO1xufTtcblxuY29uc3Qgd2FpdEZvckFuaW1hdGlvbiA9IChlbGVtLCBjYikgPT4ge1xuICBjb25zdCBsaXN0ZW5lciA9ICgpID0+IHtcbiAgICBlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIGxpc3RlbmVyKTtcbiAgICBjYigpO1xuICB9O1xuICBlbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ2FuaW1hdGlvbmVuZCcsIGxpc3RlbmVyKTtcbn07XG5cbmZ1bmN0aW9uIGFuaW1hdGUoZWxlbSwgY2xhc3NOYW1lKSB7XG4gIGVsZW0uY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuXG4gIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHtcbiAgICBpZiAod2lsbEFuaW1hdGUoZWxlbSkpIHtcbiAgICAgIGNvbnN0IHJlY3QgPSBlbGVtLmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgY29uc3Qgc2l6ZSA9IGBoZWlnaHQ6ICR7cmVjdC5ib3R0b20gLSByZWN0LnRvcH1weDsgd2lkdGg6ICR7cmVjdC5yaWdodCAtIHJlY3QubGVmdH1weGA7XG4gICAgICBlbGVtLnNldEF0dHJpYnV0ZSgnc3R5bGUnLCBgcG9zaXRpb246IGFic29sdXRlOyAke3NpemV9YCk7XG4gICAgICB3YWl0Rm9yQW5pbWF0aW9uKGVsZW0sICgpID0+IHtcbiAgICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICAgIGVsZW0ucmVtb3ZlQXR0cmlidXRlKCdzdHlsZScpO1xuICAgICAgICByZXNvbHZlKCk7XG4gICAgICB9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZWxlbS5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICByZXNvbHZlKCk7XG4gICAgfVxuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYW5pbWF0ZTtcbiIsImltcG9ydCBSZXNvbHZlciBmcm9tICcuL3Jlc29sdmVyL3Jlc29sdmVyLmpzJztcbmltcG9ydCBnZW5lcmF0ZVVybHMgZnJvbSAnLi9yZXNvbHZlci9nZW5lcmF0ZVVybHMuanMnO1xuaW1wb3J0IHNldE5hdmlnYXRpb25UcmlnZ2VycyBmcm9tICcuL3RyaWdnZXJzL3NldE5hdmlnYXRpb25UcmlnZ2Vycy5qcyc7XG5pbXBvcnQgYW5pbWF0ZSBmcm9tICcuL3RyYW5zaXRpb25zL2FuaW1hdGUuanMnO1xuaW1wb3J0IHtcbiAgZW5zdXJlUm91dGUsXG4gIGZpcmVSb3V0ZXJFdmVudCxcbiAgbG9hZEJ1bmRsZSxcbiAgbG9nLFxuICBsb2dWYWx1ZSxcbiAgdG9BcnJheSxcbiAgaXNGdW5jdGlvbixcbiAgaXNTdHJpbmcsXG4gIGlzT2JqZWN0LFxuICBnZXROb3RGb3VuZEVycm9yLFxuICBub3RGb3VuZFJlc3VsdFxufSBmcm9tICcuL3V0aWxzLmpzJztcblxuY29uc3QgTUFYX1JFRElSRUNUX0NPVU5UID0gMjU2O1xuXG5mdW5jdGlvbiBpc1Jlc3VsdE5vdEVtcHR5KHJlc3VsdCkge1xuICByZXR1cm4gcmVzdWx0ICE9PSBudWxsICYmIHJlc3VsdCAhPT0gdW5kZWZpbmVkO1xufVxuXG5mdW5jdGlvbiBjb3B5Q29udGV4dFdpdGhvdXROZXh0KGNvbnRleHQpIHtcbiAgY29uc3QgY29weSA9IE9iamVjdC5hc3NpZ24oe30sIGNvbnRleHQpO1xuICBkZWxldGUgY29weS5uZXh0O1xuICByZXR1cm4gY29weTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlTG9jYXRpb24oe3BhdGhuYW1lID0gJycsIGNoYWluID0gW10sIHBhcmFtcyA9IHt9LCByZWRpcmVjdEZyb20sIHJlc29sdmVyfSwgcm91dGUpIHtcbiAgY29uc3Qgcm91dGVzID0gY2hhaW4ubWFwKGl0ZW0gPT4gaXRlbS5yb3V0ZSk7XG4gIHJldHVybiB7XG4gICAgYmFzZVVybDogcmVzb2x2ZXIgJiYgcmVzb2x2ZXIuYmFzZVVybCB8fCAnJyxcbiAgICBwYXRobmFtZSxcbiAgICByb3V0ZXMsXG4gICAgcm91dGU6IHJvdXRlIHx8IHJvdXRlcy5sZW5ndGggJiYgcm91dGVzW3JvdXRlcy5sZW5ndGggLSAxXSB8fCBudWxsLFxuICAgIHBhcmFtcyxcbiAgICByZWRpcmVjdEZyb20sXG4gICAgZ2V0VXJsOiAodXNlclBhcmFtcyA9IHt9KSA9PiBnZXRQYXRobmFtZUZvclJvdXRlcihcbiAgICAgIFJvdXRlci5wYXRoVG9SZWdleHAuY29tcGlsZShcbiAgICAgICAgZ2V0TWF0Y2hlZFBhdGgocm91dGVzKVxuICAgICAgKShPYmplY3QuYXNzaWduKHt9LCBwYXJhbXMsIHVzZXJQYXJhbXMpKSxcbiAgICAgIHJlc29sdmVyXG4gICAgKVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWRpcmVjdChjb250ZXh0LCBwYXRobmFtZSkge1xuICBjb25zdCBwYXJhbXMgPSBPYmplY3QuYXNzaWduKHt9LCBjb250ZXh0LnBhcmFtcyk7XG4gIHJldHVybiB7XG4gICAgcmVkaXJlY3Q6IHtcbiAgICAgIHBhdGhuYW1lLFxuICAgICAgZnJvbTogY29udGV4dC5wYXRobmFtZSxcbiAgICAgIHBhcmFtc1xuICAgIH1cbiAgfTtcbn1cblxuZnVuY3Rpb24gcmVuZGVyQ29tcG9uZW50KGNvbnRleHQsIGNvbXBvbmVudCkge1xuICBjb25zdCBlbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChjb21wb25lbnQpO1xuICBlbGVtZW50LmxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24oY29udGV4dCk7XG4gIGNvbnN0IGluZGV4ID0gY29udGV4dC5jaGFpbi5tYXAoaXRlbSA9PiBpdGVtLnJvdXRlKS5pbmRleE9mKGNvbnRleHQucm91dGUpO1xuICBjb250ZXh0LmNoYWluW2luZGV4XS5lbGVtZW50ID0gZWxlbWVudDtcbiAgcmV0dXJuIGVsZW1lbnQ7XG59XG5cbmZ1bmN0aW9uIHJ1bkNhbGxiYWNrSWZQb3NzaWJsZShjYWxsYmFjaywgYXJncywgdGhpc0FyZykge1xuICBpZiAoaXNGdW5jdGlvbihjYWxsYmFjaykpIHtcbiAgICByZXR1cm4gY2FsbGJhY2suYXBwbHkodGhpc0FyZywgYXJncyk7XG4gIH1cbn1cblxuZnVuY3Rpb24gYW1lbmQoYW1lbmRtZW50RnVuY3Rpb24sIGFyZ3MsIGVsZW1lbnQpIHtcbiAgcmV0dXJuIGFtZW5kbWVudFJlc3VsdCA9PiB7XG4gICAgaWYgKGFtZW5kbWVudFJlc3VsdCAmJiAoYW1lbmRtZW50UmVzdWx0LmNhbmNlbCB8fCBhbWVuZG1lbnRSZXN1bHQucmVkaXJlY3QpKSB7XG4gICAgICByZXR1cm4gYW1lbmRtZW50UmVzdWx0O1xuICAgIH1cblxuICAgIGlmIChlbGVtZW50KSB7XG4gICAgICByZXR1cm4gcnVuQ2FsbGJhY2tJZlBvc3NpYmxlKGVsZW1lbnRbYW1lbmRtZW50RnVuY3Rpb25dLCBhcmdzLCBlbGVtZW50KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NOZXdDaGlsZHJlbihuZXdDaGlsZHJlbiwgcm91dGUpIHtcbiAgaWYgKCFBcnJheS5pc0FycmF5KG5ld0NoaWxkcmVuKSAmJiAhaXNPYmplY3QobmV3Q2hpbGRyZW4pKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgbG9nKFxuICAgICAgICBgSW5jb3JyZWN0IFwiY2hpbGRyZW5cIiB2YWx1ZSBmb3IgdGhlIHJvdXRlICR7cm91dGUucGF0aH06IGV4cGVjdGVkIGFycmF5IG9yIG9iamVjdCwgYnV0IGdvdCAke25ld0NoaWxkcmVufWBcbiAgICAgIClcbiAgICApO1xuICB9XG5cbiAgcm91dGUuX19jaGlsZHJlbiA9IFtdO1xuICBjb25zdCBjaGlsZFJvdXRlcyA9IHRvQXJyYXkobmV3Q2hpbGRyZW4pO1xuICBmb3IgKGxldCBpID0gMDsgaSA8IGNoaWxkUm91dGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgZW5zdXJlUm91dGUoY2hpbGRSb3V0ZXNbaV0pO1xuICAgIHJvdXRlLl9fY2hpbGRyZW4ucHVzaChjaGlsZFJvdXRlc1tpXSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gcmVtb3ZlRG9tTm9kZXMobm9kZXMpIHtcbiAgaWYgKG5vZGVzICYmIG5vZGVzLmxlbmd0aCkge1xuICAgIGNvbnN0IHBhcmVudCA9IG5vZGVzWzBdLnBhcmVudE5vZGU7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBub2Rlcy5sZW5ndGg7IGkrKykge1xuICAgICAgcGFyZW50LnJlbW92ZUNoaWxkKG5vZGVzW2ldKTtcbiAgICB9XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0UGF0aG5hbWVGb3JSb3V0ZXIocGF0aG5hbWUsIHJvdXRlcikge1xuICBjb25zdCBiYXNlID0gcm91dGVyLl9fZWZmZWN0aXZlQmFzZVVybDtcbiAgcmV0dXJuIGJhc2VcbiAgICA/IHJvdXRlci5jb25zdHJ1Y3Rvci5fX2NyZWF0ZVVybChwYXRobmFtZS5yZXBsYWNlKC9eXFwvLywgJycpLCBiYXNlKS5wYXRobmFtZVxuICAgIDogcGF0aG5hbWU7XG59XG5cbmZ1bmN0aW9uIGdldE1hdGNoZWRQYXRoKGNoYWluKSB7XG4gIHJldHVybiBjaGFpbi5tYXAoaXRlbSA9PiBpdGVtLnBhdGgpLnJlZHVjZSgoYSwgYikgPT4ge1xuICAgIGlmIChiLmxlbmd0aCkge1xuICAgICAgcmV0dXJuIGEucmVwbGFjZSgvXFwvJC8sICcnKSArICcvJyArIGIucmVwbGFjZSgvXlxcLy8sICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIGE7XG4gIH0sICcnKTtcbn1cblxuLyoqXG4gKiBBIHNpbXBsZSBjbGllbnQtc2lkZSByb3V0ZXIgZm9yIHNpbmdsZS1wYWdlIGFwcGxpY2F0aW9ucy4gSXQgdXNlc1xuICogZXhwcmVzcy1zdHlsZSBtaWRkbGV3YXJlIGFuZCBoYXMgYSBmaXJzdC1jbGFzcyBzdXBwb3J0IGZvciBXZWIgQ29tcG9uZW50cyBhbmRcbiAqIGxhenktbG9hZGluZy4gV29ya3MgZ3JlYXQgaW4gUG9seW1lciBhbmQgbm9uLVBvbHltZXIgYXBwcy5cbiAqXG4gKiBVc2UgYG5ldyBSb3V0ZXIob3V0bGV0LCBvcHRpb25zKWAgdG8gY3JlYXRlIGEgbmV3IFJvdXRlciBpbnN0YW5jZS5cbiAqXG4gKiAqIFRoZSBgb3V0bGV0YCBwYXJhbWV0ZXIgaXMgYSByZWZlcmVuY2UgdG8gdGhlIERPTSBub2RlIHRvIHJlbmRlclxuICogICB0aGUgY29udGVudCBpbnRvLlxuICpcbiAqICogVGhlIGBvcHRpb25zYCBwYXJhbWV0ZXIgaXMgYW4gb3B0aW9uYWwgb2JqZWN0IHdpdGggb3B0aW9ucy4gVGhlIGZvbGxvd2luZ1xuICogICBrZXlzIGFyZSBzdXBwb3J0ZWQ6XG4gKiAgICogYGJhc2VVcmxgIOKAlCB0aGUgaW5pdGlhbCB2YWx1ZSBmb3IgW1xuICogICAgIHRoZSBgYmFzZVVybGAgcHJvcGVydHlcbiAqICAgXSgjL2NsYXNzZXMvVmFhZGluLlJvdXRlciNwcm9wZXJ0eS1iYXNlVXJsKVxuICpcbiAqIFRoZSBSb3V0ZXIgaW5zdGFuY2UgaXMgYXV0b21hdGljYWxseSBzdWJzY3JpYmVkIHRvIG5hdmlnYXRpb24gZXZlbnRzXG4gKiBvbiBgd2luZG93YC5cbiAqXG4gKiBTZWUgW0xpdmUgRXhhbXBsZXNdKCMvY2xhc3Nlcy9WYWFkaW4uUm91dGVyL2RlbW9zL2RlbW8vaW5kZXguaHRtbCkgZm9yIHRoZSBkZXRhaWxlZCB1c2FnZSBkZW1vIGFuZCBjb2RlIHNuaXBwZXRzLlxuICpcbiAqIFNlZSBhbHNvIGRldGFpbGVkIEFQSSBkb2NzIGZvciB0aGUgZm9sbG93aW5nIG1ldGhvZHMsIGZvciB0aGUgYWR2YW5jZWQgdXNhZ2U6XG4gKlxuICogKiBbc2V0T3V0bGV0XSgjL2NsYXNzZXMvVmFhZGluLlJvdXRlciNtZXRob2Qtc2V0T3V0bGV0KSDigJMgc2hvdWxkIGJlIHVzZWQgdG8gY29uZmlndXJlIHRoZSBvdXRsZXQuXG4gKiAqIFtzZXRUcmlnZ2Vyc10oIy9jbGFzc2VzL1ZhYWRpbi5Sb3V0ZXIjbWV0aG9kLXNldFRyaWdnZXJzKSDigJMgc2hvdWxkIGJlIHVzZWQgdG8gY29uZmlndXJlIHRoZSBuYXZpZ2F0aW9uIGV2ZW50cy5cbiAqICogW3NldFJvdXRlc10oIy9jbGFzc2VzL1ZhYWRpbi5Sb3V0ZXIjbWV0aG9kLXNldFJvdXRlcykg4oCTIHNob3VsZCBiZSB1c2VkIHRvIGNvbmZpZ3VyZSB0aGUgcm91dGVzLlxuICpcbiAqIE9ubHkgYHNldFJvdXRlc2AgaGFzIHRvIGJlIGNhbGxlZCBtYW51YWxseSwgb3RoZXJzIGFyZSBhdXRvbWF0aWNhbGx5IGludm9rZWQgd2hlbiBjcmVhdGluZyBhIG5ldyBpbnN0YW5jZS5cbiAqXG4gKiBAbWVtYmVyb2YgVmFhZGluXG4gKiBAZXh0ZW5kcyBWYWFkaW4uUmVzb2x2ZXJcbiAqIEBkZW1vIGRlbW8vaW5kZXguaHRtbFxuICogQHN1bW1hcnkgSmF2YVNjcmlwdCBjbGFzcyB0aGF0IHJlbmRlcnMgZGlmZmVyZW50IERPTSBjb250ZW50IGRlcGVuZGluZyBvblxuICogICAgYSBnaXZlbiBwYXRoLiBJdCBjYW4gcmUtcmVuZGVyIHdoZW4gdHJpZ2dlcmVkIG9yIGF1dG9tYXRpY2FsbHkgb25cbiAqICAgICdwb3BzdGF0ZScgYW5kIC8gb3IgJ2NsaWNrJyBldmVudHMuXG4gKi9cbmV4cG9ydCBjbGFzcyBSb3V0ZXIgZXh0ZW5kcyBSZXNvbHZlciB7XG5cbiAgLyoqXG4gICAqIENyZWF0ZXMgYSBuZXcgUm91dGVyIGluc3RhbmNlIHdpdGggYSBnaXZlbiBvdXRsZXQsIGFuZFxuICAgKiBhdXRvbWF0aWNhbGx5IHN1YnNjcmliZXMgaXQgdG8gbmF2aWdhdGlvbiBldmVudHMgb24gdGhlIGB3aW5kb3dgLlxuICAgKiBVc2luZyBhIGNvbnN0cnVjdG9yIGFyZ3VtZW50IG9yIGEgc2V0dGVyIGZvciBvdXRsZXQgaXMgZXF1aXZhbGVudDpcbiAgICpcbiAgICogYGBgXG4gICAqIGNvbnN0IHJvdXRlciA9IG5ldyBWYWFkaW4uUm91dGVyKCk7XG4gICAqIHJvdXRlci5zZXRPdXRsZXQob3V0bGV0KTtcbiAgICogYGBgXG4gICAqIEBwYXJhbSB7P05vZGV9IG91dGxldFxuICAgKiBAcGFyYW0gez9Sb3V0ZXJPcHRpb25zfSBvcHRpb25zXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvdXRsZXQsIG9wdGlvbnMpIHtcbiAgICBjb25zdCBiYXNlRWxlbWVudCA9IGRvY3VtZW50LmhlYWQucXVlcnlTZWxlY3RvcignYmFzZScpO1xuICAgIHN1cGVyKFtdLCBPYmplY3QuYXNzaWduKHtcbiAgICAgIC8vIERlZmF1bHQgb3B0aW9uc1xuICAgICAgYmFzZVVybDogYmFzZUVsZW1lbnQgJiYgYmFzZUVsZW1lbnQuZ2V0QXR0cmlidXRlKCdocmVmJylcbiAgICB9LCBvcHRpb25zKSk7XG5cbiAgICB0aGlzLnJlc29sdmVSb3V0ZSA9IGNvbnRleHQgPT4gdGhpcy5fX3Jlc29sdmVSb3V0ZShjb250ZXh0KTtcblxuICAgIGNvbnN0IHRyaWdnZXJzID0gUm91dGVyLk5hdmlnYXRpb25UcmlnZ2VyO1xuICAgIFJvdXRlci5zZXRUcmlnZ2Vycy5hcHBseShSb3V0ZXIsIE9iamVjdC5rZXlzKHRyaWdnZXJzKS5tYXAoa2V5ID0+IHRyaWdnZXJzW2tleV0pKTtcblxuICAgIC8qKlxuICAgICAqIFRoZSBiYXNlIFVSTCBmb3IgYWxsIHJvdXRlcyBpbiB0aGUgcm91dGVyIGluc3RhbmNlLiBCeSBkZWZhdWx0LFxuICAgICAqIHRha2VzIHRoZSBgPGJhc2UgaHJlZj5gIGF0dHJpYnV0ZSB2YWx1ZSBpZiB0aGUgYmFzZSBlbGVtZW50IGV4aXN0c1xuICAgICAqIGluIHRoZSBgPGhlYWQ+YC5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdHlwZSB7c3RyaW5nfVxuICAgICAqL1xuICAgIHRoaXMuYmFzZVVybDtcblxuICAgIC8qKlxuICAgICAqIEEgcHJvbWlzZSB0aGF0IGlzIHNldHRsZWQgYWZ0ZXIgdGhlIGN1cnJlbnQgcmVuZGVyIGN5Y2xlIGNvbXBsZXRlcy4gSWZcbiAgICAgKiB0aGVyZSBpcyBubyByZW5kZXIgY3ljbGUgaW4gcHJvZ3Jlc3MgdGhlIHByb21pc2UgaXMgaW1tZWRpYXRlbHkgc2V0dGxlZFxuICAgICAqIHdpdGggdGhlIGxhc3QgcmVuZGVyIGN5Y2xlIHJlc3VsdC5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKiBAdHlwZSB7IVByb21pc2U8IVZhYWRpbi5Sb3V0ZXIuTG9jYXRpb24+fVxuICAgICAqL1xuICAgIHRoaXMucmVhZHk7XG4gICAgdGhpcy5yZWFkeSA9IFByb21pc2UucmVzb2x2ZShvdXRsZXQpO1xuXG4gICAgLyoqXG4gICAgICogQ29udGFpbnMgcmVhZC1vbmx5IGluZm9ybWF0aW9uIGFib3V0IHRoZSBjdXJyZW50IHJvdXRlciBsb2NhdGlvbjpcbiAgICAgKiBwYXRobmFtZSwgYWN0aXZlIHJvdXRlcywgcGFyYW1ldGVycy4gU2VlIHRoZVxuICAgICAqIFtMb2NhdGlvbiB0eXBlIGRlY2xhcmF0aW9uXSgjL2NsYXNzZXMvVmFhZGluLlJvdXRlci5Mb2NhdGlvbilcbiAgICAgKiBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqIEB0eXBlIHshVmFhZGluLlJvdXRlci5Mb2NhdGlvbn1cbiAgICAgKi9cbiAgICB0aGlzLmxvY2F0aW9uO1xuICAgIHRoaXMubG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbih7cmVzb2x2ZXI6IHRoaXN9KTtcblxuICAgIHRoaXMuX19sYXN0U3RhcnRlZFJlbmRlcklkID0gMDtcbiAgICB0aGlzLl9fbmF2aWdhdGlvbkV2ZW50SGFuZGxlciA9IHRoaXMuX19vbk5hdmlnYXRpb25FdmVudC5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2V0T3V0bGV0KG91dGxldCk7XG4gICAgdGhpcy5zdWJzY3JpYmUoKTtcbiAgfVxuXG4gIF9fcmVzb2x2ZVJvdXRlKGNvbnRleHQpIHtcbiAgICBjb25zdCByb3V0ZSA9IGNvbnRleHQucm91dGU7XG5cbiAgICBsZXQgY2FsbGJhY2tzID0gUHJvbWlzZS5yZXNvbHZlKCk7XG5cbiAgICBpZiAoaXNGdW5jdGlvbihyb3V0ZS5jaGlsZHJlbikpIHtcbiAgICAgIGNhbGxiYWNrcyA9IGNhbGxiYWNrc1xuICAgICAgICAudGhlbigoKSA9PiByb3V0ZS5jaGlsZHJlbihjb3B5Q29udGV4dFdpdGhvdXROZXh0KGNvbnRleHQpKSlcbiAgICAgICAgLnRoZW4oY2hpbGRyZW4gPT4ge1xuICAgICAgICAgIC8vIFRoZSByb3V0ZS5jaGlsZHJlbigpIGNhbGxiYWNrIG1pZ2h0IGhhdmUgcmUtd3JpdHRlbiB0aGVcbiAgICAgICAgICAvLyByb3V0ZS5jaGlsZHJlbiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIHJldHVybmluZyBhIHZhbHVlXG4gICAgICAgICAgaWYgKCFpc1Jlc3VsdE5vdEVtcHR5KGNoaWxkcmVuKSAmJiAhaXNGdW5jdGlvbihyb3V0ZS5jaGlsZHJlbikpIHtcbiAgICAgICAgICAgIGNoaWxkcmVuID0gcm91dGUuY2hpbGRyZW47XG4gICAgICAgICAgfVxuICAgICAgICAgIHByb2Nlc3NOZXdDaGlsZHJlbihjaGlsZHJlbiwgcm91dGUpO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICBjb25zdCBjb21tYW5kcyA9IHtcbiAgICAgIHJlZGlyZWN0OiBwYXRoID0+IGNyZWF0ZVJlZGlyZWN0KGNvbnRleHQsIHBhdGgpLFxuICAgICAgY29tcG9uZW50OiBjb21wb25lbnQgPT4gcmVuZGVyQ29tcG9uZW50KGNvbnRleHQsIGNvbXBvbmVudClcbiAgICB9O1xuXG4gICAgcmV0dXJuIGNhbGxiYWNrc1xuICAgICAgLnRoZW4oKCkgPT4gcnVuQ2FsbGJhY2tJZlBvc3NpYmxlKHJvdXRlLmFjdGlvbiwgW2NvbnRleHQsIGNvbW1hbmRzXSwgcm91dGUpKVxuICAgICAgLnRoZW4ocmVzdWx0ID0+IHtcbiAgICAgICAgaWYgKGlzUmVzdWx0Tm90RW1wdHkocmVzdWx0KSkge1xuICAgICAgICAgIC8vIEFjdGlvbnMgbGlrZSBgKCkgPT4gaW1wb3J0KCdteS12aWV3LmpzJylgIGFyZSBub3QgZXhwZWN0ZWQgdG9cbiAgICAgICAgICAvLyBlbmQgdGhlIHJlc29sdXRpb24sIGRlc3BpdGUgdGhlIHJlc3VsdCBpcyBub3QgZW1wdHkuIENoZWNraW5nXG4gICAgICAgICAgLy8gdGhlIHJlc3VsdCB3aXRoIGEgd2hpdGVsaXN0IG9mIHZhbHVlcyB0aGF0IGVuZCB0aGUgcmVzdWx1dGlvbi5cbiAgICAgICAgICBpZiAocmVzdWx0IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgfHxcbiAgICAgICAgICAgICAgcmVzdWx0LnJlZGlyZWN0IHx8XG4gICAgICAgICAgICAgIHJlc3VsdCA9PT0gbm90Rm91bmRSZXN1bHQpIHtcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzU3RyaW5nKHJvdXRlLnJlZGlyZWN0KSkge1xuICAgICAgICAgIHJldHVybiBjb21tYW5kcy5yZWRpcmVjdChyb3V0ZS5yZWRpcmVjdCk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAocm91dGUuYnVuZGxlKSB7XG4gICAgICAgICAgcmV0dXJuIGxvYWRCdW5kbGUocm91dGUuYnVuZGxlKVxuICAgICAgICAgICAgLnRoZW4oKCkgPT4ge30sICgpID0+IHtcbiAgICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGxvZyhgQnVuZGxlIG5vdCBmb3VuZDogJHtyb3V0ZS5idW5kbGV9LiBDaGVjayBpZiB0aGUgZmlsZSBuYW1lIGlzIGNvcnJlY3RgKSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICAgIC50aGVuKHJlc3VsdCA9PiB7XG4gICAgICAgIGlmIChpc1Jlc3VsdE5vdEVtcHR5KHJlc3VsdCkpIHtcbiAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICB9XG4gICAgICAgIGlmIChpc1N0cmluZyhyb3V0ZS5jb21wb25lbnQpKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbW1hbmRzLmNvbXBvbmVudChyb3V0ZS5jb21wb25lbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIHRoZSByb3V0ZXIgb3V0bGV0ICh0aGUgRE9NIG5vZGUgd2hlcmUgdGhlIGNvbnRlbnQgZm9yIHRoZSBjdXJyZW50XG4gICAqIHJvdXRlIGlzIGluc2VydGVkKS4gQW55IGNvbnRlbnQgcHJlLWV4aXN0aW5nIGluIHRoZSByb3V0ZXIgb3V0bGV0IGlzXG4gICAqIHJlbW92ZWQgYXQgdGhlIGVuZCBvZiBlYWNoIHJlbmRlciBwYXNzLlxuICAgKlxuICAgKiBOT1RFOiB0aGlzIG1ldGhvZCBpcyBhdXRvbWF0aWNhbGx5IGludm9rZWQgZmlyc3QgdGltZSB3aGVuIGNyZWF0aW5nIGEgbmV3IFJvdXRlciBpbnN0YW5jZS5cbiAgICpcbiAgICogQHBhcmFtIHs/Tm9kZX0gb3V0bGV0IHRoZSBET00gbm9kZSB3aGVyZSB0aGUgY29udGVudCBmb3IgdGhlIGN1cnJlbnQgcm91dGVcbiAgICogICAgIGlzIGluc2VydGVkLlxuICAgKi9cbiAgc2V0T3V0bGV0KG91dGxldCkge1xuICAgIGlmIChvdXRsZXQpIHtcbiAgICAgIHRoaXMuX19lbnN1cmVPdXRsZXQob3V0bGV0KTtcbiAgICB9XG4gICAgdGhpcy5fX291dGxldCA9IG91dGxldDtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXR1cm5zIHRoZSBjdXJyZW50IHJvdXRlciBvdXRsZXQuIFRoZSBpbml0aWFsIHZhbHVlIGlzIGB1bmRlZmluZWRgLlxuICAgKlxuICAgKiBAcmV0dXJuIHs/Tm9kZX0gdGhlIGN1cnJlbnQgcm91dGVyIG91dGxldCAob3IgYHVuZGVmaW5lZGApXG4gICAqL1xuICBnZXRPdXRsZXQoKSB7XG4gICAgcmV0dXJuIHRoaXMuX19vdXRsZXQ7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgcm91dGluZyBjb25maWcgKHJlcGxhY2luZyB0aGUgZXhpc3Rpbmcgb25lKSBhbmQgdHJpZ2dlcnMgYVxuICAgKiBuYXZpZ2F0aW9uIGV2ZW50IHNvIHRoYXQgdGhlIHJvdXRlciBvdXRsZXQgaXMgcmVmcmVzaGVkIGFjY29yZGluZyB0byB0aGVcbiAgICogY3VycmVudCBgd2luZG93LmxvY2F0aW9uYCBhbmQgdGhlIG5ldyByb3V0aW5nIGNvbmZpZy5cbiAgICpcbiAgICogRWFjaCByb3V0ZSBvYmplY3QgbWF5IGhhdmUgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzLCBsaXN0ZWQgaGVyZSBpbiB0aGUgcHJvY2Vzc2luZyBvcmRlcjpcbiAgICogKiBgcGF0aGAg4oCTIHRoZSByb3V0ZSBwYXRoIChyZWxhdGl2ZSB0byB0aGUgcGFyZW50IHJvdXRlIGlmIGFueSkgaW4gdGhlXG4gICAqIFtleHByZXNzLmpzIHN5bnRheF0oaHR0cHM6Ly9leHByZXNzanMuY29tL2VuL2d1aWRlL3JvdXRpbmcuaHRtbCNyb3V0ZS1wYXRoc1wiKS5cbiAgICpcbiAgICogKiBgY2hpbGRyZW5gIOKAkyBhbiBhcnJheSBvZiBuZXN0ZWQgcm91dGVzIG9yIGEgZnVuY3Rpb24gdGhhdCBwcm92aWRlcyB0aGlzXG4gICAqIGFycmF5IGF0IHRoZSByZW5kZXIgdGltZS4gVGhlIGZ1bmN0aW9uIGNhbiBiZSBzeW5jaHJvbm91cyBvciBhc3luY2hyb25vdXM6XG4gICAqIGluIHRoZSBsYXR0ZXIgY2FzZSB0aGUgcmVuZGVyIGlzIGRlbGF5ZWQgdW50aWwgdGhlIHJldHVybmVkIHByb21pc2UgaXNcbiAgICogcmVzb2x2ZWQuIFRoZSBgY2hpbGRyZW5gIGZ1bmN0aW9uIGlzIGV4ZWN1dGVkIGV2ZXJ5IHRpbWUgd2hlbiB0aGlzIHJvdXRlIGlzXG4gICAqIGJlaW5nIHJlbmRlcmVkLiBUaGlzIGFsbG93cyBmb3IgZHluYW1pYyByb3V0ZSBzdHJ1Y3R1cmVzIChlLmcuIGJhY2tlbmQtZGVmaW5lZCksXG4gICAqIGJ1dCBpdCBtaWdodCBoYXZlIGEgcGVyZm9ybWFuY2UgaW1wYWN0IGFzIHdlbGwuIEluIG9yZGVyIHRvIGF2b2lkIGNhbGxpbmdcbiAgICogdGhlIGZ1bmN0aW9uIG9uIHN1YnNlcXVlbnQgcmVuZGVycywgeW91IGNhbiBvdmVycmlkZSB0aGUgYGNoaWxkcmVuYCBwcm9wZXJ0eVxuICAgKiBvZiB0aGUgcm91dGUgb2JqZWN0IGFuZCBzYXZlIHRoZSBjYWxjdWxhdGVkIGFycmF5IHRoZXJlXG4gICAqICh2aWEgYGNvbnRleHQucm91dGUuY2hpbGRyZW4gPSBbIHJvdXRlMSwgcm91dGUyLCAuLi5dO2ApLlxuICAgKiBQYXJlbnQgcm91dGVzIGFyZSBmdWxseSByZXNvbHZlZCBiZWZvcmUgcmVzb2x2aW5nIHRoZSBjaGlsZHJlbi4gQ2hpbGRyZW5cbiAgICogJ3BhdGgnIHZhbHVlcyBhcmUgcmVsYXRpdmUgdG8gdGhlIHBhcmVudCBvbmVzLlxuICAgKlxuICAgKiAqIGBhY3Rpb25gIOKAkyB0aGUgYWN0aW9uIHRoYXQgaXMgZXhlY3V0ZWQgYmVmb3JlIHRoZSByb3V0ZSBpcyByZXNvbHZlZC5cbiAgICogVGhlIHZhbHVlIGZvciB0aGlzIHByb3BlcnR5IHNob3VsZCBiZSBhIGZ1bmN0aW9uLCBhY2NlcHRpbmcgYGNvbnRleHRgXG4gICAqIGFuZCBgY29tbWFuZHNgIHBhcmFtZXRlcnMgZGVzY3JpYmVkIGJlbG93LiBJZiBwcmVzZW50LCB0aGlzIGZ1bmN0aW9uIGlzXG4gICAqIGFsd2F5cyBpbnZva2VkIGZpcnN0LCBkaXNyZWdhcmRpbmcgb2YgdGhlIG90aGVyIHByb3BlcnRpZXMnIHByZXNlbmNlLlxuICAgKiBUaGUgYWN0aW9uIGNhbiByZXR1cm4gYSByZXN1bHQgZGlyZWN0bHkgb3Igd2l0aGluIGEgYFByb21pc2VgLCB3aGljaFxuICAgKiByZXNvbHZlcyB0byB0aGUgcmVzdWx0LiBJZiB0aGUgYWN0aW9uIHJlc3VsdCBpcyBhbiBgSFRNTEVsZW1lbnRgIGluc3RhbmNlLFxuICAgKiBhIGBjb21tYW5kcy5jb21wb25lbnQobmFtZSlgIHJlc3VsdCwgYSBgY29tbWFuZHMucmVkaXJlY3QocGF0aClgIHJlc3VsdCxcbiAgICogb3IgYSBgY29udGV4dC5uZXh0KClgIHJlc3VsdCwgdGhlIGN1cnJlbnQgcm91dGUgcmVzb2x1dGlvbiBpcyBmaW5pc2hlZCxcbiAgICogYW5kIG90aGVyIHJvdXRlIGNvbmZpZyBwcm9wZXJ0aWVzIGFyZSBpZ25vcmVkLlxuICAgKiBTZWUgYWxzbyAqKlJvdXRlIEFjdGlvbnMqKiBzZWN0aW9uIGluIFtMaXZlIEV4YW1wbGVzXSgjL2NsYXNzZXMvVmFhZGluLlJvdXRlci9kZW1vcy9kZW1vL2luZGV4Lmh0bWwpLlxuICAgKlxuICAgKiAqIGByZWRpcmVjdGAg4oCTIG90aGVyIHJvdXRlJ3MgcGF0aCB0byByZWRpcmVjdCB0by4gUGFzc2VzIGFsbCByb3V0ZSBwYXJhbWV0ZXJzIHRvIHRoZSByZWRpcmVjdCB0YXJnZXQuXG4gICAqIFRoZSB0YXJnZXQgcm91dGUgc2hvdWxkIGFsc28gYmUgZGVmaW5lZC5cbiAgICogU2VlIGFsc28gKipSZWRpcmVjdHMqKiBzZWN0aW9uIGluIFtMaXZlIEV4YW1wbGVzXSgjL2NsYXNzZXMvVmFhZGluLlJvdXRlci9kZW1vcy9kZW1vL2luZGV4Lmh0bWwpLlxuICAgKlxuICAgKiAqIGBidW5kbGVgIOKAkyBzdHJpbmcgY29udGFpbmluZyB0aGUgcGF0aCB0byBgLmpzYCBvciBgLm1qc2AgYnVuZGxlIHRvIGxvYWQgYmVmb3JlIHJlc29sdmluZyB0aGUgcm91dGUsXG4gICAqIG9yIHRoZSBvYmplY3Qgd2l0aCBcIm1vZHVsZVwiIGFuZCBcIm5vbW9kdWxlXCIga2V5cyByZWZlcnJpbmcgdG8gZGlmZmVyZW50IGJ1bmRsZXMuXG4gICAqIEVhY2ggYnVuZGxlIGlzIG9ubHkgbG9hZGVkIG9uY2UuIElmIFwibW9kdWxlXCIgYW5kIFwibm9tb2R1bGVcIiBhcmUgc2V0LCBvbmx5IG9uZSBidW5kbGUgaXMgbG9hZGVkLFxuICAgKiBkZXBlbmRpbmcgb24gd2hldGhlciB0aGUgYnJvd3NlciBzdXBwb3J0cyBFUyBtb2R1bGVzIG9yIG5vdC5cbiAgICogVGhlIHByb3BlcnR5IGlzIGlnbm9yZWQgd2hlbiBlaXRoZXIgYW4gYGFjdGlvbmAgcmV0dXJucyB0aGUgcmVzdWx0IG9yIGByZWRpcmVjdGAgcHJvcGVydHkgaXMgcHJlc2VudC5cbiAgICogQW55IGVycm9yLCBlLmcuIDQwNCB3aGlsZSBsb2FkaW5nIGJ1bmRsZSB3aWxsIGNhdXNlIHJvdXRlIHJlc29sdXRpb24gdG8gdGhyb3cuXG4gICAqIFNlZSBhbHNvICoqQ29kZSBTcGxpdHRpbmcqKiBzZWN0aW9uIGluIFtMaXZlIEV4YW1wbGVzXSgjL2NsYXNzZXMvVmFhZGluLlJvdXRlci9kZW1vcy9kZW1vL2luZGV4Lmh0bWwpLlxuICAgKlxuICAgKiAqIGBjb21wb25lbnRgIOKAkyB0aGUgdGFnIG5hbWUgb2YgdGhlIFdlYiBDb21wb25lbnQgdG8gcmVzb2x2ZSB0aGUgcm91dGUgdG8uXG4gICAqIFRoZSBwcm9wZXJ0eSBpcyBpZ25vcmVkIHdoZW4gZWl0aGVyIGFuIGBhY3Rpb25gIHJldHVybnMgdGhlIHJlc3VsdCBvciBgcmVkaXJlY3RgIHByb3BlcnR5IGlzIHByZXNlbnQuXG4gICAqIElmIHJvdXRlIGNvbnRhaW5zIHRoZSBgY29tcG9uZW50YCBwcm9wZXJ0eSAob3IgYW4gYWN0aW9uIHRoYXQgcmV0dXJuIGEgY29tcG9uZW50KVxuICAgKiBhbmQgaXRzIGNoaWxkIHJvdXRlIGFsc28gY29udGFpbnMgdGhlIGBjb21wb25lbnRgIHByb3BlcnR5LCBjaGlsZCByb3V0ZSdzIGNvbXBvbmVudFxuICAgKiB3aWxsIGJlIHJlbmRlcmVkIGFzIGEgbGlnaHQgZG9tIGNoaWxkIG9mIGEgcGFyZW50IGNvbXBvbmVudC5cbiAgICpcbiAgICogKiBgbmFtZWAg4oCTIHRoZSBzdHJpbmcgbmFtZSBvZiB0aGUgcm91dGUgdG8gdXNlIGluIHRoZVxuICAgKiBbYHJvdXRlci51cmxGb3JOYW1lKG5hbWUsIHBhcmFtcylgXSgjL2NsYXNzZXMvVmFhZGluLlJvdXRlciNtZXRob2QtdXJsRm9yTmFtZSlcbiAgICogbmF2aWdhdGlvbiBoZWxwZXIgbWV0aG9kLlxuICAgKlxuICAgKiBGb3IgYW55IHJvdXRlIGZ1bmN0aW9uIChgYWN0aW9uYCwgYGNoaWxkcmVuYCkgZGVmaW5lZCwgdGhlIGNvcnJlc3BvbmRpbmcgYHJvdXRlYCBvYmplY3QgaXMgYXZhaWxhYmxlIGluc2lkZSB0aGUgY2FsbGJhY2tcbiAgICogdGhyb3VnaCB0aGUgYHRoaXNgIHJlZmVyZW5jZS4gSWYgeW91IG5lZWQgdG8gYWNjZXNzIGl0LCBtYWtlIHN1cmUgeW91IGRlZmluZSB0aGUgY2FsbGJhY2sgYXMgYSBub24tYXJyb3cgZnVuY3Rpb25cbiAgICogYmVjYXVzZSBhcnJvdyBmdW5jdGlvbnMgZG8gbm90IGhhdmUgdGhlaXIgb3duIGB0aGlzYCByZWZlcmVuY2UuXG4gICAqXG4gICAqIGBjb250ZXh0YCBvYmplY3QgdGhhdCBpcyBwYXNzZWQgdG8gYGFjdGlvbmAgZnVuY3Rpb24gaG9sZHMgdGhlIGZvbGxvd2luZyBwcm9wZXJ0aWVzOlxuICAgKiAqIGBjb250ZXh0LnBhdGhuYW1lYCDigJMgc3RyaW5nIHdpdGggdGhlIHBhdGhuYW1lIGJlaW5nIHJlc29sdmVkXG4gICAqXG4gICAqICogYGNvbnRleHQucGFyYW1zYCDigJMgb2JqZWN0IHdpdGggcm91dGUgcGFyYW1ldGVyc1xuICAgKlxuICAgKiAqIGBjb250ZXh0LnJvdXRlYCDigJMgb2JqZWN0IHRoYXQgaG9sZHMgdGhlIHJvdXRlIHRoYXQgaXMgY3VycmVudGx5IGJlaW5nIHJlbmRlcmVkLlxuICAgKlxuICAgKiAqIGBjb250ZXh0Lm5leHQoKWAg4oCTIGZ1bmN0aW9uIGZvciBhc3luY2hyb25vdXNseSBnZXR0aW5nIHRoZSBuZXh0IHJvdXRlXG4gICAqIGNvbnRlbnRzIGZyb20gdGhlIHJlc29sdXRpb24gY2hhaW4gKGlmIGFueSlcbiAgICpcbiAgICogYGNvbW1hbmRzYCBvYmplY3QgdGhhdCBpcyBwYXNzZWQgdG8gYGFjdGlvbmAgZnVuY3Rpb24gaGFzXG4gICAqIHRoZSBmb2xsb3dpbmcgbWV0aG9kczpcbiAgICpcbiAgICogKiBgY29tbWFuZHMucmVkaXJlY3QocGF0aClgIOKAkyBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgYSByZWRpcmVjdCBkYXRhXG4gICAqIGZvciB0aGUgcGF0aCBzcGVjaWZpZWQuXG4gICAqXG4gICAqICogYGNvbW1hbmRzLmNvbXBvbmVudChjb21wb25lbnQpYCDigJMgZnVuY3Rpb24gdGhhdCBjcmVhdGVzIGEgbmV3IEhUTUxFbGVtZW50XG4gICAqIHdpdGggY3VycmVudCBjb250ZXh0XG4gICAqXG4gICAqIEBwYXJhbSB7IUFycmF5PCFPYmplY3Q+fCFPYmplY3R9IHJvdXRlcyBhIHNpbmdsZSByb3V0ZSBvciBhbiBhcnJheSBvZiB0aG9zZVxuICAgKi9cbiAgc2V0Um91dGVzKHJvdXRlcykge1xuICAgIHRoaXMuX191cmxGb3JOYW1lID0gdW5kZWZpbmVkO1xuICAgIHN1cGVyLnNldFJvdXRlcyhyb3V0ZXMpO1xuICAgIHRoaXMuX19vbk5hdmlnYXRpb25FdmVudCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIEFzeW5jaHJvbm91c2x5IHJlc29sdmVzIHRoZSBnaXZlbiBwYXRobmFtZSBhbmQgcmVuZGVycyB0aGUgcmVzb2x2ZWQgcm91dGVcbiAgICogY29tcG9uZW50IGludG8gdGhlIHJvdXRlciBvdXRsZXQuIElmIG5vIHJvdXRlciBvdXRsZXQgaXMgc2V0IGF0IHRoZSB0aW1lIG9mXG4gICAqIGNhbGxpbmcgdGhpcyBtZXRob2QsIG9yIGF0IHRoZSB0aW1lIHdoZW4gdGhlIHJvdXRlIHJlc29sdXRpb24gaXMgY29tcGxldGVkLFxuICAgKiBhIGBUeXBlRXJyb3JgIGlzIHRocm93bi5cbiAgICpcbiAgICogUmV0dXJucyBhIHByb21pc2UgdGhhdCBpcyBmdWxmaWxsZWQgd2l0aCB0aGUgcm91dGVyIG91dGxldCBET00gTm9kZSBhZnRlclxuICAgKiB0aGUgcm91dGUgY29tcG9uZW50IGlzIGNyZWF0ZWQgYW5kIGluc2VydGVkIGludG8gdGhlIHJvdXRlciBvdXRsZXQsIG9yXG4gICAqIHJlamVjdGVkIGlmIG5vIHJvdXRlIG1hdGNoZXMgdGhlIGdpdmVuIHBhdGguXG4gICAqXG4gICAqIElmIGFub3RoZXIgcmVuZGVyIHBhc3MgaXMgc3RhcnRlZCBiZWZvcmUgdGhlIHByZXZpb3VzIG9uZSBpcyBjb21wbGV0ZWQsIHRoZVxuICAgKiByZXN1bHQgb2YgdGhlIHByZXZpb3VzIHJlbmRlciBwYXNzIGlzIGlnbm9yZWQuXG4gICAqXG4gICAqIEBwYXJhbSB7IXN0cmluZ3whe3BhdGhuYW1lOiAhc3RyaW5nfX0gcGF0aG5hbWVPckNvbnRleHQgdGhlIHBhdGhuYW1lIHRvXG4gICAqICAgIHJlbmRlciBvciBhIGNvbnRleHQgb2JqZWN0IHdpdGggYSBgcGF0aG5hbWVgIHByb3BlcnR5IGFuZCBvdGhlclxuICAgKiAgICBwcm9wZXJ0aWVzIHRvIHBhc3MgdG8gdGhlIHJlc29sdmVyLlxuICAgKiBAcmV0dXJuIHshUHJvbWlzZTwhTm9kZT59XG4gICAqL1xuICByZW5kZXIocGF0aG5hbWVPckNvbnRleHQsIHNob3VsZFVwZGF0ZUhpc3RvcnkpIHtcbiAgICBjb25zdCByZW5kZXJJZCA9ICsrdGhpcy5fX2xhc3RTdGFydGVkUmVuZGVySWQ7XG4gICAgY29uc3QgcGF0aG5hbWUgPSBwYXRobmFtZU9yQ29udGV4dC5wYXRobmFtZSB8fCBwYXRobmFtZU9yQ29udGV4dDtcblxuICAgIC8vIEZpbmQgdGhlIGZpcnN0IHJvdXRlIHRoYXQgcmVzb2x2ZXMgdG8gYSBub24tZW1wdHkgcmVzdWx0XG4gICAgdGhpcy5yZWFkeSA9IHRoaXMucmVzb2x2ZShwYXRobmFtZU9yQ29udGV4dClcblxuICAgICAgLy8gUHJvY2VzcyB0aGUgcmVzdWx0IG9mIHRoaXMucmVzb2x2ZSgpIGFuZCBoYW5kbGUgYWxsIHNwZWNpYWwgY29tbWFuZHM6XG4gICAgICAvLyAocmVkaXJlY3QgLyBwcmV2ZW50IC8gY29tcG9uZW50KS4gSWYgdGhlIHJlc3VsdCBpcyBhICdjb21wb25lbnQnLFxuICAgICAgLy8gdGhlbiBnbyBkZWVwZXIgYW5kIGJ1aWxkIHRoZSBlbnRpcmUgY2hhaW4gb2YgbmVzdGVkIGNvbXBvbmVudHMgbWF0Y2hpbmdcbiAgICAgIC8vIHRoZSBwYXRobmFtZS4gQWxzbyBjYWxsIGFsbCAnb24gYmVmb3JlJyBjYWxsYmFja3MgYWxvbmcgdGhlIHdheS5cbiAgICAgIC50aGVuKGNvbnRleHQgPT4gdGhpcy5fX2Z1bGx5UmVzb2x2ZUNoYWluKGNvbnRleHQpKVxuXG4gICAgICAudGhlbihjb250ZXh0ID0+IHtcbiAgICAgICAgaWYgKHJlbmRlcklkID09PSB0aGlzLl9fbGFzdFN0YXJ0ZWRSZW5kZXJJZCkge1xuICAgICAgICAgIGNvbnN0IHByZXZpb3VzQ29udGV4dCA9IHRoaXMuX19wcmV2aW91c0NvbnRleHQ7XG5cbiAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgcmVuZGVyIHdhcyBwcmV2ZW50ZWQgYW5kIG1ha2UgYW4gZWFybHkgcmV0dXJuIGluIHRoYXQgY2FzZVxuICAgICAgICAgIGlmIChjb250ZXh0ID09PSBwcmV2aW91c0NvbnRleHQpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxvY2F0aW9uO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHRoaXMubG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihjb250ZXh0KTtcbiAgICAgICAgICBmaXJlUm91dGVyRXZlbnQoJ2xvY2F0aW9uLWNoYW5nZWQnLCB7cm91dGVyOiB0aGlzLCBsb2NhdGlvbjogdGhpcy5sb2NhdGlvbn0pO1xuXG4gICAgICAgICAgaWYgKHNob3VsZFVwZGF0ZUhpc3RvcnkpIHtcbiAgICAgICAgICAgIHRoaXMuX191cGRhdGVCcm93c2VySGlzdG9yeShjb250ZXh0LnBhdGhuYW1lLCBjb250ZXh0LnJlZGlyZWN0RnJvbSk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgdGhpcy5fX2FkZEFwcGVhcmluZ0NvbnRlbnQoY29udGV4dCwgcHJldmlvdXNDb250ZXh0KTtcbiAgICAgICAgICBjb25zdCBhbmltYXRpb25Eb25lID0gdGhpcy5fX2FuaW1hdGVJZk5lZWRlZChjb250ZXh0KTtcblxuICAgICAgICAgIHRoaXMuX19ydW5PbkFmdGVyRW50ZXJDYWxsYmFja3MoY29udGV4dCk7XG4gICAgICAgICAgdGhpcy5fX3J1bk9uQWZ0ZXJMZWF2ZUNhbGxiYWNrcyhjb250ZXh0LCBwcmV2aW91c0NvbnRleHQpO1xuXG4gICAgICAgICAgcmV0dXJuIGFuaW1hdGlvbkRvbmUudGhlbigoKSA9PiB7XG4gICAgICAgICAgICBpZiAocmVuZGVySWQgPT09IHRoaXMuX19sYXN0U3RhcnRlZFJlbmRlcklkKSB7XG4gICAgICAgICAgICAgIC8vIElmIHRoZXJlIGlzIGFub3RoZXIgcmVuZGVyIHBhc3Mgc3RhcnRlZCBhZnRlciB0aGlzIG9uZSxcbiAgICAgICAgICAgICAgLy8gdGhlICdkaXNhcHBlYXJpbmcgY29udGVudCcgd291bGQgYmUgcmVtb3ZlZCB3aGVuIHRoZSBvdGhlclxuICAgICAgICAgICAgICAvLyByZW5kZXIgcGFzcyBjYWxscyBgdGhpcy5fX2FkZEFwcGVhcmluZ0NvbnRlbnQoKWBcbiAgICAgICAgICAgICAgdGhpcy5fX3JlbW92ZURpc2FwcGVhcmluZ0NvbnRlbnQoKTtcblxuICAgICAgICAgICAgICB0aGlzLl9fcHJldmlvdXNDb250ZXh0ID0gY29udGV4dDtcbiAgICAgICAgICAgICAgcmV0dXJuIHRoaXMubG9jYXRpb247XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pXG4gICAgICAuY2F0Y2goZXJyb3IgPT4ge1xuICAgICAgICBpZiAocmVuZGVySWQgPT09IHRoaXMuX19sYXN0U3RhcnRlZFJlbmRlcklkKSB7XG4gICAgICAgICAgaWYgKHNob3VsZFVwZGF0ZUhpc3RvcnkpIHtcbiAgICAgICAgICAgIHRoaXMuX191cGRhdGVCcm93c2VySGlzdG9yeShwYXRobmFtZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJlbW92ZURvbU5vZGVzKHRoaXMuX19vdXRsZXQgJiYgdGhpcy5fX291dGxldC5jaGlsZHJlbik7XG4gICAgICAgICAgdGhpcy5sb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHtwYXRobmFtZSwgcmVzb2x2ZXI6IHRoaXN9KTtcbiAgICAgICAgICBmaXJlUm91dGVyRXZlbnQoJ2Vycm9yJywge3JvdXRlcjogdGhpcywgZXJyb3IsIHBhdGhuYW1lfSk7XG4gICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIHJldHVybiB0aGlzLnJlYWR5O1xuICB9XG5cbiAgX19mdWxseVJlc29sdmVDaGFpbihvcmlnaW5hbENvbnRleHQsIGN1cnJlbnRDb250ZXh0ID0gb3JpZ2luYWxDb250ZXh0KSB7XG4gICAgcmV0dXJuIHRoaXMuX19hbWVuZFdpdGhSZXNvbHV0aW9uUmVzdWx0KGN1cnJlbnRDb250ZXh0KVxuICAgICAgLnRoZW4oYW1lbmRlZENvbnRleHQgPT4ge1xuICAgICAgICBjb25zdCBpbml0aWFsQ29udGV4dCA9IGFtZW5kZWRDb250ZXh0ICE9PSBjdXJyZW50Q29udGV4dCA/IGFtZW5kZWRDb250ZXh0IDogb3JpZ2luYWxDb250ZXh0O1xuICAgICAgICByZXR1cm4gYW1lbmRlZENvbnRleHQubmV4dCgpXG4gICAgICAgICAgLnRoZW4obmV4dENvbnRleHQgPT4ge1xuICAgICAgICAgICAgaWYgKG5leHRDb250ZXh0ID09PSBudWxsIHx8IG5leHRDb250ZXh0ID09PSBub3RGb3VuZFJlc3VsdCkge1xuICAgICAgICAgICAgICBjb25zdCBtYXRjaGVkUGF0aCA9IGdldFBhdGhuYW1lRm9yUm91dGVyKFxuICAgICAgICAgICAgICAgIGdldE1hdGNoZWRQYXRoKGFtZW5kZWRDb250ZXh0LmNoYWluKSxcbiAgICAgICAgICAgICAgICBhbWVuZGVkQ29udGV4dC5yZXNvbHZlclxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICBpZiAobWF0Y2hlZFBhdGggIT09IGFtZW5kZWRDb250ZXh0LnBhdGhuYW1lKSB7XG4gICAgICAgICAgICAgICAgdGhyb3cgZ2V0Tm90Rm91bmRFcnJvcihpbml0aWFsQ29udGV4dCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBuZXh0Q29udGV4dCAmJiBuZXh0Q29udGV4dCAhPT0gbm90Rm91bmRSZXN1bHRcbiAgICAgICAgICAgICAgPyB0aGlzLl9fZnVsbHlSZXNvbHZlQ2hhaW4oaW5pdGlhbENvbnRleHQsIG5leHRDb250ZXh0KVxuICAgICAgICAgICAgICA6IHRoaXMuX19hbWVuZFdpdGhPbkJlZm9yZUNhbGxiYWNrcyhpbml0aWFsQ29udGV4dCk7XG4gICAgICAgICAgfSk7XG4gICAgICB9KTtcbiAgfVxuXG4gIF9fYW1lbmRXaXRoUmVzb2x1dGlvblJlc3VsdChjb250ZXh0KSB7XG4gICAgY29uc3QgcmVzdWx0ID0gY29udGV4dC5yZXN1bHQ7XG4gICAgaWYgKHJlc3VsdCBpbnN0YW5jZW9mIEhUTUxFbGVtZW50KSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKGNvbnRleHQpO1xuICAgIH0gZWxzZSBpZiAocmVzdWx0LnJlZGlyZWN0KSB7XG4gICAgICByZXR1cm4gdGhpcy5fX3JlZGlyZWN0KHJlc3VsdC5yZWRpcmVjdCwgY29udGV4dC5fX3JlZGlyZWN0Q291bnQpXG4gICAgICAgIC50aGVuKGNvbnRleHQgPT4gdGhpcy5fX2FtZW5kV2l0aFJlc29sdXRpb25SZXN1bHQoY29udGV4dCkpO1xuICAgIH0gZWxzZSBpZiAocmVzdWx0IGluc3RhbmNlb2YgRXJyb3IpIHtcbiAgICAgIHJldHVybiBQcm9taXNlLnJlamVjdChyZXN1bHQpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoXG4gICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICBsb2coXG4gICAgICAgICAgICBgSW52YWxpZCByb3V0ZSByZXNvbHV0aW9uIHJlc3VsdCBmb3IgcGF0aCBcIiR7Y29udGV4dC5wYXRobmFtZX1cIi4gYCArXG4gICAgICAgICAgICBgRXhwZWN0ZWQgcmVkaXJlY3Qgb2JqZWN0IG9yIEhUTUwgZWxlbWVudCwgYnV0IGdvdDogXCIke2xvZ1ZhbHVlKHJlc3VsdCl9XCIuIGAgK1xuICAgICAgICAgICAgYERvdWJsZSBjaGVjayB0aGUgYWN0aW9uIHJldHVybiB2YWx1ZSBmb3IgdGhlIHJvdXRlLmBcbiAgICAgICAgICApXG4gICAgICAgICkpO1xuICAgIH1cbiAgfVxuXG4gIF9fYW1lbmRXaXRoT25CZWZvcmVDYWxsYmFja3MoY29udGV4dFdpdGhGdWxsQ2hhaW4pIHtcbiAgICByZXR1cm4gdGhpcy5fX3J1bk9uQmVmb3JlQ2FsbGJhY2tzKGNvbnRleHRXaXRoRnVsbENoYWluKS50aGVuKGFtZW5kZWRDb250ZXh0ID0+IHtcbiAgICAgIGlmIChhbWVuZGVkQ29udGV4dCA9PT0gdGhpcy5fX3ByZXZpb3VzQ29udGV4dCB8fCBhbWVuZGVkQ29udGV4dCA9PT0gY29udGV4dFdpdGhGdWxsQ2hhaW4pIHtcbiAgICAgICAgcmV0dXJuIGFtZW5kZWRDb250ZXh0O1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXMuX19mdWxseVJlc29sdmVDaGFpbihhbWVuZGVkQ29udGV4dCk7XG4gICAgfSk7XG4gIH1cblxuICBfX3J1bk9uQmVmb3JlQ2FsbGJhY2tzKG5ld0NvbnRleHQpIHtcbiAgICBjb25zdCBwcmV2aW91c0NvbnRleHQgPSB0aGlzLl9fcHJldmlvdXNDb250ZXh0IHx8IHt9O1xuICAgIGNvbnN0IHByZXZpb3VzQ2hhaW4gPSBwcmV2aW91c0NvbnRleHQuY2hhaW4gfHwgW107XG4gICAgY29uc3QgbmV3Q2hhaW4gPSBuZXdDb250ZXh0LmNoYWluO1xuXG4gICAgbGV0IGNhbGxiYWNrcyA9IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIGNvbnN0IHByZXZlbnQgPSAoKSA9PiAoe2NhbmNlbDogdHJ1ZX0pO1xuICAgIGNvbnN0IHJlZGlyZWN0ID0gKHBhdGhuYW1lKSA9PiBjcmVhdGVSZWRpcmVjdChuZXdDb250ZXh0LCBwYXRobmFtZSk7XG5cbiAgICBuZXdDb250ZXh0Ll9fZGl2ZXJnZWRDaGFpbkluZGV4ID0gMDtcbiAgICBpZiAocHJldmlvdXNDaGFpbi5sZW5ndGgpIHtcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgTWF0aC5taW4ocHJldmlvdXNDaGFpbi5sZW5ndGgsIG5ld0NoYWluLmxlbmd0aCk7IGkgPSArK25ld0NvbnRleHQuX19kaXZlcmdlZENoYWluSW5kZXgpIHtcbiAgICAgICAgaWYgKHByZXZpb3VzQ2hhaW5baV0ucm91dGUgIT09IG5ld0NoYWluW2ldLnJvdXRlXG4gICAgICAgICAgfHwgcHJldmlvdXNDaGFpbltpXS5wYXRoICE9PSBuZXdDaGFpbltpXS5wYXRoXG4gICAgICAgICAgfHwgKHByZXZpb3VzQ2hhaW5baV0uZWxlbWVudCAmJiBwcmV2aW91c0NoYWluW2ldLmVsZW1lbnQubG9jYWxOYW1lKVxuICAgICAgICAgICAgIT09IChuZXdDaGFpbltpXS5lbGVtZW50ICYmIG5ld0NoYWluW2ldLmVsZW1lbnQubG9jYWxOYW1lKVxuICAgICAgICApIHtcbiAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBmb3IgKGxldCBpID0gcHJldmlvdXNDaGFpbi5sZW5ndGggLSAxOyBpID49IG5ld0NvbnRleHQuX19kaXZlcmdlZENoYWluSW5kZXg7IGktLSkge1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKG5ld0NvbnRleHQpO1xuICAgICAgICBjYWxsYmFja3MgPSBjYWxsYmFja3NcbiAgICAgICAgICAudGhlbihhbWVuZCgnb25CZWZvcmVMZWF2ZScsIFtsb2NhdGlvbiwge3ByZXZlbnR9LCB0aGlzXSwgcHJldmlvdXNDaGFpbltpXS5lbGVtZW50KSlcbiAgICAgICAgICAudGhlbihyZXN1bHQgPT4ge1xuICAgICAgICAgICAgaWYgKCEocmVzdWx0IHx8IHt9KS5yZWRpcmVjdCkge1xuICAgICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZvciAobGV0IGkgPSBuZXdDb250ZXh0Ll9fZGl2ZXJnZWRDaGFpbkluZGV4OyBpIDwgbmV3Q2hhaW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24obmV3Q29udGV4dCwgbmV3Q2hhaW5baV0ucm91dGUpO1xuICAgICAgY2FsbGJhY2tzID0gY2FsbGJhY2tzLnRoZW4oYW1lbmQoJ29uQmVmb3JlRW50ZXInLCBbbG9jYXRpb24sIHtwcmV2ZW50LCByZWRpcmVjdH0sIHRoaXNdLCBuZXdDaGFpbltpXS5lbGVtZW50KSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGNhbGxiYWNrcy50aGVuKGFtZW5kbWVudFJlc3VsdCA9PiB7XG4gICAgICBpZiAoYW1lbmRtZW50UmVzdWx0KSB7XG4gICAgICAgIGlmIChhbWVuZG1lbnRSZXN1bHQuY2FuY2VsKSB7XG4gICAgICAgICAgcmV0dXJuIHRoaXMuX19wcmV2aW91c0NvbnRleHQ7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGFtZW5kbWVudFJlc3VsdC5yZWRpcmVjdCkge1xuICAgICAgICAgIHJldHVybiB0aGlzLl9fcmVkaXJlY3QoYW1lbmRtZW50UmVzdWx0LnJlZGlyZWN0LCBuZXdDb250ZXh0Ll9fcmVkaXJlY3RDb3VudCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiBuZXdDb250ZXh0O1xuICAgIH0pO1xuICB9XG5cbiAgX19yZWRpcmVjdChyZWRpcmVjdERhdGEsIGNvdW50ZXIpIHtcbiAgICBpZiAoY291bnRlciA+IE1BWF9SRURJUkVDVF9DT1VOVCkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKGxvZyhgVG9vIG1hbnkgcmVkaXJlY3RzIHdoZW4gcmVuZGVyaW5nICR7cmVkaXJlY3REYXRhLmZyb219YCkpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnJlc29sdmUoe1xuICAgICAgcGF0aG5hbWU6IHRoaXMudXJsRm9yUGF0aChcbiAgICAgICAgcmVkaXJlY3REYXRhLnBhdGhuYW1lLFxuICAgICAgICByZWRpcmVjdERhdGEucGFyYW1zXG4gICAgICApLFxuICAgICAgcmVkaXJlY3RGcm9tOiByZWRpcmVjdERhdGEuZnJvbSxcbiAgICAgIF9fcmVkaXJlY3RDb3VudDogKGNvdW50ZXIgfHwgMCkgKyAxXG4gICAgfSk7XG4gIH1cblxuICBfX2Vuc3VyZU91dGxldChvdXRsZXQgPSB0aGlzLl9fb3V0bGV0KSB7XG4gICAgaWYgKCEob3V0bGV0IGluc3RhbmNlb2YgTm9kZSkpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IobG9nKGBFeHBlY3RlZCByb3V0ZXIgb3V0bGV0IHRvIGJlIGEgdmFsaWQgRE9NIE5vZGUgKGJ1dCBnb3QgJHtvdXRsZXR9KWApKTtcbiAgICB9XG4gIH1cblxuICBfX3VwZGF0ZUJyb3dzZXJIaXN0b3J5KHBhdGhuYW1lLCByZXBsYWNlKSB7XG4gICAgaWYgKHdpbmRvdy5sb2NhdGlvbi5wYXRobmFtZSAhPT0gcGF0aG5hbWUpIHtcbiAgICAgIGNvbnN0IGNoYW5nZVN0YXRlID0gcmVwbGFjZSA/ICdyZXBsYWNlU3RhdGUnIDogJ3B1c2hTdGF0ZSc7XG4gICAgICB3aW5kb3cuaGlzdG9yeVtjaGFuZ2VTdGF0ZV0obnVsbCwgZG9jdW1lbnQudGl0bGUsIHBhdGhuYW1lKTtcbiAgICAgIHdpbmRvdy5kaXNwYXRjaEV2ZW50KG5ldyBQb3BTdGF0ZUV2ZW50KCdwb3BzdGF0ZScsIHtzdGF0ZTogJ3ZhYWRpbi1yb3V0ZXItaWdub3JlJ30pKTtcbiAgICB9XG4gIH1cblxuICBfX2FkZEFwcGVhcmluZ0NvbnRlbnQoY29udGV4dCwgcHJldmlvdXNDb250ZXh0KSB7XG4gICAgdGhpcy5fX2Vuc3VyZU91dGxldCgpO1xuXG4gICAgLy8gSWYgdGhlIHByZXZpb3VzICdlbnRlcmluZycgYW5pbWF0aW9uIGhhcyBub3QgY29tcGxldGVkIHlldCxcbiAgICAvLyBzdG9wIGl0IGFuZCByZW1vdmUgdGhhdCBjb250ZW50IGZyb20gdGhlIERPTSBiZWZvcmUgYWRkaW5nIG5ldyBvbmUuXG4gICAgdGhpcy5fX3JlbW92ZUFwcGVhcmluZ0NvbnRlbnQoKTtcblxuICAgIC8vIEZpbmQgdGhlIGRlZXBlc3QgY29tbW9uIHBhcmVudCBiZXR3ZWVuIHRoZSBsYXN0IGFuZCB0aGUgbmV3IGNvbXBvbmVudFxuICAgIC8vIGNoYWlucy4gVXBkYXRlIHJlZmVyZW5jZXMgZm9yIHRoZSB1bmNoYW5nZWQgZWxlbWVudHMgaW4gdGhlIG5ldyBjaGFpblxuICAgIGxldCBkZWVwZXN0Q29tbW9uUGFyZW50ID0gdGhpcy5fX291dGxldDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGNvbnRleHQuX19kaXZlcmdlZENoYWluSW5kZXg7IGkrKykge1xuICAgICAgY29uc3QgdW5jaGFuZ2VkRWxlbWVudCA9IHByZXZpb3VzQ29udGV4dCAmJiBwcmV2aW91c0NvbnRleHQuY2hhaW5baV0uZWxlbWVudDtcbiAgICAgIGlmICh1bmNoYW5nZWRFbGVtZW50KSB7XG4gICAgICAgIGlmICh1bmNoYW5nZWRFbGVtZW50LnBhcmVudE5vZGUgPT09IGRlZXBlc3RDb21tb25QYXJlbnQpIHtcbiAgICAgICAgICBjb250ZXh0LmNoYWluW2ldLmVsZW1lbnQgPSB1bmNoYW5nZWRFbGVtZW50O1xuICAgICAgICAgIGRlZXBlc3RDb21tb25QYXJlbnQgPSB1bmNoYW5nZWRFbGVtZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gS2VlcCB0d28gbGlzdHMgb2YgRE9NIGVsZW1lbnRzOlxuICAgIC8vICAtIHRob3NlIHRoYXQgc2hvdWxkIGJlIHJlbW92ZWQgb25jZSB0aGUgdHJhbnNpdGlvbiBhbmltYXRpb24gaXMgb3ZlclxuICAgIC8vICAtIGFuZCB0aG9zZSB0aGF0IHNob3VsZCByZW1haW5cbiAgICB0aGlzLl9fZGlzYXBwZWFyaW5nQ29udGVudCA9IEFycmF5LmZyb20oZGVlcGVzdENvbW1vblBhcmVudC5jaGlsZHJlbik7XG4gICAgdGhpcy5fX2FwcGVhcmluZ0NvbnRlbnQgPSBbXTtcblxuICAgIC8vIEFkZCBuZXcgZWxlbWVudHMgKHN0YXJ0aW5nIGFmdGVyIHRoZSBkZWVwZXN0IGNvbW1vbiBwYXJlbnQpIHRvIHRoZSBET00uXG4gICAgLy8gVGhhdCB3YXkgb25seSB0aGUgY29tcG9uZW50cyB0aGF0IGFyZSBhY3R1YWxseSBkaWZmZXJlbnQgYmV0d2VlbiB0aGUgdHdvXG4gICAgLy8gbG9jYXRpb25zIGFyZSBhZGRlZCB0byB0aGUgRE9NIChhbmQgdGhvc2UgdGhhdCBhcmUgY29tbW9uIHJlbWFpbiBpbiB0aGVcbiAgICAvLyBET00gd2l0aG91dCBmaXJzdCByZW1vdmluZyBhbmQgdGhlbiBhZGRpbmcgdGhlbSBhZ2FpbikuXG4gICAgbGV0IHBhcmVudEVsZW1lbnQgPSBkZWVwZXN0Q29tbW9uUGFyZW50O1xuICAgIGZvciAobGV0IGkgPSBjb250ZXh0Ll9fZGl2ZXJnZWRDaGFpbkluZGV4OyBpIDwgY29udGV4dC5jaGFpbi5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgZWxlbWVudFRvQWRkID0gY29udGV4dC5jaGFpbltpXS5lbGVtZW50O1xuICAgICAgaWYgKGVsZW1lbnRUb0FkZCkge1xuICAgICAgICBwYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGVsZW1lbnRUb0FkZCk7XG4gICAgICAgIGlmIChwYXJlbnRFbGVtZW50ID09PSBkZWVwZXN0Q29tbW9uUGFyZW50KSB7XG4gICAgICAgICAgdGhpcy5fX2FwcGVhcmluZ0NvbnRlbnQucHVzaChlbGVtZW50VG9BZGQpO1xuICAgICAgICB9XG4gICAgICAgIHBhcmVudEVsZW1lbnQgPSBlbGVtZW50VG9BZGQ7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgX19yZW1vdmVEaXNhcHBlYXJpbmdDb250ZW50KCkge1xuICAgIGlmICh0aGlzLl9fZGlzYXBwZWFyaW5nQ29udGVudCkge1xuICAgICAgcmVtb3ZlRG9tTm9kZXModGhpcy5fX2Rpc2FwcGVhcmluZ0NvbnRlbnQpO1xuICAgIH1cbiAgICB0aGlzLl9fZGlzYXBwZWFyaW5nQ29udGVudCA9IG51bGw7XG4gICAgdGhpcy5fX2FwcGVhcmluZ0NvbnRlbnQgPSBudWxsO1xuICB9XG5cbiAgX19yZW1vdmVBcHBlYXJpbmdDb250ZW50KCkge1xuICAgIGlmICh0aGlzLl9fZGlzYXBwZWFyaW5nQ29udGVudCAmJiB0aGlzLl9fYXBwZWFyaW5nQ29udGVudCkge1xuICAgICAgcmVtb3ZlRG9tTm9kZXModGhpcy5fX2FwcGVhcmluZ0NvbnRlbnQpO1xuICAgICAgdGhpcy5fX2Rpc2FwcGVhcmluZ0NvbnRlbnQgPSBudWxsO1xuICAgICAgdGhpcy5fX2FwcGVhcmluZ0NvbnRlbnQgPSBudWxsO1xuICAgIH1cbiAgfVxuXG4gIF9fcnVuT25BZnRlckxlYXZlQ2FsbGJhY2tzKGN1cnJlbnRDb250ZXh0LCB0YXJnZXRDb250ZXh0KSB7XG4gICAgaWYgKCF0YXJnZXRDb250ZXh0KSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgLy8gUkVWRVJTRSBpdGVyYXRpb246IGZyb20gWiB0byBBXG4gICAgZm9yIChsZXQgaSA9IHRhcmdldENvbnRleHQuY2hhaW4ubGVuZ3RoIC0gMTsgaSA+PSBjdXJyZW50Q29udGV4dC5fX2RpdmVyZ2VkQ2hhaW5JbmRleDsgaS0tKSB7XG4gICAgICBjb25zdCBjdXJyZW50Q29tcG9uZW50ID0gdGFyZ2V0Q29udGV4dC5jaGFpbltpXS5lbGVtZW50O1xuICAgICAgaWYgKCFjdXJyZW50Q29tcG9uZW50KSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihjdXJyZW50Q29udGV4dCk7XG4gICAgICAgIHJ1bkNhbGxiYWNrSWZQb3NzaWJsZShcbiAgICAgICAgICBjdXJyZW50Q29tcG9uZW50Lm9uQWZ0ZXJMZWF2ZSxcbiAgICAgICAgICBbbG9jYXRpb24sIHt9LCB0YXJnZXRDb250ZXh0LnJlc29sdmVyXSxcbiAgICAgICAgICBjdXJyZW50Q29tcG9uZW50KTtcbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIHJlbW92ZURvbU5vZGVzKGN1cnJlbnRDb21wb25lbnQuY2hpbGRyZW4pO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIF9fcnVuT25BZnRlckVudGVyQ2FsbGJhY2tzKGN1cnJlbnRDb250ZXh0KSB7XG4gICAgLy8gZm9yd2FyZCBpdGVyYXRpb246IGZyb20gQSB0byBaXG4gICAgZm9yIChsZXQgaSA9IGN1cnJlbnRDb250ZXh0Ll9fZGl2ZXJnZWRDaGFpbkluZGV4OyBpIDwgY3VycmVudENvbnRleHQuY2hhaW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvbnN0IGN1cnJlbnRDb21wb25lbnQgPSBjdXJyZW50Q29udGV4dC5jaGFpbltpXS5lbGVtZW50IHx8IHt9O1xuICAgICAgY29uc3QgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihjdXJyZW50Q29udGV4dCwgY3VycmVudENvbnRleHQuY2hhaW5baV0ucm91dGUpO1xuICAgICAgcnVuQ2FsbGJhY2tJZlBvc3NpYmxlKFxuICAgICAgICBjdXJyZW50Q29tcG9uZW50Lm9uQWZ0ZXJFbnRlcixcbiAgICAgICAgW2xvY2F0aW9uLCB7fSwgY3VycmVudENvbnRleHQucmVzb2x2ZXJdLFxuICAgICAgICBjdXJyZW50Q29tcG9uZW50KTtcbiAgICB9XG4gIH1cblxuICBfX2FuaW1hdGVJZk5lZWRlZChjb250ZXh0KSB7XG4gICAgY29uc3QgZnJvbSA9ICh0aGlzLl9fZGlzYXBwZWFyaW5nQ29udGVudCB8fCBbXSlbMF07XG4gICAgY29uc3QgdG8gPSAodGhpcy5fX2FwcGVhcmluZ0NvbnRlbnQgfHwgW10pWzBdO1xuICAgIGNvbnN0IHByb21pc2VzID0gW107XG5cbiAgICBjb25zdCBjaGFpbiA9IGNvbnRleHQuY2hhaW47XG4gICAgbGV0IGNvbmZpZztcbiAgICBmb3IgKGxldCBpID0gY2hhaW4ubGVuZ3RoOyBpID4gMDsgaS0tKSB7XG4gICAgICBpZiAoY2hhaW5baSAtIDFdLnJvdXRlLmFuaW1hdGUpIHtcbiAgICAgICAgY29uZmlnID0gY2hhaW5baSAtIDFdLnJvdXRlLmFuaW1hdGU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChmcm9tICYmIHRvICYmIGNvbmZpZykge1xuICAgICAgY29uc3QgbGVhdmUgPSBpc09iamVjdChjb25maWcpICYmIGNvbmZpZy5sZWF2ZSB8fCAnbGVhdmluZyc7XG4gICAgICBjb25zdCBlbnRlciA9IGlzT2JqZWN0KGNvbmZpZykgJiYgY29uZmlnLmVudGVyIHx8ICdlbnRlcmluZyc7XG4gICAgICBwcm9taXNlcy5wdXNoKGFuaW1hdGUoZnJvbSwgbGVhdmUpKTtcbiAgICAgIHByb21pc2VzLnB1c2goYW5pbWF0ZSh0bywgZW50ZXIpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5hbGwocHJvbWlzZXMpLnRoZW4oKCkgPT4gY29udGV4dCk7XG4gIH1cblxuICAvKipcbiAgICogU3Vic2NyaWJlcyB0aGlzIGluc3RhbmNlIHRvIG5hdmlnYXRpb24gZXZlbnRzIG9uIHRoZSBgd2luZG93YC5cbiAgICpcbiAgICogTk9URTogYmV3YXJlIG9mIHJlc291cmNlIGxlYWtzLiBGb3IgYXMgbG9uZyBhcyBhIHJvdXRlciBpbnN0YW5jZSBpc1xuICAgKiBzdWJzY3JpYmVkIHRvIG5hdmlnYXRpb24gZXZlbnRzLCBpdCB3b24ndCBiZSBnYXJiYWdlIGNvbGxlY3RlZC5cbiAgICovXG4gIHN1YnNjcmliZSgpIHtcbiAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndmFhZGluLXJvdXRlci1nbycsIHRoaXMuX19uYXZpZ2F0aW9uRXZlbnRIYW5kbGVyKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBSZW1vdmVzIHRoZSBzdWJzY3JpcHRpb24gdG8gbmF2aWdhdGlvbiBldmVudHMgY3JlYXRlZCBpbiB0aGUgYHN1YnNjcmliZSgpYFxuICAgKiBtZXRob2QuXG4gICAqL1xuICB1bnN1YnNjcmliZSgpIHtcbiAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigndmFhZGluLXJvdXRlci1nbycsIHRoaXMuX19uYXZpZ2F0aW9uRXZlbnRIYW5kbGVyKTtcbiAgfVxuXG4gIF9fb25OYXZpZ2F0aW9uRXZlbnQoZXZlbnQpIHtcbiAgICBjb25zdCBwYXRobmFtZSA9IGV2ZW50ID8gZXZlbnQuZGV0YWlsLnBhdGhuYW1lIDogd2luZG93LmxvY2F0aW9uLnBhdGhuYW1lO1xuICAgIGlmIChpc1N0cmluZyh0aGlzLl9fbm9ybWFsaXplUGF0aG5hbWUocGF0aG5hbWUpKSkge1xuICAgICAgaWYgKGV2ZW50ICYmIGV2ZW50LnByZXZlbnREZWZhdWx0KSB7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG4gICAgICB0aGlzLnJlbmRlcihwYXRobmFtZSwgdHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENvbmZpZ3VyZXMgd2hhdCB0cmlnZ2VycyBWYWFkaW4uUm91dGVyIG5hdmlnYXRpb24gZXZlbnRzOlxuICAgKiAgLSBgUE9QU1RBVEVgOiBwb3BzdGF0ZSBldmVudHMgb24gdGhlIGN1cnJlbnQgYHdpbmRvd2BcbiAgICogIC0gYENMSUNLYDogY2xpY2sgZXZlbnRzIG9uIGA8YT5gIGxpbmtzIGxlYWRpbmcgdG8gdGhlIGN1cnJlbnQgcGFnZVxuICAgKlxuICAgKiBUaGlzIG1ldGhvZCBpcyBpbnZva2VkIHdpdGggdGhlIHByZS1jb25maWd1cmVkIHZhbHVlcyB3aGVuIGNyZWF0aW5nIGEgbmV3IFJvdXRlciBpbnN0YW5jZS5cbiAgICogQnkgZGVmYXVsdCwgYm90aCBgUE9QU1RBVEVgIGFuZCBgQ0xJQ0tgIGFyZSBlbmFibGVkLiBUaGlzIHNldHVwIGlzIGV4cGVjdGVkIHRvIGNvdmVyIG1vc3Qgb2YgdGhlIHVzZSBjYXNlcy5cbiAgICpcbiAgICogU2VlIHRoZSBgcm91dGVyLWNvbmZpZy5qc2AgZm9yIHRoZSBkZWZhdWx0IG5hdmlnYXRpb24gdHJpZ2dlcnMgY29uZmlnLiBCYXNlZCBvbiBpdCwgeW91IGNhblxuICAgKiBjcmVhdGUgdGhlIG93biBvbmUgYW5kIG9ubHkgaW1wb3J0IHRoZSB0cmlnZ2VycyB5b3UgbmVlZCwgaW5zdGVhZCBvZiBwdWxsaW5nIGluIGFsbCB0aGUgY29kZSxcbiAgICogZS5nLiBpZiB5b3Ugd2FudCB0byBoYW5kbGUgYGNsaWNrYCBkaWZmZXJlbnRseS5cbiAgICpcbiAgICogU2VlIGFsc28gKipOYXZpZ2F0aW9uIFRyaWdnZXJzKiogc2VjdGlvbiBpbiBbTGl2ZSBFeGFtcGxlc10oIy9jbGFzc2VzL1ZhYWRpbi5Sb3V0ZXIvZGVtb3MvZGVtby9pbmRleC5odG1sKS5cbiAgICpcbiAgICogQHBhcmFtIHsuLi5OYXZpZ2F0aW9uVHJpZ2dlcn0gdHJpZ2dlcnNcbiAgICovXG4gIHN0YXRpYyBzZXRUcmlnZ2VycyguLi50cmlnZ2Vycykge1xuICAgIHNldE5hdmlnYXRpb25UcmlnZ2Vycyh0cmlnZ2Vycyk7XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIGEgVVJMIGZvciB0aGUgcm91dGUgd2l0aCB0aGUgZ2l2ZW4gbmFtZSwgb3B0aW9uYWxseSBwZXJmb3JtaW5nXG4gICAqIHN1YnN0aXR1dGlvbiBvZiBwYXJhbWV0ZXJzLlxuICAgKlxuICAgKiBUaGUgcm91dGUgaXMgc2VhcmNoZWQgaW4gYWxsIHRoZSBWYWFkaW4uUm91dGVyIGluc3RhbmNlcyBzdWJzY3JpYmVkIHRvXG4gICAqIG5hdmlnYXRpb24gZXZlbnRzLlxuICAgKlxuICAgKiAqKk5vdGU6KiogRm9yIGNoaWxkIHJvdXRlIG5hbWVzLCBvbmx5IGFycmF5IGNoaWxkcmVuIGFyZSBjb25zaWRlcmVkLlxuICAgKiBJdCBpcyBub3QgcG9zc2libGUgdG8gZ2VuZXJhdGUgVVJMcyB1c2luZyBhIG5hbWUgZm9yIHJvdXRlcyBzZXQgd2l0aFxuICAgKiBhIGNoaWxkcmVuIGZ1bmN0aW9uLlxuICAgKlxuICAgKiBAZnVuY3Rpb24gdXJsRm9yTmFtZVxuICAgKiBAcGFyYW0geyFzdHJpbmd9IG5hbWUgdGhlIHJvdXRlIG5hbWUgb3IgdGhlIHJvdXRl4oCZcyBgY29tcG9uZW50YCBuYW1lLlxuICAgKiBAcGFyYW0gez9PYmplY3R9IHBhcmFtcyBPcHRpb25hbCBvYmplY3Qgd2l0aCByb3V0ZSBwYXRoIHBhcmFtZXRlcnMuXG4gICAqIE5hbWVkIHBhcmFtZXRlcnMgYXJlIHBhc3NlZCBieSBuYW1lIChgcGFyYW1zW25hbWVdID0gdmFsdWVgKSwgdW5uYW1lZFxuICAgKiBwYXJhbWV0ZXJzIGFyZSBwYXNzZWQgYnkgaW5kZXggKGBwYXJhbXNbaW5kZXhdID0gdmFsdWVgKS5cbiAgICpcbiAgICogQHJldHVybiB7c3RyaW5nfVxuICAgKi9cbiAgdXJsRm9yTmFtZShuYW1lLCBwYXJhbXMpIHtcbiAgICBpZiAoIXRoaXMuX191cmxGb3JOYW1lKSB7XG4gICAgICB0aGlzLl9fdXJsRm9yTmFtZSA9IGdlbmVyYXRlVXJscyh0aGlzKTtcbiAgICB9XG4gICAgcmV0dXJuIGdldFBhdGhuYW1lRm9yUm91dGVyKFxuICAgICAgdGhpcy5fX3VybEZvck5hbWUobmFtZSwgcGFyYW1zKSxcbiAgICAgIHRoaXNcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIEdlbmVyYXRlcyBhIFVSTCBmb3IgdGhlIGdpdmVuIHJvdXRlIHBhdGgsIG9wdGlvbmFsbHkgcGVyZm9ybWluZ1xuICAgKiBzdWJzdGl0dXRpb24gb2YgcGFyYW1ldGVycy5cbiAgICpcbiAgICogQHBhcmFtIHshc3RyaW5nfSBwYXRoIHN0cmluZyByb3V0ZSBwYXRoIGRlY2xhcmVkIGluIFtleHByZXNzLmpzIHN5bnRheF0oaHR0cHM6Ly9leHByZXNzanMuY29tL2VuL2d1aWRlL3JvdXRpbmcuaHRtbCNyb3V0ZS1wYXRoc1wiKS5cbiAgICogQHBhcmFtIHs/T2JqZWN0fSBwYXJhbXMgT3B0aW9uYWwgb2JqZWN0IHdpdGggcm91dGUgcGF0aCBwYXJhbWV0ZXJzLlxuICAgKiBOYW1lZCBwYXJhbWV0ZXJzIGFyZSBwYXNzZWQgYnkgbmFtZSAoYHBhcmFtc1tuYW1lXSA9IHZhbHVlYCksIHVubmFtZWRcbiAgICogcGFyYW1ldGVycyBhcmUgcGFzc2VkIGJ5IGluZGV4IChgcGFyYW1zW2luZGV4XSA9IHZhbHVlYCkuXG4gICAqXG4gICAqIEByZXR1cm4ge3N0cmluZ31cbiAgICovXG4gIHVybEZvclBhdGgocGF0aCwgcGFyYW1zKSB7XG4gICAgcmV0dXJuIGdldFBhdGhuYW1lRm9yUm91dGVyKFxuICAgICAgUm91dGVyLnBhdGhUb1JlZ2V4cC5jb21waWxlKHBhdGgpKHBhcmFtcyksXG4gICAgICB0aGlzXG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmlnZ2VycyBuYXZpZ2F0aW9uIHRvIGEgbmV3IHBhdGguIFJldHVybnMgYSBib29sZWFuIHdpdGhvdXQgd2FpdGluZyB1bnRpbFxuICAgKiB0aGUgbmF2aWdhdGlvbiBpcyBjb21wbGV0ZS4gUmV0dXJucyBgdHJ1ZWAgaWYgYXQgbGVhc3Qgb25lIGBWYWFkaW4uUm91dGVyYFxuICAgKiBoYXMgaGFuZGxlZCB0aGUgbmF2aWdhdGlvbiAod2FzIHN1YnNjcmliZWQgYW5kIGhhZCBgYmFzZVVybGAgbWF0Y2hpbmdcbiAgICogdGhlIGBwYXRobmFtZWAgYXJndW1lbnQpLCBvdGhlcndpc2UgcmV0dXJucyBgZmFsc2VgLlxuICAgKlxuICAgKiBAcGFyYW0geyFzdHJpbmd9IHBhdGhuYW1lIGEgbmV3IGluLWFwcCBwYXRoXG4gICAqIEByZXR1cm4ge2Jvb2xlYW59XG4gICAqL1xuICBzdGF0aWMgZ28ocGF0aG5hbWUpIHtcbiAgICByZXR1cm4gZmlyZVJvdXRlckV2ZW50KCdnbycsIHtwYXRobmFtZX0pO1xuICB9XG59XG4iLCJjb25zdCBERVZfTU9ERV9DT0RFX1JFR0VYUCA9XG4gIC9cXC9cXCpcXCpcXHMrdmFhZGluLWRldi1tb2RlOnN0YXJ0KFtcXHNcXFNdKil2YWFkaW4tZGV2LW1vZGU6ZW5kXFxzK1xcKlxcKlxcLy9pO1xuXG5mdW5jdGlvbiBpc01pbmlmaWVkKCkge1xuICBmdW5jdGlvbiB0ZXN0KCkge1xuICAgIC8qKiB2YWFkaW4tZGV2LW1vZGU6c3RhcnRcbiAgICByZXR1cm4gZmFsc2U7XG4gICAgdmFhZGluLWRldi1tb2RlOmVuZCAqKi9cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gdW5jb21tZW50QW5kUnVuKHRlc3QpO1xufVxuXG5mdW5jdGlvbiBpc0RldmVsb3BtZW50TW9kZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gaXNGb3JjZWREZXZlbG9wbWVudE1vZGUoKSB8fCAoaXNMb2NhbGhvc3QoKSAmJiAhaXNNaW5pZmllZCgpICYmICFpc0Zsb3dQcm9kdWN0aW9uTW9kZSgpKTtcbiAgfSBjYXRjaCAoZSkge1xuICAgIC8vIFNvbWUgZXJyb3IgaW4gdGhpcyBjb2RlLCBhc3N1bWUgcHJvZHVjdGlvbiBzbyBubyBmdXJ0aGVyIGFjdGlvbnMgd2lsbCBiZSB0YWtlblxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxufVxuXG5mdW5jdGlvbiBpc0ZvcmNlZERldmVsb3BtZW50TW9kZSgpIHtcbiAgcmV0dXJuIGxvY2FsU3RvcmFnZS5nZXRJdGVtKFwidmFhZGluLmRldmVsb3BtZW50bW9kZS5mb3JjZVwiKTtcbn1cblxuZnVuY3Rpb24gaXNMb2NhbGhvc3QoKSB7XG4gIHJldHVybiAoW1wibG9jYWxob3N0XCIsXCIxMjcuMC4wLjFcIl0uaW5kZXhPZih3aW5kb3cubG9jYXRpb24uaG9zdG5hbWUpID49IDApO1xufVxuXG5mdW5jdGlvbiBpc0Zsb3dQcm9kdWN0aW9uTW9kZSgpIHtcbiAgaWYgKHdpbmRvdy5WYWFkaW4gJiYgd2luZG93LlZhYWRpbi5GbG93ICYmIHdpbmRvdy5WYWFkaW4uRmxvdy5jbGllbnRzKSB7XG4gICAgY29uc3QgcHJvZHVjdGlvbk1vZGVBcHBzID0gT2JqZWN0LmtleXMod2luZG93LlZhYWRpbi5GbG93LmNsaWVudHMpXG4gICAgLm1hcChrZXkgPT4gd2luZG93LlZhYWRpbi5GbG93LmNsaWVudHNba2V5XSlcbiAgICAuZmlsdGVyKGNsaWVudCA9PiBjbGllbnQucHJvZHVjdGlvbk1vZGUpO1xuICAgIGlmIChwcm9kdWN0aW9uTW9kZUFwcHMubGVuZ3RoID4gMCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9XG4gIHJldHVybiBmYWxzZTtcbn1cblxuZnVuY3Rpb24gdW5jb21tZW50QW5kUnVuKGNhbGxiYWNrLCBhcmdzKSB7XG4gIGlmICh0eXBlb2YgY2FsbGJhY2sgIT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBjb25zdCBtYXRjaCA9IERFVl9NT0RFX0NPREVfUkVHRVhQLmV4ZWMoY2FsbGJhY2sudG9TdHJpbmcoKSk7XG4gIGlmIChtYXRjaCkge1xuICAgIHRyeSB7XG4gICAgICAvLyByZXF1aXJlcyBDU1A6IHNjcmlwdC1zcmMgJ3Vuc2FmZS1ldmFsJ1xuICAgICAgY2FsbGJhY2sgPSBuZXcgRnVuY3Rpb24obWF0Y2hbMV0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIC8vIGVhdCB0aGUgZXhjZXB0aW9uXG4gICAgICBjb25zb2xlLmxvZygndmFhZGluLWRldmVsb3BtZW50LW1vZGUtZGV0ZWN0b3I6IHVuY29tbWVudEFuZFJ1bigpIGZhaWxlZCcsIGUpXG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGNhbGxiYWNrKGFyZ3MpO1xufVxuXG4vLyBBIGd1YXJkIGFnYWluc3QgcG9seW1lci1tb2R1bGl6ZXIgcmVtb3ZpbmcgdGhlIHdpbmRvdy5WYWFkaW5cbi8vIGluaXRpYWxpemF0aW9uIGFib3ZlLlxud2luZG93WydWYWFkaW4nXSA9IHdpbmRvd1snVmFhZGluJ10gfHwge307XG5cbi8qKlxuICogSW5zcGVjdHMgdGhlIHNvdXJjZSBjb2RlIG9mIHRoZSBnaXZlbiBgY2FsbGJhY2tgIGZ1bmN0aW9uIGZvclxuICogc3BlY2lhbGx5LW1hcmtlZCBfY29tbWVudGVkXyBjb2RlLiBJZiBzdWNoIGNvbW1lbnRlZCBjb2RlIGlzIGZvdW5kIGluIHRoZVxuICogY2FsbGJhY2sgc291cmNlLCB1bmNvbW1lbnRzIGFuZCBydW5zIHRoYXQgY29kZSBpbnN0ZWFkIG9mIHRoZSBjYWxsYmFja1xuICogaXRzZWxmLiBPdGhlcndpc2UgcnVucyB0aGUgY2FsbGJhY2sgYXMgaXMuXG4gKlxuICogVGhlIG9wdGlvbmFsIGFyZ3VtZW50cyBhcmUgcGFzc2VkIGludG8gdGhlIGNhbGxiYWNrIC8gdW5jb21tZW50ZWQgY29kZSxcbiAqIHRoZSByZXN1bHQgaXMgcmV0dXJuZWQuXG4gKlxuICogU2VlIHRoZSBgaXNNaW5pZmllZCgpYCBmdW5jdGlvbiBzb3VyY2UgY29kZSBpbiB0aGlzIGZpbGUgZm9yIGFuIGV4YW1wbGUuXG4gKlxuICovXG5leHBvcnQgY29uc3QgcnVuSWZEZXZlbG9wbWVudE1vZGUgPSBmdW5jdGlvbihjYWxsYmFjaywgYXJncykge1xuICBpZiAod2luZG93LlZhYWRpbi5kZXZlbG9wbWVudE1vZGUpIHtcbiAgICByZXR1cm4gdW5jb21tZW50QW5kUnVuKGNhbGxiYWNrLCBhcmdzKTtcbiAgfVxufTtcblxuaWYgKHdpbmRvdy5WYWFkaW4uZGV2ZWxvcG1lbnRNb2RlID09PSB1bmRlZmluZWQpIHtcbiAgd2luZG93LlZhYWRpbi5kZXZlbG9wbWVudE1vZGUgPSBpc0RldmVsb3BtZW50TW9kZSgpO1xufVxuIiwiLyogVGhpcyBmaWxlIGlzIGF1dG9nZW5lcmF0ZWQgZnJvbSBzcmMvdmFhZGluLXVzYWdlLXN0YXRpc3RpY3MudHBsLmh0bWwgKi9cbi8qXG5cblRoaXMgc2NyaXB0IGdhdGhlcnMgdXNhZ2Ugc3RhdGlzdGljcyBmcm9tIHRoZSBhcHBsaWNhdGlvbiBydW5uaW5nIGluIGRldmVsb3BtZW50IG1vZGUuXG5cblN0YXRpc3RpY3MgZ2F0aGVyaW5nIGlzIGF1dG9tYXRpY2FsbHkgZGlzYWJsZWQgYW5kIGV4Y2x1ZGVkIGZyb20gcHJvZHVjdGlvbiBidWlsZHMuXG5cbkZvciBkZXRhaWxzIGFuZCB0byBvcHQtb3V0LCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3ZhYWRpbi92YWFkaW4tdXNhZ2Utc3RhdGlzdGljcy5cblxuKi9cbmltcG9ydCB7IHJ1bklmRGV2ZWxvcG1lbnRNb2RlIH0gZnJvbSAnQHZhYWRpbi92YWFkaW4tZGV2ZWxvcG1lbnQtbW9kZS1kZXRlY3Rvci92YWFkaW4tZGV2ZWxvcG1lbnQtbW9kZS1kZXRlY3Rvci5qcyc7XG5cbmZ1bmN0aW9uIG1heWJlR2F0aGVyQW5kU2VuZFN0YXRzKCkge1xuICAvKiogdmFhZGluLWRldi1tb2RlOnN0YXJ0XG4gIChmdW5jdGlvbiAoKSB7XG4ndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7XG4gIHJldHVybiB0eXBlb2Ygb2JqO1xufSA6IGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb2JqLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgb2JqICE9PSBTeW1ib2wucHJvdG90eXBlID8gXCJzeW1ib2xcIiA6IHR5cGVvZiBvYmo7XG59O1xuXG52YXIgY2xhc3NDYWxsQ2hlY2sgPSBmdW5jdGlvbiAoaW5zdGFuY2UsIENvbnN0cnVjdG9yKSB7XG4gIGlmICghKGluc3RhbmNlIGluc3RhbmNlb2YgQ29uc3RydWN0b3IpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCBjYWxsIGEgY2xhc3MgYXMgYSBmdW5jdGlvblwiKTtcbiAgfVxufTtcblxudmFyIGNyZWF0ZUNsYXNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBkZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgZGVzY3JpcHRvciA9IHByb3BzW2ldO1xuICAgICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgICAgaWYgKFwidmFsdWVcIiBpbiBkZXNjcmlwdG9yKSBkZXNjcmlwdG9yLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gKENvbnN0cnVjdG9yLCBwcm90b1Byb3BzLCBzdGF0aWNQcm9wcykge1xuICAgIGlmIChwcm90b1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gICAgaWYgKHN0YXRpY1Byb3BzKSBkZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gICAgcmV0dXJuIENvbnN0cnVjdG9yO1xuICB9O1xufSgpO1xuXG52YXIgZ2V0UG9seW1lclZlcnNpb24gPSBmdW5jdGlvbiBnZXRQb2x5bWVyVmVyc2lvbigpIHtcbiAgcmV0dXJuIHdpbmRvdy5Qb2x5bWVyICYmIHdpbmRvdy5Qb2x5bWVyLnZlcnNpb247XG59O1xuXG52YXIgU3RhdGlzdGljc0dhdGhlcmVyID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBTdGF0aXN0aWNzR2F0aGVyZXIobG9nZ2VyKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgU3RhdGlzdGljc0dhdGhlcmVyKTtcblxuICAgIHRoaXMubm93ID0gbmV3IERhdGUoKS5nZXRUaW1lKCk7XG4gICAgdGhpcy5sb2dnZXIgPSBsb2dnZXI7XG4gIH1cblxuICBjcmVhdGVDbGFzcyhTdGF0aXN0aWNzR2F0aGVyZXIsIFt7XG4gICAga2V5OiAnZnJhbWV3b3JrVmVyc2lvbkRldGVjdG9ycycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGZyYW1ld29ya1ZlcnNpb25EZXRlY3RvcnMoKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICAnRmxvdyc6IGZ1bmN0aW9uIEZsb3coKSB7XG4gICAgICAgICAgaWYgKHdpbmRvdy5WYWFkaW4gJiYgd2luZG93LlZhYWRpbi5GbG93ICYmIHdpbmRvdy5WYWFkaW4uRmxvdy5jbGllbnRzKSB7XG4gICAgICAgICAgICB2YXIgZmxvd1ZlcnNpb25zID0gT2JqZWN0LmtleXMod2luZG93LlZhYWRpbi5GbG93LmNsaWVudHMpLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgICAgICAgIHJldHVybiB3aW5kb3cuVmFhZGluLkZsb3cuY2xpZW50c1trZXldO1xuICAgICAgICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChjbGllbnQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGNsaWVudC5nZXRWZXJzaW9uSW5mbztcbiAgICAgICAgICAgIH0pLm1hcChmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiBjbGllbnQuZ2V0VmVyc2lvbkluZm8oKS5mbG93O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpZiAoZmxvd1ZlcnNpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZsb3dWZXJzaW9uc1swXTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdWYWFkaW4gRnJhbWV3b3JrJzogZnVuY3Rpb24gVmFhZGluRnJhbWV3b3JrKCkge1xuICAgICAgICAgIGlmICh3aW5kb3cudmFhZGluICYmIHdpbmRvdy52YWFkaW4uY2xpZW50cykge1xuICAgICAgICAgICAgdmFyIGZyYW1ld29ya1ZlcnNpb25zID0gT2JqZWN0LnZhbHVlcyh3aW5kb3cudmFhZGluLmNsaWVudHMpLmZpbHRlcihmdW5jdGlvbiAoY2xpZW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiBjbGllbnQuZ2V0VmVyc2lvbkluZm87XG4gICAgICAgICAgICB9KS5tYXAoZnVuY3Rpb24gKGNsaWVudCkge1xuICAgICAgICAgICAgICByZXR1cm4gY2xpZW50LmdldFZlcnNpb25JbmZvKCkudmFhZGluVmVyc2lvbjtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgaWYgKGZyYW1ld29ya1ZlcnNpb25zLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIGZyYW1ld29ya1ZlcnNpb25zWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ0FuZ3VsYXJKcyc6IGZ1bmN0aW9uIEFuZ3VsYXJKcygpIHtcbiAgICAgICAgICBpZiAod2luZG93LmFuZ3VsYXIgJiYgd2luZG93LmFuZ3VsYXIudmVyc2lvbiAmJiB3aW5kb3cuYW5ndWxhci52ZXJzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93LmFuZ3VsYXIudmVyc2lvbi5mdWxsO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ0FuZ3VsYXInOiBmdW5jdGlvbiBBbmd1bGFyKCkge1xuICAgICAgICAgIGlmICh3aW5kb3cubmcpIHtcbiAgICAgICAgICAgIHZhciB0YWdzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChcIltuZy12ZXJzaW9uXVwiKTtcbiAgICAgICAgICAgIGlmICh0YWdzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHRhZ3NbMF0uZ2V0QXR0cmlidXRlKFwibmctdmVyc2lvblwiKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBcIlVua25vd25cIjtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdCYWNrYm9uZS5qcyc6IGZ1bmN0aW9uIEJhY2tib25lSnMoKSB7XG4gICAgICAgICAgaWYgKHdpbmRvdy5CYWNrYm9uZSkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5CYWNrYm9uZS5WRVJTSU9OO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ1JlYWN0JzogZnVuY3Rpb24gUmVhY3QoKSB7XG4gICAgICAgICAgdmFyIHJlYWN0U2VsZWN0b3IgPSAnW2RhdGEtcmVhY3Ryb290XSwgW2RhdGEtcmVhY3RpZF0nO1xuICAgICAgICAgIGlmICghIWRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IocmVhY3RTZWxlY3RvcikpIHtcbiAgICAgICAgICAgIC8vIFJlYWN0IGRvZXMgbm90IHB1Ymxpc2ggdGhlIHZlcnNpb24gYnkgZGVmYXVsdFxuICAgICAgICAgICAgcmV0dXJuIFwidW5rbm93blwiO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgJ0VtYmVyJzogZnVuY3Rpb24gRW1iZXIoKSB7XG4gICAgICAgICAgaWYgKHdpbmRvdy5FbSAmJiB3aW5kb3cuRW0uVkVSU0lPTikge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5FbS5WRVJTSU9OO1xuICAgICAgICAgIH0gZWxzZSBpZiAod2luZG93LkVtYmVyICYmIHdpbmRvdy5FbWJlci5WRVJTSU9OKSB7XG4gICAgICAgICAgICByZXR1cm4gd2luZG93LkVtYmVyLlZFUlNJT047XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICAnalF1ZXJ5JzogZnVuY3Rpb24gKF9qUXVlcnkpIHtcbiAgICAgICAgICBmdW5jdGlvbiBqUXVlcnkoKSB7XG4gICAgICAgICAgICByZXR1cm4gX2pRdWVyeS5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGpRdWVyeS50b1N0cmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBfalF1ZXJ5LnRvU3RyaW5nKCk7XG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHJldHVybiBqUXVlcnk7XG4gICAgICAgIH0oZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGlmICh0eXBlb2YgalF1ZXJ5ID09PSAnZnVuY3Rpb24nICYmIGpRdWVyeS5wcm90b3R5cGUuanF1ZXJ5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJldHVybiBqUXVlcnkucHJvdG90eXBlLmpxdWVyeTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pLFxuICAgICAgICAnUG9seW1lcic6IGZ1bmN0aW9uIFBvbHltZXIoKSB7XG4gICAgICAgICAgdmFyIHZlcnNpb24gPSBnZXRQb2x5bWVyVmVyc2lvbigpO1xuICAgICAgICAgIGlmICh2ZXJzaW9uKSB7XG4gICAgICAgICAgICByZXR1cm4gdmVyc2lvbjtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgICdWdWUuanMnOiBmdW5jdGlvbiBWdWVKcygpIHtcbiAgICAgICAgICBpZiAod2luZG93LlZ1ZSkge1xuICAgICAgICAgICAgcmV0dXJuIHdpbmRvdy5WdWUudmVyc2lvbjtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnZ2V0VXNlZFZhYWRpbkVsZW1lbnRzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VXNlZFZhYWRpbkVsZW1lbnRzKGVsZW1lbnRzKSB7XG4gICAgICB2YXIgdmVyc2lvbiA9IGdldFBvbHltZXJWZXJzaW9uKCk7XG4gICAgICB2YXIgZWxlbWVudENsYXNzZXMgPSB2b2lkIDA7XG4gICAgICBpZiAodmVyc2lvbiAmJiB2ZXJzaW9uLmluZGV4T2YoJzInKSA9PT0gMCkge1xuICAgICAgICAvLyBQb2x5bWVyIDI6IGNvbXBvbmVudHMgY2xhc3NlcyBhcmUgc3RvcmVkIGluIHdpbmRvdy5WYWFkaW5cbiAgICAgICAgZWxlbWVudENsYXNzZXMgPSBPYmplY3Qua2V5cyh3aW5kb3cuVmFhZGluKS5tYXAoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICByZXR1cm4gd2luZG93LlZhYWRpbltjXTtcbiAgICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgcmV0dXJuIGMuaXM7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUG9seW1lciAzOiBjb21wb25lbnRzIGNsYXNzZXMgYXJlIHN0b3JlZCBpbiB3aW5kb3cuVmFhZGluLnJlZ2lzdHJhdGlvbnNcbiAgICAgICAgZWxlbWVudENsYXNzZXMgPSB3aW5kb3cuVmFhZGluLnJlZ2lzdHJhdGlvbnMgfHwgW107XG4gICAgICB9XG4gICAgICBlbGVtZW50Q2xhc3Nlcy5mb3JFYWNoKGZ1bmN0aW9uIChrbGFzcykge1xuICAgICAgICB2YXIgdmVyc2lvbiA9IGtsYXNzLnZlcnNpb24gPyBrbGFzcy52ZXJzaW9uIDogXCIwLjAuMFwiO1xuICAgICAgICBlbGVtZW50c1trbGFzcy5pc10gPSB7IHZlcnNpb246IHZlcnNpb24gfTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2dldFVzZWRWYWFkaW5UaGVtZXMnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRVc2VkVmFhZGluVGhlbWVzKHRoZW1lcykge1xuICAgICAgWydMdW1vJywgJ01hdGVyaWFsJ10uZm9yRWFjaChmdW5jdGlvbiAodGhlbWVOYW1lKSB7XG4gICAgICAgIHZhciB0aGVtZTtcbiAgICAgICAgdmFyIHZlcnNpb24gPSBnZXRQb2x5bWVyVmVyc2lvbigpO1xuICAgICAgICBpZiAodmVyc2lvbiAmJiB2ZXJzaW9uLmluZGV4T2YoJzInKSA9PT0gMCkge1xuICAgICAgICAgIC8vIFBvbHltZXIgMjogdGhlbWVzIGFyZSBzdG9yZWQgaW4gd2luZG93LlZhYWRpblxuICAgICAgICAgIHRoZW1lID0gd2luZG93LlZhYWRpblt0aGVtZU5hbWVdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIFBvbHltZXIgMzogdGhlbWVzIGFyZSBzdG9yZWQgaW4gY3VzdG9tIGVsZW1lbnQgcmVnaXN0cnlcbiAgICAgICAgICB0aGVtZSA9IGN1c3RvbUVsZW1lbnRzLmdldCgndmFhZGluLScgKyB0aGVtZU5hbWUudG9Mb3dlckNhc2UoKSArICctc3R5bGVzJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoZW1lICYmIHRoZW1lLnZlcnNpb24pIHtcbiAgICAgICAgICB0aGVtZXNbdGhlbWVOYW1lXSA9IHsgdmVyc2lvbjogdGhlbWUudmVyc2lvbiB9O1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnZXRGcmFtZXdvcmtzJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RnJhbWV3b3JrcyhmcmFtZXdvcmtzKSB7XG4gICAgICB2YXIgZGV0ZWN0b3JzID0gdGhpcy5mcmFtZXdvcmtWZXJzaW9uRGV0ZWN0b3JzKCk7XG4gICAgICBPYmplY3Qua2V5cyhkZXRlY3RvcnMpLmZvckVhY2goZnVuY3Rpb24gKGZyYW1ld29yaykge1xuICAgICAgICB2YXIgZGV0ZWN0b3IgPSBkZXRlY3RvcnNbZnJhbWV3b3JrXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YXIgdmVyc2lvbiA9IGRldGVjdG9yKCk7XG4gICAgICAgICAgaWYgKHZlcnNpb24pIHtcbiAgICAgICAgICAgIGZyYW1ld29ya3NbZnJhbWV3b3JrXSA9IHsgXCJ2ZXJzaW9uXCI6IHZlcnNpb24gfTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9KTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdnYXRoZXInLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBnYXRoZXIoc3RvcmFnZSkge1xuICAgICAgdmFyIHN0b3JlZFN0YXRzID0gc3RvcmFnZS5yZWFkKCk7XG4gICAgICB2YXIgZ2F0aGVyZWRTdGF0cyA9IHt9O1xuICAgICAgdmFyIHR5cGVzID0gW1wiZWxlbWVudHNcIiwgXCJmcmFtZXdvcmtzXCIsIFwidGhlbWVzXCJdO1xuXG4gICAgICB0eXBlcy5mb3JFYWNoKGZ1bmN0aW9uICh0eXBlKSB7XG4gICAgICAgIGdhdGhlcmVkU3RhdHNbdHlwZV0gPSB7fTtcbiAgICAgICAgaWYgKCFzdG9yZWRTdGF0c1t0eXBlXSkge1xuICAgICAgICAgIHN0b3JlZFN0YXRzW3R5cGVdID0ge307XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICB2YXIgcHJldmlvdXNTdGF0cyA9IEpTT04uc3RyaW5naWZ5KHN0b3JlZFN0YXRzKTtcblxuICAgICAgdGhpcy5nZXRVc2VkVmFhZGluRWxlbWVudHMoZ2F0aGVyZWRTdGF0cy5lbGVtZW50cyk7XG4gICAgICB0aGlzLmdldEZyYW1ld29ya3MoZ2F0aGVyZWRTdGF0cy5mcmFtZXdvcmtzKTtcbiAgICAgIHRoaXMuZ2V0VXNlZFZhYWRpblRoZW1lcyhnYXRoZXJlZFN0YXRzLnRoZW1lcyk7XG5cbiAgICAgIHZhciBub3cgPSB0aGlzLm5vdztcbiAgICAgIHR5cGVzLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhnYXRoZXJlZFN0YXRzW3R5cGVdKTtcbiAgICAgICAga2V5cy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgICBpZiAoIXN0b3JlZFN0YXRzW3R5cGVdW2tleV0gfHwgX3R5cGVvZihzdG9yZWRTdGF0c1t0eXBlXVtrZXldKSAhPSBfdHlwZW9mKHt9KSkge1xuICAgICAgICAgICAgc3RvcmVkU3RhdHNbdHlwZV1ba2V5XSA9IHsgXCJmaXJzdFVzZWRcIjogbm93IH07XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIERpc2NhcmRzIGFueSBwcmV2aW91c2x5IGxvZ2dlZCB2ZXJzaW9uIG51bWViclxuICAgICAgICAgIHN0b3JlZFN0YXRzW3R5cGVdW2tleV0udmVyc2lvbiA9IGdhdGhlcmVkU3RhdHNbdHlwZV1ba2V5XS52ZXJzaW9uO1xuICAgICAgICAgIHN0b3JlZFN0YXRzW3R5cGVdW2tleV0ubGFzdFVzZWQgPSBub3c7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG5cbiAgICAgIHZhciBuZXdTdGF0cyA9IEpTT04uc3RyaW5naWZ5KHN0b3JlZFN0YXRzKTtcbiAgICAgIHN0b3JhZ2Uud3JpdGUobmV3U3RhdHMpO1xuICAgICAgaWYgKG5ld1N0YXRzICE9IHByZXZpb3VzU3RhdHMgJiYgT2JqZWN0LmtleXMoc3RvcmVkU3RhdHMpLmxlbmd0aCA+IDApIHtcbiAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXCJOZXcgc3RhdHM6IFwiICsgbmV3U3RhdHMpO1xuICAgICAgfVxuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gU3RhdGlzdGljc0dhdGhlcmVyO1xufSgpO1xuXG52YXIgU3RhdGlzdGljc1N0b3JhZ2UgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0YXRpc3RpY3NTdG9yYWdlKGtleSkge1xuICAgIGNsYXNzQ2FsbENoZWNrKHRoaXMsIFN0YXRpc3RpY3NTdG9yYWdlKTtcblxuICAgIHRoaXMua2V5ID0ga2V5O1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoU3RhdGlzdGljc1N0b3JhZ2UsIFt7XG4gICAga2V5OiAncmVhZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHJlYWQoKSB7XG4gICAgICB2YXIgbG9jYWxTdG9yYWdlU3RhdHNTdHJpbmcgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbSh0aGlzLmtleSk7XG4gICAgICB0cnkge1xuICAgICAgICByZXR1cm4gSlNPTi5wYXJzZShsb2NhbFN0b3JhZ2VTdGF0c1N0cmluZyA/IGxvY2FsU3RvcmFnZVN0YXRzU3RyaW5nIDogJ3t9Jyk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIHJldHVybiB7fTtcbiAgICAgIH1cbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICd3cml0ZScsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIHdyaXRlKGRhdGEpIHtcbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKHRoaXMua2V5LCBkYXRhKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjbGVhcicsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGNsZWFyKCkge1xuICAgICAgbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0odGhpcy5rZXkpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2lzRW1wdHknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBpc0VtcHR5KCkge1xuICAgICAgdmFyIHN0b3JlZFN0YXRzID0gdGhpcy5yZWFkKCk7XG4gICAgICB2YXIgZW1wdHkgPSB0cnVlO1xuICAgICAgT2JqZWN0LmtleXMoc3RvcmVkU3RhdHMpLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBpZiAoT2JqZWN0LmtleXMoc3RvcmVkU3RhdHNba2V5XSkubGVuZ3RoID4gMCkge1xuICAgICAgICAgIGVtcHR5ID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gZW1wdHk7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTdGF0aXN0aWNzU3RvcmFnZTtcbn0oKTtcblxudmFyIFN0YXRpc3RpY3NTZW5kZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0YXRpc3RpY3NTZW5kZXIodXJsLCBsb2dnZXIpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTdGF0aXN0aWNzU2VuZGVyKTtcblxuICAgIHRoaXMudXJsID0gdXJsO1xuICAgIHRoaXMubG9nZ2VyID0gbG9nZ2VyO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoU3RhdGlzdGljc1NlbmRlciwgW3tcbiAgICBrZXk6ICdzZW5kJyxcbiAgICB2YWx1ZTogZnVuY3Rpb24gc2VuZChkYXRhLCBlcnJvckhhbmRsZXIpIHtcbiAgICAgIHZhciBsb2dnZXIgPSB0aGlzLmxvZ2dlcjtcblxuICAgICAgaWYgKG5hdmlnYXRvci5vbkxpbmUgPT09IGZhbHNlKSB7XG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhcIk9mZmxpbmUsIGNhbid0IHNlbmRcIik7XG4gICAgICAgIGVycm9ySGFuZGxlcigpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBsb2dnZXIuZGVidWcoXCJTZW5kaW5nIGRhdGEgdG8gXCIgKyB0aGlzLnVybCk7XG5cbiAgICAgIHZhciByZXEgPSBuZXcgWE1MSHR0cFJlcXVlc3QoKTtcbiAgICAgIHJlcS53aXRoQ3JlZGVudGlhbHMgPSB0cnVlO1xuICAgICAgcmVxLmFkZEV2ZW50TGlzdGVuZXIoXCJsb2FkXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gU3RhdHMgc2VudCwgbm90aGluZyBtb3JlIHRvIGRvXG4gICAgICAgIGxvZ2dlci5kZWJ1ZyhcIlJlc3BvbnNlOiBcIiArIHJlcS5yZXNwb25zZVRleHQpO1xuICAgICAgfSk7XG4gICAgICByZXEuYWRkRXZlbnRMaXN0ZW5lcihcImVycm9yXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKFwiU2VuZCBmYWlsZWRcIik7XG4gICAgICAgIGVycm9ySGFuZGxlcigpO1xuICAgICAgfSk7XG4gICAgICByZXEuYWRkRXZlbnRMaXN0ZW5lcihcImFib3J0XCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgbG9nZ2VyLmRlYnVnKFwiU2VuZCBhYm9ydGVkXCIpO1xuICAgICAgICBlcnJvckhhbmRsZXIoKTtcbiAgICAgIH0pO1xuICAgICAgcmVxLm9wZW4oXCJQT1NUXCIsIHRoaXMudXJsKTtcbiAgICAgIHJlcS5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC1UeXBlXCIsIFwiYXBwbGljYXRpb24vanNvblwiKTtcbiAgICAgIHJlcS5zZW5kKGRhdGEpO1xuICAgIH1cbiAgfV0pO1xuICByZXR1cm4gU3RhdGlzdGljc1NlbmRlcjtcbn0oKTtcblxudmFyIFN0YXRpc3RpY3NMb2dnZXIgPSBmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN0YXRpc3RpY3NMb2dnZXIoaWQpIHtcbiAgICBjbGFzc0NhbGxDaGVjayh0aGlzLCBTdGF0aXN0aWNzTG9nZ2VyKTtcblxuICAgIHRoaXMuaWQgPSBpZDtcbiAgfVxuXG4gIGNyZWF0ZUNsYXNzKFN0YXRpc3RpY3NMb2dnZXIsIFt7XG4gICAga2V5OiAnX2lzRGVidWcnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBfaXNEZWJ1ZygpIHtcbiAgICAgIHJldHVybiBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShcInZhYWRpbi5cIiArIHRoaXMuaWQgKyBcIi5kZWJ1Z1wiKTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdkZWJ1ZycsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIGRlYnVnKG1zZykge1xuICAgICAgaWYgKHRoaXMuX2lzRGVidWcoKSkge1xuICAgICAgICBjb25zb2xlLmluZm8odGhpcy5pZCArIFwiOiBcIiArIG1zZyk7XG4gICAgICB9XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBTdGF0aXN0aWNzTG9nZ2VyO1xufSgpO1xuXG52YXIgVXNhZ2VTdGF0aXN0aWNzID0gZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBVc2FnZVN0YXRpc3RpY3MoKSB7XG4gICAgY2xhc3NDYWxsQ2hlY2sodGhpcywgVXNhZ2VTdGF0aXN0aWNzKTtcblxuICAgIHRoaXMubm93ID0gbmV3IERhdGUoKTtcbiAgICB0aGlzLnRpbWVOb3cgPSB0aGlzLm5vdy5nZXRUaW1lKCk7XG4gICAgdGhpcy5nYXRoZXJEZWxheSA9IDEwOyAvLyBEZWxheSBiZXR3ZWVuIGxvYWRpbmcgdGhpcyBmaWxlIGFuZCBnYXRoZXJpbmcgc3RhdHNcbiAgICB0aGlzLmluaXRpYWxEZWxheSA9IDI0ICogNjAgKiA2MDtcblxuICAgIHRoaXMubG9nZ2VyID0gbmV3IFN0YXRpc3RpY3NMb2dnZXIoXCJzdGF0aXN0aWNzXCIpO1xuICAgIHRoaXMuc3RvcmFnZSA9IG5ldyBTdGF0aXN0aWNzU3RvcmFnZShcInZhYWRpbi5zdGF0aXN0aWNzLmJhc2tldFwiKTtcbiAgICB0aGlzLmdhdGhlcmVyID0gbmV3IFN0YXRpc3RpY3NHYXRoZXJlcih0aGlzLmxvZ2dlcik7XG4gICAgdGhpcy5zZW5kZXIgPSBuZXcgU3RhdGlzdGljc1NlbmRlcihcImh0dHBzOi8vdG9vbHMudmFhZGluLmNvbS91c2FnZS1zdGF0cy9zdWJtaXRcIiwgdGhpcy5sb2dnZXIpO1xuICB9XG5cbiAgY3JlYXRlQ2xhc3MoVXNhZ2VTdGF0aXN0aWNzLCBbe1xuICAgIGtleTogJ21heWJlR2F0aGVyQW5kU2VuZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1heWJlR2F0aGVyQW5kU2VuZCgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmIChsb2NhbFN0b3JhZ2UuZ2V0SXRlbShVc2FnZVN0YXRpc3RpY3Mub3B0T3V0S2V5KSkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICB0aGlzLmdhdGhlcmVyLmdhdGhlcih0aGlzLnN0b3JhZ2UpO1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIF90aGlzLm1heWJlU2VuZCgpO1xuICAgICAgfSwgdGhpcy5nYXRoZXJEZWxheSAqIDEwMDApO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2xvdHRlcnknLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBsb3R0ZXJ5KCkge1xuICAgICAgcmV0dXJuIE1hdGgucmFuZG9tKCkgPD0gMC4wNTtcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdjdXJyZW50TW9udGgnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBjdXJyZW50TW9udGgoKSB7XG4gICAgICByZXR1cm4gdGhpcy5ub3cuZ2V0WWVhcigpICogMTIgKyB0aGlzLm5vdy5nZXRNb250aCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ21heWJlU2VuZCcsXG4gICAgdmFsdWU6IGZ1bmN0aW9uIG1heWJlU2VuZCgpIHtcbiAgICAgIHZhciBmaXJzdFVzZSA9IE51bWJlcihsb2NhbFN0b3JhZ2UuZ2V0SXRlbShVc2FnZVN0YXRpc3RpY3MuZmlyc3RVc2VLZXkpKTtcbiAgICAgIHZhciBtb250aFByb2Nlc3NlZCA9IE51bWJlcihsb2NhbFN0b3JhZ2UuZ2V0SXRlbShVc2FnZVN0YXRpc3RpY3MubW9udGhQcm9jZXNzZWRLZXkpKTtcblxuICAgICAgaWYgKCFmaXJzdFVzZSkge1xuICAgICAgICAvLyBVc2UgYSBncmFjZSBwZXJpb2QgdG8gYXZvaWQgaW50ZXJmZXJpbmcgd2l0aCB0ZXN0cywgaW5jb2duaXRvIG1vZGUgZXRjXG4gICAgICAgIGZpcnN0VXNlID0gdGhpcy50aW1lTm93O1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShVc2FnZVN0YXRpc3RpY3MuZmlyc3RVc2VLZXksIGZpcnN0VXNlKTtcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMudGltZU5vdyA8IGZpcnN0VXNlICsgdGhpcy5pbml0aWFsRGVsYXkgKiAxMDAwKSB7XG4gICAgICAgIHRoaXMubG9nZ2VyLmRlYnVnKFwiTm8gc3RhdGlzdGljcyB3aWxsIGJlIHNlbnQgdW50aWwgdGhlIGluaXRpYWwgZGVsYXkgb2YgXCIgKyB0aGlzLmluaXRpYWxEZWxheSArIFwicyBoYXMgcGFzc2VkXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBpZiAodGhpcy5jdXJyZW50TW9udGgoKSA8PSBtb250aFByb2Nlc3NlZCkge1xuICAgICAgICB0aGlzLmxvZ2dlci5kZWJ1ZyhcIlRoaXMgbW9udGggaGFzIGFscmVhZHkgYmVlbiBwcm9jZXNzZWRcIik7XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKFVzYWdlU3RhdGlzdGljcy5tb250aFByb2Nlc3NlZEtleSwgdGhpcy5jdXJyZW50TW9udGgoKSk7XG4gICAgICAvLyBVc2UgcmFuZG9tIHNhbXBsaW5nXG4gICAgICBpZiAodGhpcy5sb3R0ZXJ5KCkpIHtcbiAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXCJDb25ncmF0dWxhdGlvbnMsIHdlIGhhdmUgYSB3aW5uZXIhXCIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5sb2dnZXIuZGVidWcoXCJTb3JyeSwgbm8gc3RhdHMgZnJvbSB5b3UgdGhpcyB0aW1lXCIpO1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIHRoaXMuc2VuZCgpO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ3NlbmQnLFxuICAgIHZhbHVlOiBmdW5jdGlvbiBzZW5kKCkge1xuICAgICAgLy8gRW5zdXJlIHdlIGhhdmUgdGhlIGxhdGVzdCBkYXRhXG4gICAgICB0aGlzLmdhdGhlcmVyLmdhdGhlcih0aGlzLnN0b3JhZ2UpO1xuXG4gICAgICAvLyBSZWFkLCBzZW5kIGFuZCBjbGVhbiB1cFxuICAgICAgdmFyIGRhdGEgPSB0aGlzLnN0b3JhZ2UucmVhZCgpO1xuICAgICAgZGF0YVtcImZpcnN0VXNlXCJdID0gTnVtYmVyKGxvY2FsU3RvcmFnZS5nZXRJdGVtKFVzYWdlU3RhdGlzdGljcy5maXJzdFVzZUtleSkpO1xuICAgICAgZGF0YVtcInVzYWdlU3RhdGlzdGljc1ZlcnNpb25cIl0gPSBVc2FnZVN0YXRpc3RpY3MudmVyc2lvbjtcbiAgICAgIHZhciBpbmZvID0gJ1RoaXMgcmVxdWVzdCBjb250YWlucyB1c2FnZSBzdGF0aXN0aWNzIGdhdGhlcmVkIGZyb20gdGhlIGFwcGxpY2F0aW9uIHJ1bm5pbmcgaW4gZGV2ZWxvcG1lbnQgbW9kZS4gXFxuXFxuU3RhdGlzdGljcyBnYXRoZXJpbmcgaXMgYXV0b21hdGljYWxseSBkaXNhYmxlZCBhbmQgZXhjbHVkZWQgZnJvbSBwcm9kdWN0aW9uIGJ1aWxkcy5cXG5cXG5Gb3IgZGV0YWlscyBhbmQgdG8gb3B0LW91dCwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS92YWFkaW4vdmFhZGluLXVzYWdlLXN0YXRpc3RpY3MuXFxuXFxuXFxuXFxuJztcbiAgICAgIHZhciBzZWxmID0gdGhpcztcbiAgICAgIHRoaXMuc2VuZGVyLnNlbmQoaW5mbyArIEpTT04uc3RyaW5naWZ5KGRhdGEpLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFJldmVydCB0aGUgJ21vbnRoIHByb2Nlc3NlZCcgZmxhZ1xuICAgICAgICBsb2NhbFN0b3JhZ2Uuc2V0SXRlbShVc2FnZVN0YXRpc3RpY3MubW9udGhQcm9jZXNzZWRLZXksIHNlbGYuY3VycmVudE1vbnRoKCkgLSAxKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfV0sIFt7XG4gICAga2V5OiAndmVyc2lvbicsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQkMSgpIHtcbiAgICAgIHJldHVybiAnMi4wLjEnO1xuICAgIH1cbiAgfSwge1xuICAgIGtleTogJ2ZpcnN0VXNlS2V5JyxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCQxKCkge1xuICAgICAgcmV0dXJuICd2YWFkaW4uc3RhdGlzdGljcy5maXJzdHVzZSc7XG4gICAgfVxuICB9LCB7XG4gICAga2V5OiAnbW9udGhQcm9jZXNzZWRLZXknLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0JDEoKSB7XG4gICAgICByZXR1cm4gJ3ZhYWRpbi5zdGF0aXN0aWNzLm1vbnRoUHJvY2Vzc2VkJztcbiAgICB9XG4gIH0sIHtcbiAgICBrZXk6ICdvcHRPdXRLZXknLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0JDEoKSB7XG4gICAgICByZXR1cm4gJ3ZhYWRpbi5zdGF0aXN0aWNzLm9wdG91dCc7XG4gICAgfVxuICB9XSk7XG4gIHJldHVybiBVc2FnZVN0YXRpc3RpY3M7XG59KCk7XG5cbnRyeSB7XG4gIHdpbmRvdy5WYWFkaW4gPSB3aW5kb3cuVmFhZGluIHx8IHt9O1xuICB3aW5kb3cuVmFhZGluLnVzYWdlU3RhdGlzdGljcyA9IHdpbmRvdy5WYWFkaW4udXNhZ2VTdGF0aXN0aWNzIHx8IG5ldyBVc2FnZVN0YXRpc3RpY3MoKTtcbiAgd2luZG93LlZhYWRpbi51c2FnZVN0YXRpc3RpY3MubWF5YmVHYXRoZXJBbmRTZW5kKCk7XG59IGNhdGNoIChlKSB7XG4gIC8vIEludGVudGlvbmFsbHkgaWdub3JlZCBhcyB0aGlzIGlzIG5vdCBhIHByb2JsZW0gaW4gdGhlIGFwcCBiZWluZyBkZXZlbG9wZWRcbn1cblxufSgpKTtcblxuICB2YWFkaW4tZGV2LW1vZGU6ZW5kICoqL1xufVxuXG5leHBvcnQgY29uc3QgdXNhZ2VTdGF0aXN0aWNzID0gZnVuY3Rpb24oKSB7XG4gIGlmICh0eXBlb2YgcnVuSWZEZXZlbG9wbWVudE1vZGUgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gcnVuSWZEZXZlbG9wbWVudE1vZGUobWF5YmVHYXRoZXJBbmRTZW5kU3RhdHMpO1xuICB9XG59O1xuIiwiaW1wb3J0IHt1c2FnZVN0YXRpc3RpY3N9IGZyb20gJ0B2YWFkaW4vdmFhZGluLXVzYWdlLXN0YXRpc3RpY3MvdmFhZGluLXVzYWdlLXN0YXRpc3RpY3MuanMnO1xuXG53aW5kb3cuVmFhZGluID0gd2luZG93LlZhYWRpbiB8fCB7fTtcbndpbmRvdy5WYWFkaW4ucmVnaXN0cmF0aW9ucyA9IHdpbmRvdy5WYWFkaW4ucmVnaXN0cmF0aW9ucyB8fCBbXTtcblxud2luZG93LlZhYWRpbi5yZWdpc3RyYXRpb25zLnB1c2goe1xuICBpczogJ0B2YWFkaW4vcm91dGVyJyxcbiAgdmVyc2lvbjogJzEuMi4wJyxcbn0pO1xuXG51c2FnZVN0YXRpc3RpY3MoKTtcbiIsImltcG9ydCBDTElDSyBmcm9tICcuL3RyaWdnZXJzL2NsaWNrLmpzJztcbmltcG9ydCBQT1BTVEFURSBmcm9tICcuL3RyaWdnZXJzL3BvcHN0YXRlLmpzJztcbmltcG9ydCB7Um91dGVyfSBmcm9tICcuL3JvdXRlci5qcyc7XG5pbXBvcnQgJy4vcm91dGVyLW1ldGEuanMnO1xuUm91dGVyLk5hdmlnYXRpb25UcmlnZ2VyID0ge1BPUFNUQVRFLCBDTElDS307XG5leHBvcnQge1JvdXRlcn07XG4iLCIvKlxuQ29weXJpZ2h0IDIwMTggQWRvYmUuIEFsbCByaWdodHMgcmVzZXJ2ZWQuXG5UaGlzIGZpbGUgaXMgbGljZW5zZWQgdG8geW91IHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XG55b3UgbWF5IG5vdCB1c2UgdGhpcyBmaWxlIGV4Y2VwdCBpbiBjb21wbGlhbmNlIHdpdGggdGhlIExpY2Vuc2UuIFlvdSBtYXkgb2J0YWluIGEgY29weVxub2YgdGhlIExpY2Vuc2UgYXQgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXG5cblVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmUgZGlzdHJpYnV0ZWQgdW5kZXJcbnRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuIFwiQVMgSVNcIiBCQVNJUywgV0lUSE9VVCBXQVJSQU5USUVTIE9SIFJFUFJFU0VOVEFUSU9OU1xuT0YgQU5ZIEtJTkQsIGVpdGhlciBleHByZXNzIG9yIGltcGxpZWQuIFNlZSB0aGUgTGljZW5zZSBmb3IgdGhlIHNwZWNpZmljIGxhbmd1YWdlXG5nb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLlxuKi9cblxuaW1wb3J0IHsgUm91dGVyLCBSb3V0ZSwgUm91dGVyT3B0aW9ucyB9IGZyb20gJ0B2YWFkaW4vcm91dGVyJztcblxuY29uc3QgZ2l0aHViVXJsID1cbiAgICAnaHR0cDovL29wZW5zb3VyY2UuYWRvYmUuY29tL3NwZWN0cnVtLXdlYi1jb21wb25lbnRzLyc7XG5jb25zdCBiYXNlVXJsID1cbiAgICBkb2N1bWVudC5sb2NhdGlvbi5ob3N0bmFtZSA9PT0gJ29wZW5zb3VyY2UuYWRvYmUuY29tJyA/IGdpdGh1YlVybCA6IHVuZGVmaW5lZDtcblxuY2xhc3MgRG9jdW1lbnRhdGlvblJvdXRlciBleHRlbmRzIFJvdXRlciB7XG4gICAgcHVibGljIGxvY2F0aW9uOlxuICAgICAgICB8IHVuZGVmaW5lZFxuICAgICAgICB8IHtcbiAgICAgICAgICAgICAgYmFzZVVybDogc3RyaW5nO1xuICAgICAgICAgICAgICBwYXJhbXM6IG9iamVjdDtcbiAgICAgICAgICAgICAgcGF0aG5hbWU6IHN0cmluZztcbiAgICAgICAgICAgICAgcmVkaXJlY3RGcm9tOiBzdHJpbmcgfCB1bmRlZmluZWQ7XG4gICAgICAgICAgICAgIHJvdXRlOiBSb3V0ZSB8IHVuZGVmaW5lZDtcbiAgICAgICAgICAgICAgcm91dGVzOiBSb3V0ZVtdO1xuICAgICAgICAgIH07XG5cbiAgICBwdWJsaWMgY29uc3RydWN0b3Iob3V0bGV0OiBOb2RlLCBvcHRpb25zOiBSb3V0ZXJPcHRpb25zKSB7XG4gICAgICAgIHN1cGVyKG91dGxldCwgb3B0aW9ucyk7XG4gICAgfVxuXG4gICAgcHVibGljIGdvKHBhdGhuYW1lOiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICAgICAgcmV0dXJuIFJvdXRlci5nbyhwYXRobmFtZSk7XG4gICAgfVxuXG4gICAgcHVibGljIGNoYW5nZVBhcmFtcyhwYXJhbXM6IG9iamVjdCk6IGJvb2xlYW4ge1xuICAgICAgICBpZiAoIXRoaXMubG9jYXRpb24gfHwgIXRoaXMubG9jYXRpb24ucm91dGUpIHJldHVybiBmYWxzZTtcbiAgICAgICAgY29uc3QgbmV3VXJsID0gdGhpcy51cmxGb3JQYXRoKHRoaXMubG9jYXRpb24ucm91dGUucGF0aCwgcGFyYW1zKTtcbiAgICAgICAgcmV0dXJuIHRoaXMuZ28obmV3VXJsKTtcbiAgICB9XG59XG5cbmV4cG9ydCBjb25zdCBBcHBSb3V0ZXIgPSBuZXcgRG9jdW1lbnRhdGlvblJvdXRlcihkb2N1bWVudC5ib2R5LCB7XG4gICAgYmFzZVVybDogYmFzZVVybCxcbn0pO1xuQXBwUm91dGVyLnNldFJvdXRlcyhbXG4gICAgeyBwYXRoOiAnLycsIGNvbXBvbmVudDogJ2RvY3MtaG9tZScgfSxcbiAgICB7IHBhdGg6ICcvY29tcG9uZW50cy86Y29tcG9uZW50Lzp0YWI/JywgY29tcG9uZW50OiAnZG9jcy1jb21wb25lbnQnIH0sXG4gICAgeyBwYXRoOiAnL2d1aWRlcy86Z3VpZGUnLCBjb21wb25lbnQ6ICdkb2NzLWd1aWRlJyB9LFxuXSk7XG4iXSwic291cmNlUm9vdCI6IiJ9